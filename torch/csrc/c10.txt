Generator.cpp:63:    AT_ERROR("Device type ", c10::DeviceTypeName(device.type()),
Generator.cpp:68:              "Device type ", c10::DeviceTypeName(device.type()),
Module.cpp:12:#include <c10/util/Logging.h>
Module.cpp:58:#ifdef USE_C10D
Module.cpp:60:#include <torch/csrc/distributed/c10d/c10d.h>
Module.cpp:531:          c10::DeviceTypeName(computeDeviceType(torch::tensors::get_default_dispatch_key()),
Module.cpp:702:// In Python we can't use the trick of C10_LOG_API_USAGE_ONCE
Module.cpp:708:    c10::LogAPIUsage(event);
Module.cpp:722:  C10_LOG_API_USAGE_ONCE("torch.python.import");
Module.cpp:734:#if defined(USE_DISTRIBUTED) && defined(USE_C10D)
Module.cpp:735:  THPUtils_addPyMethodDefs(methods, torch::distributed::c10d::python_functions());
Module.cpp:850:  py_module.def("_demangle", &c10::demangle);
Module.cpp:911:  ASSERT_TRUE(set_module_attr("_" C10_STRINGIZE(PYBIND11_COMPILER_TYPE), Py_None));
Module.cpp:917:  ASSERT_TRUE(set_module_attr("_" C10_STRINGIZE(PYBIND11_STDLIB), Py_None));
Module.cpp:923:  ASSERT_TRUE(set_module_attr("_" C10_STRINGIZE(PYBIND11_BUILD_ABI), Py_None));
README.md:64:  // From c10/Exception.h
README.md:90:  // From c10/Exception.h
utils/python_arg_parser.cpp:27:  {"c10::List<c10::optional<Tensor>>", ParameterType::TENSOR_LIST},
utils/python_arg_parser.cpp:528:static inline c10::optional<int64_t> parse_as_integer(const std::string& s) {
utils/python_arg_parser.cpp:530:    return c10::nullopt;
utils/python_arg_parser.cpp:534:  return (*str_end == 0) ? c10::optional<int64_t>(ans) : c10::nullopt;
utils/python_arg_parser.cpp:570:static std::string parse_string_literal(c10::string_view str) {
utils/python_arg_parser.cpp:993:    auto msg = c10::str(
utils/python_dispatch.cpp:29:c10::optional<c10::DispatchKey> parseDispatchKey(const std::string& k) {
utils/python_dispatch.cpp:30:  static std::unordered_map<std::string, c10::DispatchKey> key_map = {
utils/python_dispatch.cpp:31:    {"CPU", c10::DispatchKey::CPU},
utils/python_dispatch.cpp:32:    {"CUDA", c10::DispatchKey::CUDA},
utils/python_dispatch.cpp:33:    {"XLA", c10::DispatchKey::XLA},
utils/python_dispatch.cpp:34:    {"QuantizedCPU", c10::DispatchKey::QuantizedCPU},
utils/python_dispatch.cpp:35:    {"Math", c10::DispatchKey::Math},
utils/python_dispatch.cpp:36:    {"Autograd", c10::DispatchKey::Autograd},
utils/python_dispatch.cpp:37:    {"DefaultBackend", c10::DispatchKey::DefaultBackend},
utils/python_dispatch.cpp:38:    {"AutogradCPU", c10::DispatchKey::AutogradCPU},
utils/python_dispatch.cpp:39:    {"", c10::DispatchKey::Undefined},
utils/python_dispatch.cpp:43:  if (it->second == c10::DispatchKey::Undefined) {
utils/python_dispatch.cpp:44:    return c10::nullopt;
utils/python_dispatch.cpp:46:    return c10::make_optional(it->second);
utils/python_dispatch.cpp:50:c10::AliasAnalysisKind parseAliasAnalysisKind(const std::string& k) {
utils/python_dispatch.cpp:51:  static std::unordered_map<std::string, c10::AliasAnalysisKind> key_map = {
utils/python_dispatch.cpp:52:    {"CONSERVATIVE", c10::AliasAnalysisKind::CONSERVATIVE},
utils/python_dispatch.cpp:53:    {"FROM_SCHEMA", c10::AliasAnalysisKind::FROM_SCHEMA},
utils/python_dispatch.cpp:54:    {"PURE_FUNCTION", c10::AliasAnalysisKind::PURE_FUNCTION},
utils/python_dispatch.cpp:55:    {"", c10::AliasAnalysisKind::FROM_SCHEMA},  // default
utils/python_dispatch.cpp:77:  py::class_<c10::OperatorHandle>(m, "_DispatchOperatorHandle")
utils/python_dispatch.cpp:78:    .def("schema", &c10::OperatorHandle::schema);
utils/python_dispatch.cpp:159:    auto op = c10::Dispatcher::singleton().findOp(torch::jit::parseName(name));
utils/python_dispatch.cpp:168:    auto op = c10::Dispatcher::singleton().findOp(torch::jit::parseName(name));
utils/python_dispatch.cpp:177:    auto op = c10::Dispatcher::singleton().findOp(torch::jit::parseName(name));
utils/python_dispatch.cpp:185:    c10::Dispatcher::singleton().checkInvariants();
utils/tensor_new.h:9:at::Tensor legacy_tensor_ctor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs);
utils/tensor_new.h:10:at::Tensor legacy_tensor_new(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs);
utils/tensor_new.h:12:    c10::DispatchKey dispatch_key,
utils/tensor_new.h:14:    c10::optional<at::Device> device,
utils/tensor_new.h:16:at::Tensor sparse_coo_tensor_ctor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs);
utils/tensor_new.h:17:at::Tensor _sparse_coo_tensor_unsafe_ctor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs);
utils/tensor_new.h:18:void _validate_sparse_coo_tensor_args(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs);
utils/tensor_new.h:19:at::Tensor tensor_ctor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs);
utils/tensor_new.h:20:at::Tensor as_tensor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs);
utils/tensor_new.h:21:at::Tensor new_tensor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs);
utils/tensor_new.h:22:at::Tensor new_ones(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs);
utils/pybind.h:23:PYBIND11_DECLARE_HOLDER_TYPE(T, c10::intrusive_ptr<T>, true);
utils/pybind.h:104:struct type_caster<c10::optional<T>> : optional_caster<c10::optional<T>> {};
utils/throughput_benchmark.cpp:27:    c10::IValue result;
utils/python_numbers.h:160:inline c10::complex<double> THPUtils_unpackComplexDouble(PyObject *obj) {
utils/python_numbers.h:166:  return c10::complex<double>(value.real, value.imag);
utils/tensor_memoryformats.cpp:6:#include <c10/core/MemoryFormat.h>
utils/tensor_numpy.cpp:85:        "convert the tensor to a strided layout first.", c10::str(tensor.layout()).c_str());
utils/cuda_lazy_init.h:3:#include <c10/core/TensorOptions.h>
utils/byte_order.h:4:#include <c10/util/BFloat16.h>
utils/byte_order.h:60:    c10::complex<float>* dst,
utils/byte_order.h:65:    c10::complex<double>* dst,
utils/byte_order.h:97:    const c10::complex<float>* src,
utils/byte_order.h:102:    const c10::complex<double>* src,
utils/auto_gil.h:5:#include <c10/util/Deprecated.h>
utils/auto_gil.h:12:struct /* C10_DEPRECATED_MESSAGE(
utils/auto_gil.h:23:struct /* C10_DEPRECATED_MESSAGE(
utils/auto_gil.h:35:/* C10_DEPRECATED */ inline void with_no_gil(F f) {
utils/out_types.h:11:    c10::optional<at::Layout> layout,
utils/byte_order.cpp:2:#include <c10/util/BFloat16.h>
utils/byte_order.cpp:193:void THP_decodeComplexFloatBuffer(c10::complex<float>* dst, const uint8_t* src, THPByteOrder order, size_t len)
utils/byte_order.cpp:206:    dst[i] = c10::complex<float>(re, im);
utils/byte_order.cpp:210:void THP_decodeComplexDoubleBuffer(c10::complex<double>* dst, const uint8_t* src, THPByteOrder order, size_t len)
utils/byte_order.cpp:223:    dst[i] = c10::complex<double>(re, im);
utils/byte_order.cpp:283:std::vector<T> complex_to_float(const c10::complex<T>* src, size_t len) {
utils/byte_order.cpp:294:void THP_encodeComplexFloatBuffer(uint8_t* dst, const c10::complex<float>* src, THPByteOrder order, size_t len)
utils/byte_order.cpp:306:void THP_encodeCompelxDoubleBuffer(uint8_t* dst, const c10::complex<double>* src, THPByteOrder order, size_t len)
utils/out_types.cpp:10:                            c10::optional<at::Layout> layout,
utils/tensor_new.cpp:22:#include <c10/core/Backend.h>
utils/tensor_new.cpp:23:#include <c10/core/Layout.h>
utils/tensor_new.cpp:24:#include <c10/util/Exception.h>
utils/tensor_new.cpp:25:#include <c10/util/Optional.h>
utils/tensor_new.cpp:42:using c10::optional;
utils/tensor_new.cpp:69:TensorOptions options(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, const c10::optional<Device>& device=c10::nullopt) {
utils/tensor_new.cpp:79:void maybe_initialize_cuda(c10::DispatchKey dispatch_key) {
utils/tensor_new.cpp:91:Tensor dispatch_zeros(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, const optional<Device>& device, IntArrayRef sizes) {
utils/tensor_new.cpp:97:Tensor dispatch_ones(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, const optional<Device>& device, IntArrayRef sizes) {
utils/tensor_new.cpp:103:Tensor dispatch_full(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, Scalar fill_value, const optional<Device>& device, IntArrayRef sizes) {
utils/tensor_new.cpp:109:Tensor new_with_sizes(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, const optional<Device>& device, IntArrayRef sizes) {
utils/tensor_new.cpp:115:Tensor new_with_storage(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, Storage storage) {
utils/tensor_new.cpp:121:Tensor new_with_tensor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, const Tensor& other) {
utils/tensor_new.cpp:186:    c10::optional<ScalarType> scalarType;
utils/tensor_new.cpp:234:    c10::DispatchKey dispatch_key,
utils/tensor_new.cpp:236:    c10::optional<Device> device_opt,
utils/tensor_new.cpp:313:    c10::DispatchKey dispatch_key,
utils/tensor_new.cpp:315:    c10::optional<Device> device,
utils/tensor_new.cpp:323:    c10::DispatchKey dispatch_key,
utils/tensor_new.cpp:325:    c10::optional<Device> device,
utils/tensor_new.cpp:337:void check_base_legacy_new(c10::DispatchKey dispatch_key, at::Layout expected_layout) {
utils/tensor_new.cpp:338:  if (expected_layout == c10::kStrided) {
utils/tensor_new.cpp:340:        dispatch_key == c10::DispatchKey::CPU ||
utils/tensor_new.cpp:341:            dispatch_key == c10::DispatchKey::CUDA ||
utils/tensor_new.cpp:342:            dispatch_key == c10::DispatchKey::HIP ||
utils/tensor_new.cpp:343:            dispatch_key == c10::DispatchKey::XLA ||
utils/tensor_new.cpp:344:            dispatch_key == c10::DispatchKey::XPU,
utils/tensor_new.cpp:346:        c10::DispatchKey::CPU,
utils/tensor_new.cpp:348:        c10::DispatchKey::CUDA,
utils/tensor_new.cpp:350:        c10::DispatchKey::HIP,
utils/tensor_new.cpp:352:        c10::DispatchKey::XLA,
utils/tensor_new.cpp:354:        c10::DispatchKey::XPU,
utils/tensor_new.cpp:357:  } else if(expected_layout == c10::kSparse) {
utils/tensor_new.cpp:360:        dispatch_key == c10::DispatchKey::SparseCPU ||
utils/tensor_new.cpp:361:            dispatch_key == c10::DispatchKey::SparseCUDA ||
utils/tensor_new.cpp:362:            dispatch_key == c10::DispatchKey::SparseHIP ||
utils/tensor_new.cpp:363:            dispatch_key == c10::DispatchKey::SparseXPU,
utils/tensor_new.cpp:365:        c10::DispatchKey::SparseCPU,
utils/tensor_new.cpp:367:        c10::DispatchKey::SparseCUDA,
utils/tensor_new.cpp:369:        c10::DispatchKey::SparseHIP,
utils/tensor_new.cpp:371:        c10::DispatchKey::SparseXPU,
utils/tensor_new.cpp:379:void check_legacy_ctor_device(c10::DispatchKey dispatch_key, c10::optional<Device> device) {
utils/tensor_new.cpp:387:Tensor legacy_sparse_tensor_ctor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:429:Tensor legacy_sparse_tensor_new(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:437:  check_base_legacy_new(dispatch_key, c10::kSparse);
utils/tensor_new.cpp:478:c10::DispatchKey typeIdWithDefault(PythonArgs& r, int64_t device_idx, c10::DispatchKey dispatch_key) {
utils/tensor_new.cpp:484:c10::DispatchKey denseTypeIdWithDefault(PythonArgs& r, int64_t device_idx, c10::DispatchKey dispatch_key) {
utils/tensor_new.cpp:490:Tensor legacy_tensor_ctor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:547:Tensor legacy_tensor_new(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:561:  check_base_legacy_new(dispatch_key, c10::kStrided);
utils/tensor_new.cpp:606:    c10::DispatchKey dispatch_key,
utils/tensor_new.cpp:608:    c10::optional<Device> device,
utils/tensor_new.cpp:624:Tensor sparse_coo_tensor_ctor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:667:Tensor _sparse_coo_tensor_unsafe_ctor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:696:void _validate_sparse_coo_tensor_args(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:704:      dispatch_key, scalar_type, c10::nullopt, r.pyobject(1),
utils/tensor_new.cpp:707:      legacyExtractDispatchKey(values.key_set()), kLong, c10::nullopt, r.pyobject(0),
utils/tensor_new.cpp:712:Tensor tensor_ctor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:752:Tensor as_tensor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:774:Tensor new_tensor(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_new.cpp:803:Tensor new_ones(c10::DispatchKey dispatch_key, at::ScalarType scalar_type, PyObject* args, PyObject* kwargs) {
utils/tensor_qschemes.cpp:6:#include <c10/core/QScheme.h>
utils/throughput_benchmark.h:95:struct C10_HIDDEN ModuleInput {
utils/throughput_benchmark.h:170:class C10_HIDDEN ThroughputBenchmark {
utils/future.h:11:#include <c10/util/Logging.h>
utils/future.h:12:#include <c10/util/Optional.h>
utils/future.h:37:// c10::ivalue::Future
utils/future.h:129:  c10::optional<FutureError> error() const {
utils/future.h:193:  c10::optional<FutureError> error_;
utils/tensor_layouts.cpp:3:#include <c10/core/ScalarType.h>
utils/python_arg_parser.h:69:#include <c10/util/Exception.h>
utils/python_arg_parser.h:158:  inline c10::optional<at::Tensor> optionalTensor(int i);
utils/python_arg_parser.h:163:  inline torch::List<c10::optional<at::Tensor>> list_of_optional_tensors(int i);
utils/python_arg_parser.h:167:  inline c10::OptionalArray<int64_t> intlistOptional(int i);
utils/python_arg_parser.h:169:  inline c10::optional<at::Generator> generator(int i);
utils/python_arg_parser.h:171:  inline c10::Stream stream(int i);
utils/python_arg_parser.h:174:  inline c10::optional<at::ScalarType> scalartypeOptional(int i);
utils/python_arg_parser.h:175:  inline c10::optional<at::Scalar> scalarOptional(int i);
utils/python_arg_parser.h:176:  inline c10::optional<int64_t> toInt64Optional(int i);
utils/python_arg_parser.h:177:  inline c10::optional<bool> toBoolOptional(int i);
utils/python_arg_parser.h:178:  inline c10::optional<double> toDoubleOptional(int i);
utils/python_arg_parser.h:179:  inline c10::OptionalArray<double> doublelistOptional(int i);
utils/python_arg_parser.h:184:  inline c10::optional<at::Layout> layoutOptional(int i);
utils/python_arg_parser.h:187:  inline c10::optional<at::Device> deviceOptional(int i);
utils/python_arg_parser.h:190:  inline c10::optional<std::vector<at::Dimname>> toDimnameListOptional(int i);
utils/python_arg_parser.h:192:  inline c10::optional<at::MemoryFormat> memoryformatOptional(int i);
utils/python_arg_parser.h:196:  inline c10::optional<std::string> stringOptional(int i);
utils/python_arg_parser.h:202:  inline c10::complex<double> toComplex(int i);
utils/python_arg_parser.h:203:  inline c10::complex<double> toComplexWithDefault(int i, c10::complex<double> default_complex);
utils/python_arg_parser.h:279:inline c10::optional<at::Tensor> PythonArgs::optionalTensor(int i) {
utils/python_arg_parser.h:284:    return c10::nullopt;
utils/python_arg_parser.h:311:inline c10::optional<at::Scalar> PythonArgs::scalarOptional(int i) {
utils/python_arg_parser.h:312:  if (!args[i]) return c10::nullopt;
utils/python_arg_parser.h:331:inline torch::List<c10::optional<at::Tensor>> PythonArgs::list_of_optional_tensors(int i) {
utils/python_arg_parser.h:332:  if (!args[i]) return torch::List<c10::optional<at::Tensor>>();
utils/python_arg_parser.h:336:  torch::List<c10::optional<at::Tensor>> res;
utils/python_arg_parser.h:403:inline c10::OptionalArray<int64_t> PythonArgs::intlistOptional(int i) {
utils/python_arg_parser.h:428:inline c10::OptionalArray<double> PythonArgs::doublelistOptional(int i) {
utils/python_arg_parser.h:466:inline c10::optional<at::ScalarType> PythonArgs::scalartypeOptional(int i) {
utils/python_arg_parser.h:468:    return c10::nullopt;
utils/python_arg_parser.h:482:inline c10::optional<at::Layout> PythonArgs::layoutOptional(int i) {
utils/python_arg_parser.h:483:  if (!args[i]) return c10::nullopt;
utils/python_arg_parser.h:509:inline c10::optional<at::Device> PythonArgs::deviceOptional(int i) {
utils/python_arg_parser.h:511:    return c10::nullopt;
utils/python_arg_parser.h:532:inline c10::optional<std::vector<at::Dimname>> PythonArgs::toDimnameListOptional(int i) {
utils/python_arg_parser.h:533:  if (!args[i]) return c10::nullopt;
utils/python_arg_parser.h:555:inline c10::optional<at::MemoryFormat> PythonArgs::memoryformatOptional(int i) {
utils/python_arg_parser.h:557:    return c10::nullopt;
utils/python_arg_parser.h:577:inline c10::optional<std::string> PythonArgs::stringOptional(int i) {
utils/python_arg_parser.h:578:  if (!args[i]) return c10::nullopt;
utils/python_arg_parser.h:597:inline c10::optional<int64_t> PythonArgs::toInt64Optional(int i) {
utils/python_arg_parser.h:599:    return c10::nullopt;
utils/python_arg_parser.h:603:inline c10::optional<bool> PythonArgs::toBoolOptional(int i) {
utils/python_arg_parser.h:605:    return c10::nullopt;
utils/python_arg_parser.h:610:inline c10::optional<double> PythonArgs::toDoubleOptional(int i) {
utils/python_arg_parser.h:612:    return c10::nullopt;
utils/python_arg_parser.h:627:inline c10::complex<double> PythonArgs::toComplex(int i) {
utils/python_arg_parser.h:628:  c10::complex<double> default_value = *const_cast<c10::complex<double> *>(
utils/python_arg_parser.h:629:    reinterpret_cast<const c10::complex<double> *>(signature.params[i].default_complex));
utils/python_arg_parser.h:634:inline c10::complex<double> PythonArgs::toComplexWithDefault(int i, c10::complex<double> default_value) {
utils/python_arg_parser.h:653:inline c10::optional<at::Generator> PythonArgs::generator(int i) {
utils/python_arg_parser.h:654:  if (!args[i]) return c10::nullopt;
utils/python_arg_parser.h:663:inline c10::Stream PythonArgs::stream(int i) {
utils/python_arg_parser.h:664:  if (!args[i]) return c10::Stream(c10::Stream::Default::DEFAULT, c10::Device(DeviceType::CPU, -1));
utils/python_arg_parser.h:668:  return c10::Stream::unpack(((THPStream*)args[i])->cdata);
utils/python_scalars.h:23:    case at::kComplexHalf: *(c10::complex<at::Half>*)data = (c10::complex<at::Half>)THPUtils_unpackComplexDouble(obj); break;
utils/python_scalars.h:24:    case at::kComplexFloat: *(c10::complex<float>*)data = (c10::complex<float>)THPUtils_unpackComplexDouble(obj); break;
utils/python_scalars.h:25:    case at::kComplexDouble: *(c10::complex<double>*)data = THPUtils_unpackComplexDouble(obj); break;
utils/python_scalars.h:45:      auto data_ = reinterpret_cast<c10::complex<at::Half>*>(data);
utils/python_scalars.h:49:      auto data_ = reinterpret_cast<c10::complex<float>*>(data);
utils/python_scalars.h:52:    case at::kComplexDouble: return PyComplex_FromCComplex(*reinterpret_cast<Py_complex *>((c10::complex<double>*)data));
Exceptions.cpp:170:    const c10::SourceLocation& source_location,
Exceptions.cpp:177:      prev_handler_(c10::Warning::get_warning_handler()),
Exceptions.cpp:179:  c10::Warning::set_warning_handler(this);
Exceptions.cpp:185:  c10::Warning::set_warning_handler(prev_handler_);
CudaIPCTypes.h:4:#include <c10/core/Allocator.h>
CudaIPCTypes.h:5:#include <c10/cuda/CUDACachingAllocator.h>
CudaIPCTypes.h:6:#include <c10/cuda/CUDAException.h>
CudaIPCTypes.h:7:#include <c10/cuda/CUDAGuard.h>
CudaIPCTypes.h:8:#include <c10/cuda/CUDAStream.h>
CudaIPCTypes.h:9:#include <c10/util/Logging.h>
CudaIPCTypes.h:133:namespace c10 {
CudaIPCTypes.h:144:} // namespace c10
api/include/torch/serialize.h:71:    archive.write(c10::to_string(i), value);
api/include/torch/serialize.h:139:  while (archive.try_read(c10::to_string(index), value)) {
api/include/torch/serialize/input-archive.h:3:#include <c10/util/Optional.h>
api/include/torch/serialize/input-archive.h:4:#include <c10/core/Device.h>
api/include/torch/serialize/input-archive.h:47:  void read(const std::string& key, c10::IValue& ivalue);
api/include/torch/serialize/input-archive.h:51:  bool try_read(const std::string& key, c10::IValue& ivalue);
api/include/torch/serialize/input-archive.h:78:      c10::optional<torch::Device> device = c10::nullopt);
api/include/torch/serialize/input-archive.h:84:      c10::optional<torch::Device> device = c10::nullopt);
api/include/torch/serialize/input-archive.h:88:      c10::optional<torch::Device> device = c10::nullopt);
api/include/torch/serialize/input-archive.h:95:       c10::optional<torch::Device> device = c10::nullopt);
api/include/torch/serialize/output-archive.h:42:  void write(const std::string& key, const c10::IValue& ivalue);
api/include/torch/nn/utils/rnn.h:230:    c10::optional<int64_t> total_length = torch::nullopt) {
api/include/torch/nn/utils/convert_parameters.h:14:inline c10::optional<int64_t> _check_param_device(const torch::Tensor& param, c10::optional<int64_t> old_param_device) {
api/include/torch/nn/utils/convert_parameters.h:16:  if (old_param_device == c10::nullopt) {
api/include/torch/nn/utils/convert_parameters.h:38:  c10::optional<int64_t> param_device;
api/include/torch/nn/utils/convert_parameters.h:56:  c10::optional<int64_t> param_device;
api/include/torch/nn/cloneable.h:7:#include <c10/core/TensorOptions.h>
api/include/torch/nn/cloneable.h:8:#include <c10/util/Exception.h>
api/include/torch/nn/init.h:11:using NonlinearityType = c10::variant<
api/include/torch/nn/init.h:25:using FanModeType = c10::variant<
api/include/torch/nn/parallel/data_parallel.h:14:#include <c10/core/TensorOptions.h>
api/include/torch/nn/parallel/data_parallel.h:15:#include <c10/util/Exception.h>
api/include/torch/nn/functional/normalization.h:19:    c10::optional<Tensor> out) {
api/include/torch/nn/functional/normalization.h:20:    if (out == c10::nullopt) {
api/include/torch/nn/functional/normalization.h:100:        /*divisor_override=*/c10::nullopt).squeeze(1);
api/include/torch/nn/functional/normalization.h:112:        /*divisor_override=*/c10::nullopt).squeeze(1);
api/include/torch/nn/functional/activation.h:214:                      c10::optional<torch::Dtype> dtype) {
api/include/torch/nn/functional/activation.h:217:  if (dtype == c10::nullopt) {
api/include/torch/nn/functional/activation.h:248:                      c10::optional<torch::Dtype> dtype) {
api/include/torch/nn/functional/activation.h:251:  if (dtype == c10::nullopt) {
api/include/torch/nn/functional/activation.h:282:                          c10::optional<torch::Dtype> dtype) {
api/include/torch/nn/functional/activation.h:285:  if (dtype == c10::nullopt) {
api/include/torch/nn/functional/upsampling.h:16:    c10::optional<std::vector<int64_t>>,
api/include/torch/nn/functional/upsampling.h:17:    c10::optional<std::vector<double>>,
api/include/torch/nn/functional/upsampling.h:18:    c10::optional<bool>> closed_over_args) {
api/include/torch/nn/functional/upsampling.h:20:  c10::optional<std::vector<int64_t>> size;
api/include/torch/nn/functional/upsampling.h:21:  c10::optional<std::vector<double>> scale_factor;
api/include/torch/nn/functional/upsampling.h:22:  c10::optional<bool> recompute_scale_factor;
api/include/torch/nn/functional/upsampling.h:24:  if (size == c10::nullopt && scale_factor == c10::nullopt) {
api/include/torch/nn/functional/upsampling.h:27:  if (size != c10::nullopt && scale_factor != c10::nullopt) {
api/include/torch/nn/functional/upsampling.h:30:  if (scale_factor != c10::nullopt) {
api/include/torch/nn/functional/upsampling.h:38:  if (size != c10::nullopt) {
api/include/torch/nn/functional/upsampling.h:42:  TORCH_INTERNAL_ASSERT(scale_factor != c10::nullopt);
api/include/torch/nn/functional/upsampling.h:45:  if (recompute_scale_factor == c10::nullopt) {
api/include/torch/nn/functional/upsampling.h:75:  const c10::optional<std::vector<int64_t>>& size,
api/include/torch/nn/functional/upsampling.h:76:  const c10::optional<std::vector<double>>& scale_factor,
api/include/torch/nn/functional/upsampling.h:78:  c10::optional<bool> align_corners,
api/include/torch/nn/functional/upsampling.h:79:  c10::optional<bool> recompute_scale_factor) {
api/include/torch/nn/functional/upsampling.h:80:  if (c10::get_if<enumtype::kNearest>(&mode) ||
api/include/torch/nn/functional/upsampling.h:81:      c10::get_if<enumtype::kArea>(&mode)) {
api/include/torch/nn/functional/upsampling.h:82:    if (align_corners != c10::nullopt) {
api/include/torch/nn/functional/upsampling.h:89:    if (align_corners == c10::nullopt) {
api/include/torch/nn/functional/upsampling.h:100:  std::vector<c10::optional<double>> scale_factor_list(scale_factor_len, c10::nullopt);
api/include/torch/nn/functional/upsampling.h:101:  if (scale_factor != c10::nullopt && !recompute_scale_factor.value_or(false)) {
api/include/torch/nn/functional/upsampling.h:110:  if (input.dim() == 3 && c10::get_if<enumtype::kNearest>(&mode)) {
api/include/torch/nn/functional/upsampling.h:112:  } else if (input.dim() == 4 && c10::get_if<enumtype::kNearest>(&mode)) {
api/include/torch/nn/functional/upsampling.h:115:  } else if (input.dim() == 5 && c10::get_if<enumtype::kNearest>(&mode)) {
api/include/torch/nn/functional/upsampling.h:118:  } else if (input.dim() == 3 && c10::get_if<enumtype::kArea>(&mode)) {
api/include/torch/nn/functional/upsampling.h:120:  } else if (input.dim() == 4 && c10::get_if<enumtype::kArea>(&mode)) {
api/include/torch/nn/functional/upsampling.h:122:  } else if (input.dim() == 5 && c10::get_if<enumtype::kArea>(&mode)) {
api/include/torch/nn/functional/upsampling.h:124:  } else if (input.dim() == 3 && c10::get_if<enumtype::kLinear>(&mode)) {
api/include/torch/nn/functional/upsampling.h:125:    TORCH_INTERNAL_ASSERT(align_corners != c10::nullopt);
api/include/torch/nn/functional/upsampling.h:127:  } else if (input.dim() == 3 && c10::get_if<enumtype::kBilinear>(&mode)) {
api/include/torch/nn/functional/upsampling.h:129:  } else if (input.dim() == 3 && c10::get_if<enumtype::kTrilinear>(&mode)) {
api/include/torch/nn/functional/upsampling.h:131:  } else if (input.dim() == 4 && c10::get_if<enumtype::kLinear>(&mode)) {
api/include/torch/nn/functional/upsampling.h:133:  } else if (input.dim() == 4 && c10::get_if<enumtype::kBilinear>(&mode)) {
api/include/torch/nn/functional/upsampling.h:134:    TORCH_INTERNAL_ASSERT(align_corners != c10::nullopt);
api/include/torch/nn/functional/upsampling.h:137:  } else if (input.dim() == 4 && c10::get_if<enumtype::kTrilinear>(&mode)) {
api/include/torch/nn/functional/upsampling.h:139:  } else if (input.dim() == 5 && c10::get_if<enumtype::kLinear>(&mode)) {
api/include/torch/nn/functional/upsampling.h:141:  } else if (input.dim() == 5 && c10::get_if<enumtype::kBilinear>(&mode)) {
api/include/torch/nn/functional/upsampling.h:143:  } else if (input.dim() == 5 && c10::get_if<enumtype::kTrilinear>(&mode)) {
api/include/torch/nn/functional/upsampling.h:144:    TORCH_INTERNAL_ASSERT(align_corners != c10::nullopt);
api/include/torch/nn/functional/upsampling.h:147:  } else if (input.dim() == 4 && c10::get_if<enumtype::kBicubic>(&mode)) {
api/include/torch/nn/functional/upsampling.h:148:    TORCH_INTERNAL_ASSERT(align_corners != c10::nullopt);
api/include/torch/nn/functional/batchnorm.h:18:                         c10::optional<double> momentum,
api/include/torch/nn/functional/loss.h:54:  if (c10::get_if<enumtype::kMean>(&reduction)) {
api/include/torch/nn/functional/loss.h:61:  if (c10::get_if<enumtype::kBatchMean>(&reduction)) {
api/include/torch/nn/functional/loss.h:69:  if (c10::get_if<enumtype::kBatchMean>(&reduction) && input.dim() != 0) {
api/include/torch/nn/functional/loss.h:439:  if (c10::get_if<enumtype::kNone>(&reduction)) {
api/include/torch/nn/functional/loss.h:441:  } else if (c10::get_if<enumtype::kMean>(&reduction)) {
api/include/torch/nn/functional/loss.h:443:  } else if (c10::get_if<enumtype::kSum>(&reduction)) {
api/include/torch/nn/functional/loss.h:536:    c10::optional<TripletMarginWithDistanceLossFuncOptions::distance_function_t> distance_function,
api/include/torch/nn/functional/loss.h:563:  if (c10::get_if<enumtype::kNone>(&reduction)) {
api/include/torch/nn/functional/loss.h:565:  } else if (c10::get_if<enumtype::kMean>(&reduction)) {
api/include/torch/nn/functional/loss.h:567:  } else if (c10::get_if<enumtype::kSum>(&reduction)) {
api/include/torch/nn/functional/loss.h:785:    if (!c10::get_if<enumtype::kNone>(&reduction)) {
api/include/torch/nn/functional/loss.h:831:  if (c10::get_if<enumtype::kNone>(&reduction)) {
api/include/torch/nn/functional/loss.h:833:  } else if (c10::get_if<enumtype::kMean>(&reduction)) {
api/include/torch/nn/functional/loss.h:835:  } else if (c10::get_if<enumtype::kSum>(&reduction)) {
api/include/torch/nn/functional/loss.h:844:    torch::nn::functional::detail::log_softmax(input, 1, c10::nullopt),
api/include/torch/nn/functional/vision.h:59:    c10::optional<bool> align_corners) {
api/include/torch/nn/functional/vision.h:62:  if (c10::get_if<enumtype::kBilinear>(&mode)) {
api/include/torch/nn/functional/vision.h:64:  } else if (c10::get_if<enumtype::kNearest>(&mode)) {
api/include/torch/nn/functional/vision.h:70:  if (c10::get_if<enumtype::kZeros>(&padding_mode)) {
api/include/torch/nn/functional/vision.h:72:  } else if (c10::get_if<enumtype::kBorder>(&padding_mode)) {
api/include/torch/nn/functional/pooling.h:59:                         c10::optional<int64_t> divisor_override) {
api/include/torch/nn/functional/pooling.h:102:                         c10::optional<int64_t> divisor_override) {
api/include/torch/nn/functional/pooling.h:599:  const IntArrayRef& padding, const c10::optional<std::vector<int64_t>>& output_size) {
api/include/torch/nn/functional/pooling.h:639:    const c10::optional<std::vector<int64_t>>& output_size) {
api/include/torch/nn/functional/pooling.h:680:  const c10::optional<std::vector<int64_t>>& output_size) {
api/include/torch/nn/functional/pooling.h:720:  const c10::optional<std::vector<int64_t>>& output_size) {
api/include/torch/nn/functional/pooling.h:760:    const c10::optional<ExpandingArray<2>>& output_size,
api/include/torch/nn/functional/pooling.h:761:    const c10::optional<ExpandingArray<2,double>>& output_ratio,
api/include/torch/nn/functional/pooling.h:763:  if (output_size == c10::nullopt && output_ratio == c10::nullopt) {
api/include/torch/nn/functional/pooling.h:770:  c10::optional<ExpandingArray<2>> output_size_ = output_size;
api/include/torch/nn/functional/pooling.h:771:  if (output_size_ == c10::nullopt) {
api/include/torch/nn/functional/pooling.h:772:    TORCH_INTERNAL_ASSERT(output_ratio != c10::nullopt);
api/include/torch/nn/functional/pooling.h:807:                                    c10::optional<ExpandingArray<2>> output_size,
api/include/torch/nn/functional/pooling.h:808:                                    c10::optional<ExpandingArray<2,double>> output_ratio,
api/include/torch/nn/functional/pooling.h:838:    const c10::optional<ExpandingArray<3>>& output_size,
api/include/torch/nn/functional/pooling.h:839:    const c10::optional<ExpandingArray<3,double>>& output_ratio,
api/include/torch/nn/functional/pooling.h:841:  if (output_size == c10::nullopt && output_ratio == c10::nullopt) {
api/include/torch/nn/functional/pooling.h:848:  c10::optional<ExpandingArray<3>> output_size_ = output_size;
api/include/torch/nn/functional/pooling.h:849:  if (output_size_ == c10::nullopt) {
api/include/torch/nn/functional/pooling.h:850:    TORCH_INTERNAL_ASSERT(output_ratio != c10::nullopt);
api/include/torch/nn/functional/pooling.h:886:                                    c10::optional<ExpandingArray<3>> output_size,
api/include/torch/nn/functional/pooling.h:887:                                    c10::optional<ExpandingArray<3,double>> output_ratio,
api/include/torch/nn/functional/pooling.h:972:    /*divisor_override=*/c10::nullopt);
api/include/torch/nn/functional/embedding.h:22:                        c10::optional<int64_t> padding_idx,
api/include/torch/nn/functional/embedding.h:23:                        c10::optional<double> max_norm,
api/include/torch/nn/functional/embedding.h:29:  if (padding_idx != c10::nullopt) {
api/include/torch/nn/functional/embedding.h:41:  if (max_norm != c10::nullopt) {
api/include/torch/nn/functional/embedding.h:78:    c10::optional<double> max_norm,
api/include/torch/nn/functional/embedding.h:110:  if (c10::get_if<enumtype::kSum>(&mode)) {
api/include/torch/nn/functional/embedding.h:112:  } else if (c10::get_if<enumtype::kMean>(&mode)) {
api/include/torch/nn/functional/embedding.h:114:  } else if (c10::get_if<enumtype::kMax>(&mode)) {
api/include/torch/nn/functional/embedding.h:122:  if (max_norm != c10::nullopt) {
api/include/torch/nn/functional/embedding.h:127:    !per_sample_weights_.defined() || c10::get_if<enumtype::kSum>(&mode),
api/include/torch/nn/functional/padding.h:39:  if (c10::get_if<enumtype::kConstant>(&mode)) {
api/include/torch/nn/functional/padding.h:49:      if (c10::get_if<enumtype::kReflect>(&mode)) {
api/include/torch/nn/functional/padding.h:51:      } else if (c10::get_if<enumtype::kReplicate>(&mode)) {
api/include/torch/nn/functional/padding.h:53:      } else if (c10::get_if<enumtype::kCircular>(&mode)) {
api/include/torch/nn/functional/padding.h:60:      if (c10::get_if<enumtype::kReflect>(&mode)) {
api/include/torch/nn/functional/padding.h:62:      } else if (c10::get_if<enumtype::kReplicate>(&mode)) {
api/include/torch/nn/functional/padding.h:64:      } else if (c10::get_if<enumtype::kCircular>(&mode)) {
api/include/torch/nn/functional/padding.h:71:      if (c10::get_if<enumtype::kReflect>(&mode)) {
api/include/torch/nn/functional/padding.h:73:      } else if (c10::get_if<enumtype::kReplicate>(&mode)) {
api/include/torch/nn/functional/padding.h:75:      } else if (c10::get_if<enumtype::kCircular>(&mode)) {
api/include/torch/nn/options/normalization.h:133:  TORCH_ARG(c10::optional<Tensor>, out) = c10::nullopt;
api/include/torch/nn/options/activation.h:223:  TORCH_ARG(c10::optional<torch::Dtype>, dtype) = c10::nullopt;
api/include/torch/nn/options/activation.h:263:  TORCH_ARG(c10::optional<torch::Dtype>, dtype) = c10::nullopt;
api/include/torch/nn/options/activation.h:303:  TORCH_ARG(c10::optional<torch::Dtype>, dtype) = c10::nullopt;
api/include/torch/nn/options/activation.h:607:  /// total number of features in key. Default: c10::nullopt.
api/include/torch/nn/options/activation.h:610:  /// total number of features in key. Default: c10::nullopt.
api/include/torch/nn/options/rnn.h:15:  typedef c10::variant<
api/include/torch/nn/options/rnn.h:54:  typedef c10::variant<enumtype::kTanh, enumtype::kReLU> nonlinearity_t;
api/include/torch/nn/options/rnn.h:171:  typedef c10::variant<enumtype::kTanh, enumtype::kReLU> nonlinearity_t;
api/include/torch/nn/options/upsampling.h:3:#include <c10/util/variant.h>
api/include/torch/nn/options/upsampling.h:23:  TORCH_ARG(c10::optional<std::vector<int64_t>>, size) = c10::nullopt;
api/include/torch/nn/options/upsampling.h:26:  TORCH_ARG(c10::optional<std::vector<double>>, scale_factor) = c10::nullopt;
api/include/torch/nn/options/upsampling.h:30:  typedef c10::variant<
api/include/torch/nn/options/upsampling.h:42:  TORCH_ARG(c10::optional<bool>, align_corners) = c10::nullopt;
api/include/torch/nn/options/upsampling.h:55:  typedef c10::variant<
api/include/torch/nn/options/upsampling.h:64:  TORCH_ARG(c10::optional<std::vector<int64_t>>, size) = c10::nullopt;
api/include/torch/nn/options/upsampling.h:67:  TORCH_ARG(c10::optional<std::vector<double>>, scale_factor) = c10::nullopt;
api/include/torch/nn/options/upsampling.h:82:  TORCH_ARG(c10::optional<bool>, align_corners) = c10::nullopt;
api/include/torch/nn/options/upsampling.h:93:  TORCH_ARG(c10::optional<bool>, recompute_scale_factor) = c10::nullopt;
api/include/torch/nn/options/conv.h:14:typedef c10::variant<
api/include/torch/nn/options/batchnorm.h:24:  TORCH_ARG(c10::optional<double>, momentum) = 0.1;
api/include/torch/nn/options/batchnorm.h:81:  TORCH_ARG(c10::optional<double>, momentum) = 0.1;
api/include/torch/nn/options/loss.h:18:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:49:  typedef c10::variant<enumtype::kNone, enumtype::kBatchMean, enumtype::kSum, enumtype::kMean> reduction_t;
api/include/torch/nn/options/loss.h:84:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:116:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:148:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:180:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:221:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:254:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:288:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:322:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:359:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:398:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:404:  TORCH_ARG(c10::optional<distance_function_t>, distance_function) = c10::nullopt;
api/include/torch/nn/options/loss.h:443:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:478:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:512:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:550:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:581:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:617:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/loss.h:652:  typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/nn/options/vision.h:20:  typedef c10::variant<enumtype::kBilinear, enumtype::kNearest> mode_t;
api/include/torch/nn/options/vision.h:21:  typedef c10::variant<enumtype::kZeros, enumtype::kBorder, enumtype::kReflection> padding_mode_t;
api/include/torch/nn/options/vision.h:28:  TORCH_ARG(c10::optional<bool>, align_corners) = c10::nullopt;
api/include/torch/nn/options/pooling.h:33:  TORCH_ARG(c10::optional<int64_t>, divisor_override) = c10::nullopt;
api/include/torch/nn/options/pooling.h:392:  TORCH_ARG(c10::optional<std::vector<int64_t>>, output_size) = c10::nullopt;
api/include/torch/nn/options/pooling.h:436:  TORCH_ARG(c10::optional<ExpandingArray<D>>, output_size) = c10::nullopt;
api/include/torch/nn/options/pooling.h:441:  TORCH_ARG(c10::optional<ExpandingArrayDouble>, output_ratio) = c10::nullopt;
api/include/torch/nn/options/transformerlayer.h:19:  using activation_t = c10::variant<enumtype::kReLU, enumtype::kGELU>;
api/include/torch/nn/options/transformerlayer.h:50:  using activation_t = c10::variant<enumtype::kReLU, enumtype::kGELU>;
api/include/torch/nn/options/linear.h:6:#include <c10/util/variant.h>
api/include/torch/nn/options/embedding.h:25:  TORCH_ARG(c10::optional<int64_t>, padding_idx) = c10::nullopt;
api/include/torch/nn/options/embedding.h:27:  TORCH_ARG(c10::optional<double>, max_norm) = c10::nullopt;
api/include/torch/nn/options/embedding.h:46:  TORCH_ARG(c10::optional<int64_t>, padding_idx) = c10::nullopt;
api/include/torch/nn/options/embedding.h:48:  TORCH_ARG(c10::optional<double>, max_norm) = c10::nullopt;
api/include/torch/nn/options/embedding.h:70:  TORCH_ARG(c10::optional<int64_t>, padding_idx) = c10::nullopt;
api/include/torch/nn/options/embedding.h:72:  TORCH_ARG(c10::optional<double>, max_norm) = c10::nullopt;
api/include/torch/nn/options/embedding.h:85:typedef c10::variant<enumtype::kSum, enumtype::kMean, enumtype::kMax> EmbeddingBagMode;
api/include/torch/nn/options/embedding.h:101:  TORCH_ARG(c10::optional<double>, max_norm) = c10::nullopt;
api/include/torch/nn/options/embedding.h:128:  TORCH_ARG(c10::optional<double>, max_norm) = c10::nullopt;
api/include/torch/nn/options/embedding.h:162:  TORCH_ARG(c10::optional<double>, max_norm) = c10::nullopt;
api/include/torch/nn/options/padding.h:3:#include <c10/util/variant.h>
api/include/torch/nn/options/padding.h:153:  typedef c10::variant<
api/include/torch/nn/options/transformer.h:23:  using activation_t = c10::variant<enumtype::kReLU, enumtype::kGELU>;
api/include/torch/nn/modules/rnn.h:12:#include <c10/util/Exception.h>
api/include/torch/nn/modules/conv.h:98:    if (!c10::get_if<enumtype::kZeros>(&options.padding_mode())) {
api/include/torch/nn/modules/conv.h:246:    if (!c10::get_if<enumtype::kZeros>(&this->options.padding_mode())) {
api/include/torch/nn/modules/conv.h:254:      const Tensor& input, const c10::optional<at::IntArrayRef>& output_size,
api/include/torch/nn/modules/conv.h:282:                 const c10::optional<at::IntArrayRef>& output_size = c10::nullopt);
api/include/torch/nn/modules/conv.h:284:  FORWARD_HAS_DEFAULT_ARGS({1, AnyValue(c10::optional<at::IntArrayRef>())})
api/include/torch/nn/modules/conv.h:317:                 const c10::optional<at::IntArrayRef>& output_size = c10::nullopt);
api/include/torch/nn/modules/conv.h:319:  FORWARD_HAS_DEFAULT_ARGS({1, AnyValue(c10::optional<at::IntArrayRef>())})
api/include/torch/nn/modules/conv.h:352:                 const c10::optional<at::IntArrayRef>& output_size = c10::nullopt);
api/include/torch/nn/modules/conv.h:354:  FORWARD_HAS_DEFAULT_ARGS({1, AnyValue(c10::optional<at::IntArrayRef>())})
api/include/torch/nn/modules/batchnorm.h:95:    if (this->options.momentum() == c10::nullopt) {
api/include/torch/nn/modules/batchnorm.h:104:        if (this->options.momentum() == c10::nullopt) {  // use cumulative moving average
api/include/torch/nn/modules/utils.h:3:#include <c10/util/ArrayRef.h>
api/include/torch/nn/modules/utils.h:4:#include <c10/util/Optional.h>
api/include/torch/nn/modules/utils.h:31:  torch::ArrayRef<c10::optional<int64_t>> out_size, torch::IntArrayRef defaults) {
api/include/torch/nn/modules/pooling.h:480:                 const c10::optional<std::vector<int64_t>>& output_size = c10::nullopt);
api/include/torch/nn/modules/pooling.h:482:  FORWARD_HAS_DEFAULT_ARGS({2, AnyValue(c10::optional<std::vector<int64_t>>())})
api/include/torch/nn/modules/pooling.h:509:                 const c10::optional<std::vector<int64_t>>& output_size = c10::nullopt);
api/include/torch/nn/modules/pooling.h:511:  FORWARD_HAS_DEFAULT_ARGS({2, AnyValue(c10::optional<std::vector<int64_t>>())})
api/include/torch/nn/modules/pooling.h:538:                 const c10::optional<std::vector<int64_t>>& output_size = c10::nullopt);
api/include/torch/nn/modules/pooling.h:540:  FORWARD_HAS_DEFAULT_ARGS({2, AnyValue(c10::optional<std::vector<int64_t>>())})
api/include/torch/nn/modules/container/modulelist.h:92:    register_module(c10::to_string(index), modules_[index]);
api/include/torch/nn/modules/container/modulelist.h:210:        replace_module(c10::to_string(index), modules_[index]);
api/include/torch/nn/modules/container/modulelist.h:211:      register_module(c10::to_string(size() - 1), modules_.back());
api/include/torch/nn/modules/container/parameterlist.h:53:        c10::to_string(parameters_.size()), std::move(param), requires_grad);
api/include/torch/nn/modules/container/parameterlist.h:60:        c10::to_string(parameters_.size()), param, requires_grad);
api/include/torch/nn/modules/container/parameterlist.h:68:        c10::to_string(parameters_.size()),
api/include/torch/nn/modules/container/parameterlist.h:114:    return parameters_[c10::to_string(idx)];
api/include/torch/nn/modules/container/parameterlist.h:122:    return parameters_[c10::to_string(idx)];
api/include/torch/nn/modules/container/any_value.h:73:        c10::demangle(typeid(T).name()),
api/include/torch/nn/modules/container/any_value.h:75:        c10::demangle(type_info().name()));
api/include/torch/nn/modules/container/any.h:364:      c10::demangle(type_info().name()),
api/include/torch/nn/modules/container/any.h:366:      c10::demangle(typeid(ModuleType).name()));
api/include/torch/nn/modules/container/sequential.h:11:#include <c10/util/Exception.h>
api/include/torch/nn/modules/container/sequential.h:189:        c10::demangle(input.type_info().name()),
api/include/torch/nn/modules/container/sequential.h:191:        c10::demangle(typeid(ReturnType).name()));
api/include/torch/nn/modules/container/sequential.h:197:    push_back(c10::to_string(modules_.size()), std::move(module_ptr));
api/include/torch/nn/modules/container/sequential.h:213:    push_back(c10::to_string(modules_.size()), std::forward<M>(module));
api/include/torch/nn/modules/container/sequential.h:229:    push_back(c10::to_string(modules_.size()), module_holder);
api/include/torch/nn/modules/container/sequential.h:249:    push_back(c10::to_string(modules_.size()), std::move(any_module));
api/include/torch/nn/modules/container/any_module_holder.h:52:          c10::demangle(typeid(T).name()),
api/include/torch/nn/modules/container/any_module_holder.h:54:          c10::demangle(value.type_info().name()));
api/include/torch/nn/modules/container/any_module_holder.h:78:          c10::demangle(type_info.name()),
api/include/torch/nn/modules/container/any_module_holder.h:90:        c10::demangle(type_info.name()) + \
api/include/torch/nn/modules/container/any_module_holder.h:95:          c10::demangle(type_info.name()),
api/include/torch/detail/TensorDataContainer.h:19:// defined in `c10/util/BFloat16.h`.
api/include/torch/detail/TensorDataContainer.h:21:inline std::ostream& operator<<(std::ostream& stream, c10::BFloat16 value) {
api/include/torch/detail/TensorDataContainer.h:26:inline c10::ScalarType compute_desired_dtype(c10::ScalarType scalar_type) {
api/include/torch/detail/TensorDataContainer.h:172:  const c10::Scalar& scalar() const {
api/include/torch/detail/TensorDataContainer.h:205:  const c10::ScalarType& scalar_type() const {
api/include/torch/detail/TensorDataContainer.h:306:  c10::ScalarType scalar_type_;
api/include/torch/detail/TensorDataContainer.h:308:  c10::Scalar scalar_;
api/include/torch/enum.h:6:#include <c10/util/Exception.h>
api/include/torch/enum.h:7:#include <c10/util/variant.h>
api/include/torch/enum.h:43://   typedef c10::variant<enumtype::kNone, enumtype::kMean, enumtype::kSum> reduction_t;
api/include/torch/enum.h:176:  return c10::visit(enumtype::_compute_enum_name{}, variant_enum);
api/include/torch/enum.h:181:  if (c10::get_if<enumtype::kNone>(&variant_enum)) {
api/include/torch/enum.h:183:  } else if (c10::get_if<enumtype::kMean>(&variant_enum)) {
api/include/torch/enum.h:185:  } else if (c10::get_if<enumtype::kSum>(&variant_enum)) {
api/include/torch/expanding_array.h:3:#include <c10/util/ArrayRef.h>
api/include/torch/expanding_array.h:4:#include <c10/util/Exception.h>
api/include/torch/expanding_array.h:5:#include <c10/util/Optional.h>
api/include/torch/expanding_array.h:104:/// A utility class that accepts either a container of `D`-many `c10::optional<T>` values,
api/include/torch/expanding_array.h:105:/// or a single `c10::optional<T>` value, which is internally repeated `D` times.
api/include/torch/expanding_array.h:107:/// convert them to a container of `c10::optional<T>`.
api/include/torch/expanding_array.h:109:class ExpandingArrayWithOptionalElem : public ExpandingArray<D, c10::optional<T>> {
api/include/torch/expanding_array.h:111:  using ExpandingArray<D, c10::optional<T>>::ExpandingArray;
api/include/torch/expanding_array.h:128:  /*implicit*/ ExpandingArrayWithOptionalElem(at::ArrayRef<T> values) : ExpandingArray<D, c10::optional<T>>(0) {
api/include/torch/expanding_array.h:141:  /*implicit*/ ExpandingArrayWithOptionalElem(T single_size) : ExpandingArray<D, c10::optional<T>>(0) {
api/include/torch/expanding_array.h:148:  /*implicit*/ ExpandingArrayWithOptionalElem(const std::array<T, D>& values) : ExpandingArray<D, c10::optional<T>>(0) {
api/include/torch/expanding_array.h:161:    stream << (elem.has_value() ? c10::str(elem.value()) : "None");
api/include/torch/expanding_array.h:165:      str_array.emplace_back(elem.has_value() ? c10::str(elem.value()) : "None");
api/include/torch/types.h:5:#include <c10/util/Optional.h>
api/include/torch/types.h:33:using c10::optional;
api/include/torch/types.h:34:using c10::nullopt;
api/include/torch/data/dataloader/stateless.h:8:#include <c10/util/Exception.h>
api/include/torch/data/dataloader/base.h:14:#include <c10/util/Exception.h>
api/include/torch/data/detail/data_shuttle.h:6:#include <c10/util/Exception.h>
api/include/torch/data/detail/data_shuttle.h:7:#include <c10/util/Optional.h>
api/include/torch/data/datasets/base.h:6:#include <c10/util/ArrayRef.h>
api/include/torch/data/detail/queue.h:5:#include <c10/util/Exception.h>
api/include/torch/data/datasets/map.h:6:#include <c10/util/ArrayRef.h>
api/include/torch/data/dataloader.h:9:#include <c10/util/Exception.h>
api/include/torch/data/iterator.h:6:#include <c10/util/Exception.h>
api/include/torch/optim/serialize.h:57:            "params/" + c10::guts::to_string(index), IValue(c10::guts::to_string(params[index].unsafeGetTensorImpl())));
api/include/torch/optim/serialize.h:63:      archive.write("param_groups/" + c10::guts::to_string(i), param_group_archive);
api/include/torch/optim/serialize.h:80:      archive.read("param_groups/" + c10::guts::to_string(i), param_group_archive);
api/include/torch/optim/serialize.h:88:          "params/" + c10::to_string(index), ivalue);
api/include/torch/optim/serialize.h:173:          optimizer.state()[c10::guts::to_string(params[idx].unsafeGetTensorImpl())] = std::move(saved_state[param_group_old_keys[idx]]);
api/include/torch/optim/serialize.h:189:        key + "/" + c10::to_string(index), buffers[index], /*is_buffer=*/true);
api/include/torch/optim/serialize.h:206:        key + "/" + c10::to_string(index), buffers.back(), /*is_buffer=*/true);
api/include/torch/optim/serialize.h:211:c10::List<T> deque_to_list(const std::deque<T>& dq) {
api/include/torch/optim/serialize.h:212:  c10::List<T> list;
api/include/torch/optim/serialize.h:221:std::deque<T> list_to_deque(const c10::List<T>& list) {
api/include/torch/optim/serialize.h:244:  c10::IValue ivalue = torch::IValue(deque_to_list(name())); \
api/include/torch/optim/serialize.h:249:  c10::IValue ivalue; \
api/include/torch/optim/serialize.h:260:  c10::IValue ivalue; \
api/include/torch/optim/serialize.h:268:  c10::IValue ivalue; \
api/include/torch/optim/serialize.h:270:  auto list = ivalue.to<c10::List<T::value_type>>(); \
api/include/torch/optim/lbfgs.h:21:  TORCH_ARG(c10::optional<int64_t>, max_eval) = c10::nullopt;
api/include/torch/optim/lbfgs.h:25:  TORCH_ARG(c10::optional<std::string>, line_search_fn) = c10::nullopt;
api/include/torch/optim/lbfgs.h:44:  TORCH_ARG(c10::optional<std::vector<Tensor>>, al) = c10::nullopt;
api/include/torch/optim/lbfgs.h:58:     if (defaults.max_eval() == c10::nullopt) {
api/include/torch/optim/lbfgs.h:63:     _numel_cache = c10::nullopt;
api/include/torch/optim/lbfgs.h:74:  c10::optional<int64_t> _numel_cache;
api/include/torch/optim/adagrad.h:62:        state_[c10::guts::to_string(p.unsafeGetTensorImpl())] = std::move(state);
api/include/torch/optim/optimizer.h:4:#include <c10/util/flat_hash_map.h>
api/include/torch/optim/optimizer.h:5:#include <c10/util/Exception.h>
api/include/torch/optim/optimizer.h:153:  c10::nullopt values into the output archive?
api/include/torch/optim/optimizer.h:159:b) For c10::nullopt value: we serialize c10::nullopt values into the output archive,
api/include/torch/optim/optimizer.h:166:b) For c10::nullopt value: in param state, c10::nullopt value in C++ impl is equivalent to
api/include/torch/optim/optimizer.h:168:   we skip c10::nullopt values when serializing the param state. */
api/include/torch/fft.h:17:                  c10::optional<int64_t> n=c10::nullopt,
api/include/torch/fft.h:19:                  c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:32:                  c10::optional<int64_t> n=c10::nullopt,
api/include/torch/fft.h:34:                  c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:47:                   c10::optional<IntArrayRef> s=c10::nullopt,
api/include/torch/fft.h:49:                   c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:62:                    c10::optional<IntArrayRef> s=c10::nullopt,
api/include/torch/fft.h:64:                    c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:77:                   c10::optional<IntArrayRef> s=c10::nullopt,
api/include/torch/fft.h:78:                   c10::optional<IntArrayRef> dim=c10::nullopt,
api/include/torch/fft.h:79:                   c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:92:                   c10::optional<IntArrayRef> s=c10::nullopt,
api/include/torch/fft.h:93:                   c10::optional<IntArrayRef> dim=c10::nullopt,
api/include/torch/fft.h:94:                   c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:108:                  c10::optional<int64_t> n=c10::nullopt,
api/include/torch/fft.h:110:                  c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:126:                    c10::optional<int64_t> n=c10::nullopt,
api/include/torch/fft.h:128:                    c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:141:                    c10::optional<IntArrayRef> s=c10::nullopt,
api/include/torch/fft.h:143:                    c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:156:                     c10::optional<IntArrayRef> s=c10::nullopt,
api/include/torch/fft.h:158:                     c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:171:                    c10::optional<IntArrayRef> s=c10::nullopt,
api/include/torch/fft.h:172:                    c10::optional<IntArrayRef> dim=c10::nullopt,
api/include/torch/fft.h:173:                    c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:186:                   c10::optional<IntArrayRef> s=c10::nullopt,
api/include/torch/fft.h:187:                   c10::optional<IntArrayRef> dim=c10::nullopt,
api/include/torch/fft.h:188:                   c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:205:                   c10::optional<int64_t> n=c10::nullopt,
api/include/torch/fft.h:207:                   c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:223:                    c10::optional<int64_t> n=c10::nullopt,
api/include/torch/fft.h:225:                    c10::optional<std::string> norm=c10::nullopt) {
api/include/torch/fft.h:272:inline Tensor fftshift(const Tensor& x, c10::optional<IntArrayRef> dim=c10::nullopt) {
api/include/torch/fft.h:287:inline Tensor ifftshift(const Tensor& x, c10::optional<IntArrayRef> dim=c10::nullopt) {
api/src/serialize/output-archive.cpp:9:#include <c10/util/Exception.h>
api/src/serialize/output-archive.cpp:21:void OutputArchive::write(const std::string& key, const c10::IValue& ivalue) {
api/src/cuda.cpp:4:#include <c10/core/DeviceGuard.h>
api/src/serialize/input-archive.cpp:9:#include <c10/util/Exception.h>
api/src/serialize/input-archive.cpp:21:void InputArchive::read(const std::string& key, c10::IValue& ivalue) {
api/src/serialize/input-archive.cpp:27:    c10::IValue& ivalue) {
api/src/serialize/input-archive.cpp:96:    c10::optional<torch::Device> device /*= c10::nullopt*/) {
api/src/serialize/input-archive.cpp:101:    c10::optional<torch::Device> device /*= c10::nullopt*/) {
api/src/serialize/input-archive.cpp:108:    c10::optional<torch::Device> device /*= c10::nullopt*/) {
api/src/serialize/input-archive.cpp:137:    c10::optional<torch::Device> device /*= c10::nullopt*/) {
api/src/nn/module.cpp:7:#include <c10/util/Exception.h>
api/src/nn/module.cpp:56:    name_ = c10::demangle(typeid(*this).name());
api/src/nn/init.cpp:7:#include <c10/util/Exception.h>
api/src/nn/init.cpp:48:  if (c10::get_if<enumtype::kFanIn>(&mode)) {
api/src/nn/init.cpp:58:  if (c10::get_if<enumtype::kTanh>(&nonlinearity)) {
api/src/nn/init.cpp:60:  } else if (c10::get_if<enumtype::kReLU>(&nonlinearity)) {
api/src/nn/init.cpp:62:  } else if (c10::get_if<enumtype::kLeakyReLU>(&nonlinearity)) {
api/src/nn/modules/activation.cpp:130:  return F::detail::softmax(input, options.dim(), c10::nullopt);
api/src/nn/modules/activation.cpp:145:  return F::detail::softmin(input, options.dim(), c10::nullopt);
api/src/nn/modules/activation.cpp:160:  return F::detail::log_softmax(input, options.dim(), c10::nullopt);
api/src/nn/modules/activation.cpp:173:  return F::detail::softmax(input, /*dim=*/1, c10::nullopt);
api/src/nn/modules/batchnorm.cpp:7:#include <c10/util/Exception.h>
api/src/nn/modules/conv.cpp:21:  if (c10::get_if<torch::enumtype::kReflect>(&conv_padding_mode)) {
api/src/nn/modules/conv.cpp:23:  } else if (c10::get_if<torch::enumtype::kReplicate>(&conv_padding_mode)) {
api/src/nn/modules/conv.cpp:25:  } else if (c10::get_if<torch::enumtype::kCircular>(&conv_padding_mode)) {
api/src/nn/modules/conv.cpp:52:  if (!c10::get_if<enumtype::kZeros>(&options.padding_mode())) {
api/src/nn/modules/conv.cpp:88:  if (!c10::get_if<enumtype::kZeros>(&options.padding_mode())) {
api/src/nn/modules/conv.cpp:128:  if (!c10::get_if<enumtype::kZeros>(&options.padding_mode())) {
api/src/nn/modules/conv.cpp:155:    const Tensor& input, const c10::optional<at::IntArrayRef>& output_size,
api/src/nn/modules/conv.cpp:159:  c10::optional<at::IntArrayRef> output_size_ = output_size;
api/src/nn/modules/conv.cpp:161:  if (output_size_ == c10::nullopt) {
api/src/nn/modules/conv.cpp:216:    const Tensor& input, const c10::optional<at::IntArrayRef>& output_size) {
api/src/nn/modules/conv.cpp:217:  if (!c10::get_if<enumtype::kZeros>(&options.padding_mode())) {
api/src/nn/modules/conv.cpp:245:    const Tensor& input, const c10::optional<at::IntArrayRef>& output_size) {
api/src/nn/modules/conv.cpp:246:  if (!c10::get_if<enumtype::kZeros>(&options.padding_mode())) {
api/src/nn/modules/conv.cpp:274:    const Tensor& input, const c10::optional<at::IntArrayRef>& output_size) {
api/src/nn/modules/conv.cpp:275:  if (!c10::get_if<enumtype::kZeros>(&options.padding_mode())) {
api/src/nn/modules/rnn.cpp:7:#include <c10/util/Exception.h>
api/src/nn/modules/rnn.cpp:31:  if (c10::get_if<enumtype::kRNN_RELU>(&mode)) {
api/src/nn/modules/rnn.cpp:33:  } else if (c10::get_if<enumtype::kRNN_TANH>(&mode)) {
api/src/nn/modules/rnn.cpp:35:  } else if (c10::get_if<enumtype::kLSTM>(&mode)) {
api/src/nn/modules/rnn.cpp:37:  } else if (c10::get_if<enumtype::kGRU>(&mode)) {
api/src/nn/modules/rnn.cpp:81:      c10::get_if<enumtype::kLSTM>(&options_base.mode()),
api/src/nn/modules/rnn.cpp:86:  if (c10::get_if<enumtype::kLSTM>(&options_base.mode())) {
api/src/nn/modules/rnn.cpp:88:  } else if (c10::get_if<enumtype::kGRU>(&options_base.mode())) {
api/src/nn/modules/rnn.cpp:90:  } else if (c10::get_if<enumtype::kRNN_TANH>(&options_base.mode())) {
api/src/nn/modules/rnn.cpp:92:  } else if (c10::get_if<enumtype::kRNN_RELU>(&options_base.mode())) {
api/src/nn/modules/rnn.cpp:128:        std::string x = std::regex_replace(param_names[i], std::regex("\\{layer\\}"), c10::str(layer));
api/src/nn/modules/rnn.cpp:129:        x = std::regex_replace(x, std::regex("\\{suffix\\}"), c10::str(suffix));
api/src/nn/modules/rnn.cpp:302:    msg = std::regex_replace(msg, std::regex("\\{1\\}"), c10::str(expected_hidden_size_vec));
api/src/nn/modules/rnn.cpp:303:    msg = std::regex_replace(msg, std::regex("\\{2\\}"), c10::str(hx.sizes()));
api/src/nn/modules/rnn.cpp:362:  if (c10::get_if<enumtype::kTanh>(&nonlinearity)) {
api/src/nn/modules/rnn.cpp:364:  } else if (c10::get_if<enumtype::kReLU>(&nonlinearity)) {
api/src/nn/modules/rnn.cpp:405:    if (c10::get_if<enumtype::kRNN_TANH>(&options_base.mode())) {
api/src/nn/modules/rnn.cpp:408:    } else if (c10::get_if<enumtype::kRNN_RELU>(&options_base.mode())) {
api/src/nn/modules/rnn.cpp:415:    if (c10::get_if<enumtype::kRNN_TANH>(&options_base.mode())) {
api/src/nn/modules/rnn.cpp:418:    } else if (c10::get_if<enumtype::kRNN_RELU>(&options_base.mode())) {
api/src/nn/modules/rnn.cpp:746:  if (c10::get_if<enumtype::kTanh>(&options.nonlinearity())) {
api/src/nn/modules/rnn.cpp:752:  } else if (c10::get_if<enumtype::kReLU>(&options.nonlinearity())) {
api/src/nn/modules/pooling.cpp:212:    const c10::optional<std::vector<int64_t>>& output_size) {
api/src/nn/modules/pooling.cpp:223:    const c10::optional<std::vector<int64_t>>& output_size) {
api/src/nn/modules/pooling.cpp:234:    const c10::optional<std::vector<int64_t>>& output_size) {
api/src/nn/modules/pooling.cpp:257:  if (options.output_size() == c10::nullopt && options.output_ratio() == c10::nullopt) {
api/src/nn/modules/pooling.cpp:263:  if (options.output_size() != c10::nullopt && options.output_ratio() != c10::nullopt) {
api/src/nn/modules/pooling.cpp:266:  if (options.output_ratio() != c10::nullopt) {
api/src/nn/modules/pooling.cpp:298:  if (options.output_size() == c10::nullopt && options.output_ratio() == c10::nullopt) {
api/src/nn/modules/pooling.cpp:304:  if (options.output_size() != c10::nullopt && options.output_ratio() != c10::nullopt) {
api/src/nn/modules/pooling.cpp:307:  if (options.output_ratio() != c10::nullopt) {
api/src/nn/modules/upsampling.cpp:17:  if (options.scale_factor() != c10::nullopt) {
api/src/nn/modules/upsampling.cpp:27:  if (c10::get_if<enumtype::kNearest>(&options.mode())) {
api/src/nn/modules/upsampling.cpp:29:  } else if (c10::get_if<enumtype::kLinear>(&options.mode())) {
api/src/nn/modules/upsampling.cpp:31:  } else if (c10::get_if<enumtype::kBilinear>(&options.mode())) {
api/src/nn/modules/upsampling.cpp:33:  } else if (c10::get_if<enumtype::kBicubic>(&options.mode())) {
api/src/nn/modules/upsampling.cpp:35:  } else if (c10::get_if<enumtype::kTrilinear>(&options.mode())) {
api/src/nn/modules/upsampling.cpp:45:      c10::nullopt);
api/src/nn/modules/embedding.cpp:21:  if (options.padding_idx() != c10::nullopt) {
api/src/nn/modules/embedding.cpp:43:  if (options.padding_idx() != c10::nullopt) {
api/src/nn/modules/embedding.cpp:52:  if (options.padding_idx() != c10::nullopt) {
api/src/nn/modules/embedding.cpp:55:  if (options.max_norm() != c10::nullopt) {
api/src/nn/modules/embedding.cpp:119:  if (options.max_norm() != c10::nullopt) {
api/src/nn/modules/embedding.cpp:131:  if (!c10::get_if<enumtype::kMean>(&options.mode())) {
api/src/nn/modules/transformer.cpp:66:  if (c10::get_if<enumtype::kGELU>(&options.activation())) {
api/src/nn/modules/transformer.cpp:69:  else if (c10::get_if<enumtype::kReLU>(&options.activation())) {
api/src/nn/modules/transformer.cpp:181:  if (c10::get_if<enumtype::kGELU>(&options.activation())) {
api/src/nn/modules/transformer.cpp:183:  } else if (c10::get_if<enumtype::kReLU>(&options.activation())) {
api/src/nn/modules/dropout.cpp:6:#include <c10/util/Exception.h>
api/src/data/datasets/mnist.cpp:6:#include <c10/util/Exception.h>
api/src/data/samplers/stream.cpp:5:#include <c10/util/Exception.h>
api/src/optim/rmsprop.cpp:80:      auto param_state = state_.find(c10::guts::to_string(p.unsafeGetTensorImpl()));
api/src/optim/rmsprop.cpp:94:        state_[c10::guts::to_string(p.unsafeGetTensorImpl())] = std::move(state);
api/src/optim/rmsprop.cpp:97:      auto& state = static_cast<RMSpropParamState&>(*state_[c10::guts::to_string(p.unsafeGetTensorImpl())]);
api/src/optim/rmsprop.cpp:163:      state_[c10::guts::to_string(params[idx].unsafeGetTensorImpl())] = std::move(state);
api/src/optim/optimizer.cpp:90:    TORCH_CHECK(state_.count(c10::guts::to_string(p.unsafeGetTensorImpl())) == 0,
api/src/optim/sgd.cpp:79:        auto param_state = state_.find(c10::guts::to_string(p.unsafeGetTensorImpl()));
api/src/optim/sgd.cpp:84:          state_[c10::guts::to_string(p.unsafeGetTensorImpl())] = std::move(state);
api/src/optim/sgd.cpp:121:      state_[c10::guts::to_string(params[idx].unsafeGetTensorImpl())] = std::move(state);
api/src/optim/adamw.cpp:78:      auto param_state = state_.find(c10::guts::to_string(p.unsafeGetTensorImpl()));
api/src/optim/adamw.cpp:98:        state_[c10::guts::to_string(p.unsafeGetTensorImpl())] = std::move(state);
api/src/optim/adamw.cpp:101:      auto& state = static_cast<AdamWParamState&>(*state_[c10::guts::to_string(p.unsafeGetTensorImpl())]);
api/src/optim/adamw.cpp:165:      state_[c10::guts::to_string(params.at(idx).unsafeGetTensorImpl())] = std::move(state);
api/src/optim/adagrad.cpp:71:      TORCH_INTERNAL_ASSERT(state_[c10::guts::to_string(p.unsafeGetTensorImpl())] != nullptr, "state found NULL for the Tensor ", p);
api/src/optim/adagrad.cpp:72:      auto& state = static_cast<AdagradParamState&>(*state_[c10::guts::to_string(p.unsafeGetTensorImpl())]);
api/src/optim/adagrad.cpp:135:      state_[c10::guts::to_string(params[idx].unsafeGetTensorImpl())] = std::move(state);
api/src/optim/adam.cpp:78:      auto param_state = state_.find(c10::guts::to_string(p.unsafeGetTensorImpl()));
api/src/optim/adam.cpp:93:        state_[c10::guts::to_string(p.unsafeGetTensorImpl())] = std::move(state);
api/src/optim/adam.cpp:96:      auto& state = static_cast<AdamParamState&>(*state_[c10::guts::to_string(p.unsafeGetTensorImpl())]);
api/src/optim/adam.cpp:164:      state_[c10::guts::to_string(params.at(idx).unsafeGetTensorImpl())] = std::move(state);
api/src/jit.cpp:15:      c10::nullopt,
api/src/optim/lbfgs.cpp:60:  auto isNull = [](const c10::optional<std::vector<Tensor>>& val) { return val == c10::nullopt; };
api/src/optim/lbfgs.cpp:87:  if(al() != c10::nullopt) {
api/src/optim/lbfgs.cpp:123:  if (_numel_cache == c10::nullopt) {
api/src/optim/lbfgs.cpp:176:  c10::optional<std::tuple<double, double>> bounds = c10::nullopt) {
api/src/optim/lbfgs.cpp:180:  if (bounds != c10::nullopt) {
api/src/optim/lbfgs.cpp:387:  auto param_state = state_.find(c10::guts::to_string(_params.at(0).unsafeGetTensorImpl()));
api/src/optim/lbfgs.cpp:389:    state_[c10::guts::to_string(_params.at(0).unsafeGetTensorImpl())] = std::make_unique<LBFGSParamState>();
api/src/optim/lbfgs.cpp:391:  auto& state = static_cast<LBFGSParamState&>(*state_[c10::guts::to_string(_params.at(0).unsafeGetTensorImpl())]);
api/src/optim/lbfgs.cpp:461:      if (state.al() == c10::nullopt) {
api/src/optim/lbfgs.cpp:508:    if (line_search_fn != c10::nullopt) {
api/src/optim/lbfgs.cpp:567:      "and al will be set to c10::nullopt because the old LBFGS optimizer didn't save these values."
api/src/optim/lbfgs.cpp:589:    state_[c10::guts::to_string(param_groups_.at(0).params().at(0).unsafeGetTensorImpl())] = std::move(state);
DynamicTypes.cpp:65:      at::dispatchKeyToBackend(c10::computeDispatchKey(scalarType, c10::nullopt, storage.device_type())),
cuda/nccl.h:6:#include <c10/cuda/CUDACachingAllocator.h>
cuda/nccl.h:7:#include <c10/util/Optional.h>
cuda/nccl.h:88:using stream_list = std::vector<c10::optional<at::cuda::CUDAStream>>;
cuda/nccl.h:156:    c10::ScalarType type,
cuda/Module.cpp:10:#include <c10/cuda/CUDAFunctions.h>
cuda/Module.cpp:11:#include <c10/cuda/CUDACachingAllocator.h>
cuda/Module.cpp:60:  c10::cuda::set_device(static_cast<c10::DeviceIndex>(device));
cuda/Module.cpp:80:  auto device = static_cast<int>(c10::cuda::current_device());
cuda/Module.cpp:123:  static const char* flags = C10_STRINGIZE(CUDA_ARCH_FLAGS);
cuda/Module.cpp:168:  auto device = static_cast<int>(c10::cuda::current_device());
cuda/Module.cpp:185:  c10::Allocator* allocator = THCState_getCudaHostAllocator(state);
cuda/Module.cpp:205:  void* mem = c10::cuda::CUDACachingAllocator::raw_alloc_with_stream(size, stream);
cuda/Module.cpp:213:  c10::cuda::CUDACachingAllocator::raw_delete(mem_ptr);
cuda/Module.cpp:221:  c10::cuda::device_synchronize();
cuda/Module.cpp:252:  auto mutex = c10::cuda::CUDACachingAllocator::getFreeMutex();
cuda/Module.cpp:273:  auto mutex = c10::cuda::CUDACachingAllocator::getFreeMutex();
cuda/Module.cpp:309:  c10::cuda::CUDACachingAllocator::setMemoryFraction(fraction, device);
cuda/Module.cpp:317:  c10::cuda::CUDACachingAllocator::emptyCache();
cuda/Module.cpp:328:  using c10::cuda::CUDACachingAllocator::StatType;
cuda/Module.cpp:329:  using c10::cuda::CUDACachingAllocator::Stat;
cuda/Module.cpp:330:  using c10::cuda::CUDACachingAllocator::StatArray;
cuda/Module.cpp:331:  using c10::cuda::CUDACachingAllocator::DeviceStats;
cuda/Module.cpp:354:  const DeviceStats stats = c10::cuda::CUDACachingAllocator::getDeviceStats(device);
cuda/Module.cpp:377:  c10::cuda::CUDACachingAllocator::resetAccumulatedStats(device);
cuda/Module.cpp:387:  c10::cuda::CUDACachingAllocator::resetPeakStats(device);
cuda/Module.cpp:396:  using c10::cuda::CUDACachingAllocator::SegmentInfo;
cuda/Module.cpp:397:  using c10::cuda::CUDACachingAllocator::BlockInfo;
cuda/Module.cpp:420:  const std::vector<SegmentInfo>& snapshot = c10::cuda::CUDACachingAllocator::snapshot();
cuda/Module.cpp:466:#if C10_ASAN_ENABLED
cuda/Module.cpp:511:  auto num_gpus = c10::cuda::device_count();
cuda/utils.cpp:23:std::vector<c10::optional<at::cuda::CUDAStream>> THPUtils_PySequence_to_CUDAStreamList(PyObject *obj) {
cuda/utils.cpp:32:  std::vector<c10::optional<at::cuda::CUDAStream>> streams;
cuda/Graph.cpp:10:// Cargo culted partially from csrc/distributed/c10d/init.cpp
cuda/comm.cpp:13:#include <c10/cuda/CUDAGuard.h>
cuda/comm.cpp:14:#include <c10/util/Optional.h>
cuda/comm.cpp:229:    const c10::optional<std::vector<c10::optional<at::cuda::CUDAStream>>>&
cuda/comm.cpp:309:    const c10::optional<std::vector<int64_t>>& chunk_sizes,
cuda/comm.cpp:311:    const c10::optional<std::vector<c10::optional<at::cuda::CUDAStream>>>&
cuda/comm.cpp:439:    c10::optional<int32_t> destination_index) {
cuda/Stream.cpp:8:#include <c10/cuda/CUDAGuard.h>
cuda/Stream.h:5:#include <c10/cuda/CUDAStream.h>
cuda/python_nccl.cpp:12:#include <c10/cuda/CUDAGuard.h>
cuda/python_nccl.cpp:54:static std::vector<c10::optional<at::cuda::CUDAStream>> unpack_streams(PyObject* obj, size_t size) {
cuda/python_nccl.cpp:56:    return std::vector<c10::optional<at::cuda::CUDAStream>>(size, c10::nullopt);
cuda/python_nccl.cpp:147:  std::vector<c10::optional<at::cuda::CUDAStream>> streams = unpack_streams(_streams, inputs.size());
cuda/python_comm.cpp:49:             c10::optional<std::vector<int64_t>> chunk_sizes,
cuda/python_comm.cpp:51:             c10::optional<py::object> py_streams) {
cuda/python_comm.cpp:52:            c10::optional<std::vector<c10::optional<at::cuda::CUDAStream>>> streams;
cuda/python_comm.cpp:71:             c10::optional<py::object> py_streams) {
cuda/python_comm.cpp:72:            c10::optional<std::vector<c10::optional<at::cuda::CUDAStream>>> streams;
cuda/python_comm.cpp:89:             c10::optional<int32_t> destination_index) {
cuda/Event.cpp:10:#include <c10/cuda/CUDAGuard.h>
cuda/nccl.cpp:6:#include <c10/cuda/CUDAGuard.h>
cuda/nccl.cpp:7:#include <c10/util/Exception.h>
cuda/nccl.cpp:8:#include <c10/util/hash.h>
cuda/nccl.cpp:74:ncclDataType_t to_nccl_data_type(c10::ScalarType type) {
cuda/nccl.cpp:126:    (c10::cuda::CUDACachingAllocator::getFreeMutex())->lock();
cuda/nccl.cpp:135:    (c10::cuda::CUDACachingAllocator::getFreeMutex())->unlock();
cuda/nccl.cpp:175:static std::unordered_map<device_list, NcclCommList, c10::hash<device_list>>
cuda/nccl.cpp:677:    c10::ScalarType _type,
cuda/comm.h:7:#include <c10/util/Optional.h>
cuda/comm.h:31:    const c10::optional<std::vector<c10::optional<at::cuda::CUDAStream>>>&
cuda/comm.h:32:        streams = c10::nullopt);
cuda/comm.h:37:    const c10::optional<std::vector<int64_t>>& chunk_sizes = c10::nullopt,
cuda/comm.h:39:    const c10::optional<std::vector<c10::optional<at::cuda::CUDAStream>>>&
cuda/comm.h:40:        streams = c10::nullopt);
cuda/comm.h:50:    c10::optional<int32_t> destination_index);
utils.h:14:#include <c10/cuda/CUDAStream.h>
utils.h:48:    (c10::complex<double>(PyComplex_RealAsDouble(object), PyComplex_ImagAsDouble(object))) :                       \
utils.h:49:    PyFloat_Check(object) ? (c10::complex<double>(PyFloat_AsDouble(object), 0)) :                                  \
utils.h:50:    PyLong_Check(object) ? (c10::complex<double>(PyLong_AsLongLong(object), 0)) :                                  \
utils.h:51:    (throw std::runtime_error("Could not parse real"), c10::complex<double>(0,0)))                                 \
utils.h:80:#define THPComplexFloatUtils_unpackReal(object)      (c10::complex<float>)THPUtils_unpackReal_COMPLEX(object)
utils.h:195:std::vector<c10::optional<at::cuda::CUDAStream>> THPUtils_PySequence_to_CUDAStreamList(PyObject *obj);
Exceptions.h:9:#include <c10/util/Exception.h>
Exceptions.h:15:#include <c10/util/StringUtil.h>
Exceptions.h:56:    catch (const c10::IndexError& e) {                               \
Exceptions.h:62:    catch (const c10::ValueError& e) {                               \
Exceptions.h:68:    catch (const c10::TypeError& e) {                               \
Exceptions.h:74:    catch (const c10::Error& e) {                                    \
Exceptions.h:303:  WarningMeta(const c10::SourceLocation& _source_location,
Exceptions.h:311:  const c10::SourceLocation source_location_;
autograd/profiler_cuda.cpp:2:#include <c10/cuda/CUDAGuard.h>
autograd/autograd.h:42:    c10::optional<bool> retain_graph = c10::nullopt,
autograd/autograd.h:74:    c10::optional<bool> retain_graph = c10::nullopt,
autograd/generated/InplaceOrViewTypeEverything.cpp:21:Tensor & __ilshift___Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:24:    at::redispatch::__ilshift__(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:29:Tensor & __ilshift___Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:32:    at::redispatch::__ilshift__(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:37:Tensor & __irshift___Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:40:    at::redispatch::__irshift__(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:45:Tensor & __irshift___Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:48:    at::redispatch::__irshift__(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:53:Tensor & _add_relu__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:56:    at::redispatch::_add_relu_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:61:Tensor & _add_relu_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:64:    at::redispatch::_add_relu_outf(ks & c10::after_InplaceOrView_keyset, self, other, alpha, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:69:Tensor & _addmv_impl_(c10::DispatchKeySet ks, Tensor & self, const Tensor & self2, const Tensor & mat, const Tensor & vec, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:72:    at::redispatch::_addmv_impl_(ks & c10::after_InplaceOrView_keyset, self, self2, mat, vec, beta, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:77:Tensor & _bmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat2, bool deterministic, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:80:    at::redispatch::_bmm_outf(ks & c10::after_InplaceOrView_keyset, self, mat2, deterministic, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:85:Tensor & _cat_out_out(c10::DispatchKeySet ks, TensorList tensors, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:88:    at::redispatch::_cat_outf(ks & c10::after_InplaceOrView_keyset, tensors, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:93:Tensor & _coalesced_(c10::DispatchKeySet ks, Tensor & self, bool coalesced) {
autograd/generated/InplaceOrViewTypeEverything.cpp:96:    at::redispatch::_coalesced_(ks & c10::after_InplaceOrView_keyset, self, coalesced);
autograd/generated/InplaceOrViewTypeEverything.cpp:101:Tensor & _compute_linear_combination_out_out(c10::DispatchKeySet ks, const Tensor & input, const Tensor & coefficients, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:104:    at::redispatch::_compute_linear_combination_outf(ks & c10::after_InplaceOrView_keyset, input, coefficients, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:109:Tensor & _cumprod_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:112:    at::redispatch::_cumprod_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:117:Tensor & _cumsum_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:120:    at::redispatch::_cumsum_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:125:Tensor & _fft_c2c_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, int64_t normalization, bool forward, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:128:    at::redispatch::_fft_c2c_outf(ks & c10::after_InplaceOrView_keyset, self, dim, normalization, forward, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:133:Tensor & _fft_c2r_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, int64_t normalization, int64_t last_dim_size, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:136:    at::redispatch::_fft_c2r_outf(ks & c10::after_InplaceOrView_keyset, self, dim, normalization, last_dim_size, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:141:Tensor & _fft_r2c_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, int64_t normalization, bool onesided, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:144:    at::redispatch::_fft_r2c_outf(ks & c10::after_InplaceOrView_keyset, self, dim, normalization, onesided, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:149:Tensor & _index_copy_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
autograd/generated/InplaceOrViewTypeEverything.cpp:152:    at::redispatch::_index_copy_(ks & c10::after_InplaceOrView_keyset, self, dim, index, source);
autograd/generated/InplaceOrViewTypeEverything.cpp:157:Tensor & _index_put_impl_(c10::DispatchKeySet ks, Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate, bool unsafe) {
autograd/generated/InplaceOrViewTypeEverything.cpp:160:    at::redispatch::_index_put_impl_(ks & c10::after_InplaceOrView_keyset, self, indices, values, accumulate, unsafe);
autograd/generated/InplaceOrViewTypeEverything.cpp:165:Tensor _indices(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:168:    return at::redispatch::_indices(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:173:Tensor & _linalg_inv_out_helper_(c10::DispatchKeySet ks, Tensor & self, Tensor & infos_lu, Tensor & infos_getri) {
autograd/generated/InplaceOrViewTypeEverything.cpp:176:    at::redispatch::_linalg_inv_out_helper_(ks & c10::after_InplaceOrView_keyset, self, infos_lu, infos_getri);
autograd/generated/InplaceOrViewTypeEverything.cpp:181:Tensor & _linalg_solve_out_helper_(c10::DispatchKeySet ks, Tensor & self, Tensor & other, Tensor & infos) {
autograd/generated/InplaceOrViewTypeEverything.cpp:184:    at::redispatch::_linalg_solve_out_helper_(ks & c10::after_InplaceOrView_keyset, self, other, infos);
autograd/generated/InplaceOrViewTypeEverything.cpp:189:Tensor & _logcumsumexp_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:192:    at::redispatch::_logcumsumexp_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:197:Tensor & _mkldnn_transpose_(c10::DispatchKeySet ks, Tensor & self, int64_t dim0, int64_t dim1) {
autograd/generated/InplaceOrViewTypeEverything.cpp:200:    at::redispatch::_mkldnn_transpose_(ks & c10::after_InplaceOrView_keyset, self, dim0, dim1);
autograd/generated/InplaceOrViewTypeEverything.cpp:205:std::tuple<Tensor &,Tensor &> _mode_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:208:    at::redispatch::_mode_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:214:Tensor & _stack_out_out(c10::DispatchKeySet ks, TensorList tensors, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:217:    at::redispatch::_stack_outf(ks & c10::after_InplaceOrView_keyset, tensors, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:222:Tensor _values(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:225:    return at::redispatch::_values(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:230:Tensor & abs_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:233:    at::redispatch::abs_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:238:Tensor & abs_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:241:    at::redispatch::abs_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:246:Tensor & acos_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:249:    at::redispatch::acos_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:254:Tensor & acos_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:257:    at::redispatch::acos_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:262:Tensor & acosh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:265:    at::redispatch::acosh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:270:Tensor & acosh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:273:    at::redispatch::acosh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:278:Tensor & adaptive_avg_pool2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:281:    at::redispatch::adaptive_avg_pool2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:286:Tensor & adaptive_avg_pool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:289:    at::redispatch::adaptive_avg_pool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:294:Tensor & adaptive_avg_pool3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:297:    at::redispatch::adaptive_avg_pool3d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:302:Tensor & adaptive_max_pool2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:305:    at::redispatch::adaptive_max_pool2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, indices, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:310:std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, Tensor & out, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:313:    at::redispatch::adaptive_max_pool2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, out, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:319:Tensor & adaptive_max_pool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:322:    at::redispatch::adaptive_max_pool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, indices, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:327:std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, Tensor & out, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:330:    at::redispatch::adaptive_max_pool3d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, out, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:336:Tensor & add__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:339:    at::redispatch::add_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:344:Tensor & add__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:347:    at::redispatch::add_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:352:Tensor & add_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:355:    at::redispatch::add_outf(ks & c10::after_InplaceOrView_keyset, self, other, alpha, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:360:Tensor & addbmm_(c10::DispatchKeySet ks, Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:363:    at::redispatch::addbmm_(ks & c10::after_InplaceOrView_keyset, self, batch1, batch2, beta, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:368:Tensor & addbmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:371:    at::redispatch::addbmm_outf(ks & c10::after_InplaceOrView_keyset, self, batch1, batch2, beta, alpha, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:376:Tensor & addcdiv_(c10::DispatchKeySet ks, Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:379:    at::redispatch::addcdiv_(ks & c10::after_InplaceOrView_keyset, self, tensor1, tensor2, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:384:Tensor & addcdiv_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:387:    at::redispatch::addcdiv_outf(ks & c10::after_InplaceOrView_keyset, self, tensor1, tensor2, value, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:392:Tensor & addcmul_(c10::DispatchKeySet ks, Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:395:    at::redispatch::addcmul_(ks & c10::after_InplaceOrView_keyset, self, tensor1, tensor2, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:400:Tensor & addcmul_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:403:    at::redispatch::addcmul_outf(ks & c10::after_InplaceOrView_keyset, self, tensor1, tensor2, value, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:408:Tensor & addmm_(c10::DispatchKeySet ks, Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:411:    at::redispatch::addmm_(ks & c10::after_InplaceOrView_keyset, self, mat1, mat2, beta, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:416:Tensor & addmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:419:    at::redispatch::addmm_outf(ks & c10::after_InplaceOrView_keyset, self, mat1, mat2, beta, alpha, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:424:Tensor & addmv_(c10::DispatchKeySet ks, Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:427:    at::redispatch::addmv_(ks & c10::after_InplaceOrView_keyset, self, mat, vec, beta, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:432:Tensor & addmv_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:435:    at::redispatch::addmv_outf(ks & c10::after_InplaceOrView_keyset, self, mat, vec, beta, alpha, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:440:Tensor & addr_(c10::DispatchKeySet ks, Tensor & self, const Tensor & vec1, const Tensor & vec2, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:443:    at::redispatch::addr_(ks & c10::after_InplaceOrView_keyset, self, vec1, vec2, beta, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:448:Tensor & addr_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & vec1, const Tensor & vec2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:451:    at::redispatch::addr_outf(ks & c10::after_InplaceOrView_keyset, self, vec1, vec2, beta, alpha, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:456:Tensor alias(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:459:    return at::redispatch::alias(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:470:Tensor & all_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:473:    at::redispatch::all_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:478:Tensor & amax_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:481:    at::redispatch::amax_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:486:Tensor & amin_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:489:    at::redispatch::amin_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:494:Tensor & angle_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:497:    at::redispatch::angle_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:502:Tensor & any_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:505:    at::redispatch::any_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:510:Tensor & arange_out_start_out(c10::DispatchKeySet ks, const Scalar & start, const Scalar & end, const Scalar & step, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:513:    at::redispatch::arange_outf(ks & c10::after_InplaceOrView_keyset, start, end, step, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:518:Tensor & argmax_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:521:    at::redispatch::argmax_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:526:Tensor & argmin_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:529:    at::redispatch::argmin_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:534:Tensor as_strided(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/InplaceOrViewTypeEverything.cpp:537:    return at::redispatch::as_strided(ks & c10::after_InplaceOrView_keyset, self, size, stride, storage_offset);
autograd/generated/InplaceOrViewTypeEverything.cpp:551:Tensor & as_strided_(c10::DispatchKeySet ks, Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/InplaceOrViewTypeEverything.cpp:554:    at::redispatch::as_strided_(ks & c10::after_InplaceOrView_keyset, self, size, stride, storage_offset);
autograd/generated/InplaceOrViewTypeEverything.cpp:559:Tensor & asin_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:562:    at::redispatch::asin_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:567:Tensor & asin_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:570:    at::redispatch::asin_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:575:Tensor & asinh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:578:    at::redispatch::asinh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:583:Tensor & asinh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:586:    at::redispatch::asinh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:591:Tensor & atan2_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:594:    at::redispatch::atan2_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:599:Tensor & atan2_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:602:    at::redispatch::atan2_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:607:Tensor & atan_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:610:    at::redispatch::atan_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:615:Tensor & atan_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:618:    at::redispatch::atan_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:623:Tensor & atanh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:626:    at::redispatch::atanh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:631:Tensor & atanh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:634:    at::redispatch::atanh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:639:Tensor & avg_pool2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:642:    at::redispatch::avg_pool2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:647:Tensor & avg_pool2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:650:    at::redispatch::avg_pool2d_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:655:Tensor & avg_pool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:658:    at::redispatch::avg_pool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:663:Tensor & avg_pool3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:666:    at::redispatch::avg_pool3d_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:671:Tensor & baddbmm_(c10::DispatchKeySet ks, Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:674:    at::redispatch::baddbmm_(ks & c10::after_InplaceOrView_keyset, self, batch1, batch2, beta, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:679:Tensor & baddbmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:682:    at::redispatch::baddbmm_outf(ks & c10::after_InplaceOrView_keyset, self, batch1, batch2, beta, alpha, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:687:Tensor & batch_norm_elemt_out_out(c10::DispatchKeySet ks, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:690:    at::redispatch::batch_norm_elemt_outf(ks & c10::after_InplaceOrView_keyset, input, weight, bias, mean, invstd, eps, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:695:Tensor & bernoulli__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & p, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:698:    at::redispatch::bernoulli_(ks & c10::after_InplaceOrView_keyset, self, p, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:703:Tensor & bernoulli__float(c10::DispatchKeySet ks, Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:706:    at::redispatch::bernoulli_(ks & c10::after_InplaceOrView_keyset, self, p, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:711:Tensor & bernoulli_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:714:    at::redispatch::bernoulli_outf(ks & c10::after_InplaceOrView_keyset, self, generator, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:719:Tensor & binary_cross_entropy_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:722:    at::redispatch::binary_cross_entropy_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, weight, reduction, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:727:Tensor & binary_cross_entropy_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:730:    at::redispatch::binary_cross_entropy_outf(ks & c10::after_InplaceOrView_keyset, self, target, weight, reduction, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:735:Tensor & bitwise_and_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:738:    at::redispatch::bitwise_and_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:743:Tensor & bitwise_and_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:746:    at::redispatch::bitwise_and_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:751:Tensor & bitwise_not_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:754:    at::redispatch::bitwise_not_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:759:Tensor & bitwise_or_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:762:    at::redispatch::bitwise_or_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:767:Tensor & bitwise_or_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:770:    at::redispatch::bitwise_or_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:775:Tensor & bitwise_xor_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:778:    at::redispatch::bitwise_xor_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:783:Tensor & bitwise_xor_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:786:    at::redispatch::bitwise_xor_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:791:Tensor & bmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat2, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:794:    at::redispatch::bmm_outf(ks & c10::after_InplaceOrView_keyset, self, mat2, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:799:Tensor & bucketize_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & boundaries, bool out_int32, bool right, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:802:    at::redispatch::bucketize_outf(ks & c10::after_InplaceOrView_keyset, self, boundaries, out_int32, right, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:807:Tensor & cat_out_out(c10::DispatchKeySet ks, TensorList tensors, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:810:    at::redispatch::cat_outf(ks & c10::after_InplaceOrView_keyset, tensors, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:815:Tensor & cauchy_(c10::DispatchKeySet ks, Tensor & self, double median, double sigma, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:818:    at::redispatch::cauchy_(ks & c10::after_InplaceOrView_keyset, self, median, sigma, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:823:Tensor & ceil_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:826:    at::redispatch::ceil_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:831:Tensor & ceil_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:834:    at::redispatch::ceil_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:839:Tensor & celu_(c10::DispatchKeySet ks, Tensor & self, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:842:    at::redispatch::celu_(ks & c10::after_InplaceOrView_keyset, self, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:847:Tensor & cholesky_inverse_out_out(c10::DispatchKeySet ks, const Tensor & self, bool upper, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:850:    at::redispatch::cholesky_inverse_outf(ks & c10::after_InplaceOrView_keyset, self, upper, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:855:Tensor & cholesky_out_out(c10::DispatchKeySet ks, const Tensor & self, bool upper, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:858:    at::redispatch::cholesky_outf(ks & c10::after_InplaceOrView_keyset, self, upper, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:863:Tensor & cholesky_solve_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & input2, bool upper, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:866:    at::redispatch::cholesky_solve_outf(ks & c10::after_InplaceOrView_keyset, self, input2, upper, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:871:Tensor & clamp_(c10::DispatchKeySet ks, Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max) {
autograd/generated/InplaceOrViewTypeEverything.cpp:874:    at::redispatch::clamp_(ks & c10::after_InplaceOrView_keyset, self, min, max);
autograd/generated/InplaceOrViewTypeEverything.cpp:879:Tensor & clamp_max_(c10::DispatchKeySet ks, Tensor & self, const Scalar & max) {
autograd/generated/InplaceOrViewTypeEverything.cpp:882:    at::redispatch::clamp_max_(ks & c10::after_InplaceOrView_keyset, self, max);
autograd/generated/InplaceOrViewTypeEverything.cpp:887:Tensor & clamp_max_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & max, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:890:    at::redispatch::clamp_max_outf(ks & c10::after_InplaceOrView_keyset, self, max, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:895:Tensor & clamp_min_(c10::DispatchKeySet ks, Tensor & self, const Scalar & min) {
autograd/generated/InplaceOrViewTypeEverything.cpp:898:    at::redispatch::clamp_min_(ks & c10::after_InplaceOrView_keyset, self, min);
autograd/generated/InplaceOrViewTypeEverything.cpp:903:Tensor & clamp_min_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & min, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:906:    at::redispatch::clamp_min_outf(ks & c10::after_InplaceOrView_keyset, self, min, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:911:Tensor & clamp_out_out(c10::DispatchKeySet ks, const Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:914:    at::redispatch::clamp_outf(ks & c10::after_InplaceOrView_keyset, self, min, max, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:919:Tensor & col2im_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:922:    at::redispatch::col2im_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, kernel_size, dilation, padding, stride, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:927:Tensor & col2im_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:930:    at::redispatch::col2im_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, kernel_size, dilation, padding, stride, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:935:Tensor & complex_out_out(c10::DispatchKeySet ks, const Tensor & real, const Tensor & imag, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:938:    at::redispatch::complex_outf(ks & c10::after_InplaceOrView_keyset, real, imag, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:943:Tensor & conj_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:946:    at::redispatch::conj_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:951:std::tuple<Tensor &,Tensor &,Tensor &> conv_depthwise3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewTypeEverything.cpp:954:    at::redispatch::conv_depthwise3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, dilation, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewTypeEverything.cpp:961:Tensor & copy_sparse_to_sparse_(c10::DispatchKeySet ks, Tensor & self, const Tensor & src, bool non_blocking) {
autograd/generated/InplaceOrViewTypeEverything.cpp:964:    at::redispatch::copy_sparse_to_sparse_(ks & c10::after_InplaceOrView_keyset, self, src, non_blocking);
autograd/generated/InplaceOrViewTypeEverything.cpp:969:Tensor & copysign__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:972:    at::redispatch::copysign_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:977:Tensor & copysign__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:980:    at::redispatch::copysign_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:985:Tensor & copysign_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:988:    at::redispatch::copysign_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:993:Tensor & cos_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:996:    at::redispatch::cos_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1001:Tensor & cos_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1004:    at::redispatch::cos_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1009:Tensor & cosh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1012:    at::redispatch::cosh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1017:Tensor & cosh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1020:    at::redispatch::cosh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1025:Tensor & cross_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1028:    at::redispatch::cross_outf(ks & c10::after_InplaceOrView_keyset, self, other, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1033:std::tuple<Tensor &,Tensor &> cummax_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1036:    at::redispatch::cummax_outf(ks & c10::after_InplaceOrView_keyset, self, dim, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:1042:std::tuple<Tensor &,Tensor &> cummin_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1045:    at::redispatch::cummin_outf(ks & c10::after_InplaceOrView_keyset, self, dim, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:1051:Tensor & cumprod_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1054:    at::redispatch::cumprod_(ks & c10::after_InplaceOrView_keyset, self, dim, dtype);
autograd/generated/InplaceOrViewTypeEverything.cpp:1059:Tensor & cumprod_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1062:    at::redispatch::cumprod_outf(ks & c10::after_InplaceOrView_keyset, self, dim, dtype, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1067:Tensor & cumsum_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1070:    at::redispatch::cumsum_(ks & c10::after_InplaceOrView_keyset, self, dim, dtype);
autograd/generated/InplaceOrViewTypeEverything.cpp:1075:Tensor & cumsum_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1078:    at::redispatch::cumsum_outf(ks & c10::after_InplaceOrView_keyset, self, dim, dtype, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1083:Tensor & deg2rad_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1086:    at::redispatch::deg2rad_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1091:Tensor & deg2rad_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1094:    at::redispatch::deg2rad_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1099:Tensor & diag_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t diagonal, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1102:    at::redispatch::diag_outf(ks & c10::after_InplaceOrView_keyset, self, diagonal, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1107:Tensor diagonal(c10::DispatchKeySet ks, const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1110:    return at::redispatch::diagonal(ks & c10::after_InplaceOrView_keyset, self, offset, dim1, dim2);
autograd/generated/InplaceOrViewTypeEverything.cpp:1121:Tensor & digamma_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1124:    at::redispatch::digamma_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1129:Tensor & digamma_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1132:    at::redispatch::digamma_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1137:Tensor & div__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1140:    at::redispatch::div_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1145:Tensor & div__Tensor_mode(c10::DispatchKeySet ks, Tensor & self, const Tensor & other, std::string rounding_mode) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1148:    at::redispatch::div_(ks & c10::after_InplaceOrView_keyset, self, other, rounding_mode);
autograd/generated/InplaceOrViewTypeEverything.cpp:1153:Tensor & div__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1156:    at::redispatch::div_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1161:Tensor & div__Scalar_mode(c10::DispatchKeySet ks, Tensor & self, const Scalar & other, std::string rounding_mode) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1164:    at::redispatch::div_(ks & c10::after_InplaceOrView_keyset, self, other, rounding_mode);
autograd/generated/InplaceOrViewTypeEverything.cpp:1169:Tensor & div_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1172:    at::redispatch::div_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1177:Tensor & div_out_out_mode(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, std::string rounding_mode, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1180:    at::redispatch::div_outf(ks & c10::after_InplaceOrView_keyset, self, other, rounding_mode, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1185:Tensor & dot_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & tensor, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1188:    at::redispatch::dot_outf(ks & c10::after_InplaceOrView_keyset, self, tensor, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1193:std::tuple<Tensor &,Tensor &> eig_out_e(c10::DispatchKeySet ks, const Tensor & self, bool eigenvectors, Tensor & e, Tensor & v) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1196:    at::redispatch::eig_outf(ks & c10::after_InplaceOrView_keyset, self, eigenvectors, e, v);
autograd/generated/InplaceOrViewTypeEverything.cpp:1202:Tensor & elu_(c10::DispatchKeySet ks, Tensor & self, const Scalar & alpha, const Scalar & scale, const Scalar & input_scale) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1205:    at::redispatch::elu_(ks & c10::after_InplaceOrView_keyset, self, alpha, scale, input_scale);
autograd/generated/InplaceOrViewTypeEverything.cpp:1210:Tensor & elu_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & alpha, const Scalar & scale, const Scalar & input_scale, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1213:    at::redispatch::elu_outf(ks & c10::after_InplaceOrView_keyset, self, alpha, scale, input_scale, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1218:Tensor & embedding_renorm_(c10::DispatchKeySet ks, Tensor & self, const Tensor & indices, double max_norm, double norm_type) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1221:    at::redispatch::embedding_renorm_(ks & c10::after_InplaceOrView_keyset, self, indices, max_norm, norm_type);
autograd/generated/InplaceOrViewTypeEverything.cpp:1226:Tensor & eq__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1229:    at::redispatch::eq_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1234:Tensor & eq__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1237:    at::redispatch::eq_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1242:Tensor & eq_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1245:    at::redispatch::eq_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1250:Tensor & eq_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1253:    at::redispatch::eq_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1258:Tensor & erf_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1261:    at::redispatch::erf_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1266:Tensor & erf_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1269:    at::redispatch::erf_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1274:Tensor & erfc_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1277:    at::redispatch::erfc_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1282:Tensor & erfc_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1285:    at::redispatch::erfc_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1290:Tensor & erfinv_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1293:    at::redispatch::erfinv_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1298:Tensor & erfinv_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1301:    at::redispatch::erfinv_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1306:Tensor & exp2_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1309:    at::redispatch::exp2_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1314:Tensor & exp2_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1317:    at::redispatch::exp2_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1322:Tensor & exp_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1325:    at::redispatch::exp_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1330:Tensor & exp_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1333:    at::redispatch::exp_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1338:Tensor expand(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef size, bool implicit) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1341:    return at::redispatch::expand(ks & c10::after_InplaceOrView_keyset, self, size, implicit);
autograd/generated/InplaceOrViewTypeEverything.cpp:1353:Tensor & expm1_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1356:    at::redispatch::expm1_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1361:Tensor & expm1_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1364:    at::redispatch::expm1_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1369:Tensor & exponential_(c10::DispatchKeySet ks, Tensor & self, double lambd, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1372:    at::redispatch::exponential_(ks & c10::after_InplaceOrView_keyset, self, lambd, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:1377:Tensor & eye_out_out(c10::DispatchKeySet ks, int64_t n, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1380:    at::redispatch::eye_outf(ks & c10::after_InplaceOrView_keyset, n, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1385:Tensor & eye_out_m_out(c10::DispatchKeySet ks, int64_t n, int64_t m, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1388:    at::redispatch::eye_outf(ks & c10::after_InplaceOrView_keyset, n, m, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1393:Tensor & fill__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1396:    at::redispatch::fill_(ks & c10::after_InplaceOrView_keyset, self, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:1401:Tensor & fill__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1404:    at::redispatch::fill_(ks & c10::after_InplaceOrView_keyset, self, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:1409:Tensor & floor_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1412:    at::redispatch::floor_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1417:Tensor & floor_divide__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1420:    at::redispatch::floor_divide_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1425:Tensor & floor_divide_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1428:    at::redispatch::floor_divide_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1433:Tensor & floor_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1436:    at::redispatch::floor_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1441:Tensor & fmax_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1444:    at::redispatch::fmax_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1449:Tensor & fmin_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1452:    at::redispatch::fmin_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1457:Tensor & fmod__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1460:    at::redispatch::fmod_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1465:Tensor & fmod__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1468:    at::redispatch::fmod_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1473:Tensor & fmod_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1476:    at::redispatch::fmod_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1481:Tensor & fmod_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1484:    at::redispatch::fmod_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1489:Tensor & frac_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1492:    at::redispatch::frac_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1497:Tensor & frac_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1500:    at::redispatch::frac_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1505:Tensor & fractional_max_pool2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1508:    at::redispatch::fractional_max_pool2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, output_size, indices, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:1513:std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out_output(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples, Tensor & output, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1516:    at::redispatch::fractional_max_pool2d_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, output_size, random_samples, output, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:1522:Tensor & fractional_max_pool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1525:    at::redispatch::fractional_max_pool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, output_size, indices, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:1530:std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out_output(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples, Tensor & output, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1533:    at::redispatch::fractional_max_pool3d_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, output_size, random_samples, output, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:1539:std::tuple<Tensor &,Tensor &> frexp_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & mantissa, Tensor & exponent) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1542:    at::redispatch::frexp_outf(ks & c10::after_InplaceOrView_keyset, self, mantissa, exponent);
autograd/generated/InplaceOrViewTypeEverything.cpp:1548:Tensor & gather_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1551:    at::redispatch::gather_outf(ks & c10::after_InplaceOrView_keyset, self, dim, index, sparse_grad, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1556:Tensor & gcd_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1559:    at::redispatch::gcd_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1564:Tensor & ge__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1567:    at::redispatch::ge_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1572:Tensor & ge__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1575:    at::redispatch::ge_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1580:Tensor & ge_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1583:    at::redispatch::ge_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1588:Tensor & ge_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1591:    at::redispatch::ge_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1596:Tensor & geometric_(c10::DispatchKeySet ks, Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1599:    at::redispatch::geometric_(ks & c10::after_InplaceOrView_keyset, self, p, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:1604:std::tuple<Tensor &,Tensor &> geqrf_out_a(c10::DispatchKeySet ks, const Tensor & self, Tensor & a, Tensor & tau) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1607:    at::redispatch::geqrf_outf(ks & c10::after_InplaceOrView_keyset, self, a, tau);
autograd/generated/InplaceOrViewTypeEverything.cpp:1613:Tensor & ger_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & vec2, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1616:    at::redispatch::ger_outf(ks & c10::after_InplaceOrView_keyset, self, vec2, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1621:Tensor & glu_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, int64_t dim, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1624:    at::redispatch::glu_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, dim, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:1629:Tensor & glu_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1632:    at::redispatch::glu_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1637:Tensor & gt__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1640:    at::redispatch::gt_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1645:Tensor & gt__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1648:    at::redispatch::gt_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1653:Tensor & gt_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1656:    at::redispatch::gt_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1661:Tensor & gt_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1664:    at::redispatch::gt_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1669:Tensor & hardsigmoid_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1672:    at::redispatch::hardsigmoid_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1677:Tensor & hardsigmoid_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1680:    at::redispatch::hardsigmoid_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1685:Tensor & hardswish_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1688:    at::redispatch::hardswish_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1693:Tensor & hardswish_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1696:    at::redispatch::hardswish_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1701:Tensor & hardtanh_(c10::DispatchKeySet ks, Tensor & self, const Scalar & min_val, const Scalar & max_val) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1704:    at::redispatch::hardtanh_(ks & c10::after_InplaceOrView_keyset, self, min_val, max_val);
autograd/generated/InplaceOrViewTypeEverything.cpp:1709:Tensor & hardtanh_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Scalar & min_val, const Scalar & max_val, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1712:    at::redispatch::hardtanh_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, min_val, max_val, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:1717:Tensor & hardtanh_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & min_val, const Scalar & max_val, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1720:    at::redispatch::hardtanh_outf(ks & c10::after_InplaceOrView_keyset, self, min_val, max_val, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1725:Tensor & heaviside_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & values, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1728:    at::redispatch::heaviside_outf(ks & c10::after_InplaceOrView_keyset, self, values, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1733:Tensor & histc_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t bins, const Scalar & min, const Scalar & max, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1736:    at::redispatch::histc_outf(ks & c10::after_InplaceOrView_keyset, self, bins, min, max, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1741:Tensor & hspmm_out_out(c10::DispatchKeySet ks, const Tensor & mat1, const Tensor & mat2, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1744:    at::redispatch::hspmm_outf(ks & c10::after_InplaceOrView_keyset, mat1, mat2, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1749:Tensor & huber_loss_backward_out_out(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double delta, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1752:    at::redispatch::huber_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, delta, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:1757:Tensor & huber_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, double delta, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1760:    at::redispatch::huber_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, delta, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1765:Tensor & hypot_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1768:    at::redispatch::hypot_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1773:Tensor & hypot_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1776:    at::redispatch::hypot_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1781:Tensor & i0_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1784:    at::redispatch::i0_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1789:Tensor & i0_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1792:    at::redispatch::i0_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1797:Tensor & igamma_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1800:    at::redispatch::igamma_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1805:Tensor & igamma_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1808:    at::redispatch::igamma_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1813:Tensor & igammac_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1816:    at::redispatch::igammac_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1821:Tensor & igammac_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1824:    at::redispatch::igammac_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1829:Tensor & im2col_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1832:    at::redispatch::im2col_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, input_size, kernel_size, dilation, padding, stride, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:1837:Tensor & im2col_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1840:    at::redispatch::im2col_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, dilation, padding, stride, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1845:Tensor & index_add_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1848:    at::redispatch::index_add_(ks & c10::after_InplaceOrView_keyset, self, dim, index, source);
autograd/generated/InplaceOrViewTypeEverything.cpp:1853:Tensor & index_copy_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1856:    at::redispatch::index_copy_(ks & c10::after_InplaceOrView_keyset, self, dim, index, source);
autograd/generated/InplaceOrViewTypeEverything.cpp:1861:Tensor & index_fill__int_Scalar(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Scalar & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1864:    at::redispatch::index_fill_(ks & c10::after_InplaceOrView_keyset, self, dim, index, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:1869:Tensor & index_fill__int_Tensor(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1872:    at::redispatch::index_fill_(ks & c10::after_InplaceOrView_keyset, self, dim, index, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:1877:Tensor & index_put_(c10::DispatchKeySet ks, Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1880:    at::redispatch::index_put_(ks & c10::after_InplaceOrView_keyset, self, indices, values, accumulate);
autograd/generated/InplaceOrViewTypeEverything.cpp:1885:Tensor & index_select_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, const Tensor & index, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1888:    at::redispatch::index_select_outf(ks & c10::after_InplaceOrView_keyset, self, dim, index, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1893:Tensor indices(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1896:    return at::redispatch::indices(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:1901:Tensor & inverse_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1904:    at::redispatch::inverse_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1909:Tensor & isneginf_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1912:    at::redispatch::isneginf_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1917:Tensor & isposinf_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1920:    at::redispatch::isposinf_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1925:std::tuple<Tensor &,Tensor &> kthvalue_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t k, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1928:    at::redispatch::kthvalue_outf(ks & c10::after_InplaceOrView_keyset, self, k, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:1934:Tensor & l1_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1937:    at::redispatch::l1_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:1942:Tensor & l1_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1945:    at::redispatch::l1_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1950:Tensor & lcm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1953:    at::redispatch::lcm_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1958:Tensor & le__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1961:    at::redispatch::le_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1966:Tensor & le__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1969:    at::redispatch::le_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:1974:Tensor & le_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1977:    at::redispatch::le_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1982:Tensor & le_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1985:    at::redispatch::le_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:1990:Tensor & leaky_relu_(c10::DispatchKeySet ks, Tensor & self, const Scalar & negative_slope) {
autograd/generated/InplaceOrViewTypeEverything.cpp:1993:    at::redispatch::leaky_relu_(ks & c10::after_InplaceOrView_keyset, self, negative_slope);
autograd/generated/InplaceOrViewTypeEverything.cpp:1998:Tensor & leaky_relu_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & negative_slope, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2001:    at::redispatch::leaky_relu_outf(ks & c10::after_InplaceOrView_keyset, self, negative_slope, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2006:Tensor & lerp__Scalar(c10::DispatchKeySet ks, Tensor & self, const Tensor & end, const Scalar & weight) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2009:    at::redispatch::lerp_(ks & c10::after_InplaceOrView_keyset, self, end, weight);
autograd/generated/InplaceOrViewTypeEverything.cpp:2014:Tensor & lerp__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & end, const Tensor & weight) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2017:    at::redispatch::lerp_(ks & c10::after_InplaceOrView_keyset, self, end, weight);
autograd/generated/InplaceOrViewTypeEverything.cpp:2022:Tensor & lerp_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & end, const Scalar & weight, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2025:    at::redispatch::lerp_outf(ks & c10::after_InplaceOrView_keyset, self, end, weight, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2030:Tensor & lerp_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & end, const Tensor & weight, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2033:    at::redispatch::lerp_outf(ks & c10::after_InplaceOrView_keyset, self, end, weight, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2038:Tensor & lgamma_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2041:    at::redispatch::lgamma_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:2046:Tensor & lgamma_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2049:    at::redispatch::lgamma_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2054:Tensor & linalg_cholesky_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2057:    at::redispatch::linalg_cholesky_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2062:std::tuple<Tensor &,Tensor &> linalg_eigh_out_eigvals(c10::DispatchKeySet ks, const Tensor & self, std::string UPLO, Tensor & eigvals, Tensor & eigvecs) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2065:    at::redispatch::linalg_eigh_outf(ks & c10::after_InplaceOrView_keyset, self, UPLO, eigvals, eigvecs);
autograd/generated/InplaceOrViewTypeEverything.cpp:2071:Tensor & linalg_eigvalsh_out_out(c10::DispatchKeySet ks, const Tensor & self, std::string UPLO, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2074:    at::redispatch::linalg_eigvalsh_outf(ks & c10::after_InplaceOrView_keyset, self, UPLO, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2079:Tensor & linalg_householder_product_out_out(c10::DispatchKeySet ks, const Tensor & input, const Tensor & tau, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2082:    at::redispatch::linalg_householder_product_outf(ks & c10::after_InplaceOrView_keyset, input, tau, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2087:Tensor & linalg_inv_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2090:    at::redispatch::linalg_inv_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2095:std::tuple<Tensor &,Tensor &> linalg_qr_out_out(c10::DispatchKeySet ks, const Tensor & self, std::string mode, Tensor & Q, Tensor & R) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2098:    at::redispatch::linalg_qr_outf(ks & c10::after_InplaceOrView_keyset, self, mode, Q, R);
autograd/generated/InplaceOrViewTypeEverything.cpp:2104:std::tuple<Tensor &,Tensor &> linalg_slogdet_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & sign, Tensor & logabsdet) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2107:    at::redispatch::linalg_slogdet_outf(ks & c10::after_InplaceOrView_keyset, self, sign, logabsdet);
autograd/generated/InplaceOrViewTypeEverything.cpp:2113:Tensor & linalg_solve_out_out(c10::DispatchKeySet ks, const Tensor & input, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2116:    at::redispatch::linalg_solve_outf(ks & c10::after_InplaceOrView_keyset, input, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2121:Tensor & linalg_vector_norm_out_out(c10::DispatchKeySet ks, const Tensor & self, const c10::optional<Scalar> & ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2124:    at::redispatch::linalg_vector_norm_outf(ks & c10::after_InplaceOrView_keyset, self, ord, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2129:Tensor & linspace_out_out(c10::DispatchKeySet ks, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2132:    at::redispatch::linspace_outf(ks & c10::after_InplaceOrView_keyset, start, end, steps, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2137:Tensor & log10_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2140:    at::redispatch::log10_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:2145:Tensor & log10_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2148:    at::redispatch::log10_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2153:Tensor & log1p_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2156:    at::redispatch::log1p_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:2161:Tensor & log1p_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2164:    at::redispatch::log1p_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2169:Tensor & log2_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2172:    at::redispatch::log2_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:2177:Tensor & log2_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2180:    at::redispatch::log2_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2185:Tensor & log_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2188:    at::redispatch::log_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:2193:Tensor & log_normal_(c10::DispatchKeySet ks, Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2196:    at::redispatch::log_normal_(ks & c10::after_InplaceOrView_keyset, self, mean, std, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:2201:Tensor & log_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2204:    at::redispatch::log_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2209:Tensor & log_sigmoid_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & buffer, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2212:    at::redispatch::log_sigmoid_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, buffer, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2217:std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, Tensor & output, Tensor & buffer) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2220:    at::redispatch::log_sigmoid_forward_outf(ks & c10::after_InplaceOrView_keyset, self, output, buffer);
autograd/generated/InplaceOrViewTypeEverything.cpp:2226:Tensor & logaddexp2_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2229:    at::redispatch::logaddexp2_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2234:Tensor & logaddexp_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2237:    at::redispatch::logaddexp_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2242:Tensor & logcumsumexp_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2245:    at::redispatch::logcumsumexp_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2250:Tensor & logical_and_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2253:    at::redispatch::logical_and_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2258:Tensor & logical_not_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2261:    at::redispatch::logical_not_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2266:Tensor & logical_or_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2269:    at::redispatch::logical_or_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2274:Tensor & logical_xor_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2277:    at::redispatch::logical_xor_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2282:Tensor & logit_(c10::DispatchKeySet ks, Tensor & self, c10::optional<double> eps) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2285:    at::redispatch::logit_(ks & c10::after_InplaceOrView_keyset, self, eps);
autograd/generated/InplaceOrViewTypeEverything.cpp:2290:Tensor & logit_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, c10::optional<double> eps, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2293:    at::redispatch::logit_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, eps, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2298:Tensor & logit_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<double> eps, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2301:    at::redispatch::logit_outf(ks & c10::after_InplaceOrView_keyset, self, eps, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2306:Tensor & logspace_out_out(c10::DispatchKeySet ks, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, double base, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2309:    at::redispatch::logspace_outf(ks & c10::after_InplaceOrView_keyset, start, end, steps, base, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2314:Tensor & logsumexp_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2317:    at::redispatch::logsumexp_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2322:std::tuple<Tensor &,Tensor &> lstsq_out_X(c10::DispatchKeySet ks, const Tensor & self, const Tensor & A, Tensor & X, Tensor & qr) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2325:    at::redispatch::lstsq_outf(ks & c10::after_InplaceOrView_keyset, self, A, X, qr);
autograd/generated/InplaceOrViewTypeEverything.cpp:2331:Tensor & lt__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2334:    at::redispatch::lt_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:2339:Tensor & lt__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2342:    at::redispatch::lt_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:2347:Tensor & lt_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2350:    at::redispatch::lt_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2355:Tensor & lt_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2358:    at::redispatch::lt_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2363:Tensor & lu_solve_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2366:    at::redispatch::lu_solve_outf(ks & c10::after_InplaceOrView_keyset, self, LU_data, LU_pivots, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2371:Tensor & masked_fill__Scalar(c10::DispatchKeySet ks, Tensor & self, const Tensor & mask, const Scalar & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2374:    at::redispatch::masked_fill_(ks & c10::after_InplaceOrView_keyset, self, mask, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:2379:Tensor & masked_fill__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & mask, const Tensor & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2382:    at::redispatch::masked_fill_(ks & c10::after_InplaceOrView_keyset, self, mask, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:2387:Tensor & masked_scatter_(c10::DispatchKeySet ks, Tensor & self, const Tensor & mask, const Tensor & source) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2390:    at::redispatch::masked_scatter_(ks & c10::after_InplaceOrView_keyset, self, mask, source);
autograd/generated/InplaceOrViewTypeEverything.cpp:2395:Tensor & masked_select_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mask, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2398:    at::redispatch::masked_select_outf(ks & c10::after_InplaceOrView_keyset, self, mask, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2403:std::tuple<Tensor &,Tensor &> max_out_dim_max(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & max, Tensor & max_values) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2406:    at::redispatch::max_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, max, max_values);
autograd/generated/InplaceOrViewTypeEverything.cpp:2412:Tensor & max_pool2d_with_indices_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2415:    at::redispatch::max_pool2d_with_indices_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2420:std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, Tensor & out, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2423:    at::redispatch::max_pool2d_with_indices_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:2429:Tensor & max_pool3d_with_indices_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2432:    at::redispatch::max_pool3d_with_indices_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2437:std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, Tensor & out, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2440:    at::redispatch::max_pool3d_with_indices_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:2446:Tensor & max_unpool2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2449:    at::redispatch::max_unpool2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, indices, output_size, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2454:Tensor & max_unpool2d_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & indices, IntArrayRef output_size, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2457:    at::redispatch::max_unpool2d_outf(ks & c10::after_InplaceOrView_keyset, self, indices, output_size, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2462:Tensor & max_unpool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2465:    at::redispatch::max_unpool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, indices, output_size, stride, padding, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2470:Tensor & max_unpool3d_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2473:    at::redispatch::max_unpool3d_outf(ks & c10::after_InplaceOrView_keyset, self, indices, output_size, stride, padding, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2478:Tensor & maximum_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2481:    at::redispatch::maximum_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2486:Tensor & mean_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2489:    at::redispatch::mean_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2494:std::tuple<Tensor &,Tensor &> median_out_dim_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2497:    at::redispatch::median_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:2503:std::tuple<Tensor &,Tensor &> min_out_dim_min(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & min, Tensor & min_indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2506:    at::redispatch::min_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, min, min_indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:2512:Tensor & minimum_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2515:    at::redispatch::minimum_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2520:Tensor & mm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat2, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2523:    at::redispatch::mm_outf(ks & c10::after_InplaceOrView_keyset, self, mat2, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2528:std::tuple<Tensor &,Tensor &> mode_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2531:    at::redispatch::mode_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:2537:Tensor & mse_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2540:    at::redispatch::mse_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2545:Tensor & mse_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2548:    at::redispatch::mse_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2553:Tensor & mul__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2556:    at::redispatch::mul_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:2561:Tensor & mul__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2564:    at::redispatch::mul_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:2569:Tensor & mul_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2572:    at::redispatch::mul_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2577:Tensor & multi_margin_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2580:    at::redispatch::multi_margin_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, p, margin, weight, reduction, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2585:Tensor & multi_margin_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2588:    at::redispatch::multi_margin_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, p, margin, weight, reduction, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2593:Tensor & multilabel_margin_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2596:    at::redispatch::multilabel_margin_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, is_target, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2601:std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & output, Tensor & is_target) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2604:    at::redispatch::multilabel_margin_loss_forward_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, output, is_target);
autograd/generated/InplaceOrViewTypeEverything.cpp:2610:Tensor & multinomial_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2613:    at::redispatch::multinomial_outf(ks & c10::after_InplaceOrView_keyset, self, num_samples, replacement, generator, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2618:Tensor & mv_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & vec, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2621:    at::redispatch::mv_outf(ks & c10::after_InplaceOrView_keyset, self, vec, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2626:Tensor & mvlgamma_(c10::DispatchKeySet ks, Tensor & self, int64_t p) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2629:    at::redispatch::mvlgamma_(ks & c10::after_InplaceOrView_keyset, self, p);
autograd/generated/InplaceOrViewTypeEverything.cpp:2634:Tensor & nan_to_num_(c10::DispatchKeySet ks, Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2637:    at::redispatch::nan_to_num_(ks & c10::after_InplaceOrView_keyset, self, nan, posinf, neginf);
autograd/generated/InplaceOrViewTypeEverything.cpp:2642:Tensor & nan_to_num_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2645:    at::redispatch::nan_to_num_outf(ks & c10::after_InplaceOrView_keyset, self, nan, posinf, neginf, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2650:std::tuple<Tensor &,Tensor &> nanmedian_out_dim_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2653:    at::redispatch::nanmedian_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:2659:Tensor & nansum_out_IntList_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2662:    at::redispatch::nansum_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2667:Tensor & narrow_copy_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, int64_t start, int64_t length, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2670:    at::redispatch::narrow_copy_outf(ks & c10::after_InplaceOrView_keyset, self, dim, start, length, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2675:std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_out_out(c10::DispatchKeySet ks, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, Tensor & out, Tensor & save_mean, Tensor & save_invstd) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2678:    at::redispatch::native_batch_norm_outf(ks & c10::after_InplaceOrView_keyset, input, weight, bias, running_mean, running_var, training, momentum, eps, out, save_mean, save_invstd);
autograd/generated/InplaceOrViewTypeEverything.cpp:2685:Tensor & ne__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2688:    at::redispatch::ne_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:2693:Tensor & ne__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2696:    at::redispatch::ne_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:2701:Tensor & ne_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2704:    at::redispatch::ne_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2709:Tensor & ne_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2712:    at::redispatch::ne_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2717:Tensor & neg_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2720:    at::redispatch::neg_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:2725:Tensor & neg_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2728:    at::redispatch::neg_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2733:Tensor & nextafter_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2736:    at::redispatch::nextafter_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:2741:Tensor & nextafter_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2744:    at::redispatch::nextafter_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2749:Tensor & nll_loss2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2752:    at::redispatch::nll_loss2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2757:std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2760:    at::redispatch::nll_loss2d_forward_outf(ks & c10::after_InplaceOrView_keyset, self, target, weight, reduction, ignore_index, output, total_weight);
autograd/generated/InplaceOrViewTypeEverything.cpp:2766:Tensor & nll_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2769:    at::redispatch::nll_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:2774:std::tuple<Tensor &,Tensor &> nll_loss_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2777:    at::redispatch::nll_loss_forward_outf(ks & c10::after_InplaceOrView_keyset, self, target, weight, reduction, ignore_index, output, total_weight);
autograd/generated/InplaceOrViewTypeEverything.cpp:2783:Tensor & nonzero_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2786:    at::redispatch::nonzero_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2791:Tensor & norm_out_dtype_out(c10::DispatchKeySet ks, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, ScalarType dtype, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2794:    at::redispatch::norm_outf(ks & c10::after_InplaceOrView_keyset, self, p, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2799:Tensor & norm_out_out(c10::DispatchKeySet ks, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2802:    at::redispatch::norm_outf(ks & c10::after_InplaceOrView_keyset, self, p, dim, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2807:Tensor & normal_(c10::DispatchKeySet ks, Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2810:    at::redispatch::normal_(ks & c10::after_InplaceOrView_keyset, self, mean, std, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:2815:Tensor & normal_out_Tensor_float_out(c10::DispatchKeySet ks, const Tensor & mean, double std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2818:    at::redispatch::normal_outf(ks & c10::after_InplaceOrView_keyset, mean, std, generator, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2823:Tensor & normal_out_float_Tensor_out(c10::DispatchKeySet ks, double mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2826:    at::redispatch::normal_outf(ks & c10::after_InplaceOrView_keyset, mean, std, generator, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2831:Tensor & normal_out_Tensor_Tensor_out(c10::DispatchKeySet ks, const Tensor & mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2834:    at::redispatch::normal_outf(ks & c10::after_InplaceOrView_keyset, mean, std, generator, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2839:Tensor & ormqr_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2842:    at::redispatch::ormqr_outf(ks & c10::after_InplaceOrView_keyset, self, input2, input3, left, transpose, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2847:Tensor permute(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dims) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2850:    return at::redispatch::permute(ks & c10::after_InplaceOrView_keyset, self, dims);
autograd/generated/InplaceOrViewTypeEverything.cpp:2862:Tensor & polar_out_out(c10::DispatchKeySet ks, const Tensor & abs, const Tensor & angle, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2865:    at::redispatch::polar_outf(ks & c10::after_InplaceOrView_keyset, abs, angle, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2870:Tensor & polygamma_out_out(c10::DispatchKeySet ks, int64_t n, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2873:    at::redispatch::polygamma_outf(ks & c10::after_InplaceOrView_keyset, n, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2878:Tensor & pow__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & exponent) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2881:    at::redispatch::pow_(ks & c10::after_InplaceOrView_keyset, self, exponent);
autograd/generated/InplaceOrViewTypeEverything.cpp:2886:Tensor & pow__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & exponent) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2889:    at::redispatch::pow_(ks & c10::after_InplaceOrView_keyset, self, exponent);
autograd/generated/InplaceOrViewTypeEverything.cpp:2894:Tensor & pow_out_Tensor_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & exponent, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2897:    at::redispatch::pow_outf(ks & c10::after_InplaceOrView_keyset, self, exponent, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2902:Tensor & pow_out_Scalar_out(c10::DispatchKeySet ks, const Scalar & self, const Tensor & exponent, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2905:    at::redispatch::pow_outf(ks & c10::after_InplaceOrView_keyset, self, exponent, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2910:Tensor & pow_out_Tensor_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & exponent, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2913:    at::redispatch::pow_outf(ks & c10::after_InplaceOrView_keyset, self, exponent, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2918:Tensor & prod_out_int_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2921:    at::redispatch::prod_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2926:Tensor & put_(c10::DispatchKeySet ks, Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2929:    at::redispatch::put_(ks & c10::after_InplaceOrView_keyset, self, index, source, accumulate);
autograd/generated/InplaceOrViewTypeEverything.cpp:2934:Tensor & rad2deg_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2937:    at::redispatch::rad2deg_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:2942:Tensor & rad2deg_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2945:    at::redispatch::rad2deg_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2950:Tensor & random__from(c10::DispatchKeySet ks, Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2953:    at::redispatch::random_(ks & c10::after_InplaceOrView_keyset, self, from, to, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:2958:Tensor & random__to(c10::DispatchKeySet ks, Tensor & self, int64_t to, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2961:    at::redispatch::random_(ks & c10::after_InplaceOrView_keyset, self, to, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:2966:Tensor & random_(c10::DispatchKeySet ks, Tensor & self, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2969:    at::redispatch::random_(ks & c10::after_InplaceOrView_keyset, self, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:2974:Tensor & randperm_out_generator_out(c10::DispatchKeySet ks, int64_t n, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2977:    at::redispatch::randperm_outf(ks & c10::after_InplaceOrView_keyset, n, generator, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2982:Tensor & range_out_out(c10::DispatchKeySet ks, const Scalar & start, const Scalar & end, const Scalar & step, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2985:    at::redispatch::range_outf(ks & c10::after_InplaceOrView_keyset, start, end, step, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:2990:Tensor & reciprocal_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:2993:    at::redispatch::reciprocal_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:2998:Tensor & reciprocal_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3001:    at::redispatch::reciprocal_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3006:Tensor & reflection_pad1d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3009:    at::redispatch::reflection_pad1d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3014:Tensor & reflection_pad1d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3017:    at::redispatch::reflection_pad1d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3022:Tensor & reflection_pad2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3025:    at::redispatch::reflection_pad2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3030:Tensor & reflection_pad2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3033:    at::redispatch::reflection_pad2d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3038:Tensor & relu_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3041:    at::redispatch::relu_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3046:Tensor & remainder__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3049:    at::redispatch::remainder_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:3054:Tensor & remainder__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3057:    at::redispatch::remainder_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:3062:Tensor & remainder_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3065:    at::redispatch::remainder_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3070:Tensor & remainder_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3073:    at::redispatch::remainder_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3078:Tensor & renorm_(c10::DispatchKeySet ks, Tensor & self, const Scalar & p, int64_t dim, const Scalar & maxnorm) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3081:    at::redispatch::renorm_(ks & c10::after_InplaceOrView_keyset, self, p, dim, maxnorm);
autograd/generated/InplaceOrViewTypeEverything.cpp:3086:Tensor & renorm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & p, int64_t dim, const Scalar & maxnorm, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3089:    at::redispatch::renorm_outf(ks & c10::after_InplaceOrView_keyset, self, p, dim, maxnorm, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3094:Tensor & replication_pad1d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3097:    at::redispatch::replication_pad1d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3102:Tensor & replication_pad1d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3105:    at::redispatch::replication_pad1d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3110:Tensor & replication_pad2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3113:    at::redispatch::replication_pad2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3118:Tensor & replication_pad2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3121:    at::redispatch::replication_pad2d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3126:Tensor & replication_pad3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3129:    at::redispatch::replication_pad3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3134:Tensor & replication_pad3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3137:    at::redispatch::replication_pad3d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3142:Tensor & round_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3145:    at::redispatch::round_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3150:Tensor & round_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3153:    at::redispatch::round_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3158:Tensor & rrelu_with_noise_(c10::DispatchKeySet ks, Tensor & self, const Tensor & noise, const Scalar & lower, const Scalar & upper, bool training, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3161:    at::redispatch::rrelu_with_noise_(ks & c10::after_InplaceOrView_keyset, self, noise, lower, upper, training, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:3166:Tensor & rrelu_with_noise_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & noise, const Scalar & lower, const Scalar & upper, bool training, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3169:    at::redispatch::rrelu_with_noise_outf(ks & c10::after_InplaceOrView_keyset, self, noise, lower, upper, training, generator, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3174:Tensor & rsqrt_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3177:    at::redispatch::rsqrt_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3182:Tensor & rsqrt_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3185:    at::redispatch::rsqrt_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3190:Tensor & scatter__src(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3193:    at::redispatch::scatter_(ks & c10::after_InplaceOrView_keyset, self, dim, index, src);
autograd/generated/InplaceOrViewTypeEverything.cpp:3198:Tensor & scatter__value(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Scalar & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3201:    at::redispatch::scatter_(ks & c10::after_InplaceOrView_keyset, self, dim, index, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:3206:Tensor & scatter__reduce(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & src, std::string reduce) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3209:    at::redispatch::scatter_(ks & c10::after_InplaceOrView_keyset, self, dim, index, src, reduce);
autograd/generated/InplaceOrViewTypeEverything.cpp:3214:Tensor & scatter__value_reduce(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Scalar & value, std::string reduce) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3217:    at::redispatch::scatter_(ks & c10::after_InplaceOrView_keyset, self, dim, index, value, reduce);
autograd/generated/InplaceOrViewTypeEverything.cpp:3222:Tensor & scatter_add_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3225:    at::redispatch::scatter_add_(ks & c10::after_InplaceOrView_keyset, self, dim, index, src);
autograd/generated/InplaceOrViewTypeEverything.cpp:3230:Tensor & searchsorted_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & sorted_sequence, const Tensor & self, bool out_int32, bool right, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3233:    at::redispatch::searchsorted_outf(ks & c10::after_InplaceOrView_keyset, sorted_sequence, self, out_int32, right, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3238:Tensor select_int(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, int64_t index) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3241:    return at::redispatch::select(ks & c10::after_InplaceOrView_keyset, self, dim, index);
autograd/generated/InplaceOrViewTypeEverything.cpp:3252:Tensor & set__source_Storage(c10::DispatchKeySet ks, Tensor & self, Storage source) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3255:    at::redispatch::set_(ks & c10::after_InplaceOrView_keyset, self, source);
autograd/generated/InplaceOrViewTypeEverything.cpp:3260:Tensor & set__source_Storage_storage_offset(c10::DispatchKeySet ks, Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3263:    at::redispatch::set_(ks & c10::after_InplaceOrView_keyset, self, source, storage_offset, size, stride);
autograd/generated/InplaceOrViewTypeEverything.cpp:3268:Tensor & set__source_Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & source) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3271:    at::redispatch::set_(ks & c10::after_InplaceOrView_keyset, self, source);
autograd/generated/InplaceOrViewTypeEverything.cpp:3276:Tensor & set_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3279:    at::redispatch::set_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3284:Tensor & sgn_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3287:    at::redispatch::sgn_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3292:Tensor & sgn_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3295:    at::redispatch::sgn_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3300:Tensor & sigmoid_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3303:    at::redispatch::sigmoid_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3308:Tensor & sigmoid_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & output, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3311:    at::redispatch::sigmoid_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3316:Tensor & sigmoid_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3319:    at::redispatch::sigmoid_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3324:Tensor & sign_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3327:    at::redispatch::sign_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3332:Tensor & sign_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3335:    at::redispatch::sign_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3340:Tensor & signbit_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3343:    at::redispatch::signbit_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3348:Tensor & silu_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3351:    at::redispatch::silu_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3356:Tensor & silu_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3359:    at::redispatch::silu_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3364:Tensor & sin_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3367:    at::redispatch::sin_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3372:Tensor & sin_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3375:    at::redispatch::sin_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3380:Tensor & sinc_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3383:    at::redispatch::sinc_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3388:Tensor & sinc_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3391:    at::redispatch::sinc_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3396:Tensor & sinh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3399:    at::redispatch::sinh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3404:Tensor & sinh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3407:    at::redispatch::sinh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3412:Tensor slice_Tensor(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, c10::optional<int64_t> start, c10::optional<int64_t> end, int64_t step) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3415:    return at::redispatch::slice(ks & c10::after_InplaceOrView_keyset, self, dim, start, end, step);
autograd/generated/InplaceOrViewTypeEverything.cpp:3428:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3431:    at::redispatch::slow_conv3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewTypeEverything.cpp:3438:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3441:    at::redispatch::slow_conv3d_forward_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3448:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out_grad_output(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3451:    at::redispatch::slow_conv_transpose2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewTypeEverything.cpp:3458:Tensor & slow_conv_transpose2d_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3461:    at::redispatch::slow_conv_transpose2d_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3466:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out_grad_output(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3469:    at::redispatch::slow_conv_transpose3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewTypeEverything.cpp:3476:Tensor & slow_conv_transpose3d_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3479:    at::redispatch::slow_conv_transpose3d_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3484:Tensor & smooth_l1_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double beta, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3487:    at::redispatch::smooth_l1_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, beta, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3492:Tensor & smooth_l1_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, double beta, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3495:    at::redispatch::smooth_l1_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, beta, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3500:Tensor & soft_margin_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3503:    at::redispatch::soft_margin_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3508:Tensor & soft_margin_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3511:    at::redispatch::soft_margin_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3516:Tensor & softplus_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Scalar & beta, const Scalar & threshold, const Tensor & output, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3519:    at::redispatch::softplus_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, beta, threshold, output, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3524:Tensor & softplus_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & beta, const Scalar & threshold, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3527:    at::redispatch::softplus_outf(ks & c10::after_InplaceOrView_keyset, self, beta, threshold, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3532:Tensor & softshrink_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Scalar & lambd, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3535:    at::redispatch::softshrink_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, lambd, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3540:Tensor & softshrink_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & lambd, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3543:    at::redispatch::softshrink_outf(ks & c10::after_InplaceOrView_keyset, self, lambd, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3548:std::tuple<Tensor &,Tensor &> solve_out_solution(c10::DispatchKeySet ks, const Tensor & self, const Tensor & A, Tensor & solution, Tensor & lu) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3551:    at::redispatch::solve_outf(ks & c10::after_InplaceOrView_keyset, self, A, solution, lu);
autograd/generated/InplaceOrViewTypeEverything.cpp:3557:std::tuple<Tensor &,Tensor &> sort_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool descending, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3560:    at::redispatch::sort_outf(ks & c10::after_InplaceOrView_keyset, self, dim, descending, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:3566:std::tuple<Tensor &,Tensor &> sort_out_values_stable(c10::DispatchKeySet ks, const Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3569:    at::redispatch::sort_outf(ks & c10::after_InplaceOrView_keyset, self, stable, dim, descending, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:3575:Tensor & sparse_resize_(c10::DispatchKeySet ks, Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3578:    at::redispatch::sparse_resize_(ks & c10::after_InplaceOrView_keyset, self, size, sparse_dim, dense_dim);
autograd/generated/InplaceOrViewTypeEverything.cpp:3583:Tensor & sparse_resize_and_clear_(c10::DispatchKeySet ks, Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3586:    at::redispatch::sparse_resize_and_clear_(ks & c10::after_InplaceOrView_keyset, self, size, sparse_dim, dense_dim);
autograd/generated/InplaceOrViewTypeEverything.cpp:3591:Tensor & special_entr_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3594:    at::redispatch::special_entr_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3599:std::vector<Tensor> split_Tensor(c10::DispatchKeySet ks, const Tensor & self, int64_t split_size, int64_t dim) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3602:    return at::redispatch::split(ks & c10::after_InplaceOrView_keyset, self, split_size, dim);
autograd/generated/InplaceOrViewTypeEverything.cpp:3608:std::vector<Tensor> split_with_sizes(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef split_sizes, int64_t dim) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3611:    return at::redispatch::split_with_sizes(ks & c10::after_InplaceOrView_keyset, self, split_sizes, dim);
autograd/generated/InplaceOrViewTypeEverything.cpp:3617:Tensor & sqrt_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3620:    at::redispatch::sqrt_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3625:Tensor & sqrt_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3628:    at::redispatch::sqrt_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3633:Tensor & square_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3636:    at::redispatch::square_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3641:Tensor squeeze(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3644:    return at::redispatch::squeeze(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3655:Tensor squeeze_dim(c10::DispatchKeySet ks, const Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3658:    return at::redispatch::squeeze(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewTypeEverything.cpp:3669:Tensor & squeeze_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3672:    at::redispatch::squeeze_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3677:Tensor & squeeze__dim(c10::DispatchKeySet ks, Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3680:    at::redispatch::squeeze_(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewTypeEverything.cpp:3685:Tensor & sspaddmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3688:    at::redispatch::sspaddmm_outf(ks & c10::after_InplaceOrView_keyset, self, mat1, mat2, beta, alpha, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3693:Tensor & stack_out_out(c10::DispatchKeySet ks, TensorList tensors, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3696:    at::redispatch::stack_outf(ks & c10::after_InplaceOrView_keyset, tensors, dim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3701:Tensor & std_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3704:    at::redispatch::std_outf(ks & c10::after_InplaceOrView_keyset, self, dim, unbiased, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3709:Tensor & sub__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3712:    at::redispatch::sub_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:3717:Tensor & sub__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3720:    at::redispatch::sub_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewTypeEverything.cpp:3725:Tensor & sub_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3728:    at::redispatch::sub_outf(ks & c10::after_InplaceOrView_keyset, self, other, alpha, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3733:Tensor & sum_out_IntList_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3736:    at::redispatch::sum_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3741:std::tuple<Tensor &,Tensor &> symeig_out_e(c10::DispatchKeySet ks, const Tensor & self, bool eigenvectors, bool upper, Tensor & e, Tensor & V) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3744:    at::redispatch::symeig_outf(ks & c10::after_InplaceOrView_keyset, self, eigenvectors, upper, e, V);
autograd/generated/InplaceOrViewTypeEverything.cpp:3750:Tensor t(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3753:    return at::redispatch::t(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3764:Tensor & t_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3767:    at::redispatch::t_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3772:Tensor & take_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & index, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3775:    at::redispatch::take_outf(ks & c10::after_InplaceOrView_keyset, self, index, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3780:Tensor & tan_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3783:    at::redispatch::tan_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3788:Tensor & tan_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3791:    at::redispatch::tan_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3796:Tensor & tanh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3799:    at::redispatch::tanh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3804:Tensor & tanh_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & output, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3807:    at::redispatch::tanh_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3812:Tensor & tanh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3815:    at::redispatch::tanh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3820:Tensor & tensordot_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3823:    at::redispatch::tensordot_outf(ks & c10::after_InplaceOrView_keyset, self, other, dims_self, dims_other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3828:std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3831:    at::redispatch::thnn_conv2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewTypeEverything.cpp:3838:std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3841:    at::redispatch::thnn_conv2d_forward_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:3848:std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & grad_input, Tensor & grad_weight) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3851:    at::redispatch::thnn_conv_depthwise2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, dilation, grad_input, grad_weight);
autograd/generated/InplaceOrViewTypeEverything.cpp:3857:Tensor & thnn_conv_depthwise2d_forward_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3860:    at::redispatch::thnn_conv_depthwise2d_forward_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, dilation, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3865:Tensor & threshold_(c10::DispatchKeySet ks, Tensor & self, const Scalar & threshold, const Scalar & value) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3868:    at::redispatch::threshold_(ks & c10::after_InplaceOrView_keyset, self, threshold, value);
autograd/generated/InplaceOrViewTypeEverything.cpp:3873:Tensor & threshold_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & threshold, const Scalar & value, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3876:    at::redispatch::threshold_outf(ks & c10::after_InplaceOrView_keyset, self, threshold, value, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3881:std::tuple<Tensor &,Tensor &> topk_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3884:    at::redispatch::topk_outf(ks & c10::after_InplaceOrView_keyset, self, k, dim, largest, sorted, values, indices);
autograd/generated/InplaceOrViewTypeEverything.cpp:3890:Tensor transpose_int(c10::DispatchKeySet ks, const Tensor & self, int64_t dim0, int64_t dim1) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3893:    return at::redispatch::transpose(ks & c10::after_InplaceOrView_keyset, self, dim0, dim1);
autograd/generated/InplaceOrViewTypeEverything.cpp:3904:Tensor & transpose_(c10::DispatchKeySet ks, Tensor & self, int64_t dim0, int64_t dim1) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3907:    at::redispatch::transpose_(ks & c10::after_InplaceOrView_keyset, self, dim0, dim1);
autograd/generated/InplaceOrViewTypeEverything.cpp:3912:std::tuple<Tensor &,Tensor &> triangular_solve_out_X(c10::DispatchKeySet ks, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular, Tensor & X, Tensor & M) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3915:    at::redispatch::triangular_solve_outf(ks & c10::after_InplaceOrView_keyset, self, A, upper, transpose, unitriangular, X, M);
autograd/generated/InplaceOrViewTypeEverything.cpp:3921:Tensor & tril_(c10::DispatchKeySet ks, Tensor & self, int64_t diagonal) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3924:    at::redispatch::tril_(ks & c10::after_InplaceOrView_keyset, self, diagonal);
autograd/generated/InplaceOrViewTypeEverything.cpp:3929:Tensor & tril_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t diagonal, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3932:    at::redispatch::tril_outf(ks & c10::after_InplaceOrView_keyset, self, diagonal, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3937:Tensor & triu_(c10::DispatchKeySet ks, Tensor & self, int64_t diagonal) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3940:    at::redispatch::triu_(ks & c10::after_InplaceOrView_keyset, self, diagonal);
autograd/generated/InplaceOrViewTypeEverything.cpp:3945:Tensor & triu_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t diagonal, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3948:    at::redispatch::triu_outf(ks & c10::after_InplaceOrView_keyset, self, diagonal, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3953:Tensor & trunc_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3956:    at::redispatch::trunc_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:3961:Tensor & trunc_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3964:    at::redispatch::trunc_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:3969:std::vector<Tensor> unbind_int(c10::DispatchKeySet ks, const Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3972:    return at::redispatch::unbind(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewTypeEverything.cpp:3978:Tensor unfold(c10::DispatchKeySet ks, const Tensor & self, int64_t dimension, int64_t size, int64_t step) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3981:    return at::redispatch::unfold(ks & c10::after_InplaceOrView_keyset, self, dimension, size, step);
autograd/generated/InplaceOrViewTypeEverything.cpp:3992:Tensor & uniform_(c10::DispatchKeySet ks, Tensor & self, double from, double to, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewTypeEverything.cpp:3995:    at::redispatch::uniform_(ks & c10::after_InplaceOrView_keyset, self, from, to, generator);
autograd/generated/InplaceOrViewTypeEverything.cpp:4000:Tensor unsqueeze(c10::DispatchKeySet ks, const Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4003:    return at::redispatch::unsqueeze(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewTypeEverything.cpp:4014:Tensor & unsqueeze_(c10::DispatchKeySet ks, Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4017:    at::redispatch::unsqueeze_(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewTypeEverything.cpp:4022:Tensor & upsample_bicubic2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4025:    at::redispatch::upsample_bicubic2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:4030:Tensor & upsample_bicubic2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4033:    at::redispatch::upsample_bicubic2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, align_corners, scales_h, scales_w, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4038:Tensor & upsample_bilinear2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4041:    at::redispatch::upsample_bilinear2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:4046:Tensor & upsample_bilinear2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4049:    at::redispatch::upsample_bilinear2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, align_corners, scales_h, scales_w, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4054:Tensor & upsample_linear1d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4057:    at::redispatch::upsample_linear1d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, align_corners, scales, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:4062:Tensor & upsample_linear1d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4065:    at::redispatch::upsample_linear1d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, align_corners, scales, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4070:Tensor & upsample_nearest1d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4073:    at::redispatch::upsample_nearest1d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, scales, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:4078:Tensor & upsample_nearest1d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4081:    at::redispatch::upsample_nearest1d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, scales, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4086:Tensor & upsample_nearest2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4089:    at::redispatch::upsample_nearest2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:4094:Tensor & upsample_nearest2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4097:    at::redispatch::upsample_nearest2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, scales_h, scales_w, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4102:Tensor & upsample_nearest3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4105:    at::redispatch::upsample_nearest3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, scales_d, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:4110:Tensor & upsample_nearest3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4113:    at::redispatch::upsample_nearest3d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, scales_d, scales_h, scales_w, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4118:Tensor & upsample_trilinear3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4121:    at::redispatch::upsample_trilinear3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewTypeEverything.cpp:4126:Tensor & upsample_trilinear3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4129:    at::redispatch::upsample_trilinear3d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, align_corners, scales_d, scales_h, scales_w, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4134:Tensor values(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4137:    return at::redispatch::values(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:4148:Tensor & var_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4151:    at::redispatch::var_outf(ks & c10::after_InplaceOrView_keyset, self, dim, unbiased, keepdim, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4156:Tensor & vdot_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4159:    at::redispatch::vdot_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4164:Tensor view(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef size) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4167:    return at::redispatch::view(ks & c10::after_InplaceOrView_keyset, self, size);
autograd/generated/InplaceOrViewTypeEverything.cpp:4179:Tensor view_dtype(c10::DispatchKeySet ks, const Tensor & self, ScalarType dtype) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4182:    return at::redispatch::view(ks & c10::after_InplaceOrView_keyset, self, dtype);
autograd/generated/InplaceOrViewTypeEverything.cpp:4187:Tensor view_as_complex(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4190:    return at::redispatch::view_as_complex(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:4201:Tensor view_as_real(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4204:    return at::redispatch::view_as_real(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewTypeEverything.cpp:4215:Tensor & xlogy__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4218:    at::redispatch::xlogy_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:4223:Tensor & xlogy__Scalar_Other(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4226:    at::redispatch::xlogy_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewTypeEverything.cpp:4231:Tensor & xlogy_out_OutTensor(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4234:    at::redispatch::xlogy_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4239:Tensor & xlogy_out_OutScalar_Self(c10::DispatchKeySet ks, const Scalar & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4242:    at::redispatch::xlogy_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4247:Tensor & xlogy_out_OutScalar_Other(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4250:    at::redispatch::xlogy_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewTypeEverything.cpp:4255:Tensor & zero_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewTypeEverything.cpp:4258:    at::redispatch::zero_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/VariableType_4.cpp:56:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:57:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:58:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:60:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableType_4.cpp:61:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:62:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableType_4.cpp:95:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:96:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:97:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:99:  c10::optional<Storage> dst__storage_saved =
autograd/generated/VariableType_4.cpp:100:    dst_.has_storage() ? c10::optional<Storage>(dst_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:101:  c10::intrusive_ptr<TensorImpl> dst__impl_saved;
autograd/generated/VariableType_4.cpp:137:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableType_4.cpp:138:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:139:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableType_4.cpp:141:  c10::optional<Storage> log_probs__storage_saved =
autograd/generated/VariableType_4.cpp:142:    log_probs_.has_storage() ? c10::optional<Storage>(log_probs_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:143:  c10::intrusive_ptr<TensorImpl> log_probs__impl_saved;
autograd/generated/VariableType_4.cpp:145:  c10::optional<Storage> targets__storage_saved =
autograd/generated/VariableType_4.cpp:146:    targets_.has_storage() ? c10::optional<Storage>(targets_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:147:  c10::intrusive_ptr<TensorImpl> targets__impl_saved;
autograd/generated/VariableType_4.cpp:149:  c10::optional<Storage> neg_log_likelihood__storage_saved =
autograd/generated/VariableType_4.cpp:150:    neg_log_likelihood_.has_storage() ? c10::optional<Storage>(neg_log_likelihood_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:151:  c10::intrusive_ptr<TensorImpl> neg_log_likelihood__impl_saved;
autograd/generated/VariableType_4.cpp:153:  c10::optional<Storage> log_alpha__storage_saved =
autograd/generated/VariableType_4.cpp:154:    log_alpha_.has_storage() ? c10::optional<Storage>(log_alpha_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:155:  c10::intrusive_ptr<TensorImpl> log_alpha__impl_saved;
autograd/generated/VariableType_4.cpp:201:  c10::optional<Storage> log_probs__storage_saved =
autograd/generated/VariableType_4.cpp:202:    log_probs_.has_storage() ? c10::optional<Storage>(log_probs_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:203:  c10::intrusive_ptr<TensorImpl> log_probs__impl_saved;
autograd/generated/VariableType_4.cpp:205:  c10::optional<Storage> targets__storage_saved =
autograd/generated/VariableType_4.cpp:206:    targets_.has_storage() ? c10::optional<Storage>(targets_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:207:  c10::intrusive_ptr<TensorImpl> targets__impl_saved;
autograd/generated/VariableType_4.cpp:238:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:239:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:240:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:242:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_4.cpp:243:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:244:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_4.cpp:246:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_4.cpp:247:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:248:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_4.cpp:280:  c10::optional<Storage> x1__storage_saved =
autograd/generated/VariableType_4.cpp:281:    x1_.has_storage() ? c10::optional<Storage>(x1_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:282:  c10::intrusive_ptr<TensorImpl> x1__impl_saved;
autograd/generated/VariableType_4.cpp:284:  c10::optional<Storage> x2__storage_saved =
autograd/generated/VariableType_4.cpp:285:    x2_.has_storage() ? c10::optional<Storage>(x2_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:286:  c10::intrusive_ptr<TensorImpl> x2__impl_saved;
autograd/generated/VariableType_4.cpp:321:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:324:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:325:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:352:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_4.cpp:355:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:356:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_4.cpp:385:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:388:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:389:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:416:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_4.cpp:419:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:420:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_4.cpp:449:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:452:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:453:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:480:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_4.cpp:483:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:484:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_4.cpp:514:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableType_4.cpp:517:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:518:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableType_4.cpp:521:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableType_4.cpp:524:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:525:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableType_4.cpp:567:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:570:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:571:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:598:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_4.cpp:601:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:602:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_4.cpp:634:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:635:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:636:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:638:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_4.cpp:639:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:640:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_4.cpp:642:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableType_4.cpp:643:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:644:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableType_4.cpp:678:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:679:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:680:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:710:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:711:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:712:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:714:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableType_4.cpp:715:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:716:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableType_4.cpp:750:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableType_4.cpp:751:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:752:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableType_4.cpp:754:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:755:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:756:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:758:  c10::optional<Storage> pdist__storage_saved =
autograd/generated/VariableType_4.cpp:759:    pdist_.has_storage() ? c10::optional<Storage>(pdist_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:760:  c10::intrusive_ptr<TensorImpl> pdist__impl_saved;
autograd/generated/VariableType_4.cpp:798:  c10::optional<Storage> condition__storage_saved =
autograd/generated/VariableType_4.cpp:799:    condition_.has_storage() ? c10::optional<Storage>(condition_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:800:  c10::intrusive_ptr<TensorImpl> condition__impl_saved;
autograd/generated/VariableType_4.cpp:802:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:803:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:804:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:806:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:807:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:808:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:832:Tensor _sample_dirichlet(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableType_4.cpp:842:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:843:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:844:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:883:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:884:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:885:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:887:  c10::optional<Storage> sparse__storage_saved =
autograd/generated/VariableType_4.cpp:888:    sparse_.has_storage() ? c10::optional<Storage>(sparse_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:889:  c10::intrusive_ptr<TensorImpl> sparse__impl_saved;
autograd/generated/VariableType_4.cpp:891:  c10::optional<Storage> dense__storage_saved =
autograd/generated/VariableType_4.cpp:892:    dense_.has_storage() ? c10::optional<Storage>(dense_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:893:  c10::intrusive_ptr<TensorImpl> dense__impl_saved;
autograd/generated/VariableType_4.cpp:918:Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableType_4.cpp:932:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_4.cpp:933:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:934:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_4.cpp:936:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_4.cpp:937:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:938:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_4.cpp:972:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:973:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:974:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1009:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1010:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1011:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1013:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:1014:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1015:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:1047:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:1050:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:1051:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:1076:Tensor _standard_gamma(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableType_4.cpp:1087:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1088:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1089:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1123:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1124:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1125:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1145:std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/VariableType_4.cpp:1165:  c10::optional<Storage> input_gates__storage_saved =
autograd/generated/VariableType_4.cpp:1166:    input_gates_.has_storage() ? c10::optional<Storage>(input_gates_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1167:  c10::intrusive_ptr<TensorImpl> input_gates__impl_saved;
autograd/generated/VariableType_4.cpp:1169:  c10::optional<Storage> hidden_gates__storage_saved =
autograd/generated/VariableType_4.cpp:1170:    hidden_gates_.has_storage() ? c10::optional<Storage>(hidden_gates_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1171:  c10::intrusive_ptr<TensorImpl> hidden_gates__impl_saved;
autograd/generated/VariableType_4.cpp:1173:  c10::optional<Storage> cx__storage_saved =
autograd/generated/VariableType_4.cpp:1174:    cx_.has_storage() ? c10::optional<Storage>(cx_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1175:  c10::intrusive_ptr<TensorImpl> cx__impl_saved;
autograd/generated/VariableType_4.cpp:1218:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1219:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1220:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1222:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableType_4.cpp:1223:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1224:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableType_4.cpp:1257:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1258:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1259:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1291:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1292:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1293:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1295:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:1296:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1297:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:1331:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1332:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1333:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1370:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:1371:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1372:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:1374:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1375:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1376:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1378:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_4.cpp:1379:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1380:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_4.cpp:1382:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_4.cpp:1383:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1384:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_4.cpp:1425:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1426:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1427:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1429:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:1430:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1431:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:1433:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_4.cpp:1434:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1435:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_4.cpp:1480:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1481:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1482:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1484:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableType_4.cpp:1485:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1486:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableType_4.cpp:1488:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableType_4.cpp:1489:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1490:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableType_4.cpp:1535:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1536:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1537:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1539:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableType_4.cpp:1540:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1541:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableType_4.cpp:1543:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableType_4.cpp:1544:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1545:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableType_4.cpp:1584:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1585:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1586:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1588:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableType_4.cpp:1589:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1590:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableType_4.cpp:1592:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableType_4.cpp:1593:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1594:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableType_4.cpp:1596:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:1597:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1598:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:1640:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1641:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1642:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1644:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableType_4.cpp:1645:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1646:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableType_4.cpp:1648:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_4.cpp:1649:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1650:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_4.cpp:1652:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:1653:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1654:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:1701:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1702:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1703:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1705:  c10::optional<Storage> mat__storage_saved =
autograd/generated/VariableType_4.cpp:1706:    mat_.has_storage() ? c10::optional<Storage>(mat_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1707:  c10::intrusive_ptr<TensorImpl> mat__impl_saved;
autograd/generated/VariableType_4.cpp:1709:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableType_4.cpp:1710:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1711:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableType_4.cpp:1756:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1757:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1758:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1760:  c10::optional<Storage> mat__storage_saved =
autograd/generated/VariableType_4.cpp:1761:    mat_.has_storage() ? c10::optional<Storage>(mat_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1762:  c10::intrusive_ptr<TensorImpl> mat__impl_saved;
autograd/generated/VariableType_4.cpp:1764:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableType_4.cpp:1765:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1766:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableType_4.cpp:1801:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1802:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1803:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1822:Tensor & argmax_out_out(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/VariableType_4.cpp:1826:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1827:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1828:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1830:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:1831:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1832:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:1864:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1865:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1866:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1868:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:1869:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1870:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:1872:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:1873:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1874:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:1911:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1912:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1913:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1915:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:1916:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1917:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:1949:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1950:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1951:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:1980:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:1981:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:1982:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2000:Tensor & avg_pool2d_out_out(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/VariableType_4.cpp:2013:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2014:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2015:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2017:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:2018:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2019:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:2040:Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) {
autograd/generated/VariableType_4.cpp:2055:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableType_4.cpp:2056:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2057:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableType_4.cpp:2059:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:2060:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2061:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:2063:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_4.cpp:2064:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2065:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_4.cpp:2067:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableType_4.cpp:2068:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2069:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableType_4.cpp:2071:  c10::optional<Storage> mean_dy__storage_saved =
autograd/generated/VariableType_4.cpp:2072:    mean_dy_.has_storage() ? c10::optional<Storage>(mean_dy_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2073:  c10::intrusive_ptr<TensorImpl> mean_dy__impl_saved;
autograd/generated/VariableType_4.cpp:2075:  c10::optional<Storage> mean_dy_xmu__storage_saved =
autograd/generated/VariableType_4.cpp:2076:    mean_dy_xmu_.has_storage() ? c10::optional<Storage>(mean_dy_xmu_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2077:  c10::intrusive_ptr<TensorImpl> mean_dy_xmu__impl_saved;
autograd/generated/VariableType_4.cpp:2111:std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, const Tensor & counts) {
autograd/generated/VariableType_4.cpp:2126:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:2127:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2128:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:2130:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_4.cpp:2131:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2132:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_4.cpp:2134:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableType_4.cpp:2135:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2136:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableType_4.cpp:2138:  c10::optional<Storage> counts__storage_saved =
autograd/generated/VariableType_4.cpp:2139:    counts_.has_storage() ? c10::optional<Storage>(counts_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2140:  c10::intrusive_ptr<TensorImpl> counts__impl_saved;
autograd/generated/VariableType_4.cpp:2169:Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/VariableType_4.cpp:2186:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2187:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2188:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2190:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_4.cpp:2191:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2192:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_4.cpp:2214:Tensor & binary_cross_entropy_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/VariableType_4.cpp:2229:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:2230:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2231:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:2233:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2234:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2235:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2237:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_4.cpp:2238:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2239:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_4.cpp:2241:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_4.cpp:2242:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2243:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_4.cpp:2283:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2284:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2285:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2287:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:2288:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2289:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:2324:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2325:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2326:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2328:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableType_4.cpp:2329:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2330:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableType_4.cpp:2366:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2367:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2368:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2400:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2401:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2402:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2420:Tensor & clamp_out_out(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max, Tensor & out) {
autograd/generated/VariableType_4.cpp:2433:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2434:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2435:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2437:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:2438:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2439:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:2460:Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format) {
autograd/generated/VariableType_4.cpp:2470:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2471:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2472:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2504:  c10::optional<Storage> real__storage_saved =
autograd/generated/VariableType_4.cpp:2505:    real_.has_storage() ? c10::optional<Storage>(real_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2506:  c10::intrusive_ptr<TensorImpl> real__impl_saved;
autograd/generated/VariableType_4.cpp:2508:  c10::optional<Storage> imag__storage_saved =
autograd/generated/VariableType_4.cpp:2509:    imag_.has_storage() ? c10::optional<Storage>(imag_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2510:  c10::intrusive_ptr<TensorImpl> imag__impl_saved;
autograd/generated/VariableType_4.cpp:2512:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:2513:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2514:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:2538:Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
autograd/generated/VariableType_4.cpp:2557:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:2558:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2559:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:2561:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:2562:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2563:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:2598:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2599:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2600:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2602:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:2603:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2604:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:2636:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2637:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2638:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2668:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2669:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2670:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2688:Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
autograd/generated/VariableType_4.cpp:2706:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2707:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2708:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2710:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:2711:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2712:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:2734:std::tuple<Tensor,Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) {
autograd/generated/VariableType_4.cpp:2757:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:2758:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2759:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:2761:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:2762:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2763:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:2815:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2816:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2817:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2819:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:2820:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2821:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:2823:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:2824:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2825:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:2862:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:2863:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2864:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:2866:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:2867:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2868:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:2903:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2904:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2905:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2907:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableType_4.cpp:2908:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2909:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableType_4.cpp:2945:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2946:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2947:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2982:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:2983:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2984:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:2986:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:2987:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:2988:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:3022:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3023:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3024:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3026:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:3027:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3028:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:3062:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3063:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3064:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3066:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:3067:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3068:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:3103:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3104:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3105:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3129:Tensor empty_memory_format(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/VariableType_4.cpp:3140:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3141:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3142:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3161:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3162:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3163:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3165:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:3166:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3167:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:3197:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3198:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3199:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3231:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3232:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3233:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3235:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:3236:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3237:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:3271:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3272:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3273:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3275:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:3276:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3277:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:3314:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3315:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3316:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3318:  c10::optional<Storage> scale__storage_saved =
autograd/generated/VariableType_4.cpp:3319:    scale_.has_storage() ? c10::optional<Storage>(scale_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3320:  c10::intrusive_ptr<TensorImpl> scale__impl_saved;
autograd/generated/VariableType_4.cpp:3322:  c10::optional<Storage> zero_point__storage_saved =
autograd/generated/VariableType_4.cpp:3323:    zero_point_.has_storage() ? c10::optional<Storage>(zero_point_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3324:  c10::intrusive_ptr<TensorImpl> zero_point__impl_saved;
autograd/generated/VariableType_4.cpp:3366:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3367:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3368:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3370:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:3371:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3372:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:3374:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:3375:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3376:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:3415:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:3416:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3417:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:3419:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3420:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3421:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3423:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_4.cpp:3424:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3425:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_4.cpp:3464:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3465:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3466:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3468:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_4.cpp:3469:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3470:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_4.cpp:3472:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:3473:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3474:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:3501:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3502:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3503:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3522:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3523:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3524:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3526:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:3527:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3528:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:3558:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3559:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3560:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3592:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3593:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3594:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3596:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:3597:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3598:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:3630:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3631:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3632:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3651:Tensor & geometric_(Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/VariableType_4.cpp:3662:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3663:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3664:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3696:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:3697:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3698:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:3700:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3701:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3702:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3738:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:3739:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3740:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:3742:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:3743:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3744:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:3746:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableType_4.cpp:3747:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3748:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableType_4.cpp:3790:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:3791:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3792:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:3794:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableType_4.cpp:3795:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3796:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableType_4.cpp:3821:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3822:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3823:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3842:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3843:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3844:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3846:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:3847:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3848:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:3878:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3879:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3880:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3912:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3913:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3914:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3916:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:3917:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3918:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:3950:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:3951:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3952:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:3954:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3955:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3956:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:3989:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:3990:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3991:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:3993:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:3994:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:3995:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4027:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4028:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4029:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4059:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableType_4.cpp:4060:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4061:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableType_4.cpp:4063:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_4.cpp:4064:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4065:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_4.cpp:4104:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4105:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4106:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4108:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:4109:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4110:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:4153:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4154:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4155:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4157:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:4158:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4159:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:4197:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4198:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4199:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4201:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:4202:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4203:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:4205:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:4206:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4207:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:4248:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4249:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4250:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4252:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:4253:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4254:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:4294:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4295:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4296:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4298:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:4299:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4300:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:4339:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4340:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4341:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4343:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_4.cpp:4344:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4345:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_4.cpp:4347:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableType_4.cpp:4348:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4349:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableType_4.cpp:4387:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4388:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4389:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4391:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_4.cpp:4392:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4393:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_4.cpp:4429:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4430:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4431:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4433:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_4.cpp:4434:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4435:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_4.cpp:4437:  c10::optional<Storage> value__storage_saved =
autograd/generated/VariableType_4.cpp:4438:    value_.has_storage() ? c10::optional<Storage>(value_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4439:  c10::intrusive_ptr<TensorImpl> value__impl_saved;
autograd/generated/VariableType_4.cpp:4473:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4474:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4475:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4500:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4501:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4502:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4504:  c10::optional<Storage> tensor__storage_saved =
autograd/generated/VariableType_4.cpp:4505:    tensor_.has_storage() ? c10::optional<Storage>(tensor_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4506:  c10::intrusive_ptr<TensorImpl> tensor__impl_saved;
autograd/generated/VariableType_4.cpp:4528:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4529:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4530:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4532:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:4533:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4534:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:4568:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:4569:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4570:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:4572:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4573:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4574:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4576:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_4.cpp:4577:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4578:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_4.cpp:4606:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4607:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4608:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4627:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4628:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4629:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4631:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:4632:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4633:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:4663:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4664:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4665:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4697:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4698:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4699:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4701:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:4702:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4703:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:4736:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4737:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4738:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4769:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4770:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4771:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4806:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4807:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4808:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4810:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableType_4.cpp:4811:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4812:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableType_4.cpp:4814:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:4815:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4816:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:4855:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4856:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4857:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4859:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableType_4.cpp:4860:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4861:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableType_4.cpp:4863:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:4864:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4865:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:4867:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:4868:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4869:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:4909:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4910:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4911:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4943:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4944:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4945:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4980:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:4981:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4982:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:4984:  c10::optional<Storage> sign__storage_saved =
autograd/generated/VariableType_4.cpp:4985:    sign_.has_storage() ? c10::optional<Storage>(sign_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4986:  c10::intrusive_ptr<TensorImpl> sign__impl_saved;
autograd/generated/VariableType_4.cpp:4988:  c10::optional<Storage> logabsdet__storage_saved =
autograd/generated/VariableType_4.cpp:4989:    logabsdet_.has_storage() ? c10::optional<Storage>(logabsdet_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:4990:  c10::intrusive_ptr<TensorImpl> logabsdet__impl_saved;
autograd/generated/VariableType_4.cpp:5028:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:5029:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5030:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:5032:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:5033:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5034:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:5069:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5070:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5071:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5101:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5102:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5103:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5132:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5133:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5134:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5156:Tensor logit_backward(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps) {
autograd/generated/VariableType_4.cpp:5167:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:5168:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5169:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:5171:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5172:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5173:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5198:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5199:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5200:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5219:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5220:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5221:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5223:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:5224:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5225:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:5255:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5256:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5257:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5289:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5290:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5291:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5293:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:5294:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5295:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:5329:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5330:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5331:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5333:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableType_4.cpp:5334:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5335:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableType_4.cpp:5367:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5368:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5369:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5401:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:5402:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5403:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:5405:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5406:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5407:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5409:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_4.cpp:5410:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5411:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_4.cpp:5450:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5451:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5452:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5454:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_4.cpp:5455:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5456:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_4.cpp:5458:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:5459:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5460:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:5499:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5500:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5501:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5534:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5535:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5536:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5571:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5572:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5573:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5575:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:5576:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5577:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:5599:Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableType_4.cpp:5618:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5619:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5620:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5622:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:5623:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5624:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:5657:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:5658:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5659:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:5661:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5662:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5663:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5685:Tensor mkldnn_linear(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias) {
autograd/generated/VariableType_4.cpp:5698:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5699:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5700:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5702:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:5703:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5704:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:5740:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5741:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5742:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5744:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_4.cpp:5745:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5746:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_4.cpp:5783:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:5784:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5785:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:5787:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5788:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5789:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5791:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_4.cpp:5792:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5793:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_4.cpp:5795:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_4.cpp:5796:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5797:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_4.cpp:5843:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5844:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5845:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5847:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:5848:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5849:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:5882:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5883:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5884:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5922:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5923:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5924:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5926:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:5927:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5928:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:5962:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:5963:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:5964:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:5998:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:5999:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6000:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:6002:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6003:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6004:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6006:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_4.cpp:6007:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6008:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_4.cpp:6010:  c10::optional<Storage> is_target__storage_saved =
autograd/generated/VariableType_4.cpp:6011:    is_target_.has_storage() ? c10::optional<Storage>(is_target_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6012:  c10::intrusive_ptr<TensorImpl> is_target__impl_saved;
autograd/generated/VariableType_4.cpp:6014:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_4.cpp:6015:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6016:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_4.cpp:6046:Tensor & multinomial_out_out(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableType_4.cpp:6050:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6051:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6052:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6054:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:6055:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6056:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:6074:Tensor & nan_to_num_out_out(const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf, Tensor & out) {
autograd/generated/VariableType_4.cpp:6087:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6088:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6089:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6091:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:6092:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6093:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:6125:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6126:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6127:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6164:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6165:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6166:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6188:std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_out_out(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, Tensor & out, Tensor & save_mean, Tensor & save_invstd) {
autograd/generated/VariableType_4.cpp:6203:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:6204:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6205:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:6207:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:6208:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6209:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:6211:  c10::optional<Storage> save_mean__storage_saved =
autograd/generated/VariableType_4.cpp:6212:    save_mean_.has_storage() ? c10::optional<Storage>(save_mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6213:  c10::intrusive_ptr<TensorImpl> save_mean__impl_saved;
autograd/generated/VariableType_4.cpp:6215:  c10::optional<Storage> save_invstd__storage_saved =
autograd/generated/VariableType_4.cpp:6216:    save_invstd_.has_storage() ? c10::optional<Storage>(save_invstd_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6217:  c10::intrusive_ptr<TensorImpl> save_invstd__impl_saved;
autograd/generated/VariableType_4.cpp:6246:std::tuple<Tensor,Tensor,Tensor> native_group_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, std::array<bool,3> output_mask) {
autograd/generated/VariableType_4.cpp:6262:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableType_4.cpp:6263:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6264:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableType_4.cpp:6266:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:6267:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6268:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:6270:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_4.cpp:6271:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6272:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_4.cpp:6274:  c10::optional<Storage> rstd__storage_saved =
autograd/generated/VariableType_4.cpp:6275:    rstd_.has_storage() ? c10::optional<Storage>(rstd_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6276:  c10::intrusive_ptr<TensorImpl> rstd__impl_saved;
autograd/generated/VariableType_4.cpp:6316:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6317:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6318:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6347:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6348:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6349:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6370:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6371:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6372:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6387:Tensor norm_ScalarOpt_dtype(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {
autograd/generated/VariableType_4.cpp:6399:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6400:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6401:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6435:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6436:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6437:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6459:Tensor norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
autograd/generated/VariableType_4.cpp:6473:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6474:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6475:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6497:Tensor norm_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
autograd/generated/VariableType_4.cpp:6511:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6512:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6513:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6535:Tensor normal_Tensor_float(const Tensor & mean, double std, c10::optional<Generator> generator) {
autograd/generated/VariableType_4.cpp:6546:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_4.cpp:6547:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6548:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_4.cpp:6567:Tensor normal_float_Tensor(double mean, const Tensor & std, c10::optional<Generator> generator) {
autograd/generated/VariableType_4.cpp:6578:  c10::optional<Storage> std__storage_saved =
autograd/generated/VariableType_4.cpp:6579:    std_.has_storage() ? c10::optional<Storage>(std_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6580:  c10::intrusive_ptr<TensorImpl> std__impl_saved;
autograd/generated/VariableType_4.cpp:6599:Tensor normal_Tensor_Tensor(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) {
autograd/generated/VariableType_4.cpp:6612:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_4.cpp:6613:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6614:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_4.cpp:6616:  c10::optional<Storage> std__storage_saved =
autograd/generated/VariableType_4.cpp:6617:    std_.has_storage() ? c10::optional<Storage>(std_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6618:  c10::intrusive_ptr<TensorImpl> std__impl_saved;
autograd/generated/VariableType_4.cpp:6640:Tensor & normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/VariableType_4.cpp:6651:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6652:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6653:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6685:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6686:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6687:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6689:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableType_4.cpp:6690:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6691:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableType_4.cpp:6693:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:6694:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6695:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:6719:Tensor poisson(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableType_4.cpp:6730:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6731:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6732:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6761:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6762:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6763:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6782:Tensor quantized_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & var, double eps, double output_scale, int64_t output_zero_point) {
autograd/generated/VariableType_4.cpp:6794:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:6795:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6796:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:6798:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_4.cpp:6799:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6800:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_4.cpp:6802:  c10::optional<Storage> var__storage_saved =
autograd/generated/VariableType_4.cpp:6803:    var_.has_storage() ? c10::optional<Storage>(var_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6804:  c10::intrusive_ptr<TensorImpl> var__impl_saved;
autograd/generated/VariableType_4.cpp:6839:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6840:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6841:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6873:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6874:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6875:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6877:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:6878:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6879:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:6903:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:6904:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6905:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:6933:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6934:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6935:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6937:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:6938:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6939:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:6973:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:6974:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6975:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:6977:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:6978:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:6979:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:7014:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7015:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7016:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7050:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7051:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7052:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7083:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:7084:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7085:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:7087:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7088:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7089:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7110:Tensor & rrelu_with_noise_out_out(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableType_4.cpp:7124:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7125:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7126:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7128:  c10::optional<Storage> noise__storage_saved =
autograd/generated/VariableType_4.cpp:7129:    noise_.has_storage() ? c10::optional<Storage>(noise_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7130:  c10::intrusive_ptr<TensorImpl> noise__impl_saved;
autograd/generated/VariableType_4.cpp:7132:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:7133:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7134:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:7170:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7171:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7172:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7174:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:7175:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7176:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:7209:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7210:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7211:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7243:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:7244:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7245:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:7247:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_4.cpp:7248:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7249:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_4.cpp:7284:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7285:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7286:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7288:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:7289:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7290:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:7324:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7325:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7326:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7328:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:7329:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7330:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:7362:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7363:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7364:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7394:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7395:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7396:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7425:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7426:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7427:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7457:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7458:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7459:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7490:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7491:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7492:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7515:std::tuple<Tensor,Tensor,Tensor> slow_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/VariableType_4.cpp:7534:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7535:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7536:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7538:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:7539:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7540:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:7587:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:7588:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7589:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:7591:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7592:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7593:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7595:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:7596:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7597:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:7624:Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/VariableType_4.cpp:7641:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7642:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7643:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7645:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:7646:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7647:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:7695:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:7696:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7697:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:7699:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7700:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7701:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7703:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:7704:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7705:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:7707:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableType_4.cpp:7708:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7709:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableType_4.cpp:7711:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableType_4.cpp:7712:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7713:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableType_4.cpp:7758:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7759:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7760:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7793:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:7794:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7795:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:7797:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7798:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7799:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7801:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_4.cpp:7802:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7803:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_4.cpp:7840:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:7843:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_4.cpp:7844:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_4.cpp:7882:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7883:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7884:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7886:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:7887:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7888:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:7890:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:7891:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7892:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:7931:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7932:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7933:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7981:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:7982:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7983:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:7985:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:7986:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7987:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:7989:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:7990:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7991:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:7993:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableType_4.cpp:7994:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7995:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableType_4.cpp:7997:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableType_4.cpp:7998:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:7999:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableType_4.cpp:8032:std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out_output(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/VariableType_4.cpp:8048:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8049:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8050:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8052:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_4.cpp:8053:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8054:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_4.cpp:8056:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_4.cpp:8057:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8058:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_4.cpp:8060:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableType_4.cpp:8061:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8062:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableType_4.cpp:8064:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableType_4.cpp:8065:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8066:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableType_4.cpp:8111:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:8112:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8113:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:8115:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8116:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8117:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8139:Tensor to_dense(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_4.cpp:8150:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8151:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8152:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8189:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8190:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8191:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8193:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableType_4.cpp:8194:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8195:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableType_4.cpp:8232:  c10::optional<Storage> grad_in__storage_saved =
autograd/generated/VariableType_4.cpp:8233:    grad_in_.has_storage() ? c10::optional<Storage>(grad_in_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8234:  c10::intrusive_ptr<TensorImpl> grad_in__impl_saved;
autograd/generated/VariableType_4.cpp:8266:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8267:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8268:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8287:Tensor upsample_bilinear2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_4.cpp:8301:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:8302:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8303:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:8322:Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_4.cpp:8337:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8338:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8339:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8358:Tensor & upsample_bilinear2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableType_4.cpp:8371:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:8372:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8373:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:8375:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_4.cpp:8376:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8377:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_4.cpp:8398:Tensor & upsample_linear1d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales, Tensor & out) {
autograd/generated/VariableType_4.cpp:8411:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8412:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8413:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8415:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:8416:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8417:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:8438:Tensor upsample_nearest1d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_4.cpp:8451:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_4.cpp:8452:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8453:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_4.cpp:8472:Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
autograd/generated/VariableType_4.cpp:8485:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8486:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8487:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8506:Tensor & upsample_nearest1d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/VariableType_4.cpp:8519:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_4.cpp:8520:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8521:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_4.cpp:8523:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_4.cpp:8524:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8525:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_4.cpp:8546:Tensor & upsample_nearest2d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableType_4.cpp:8559:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8560:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8561:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8563:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:8564:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8565:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_4.cpp:8598:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8599:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8600:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8633:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8634:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8635:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8668:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_4.cpp:8669:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8670:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_4.cpp:8672:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_4.cpp:8673:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8674:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_4.cpp:8676:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_4.cpp:8677:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_4.cpp:8678:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/InplaceOrViewType_1.cpp:21:Tensor & __ilshift___Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_1.cpp:24:    at::redispatch::__ilshift__(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:29:Tensor & __ilshift___Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:32:    at::redispatch::__ilshift__(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:37:Tensor & __irshift___Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_1.cpp:40:    at::redispatch::__irshift__(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:45:Tensor & __irshift___Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:48:    at::redispatch::__irshift__(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:53:Tensor & _addmv_impl_(c10::DispatchKeySet ks, Tensor & self, const Tensor & self2, const Tensor & mat, const Tensor & vec, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_1.cpp:56:    at::redispatch::_addmv_impl_(ks & c10::after_InplaceOrView_keyset, self, self2, mat, vec, beta, alpha);
autograd/generated/InplaceOrViewType_1.cpp:61:Tensor & _coalesced_(c10::DispatchKeySet ks, Tensor & self, bool coalesced) {
autograd/generated/InplaceOrViewType_1.cpp:64:    at::redispatch::_coalesced_(ks & c10::after_InplaceOrView_keyset, self, coalesced);
autograd/generated/InplaceOrViewType_1.cpp:69:Tensor & _compute_linear_combination_out_out(c10::DispatchKeySet ks, const Tensor & input, const Tensor & coefficients, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:72:    at::redispatch::_compute_linear_combination_outf(ks & c10::after_InplaceOrView_keyset, input, coefficients, out);
autograd/generated/InplaceOrViewType_1.cpp:77:Tensor & _fft_c2c_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, int64_t normalization, bool forward, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:80:    at::redispatch::_fft_c2c_outf(ks & c10::after_InplaceOrView_keyset, self, dim, normalization, forward, out);
autograd/generated/InplaceOrViewType_1.cpp:85:Tensor & _index_put_impl_(c10::DispatchKeySet ks, Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate, bool unsafe) {
autograd/generated/InplaceOrViewType_1.cpp:88:    at::redispatch::_index_put_impl_(ks & c10::after_InplaceOrView_keyset, self, indices, values, accumulate, unsafe);
autograd/generated/InplaceOrViewType_1.cpp:93:Tensor & _linalg_inv_out_helper_(c10::DispatchKeySet ks, Tensor & self, Tensor & infos_lu, Tensor & infos_getri) {
autograd/generated/InplaceOrViewType_1.cpp:96:    at::redispatch::_linalg_inv_out_helper_(ks & c10::after_InplaceOrView_keyset, self, infos_lu, infos_getri);
autograd/generated/InplaceOrViewType_1.cpp:101:Tensor & _linalg_solve_out_helper_(c10::DispatchKeySet ks, Tensor & self, Tensor & other, Tensor & infos) {
autograd/generated/InplaceOrViewType_1.cpp:104:    at::redispatch::_linalg_solve_out_helper_(ks & c10::after_InplaceOrView_keyset, self, other, infos);
autograd/generated/InplaceOrViewType_1.cpp:109:Tensor & _logcumsumexp_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:112:    at::redispatch::_logcumsumexp_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewType_1.cpp:117:std::tuple<Tensor &,Tensor &> _mode_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_1.cpp:120:    at::redispatch::_mode_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewType_1.cpp:126:Tensor _values(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:129:    return at::redispatch::_values(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:134:Tensor & abs_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:137:    at::redispatch::abs_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:142:Tensor & abs_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:145:    at::redispatch::abs_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:150:Tensor & acos_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:153:    at::redispatch::acos_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:158:Tensor & acos_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:161:    at::redispatch::acos_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:166:Tensor & acosh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:169:    at::redispatch::acosh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:174:Tensor & acosh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:177:    at::redispatch::acosh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:182:Tensor & adaptive_avg_pool2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:185:    at::redispatch::adaptive_avg_pool2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, out);
autograd/generated/InplaceOrViewType_1.cpp:190:Tensor & adaptive_max_pool2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:193:    at::redispatch::adaptive_max_pool2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, indices, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:198:std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, Tensor & out, Tensor & indices) {
autograd/generated/InplaceOrViewType_1.cpp:201:    at::redispatch::adaptive_max_pool2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, out, indices);
autograd/generated/InplaceOrViewType_1.cpp:207:Tensor & addcmul_(c10::DispatchKeySet ks, Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value) {
autograd/generated/InplaceOrViewType_1.cpp:210:    at::redispatch::addcmul_(ks & c10::after_InplaceOrView_keyset, self, tensor1, tensor2, value);
autograd/generated/InplaceOrViewType_1.cpp:215:Tensor & addcmul_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:218:    at::redispatch::addcmul_outf(ks & c10::after_InplaceOrView_keyset, self, tensor1, tensor2, value, out);
autograd/generated/InplaceOrViewType_1.cpp:223:Tensor & addmv_(c10::DispatchKeySet ks, Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_1.cpp:226:    at::redispatch::addmv_(ks & c10::after_InplaceOrView_keyset, self, mat, vec, beta, alpha);
autograd/generated/InplaceOrViewType_1.cpp:231:Tensor & addmv_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat, const Tensor & vec, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:234:    at::redispatch::addmv_outf(ks & c10::after_InplaceOrView_keyset, self, mat, vec, beta, alpha, out);
autograd/generated/InplaceOrViewType_1.cpp:239:Tensor & any_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:242:    at::redispatch::any_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewType_1.cpp:247:Tensor & arange_out_start_out(c10::DispatchKeySet ks, const Scalar & start, const Scalar & end, const Scalar & step, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:250:    at::redispatch::arange_outf(ks & c10::after_InplaceOrView_keyset, start, end, step, out);
autograd/generated/InplaceOrViewType_1.cpp:255:Tensor & argmax_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:258:    at::redispatch::argmax_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewType_1.cpp:263:Tensor & argmin_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:266:    at::redispatch::argmin_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewType_1.cpp:271:Tensor & as_strided_(c10::DispatchKeySet ks, Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/InplaceOrViewType_1.cpp:274:    at::redispatch::as_strided_(ks & c10::after_InplaceOrView_keyset, self, size, stride, storage_offset);
autograd/generated/InplaceOrViewType_1.cpp:279:Tensor & atan2_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:282:    at::redispatch::atan2_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:287:Tensor & atan2_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:290:    at::redispatch::atan2_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:295:Tensor & atan_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:298:    at::redispatch::atan_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:303:Tensor & atan_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:306:    at::redispatch::atan_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:311:Tensor & atanh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:314:    at::redispatch::atanh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:319:Tensor & atanh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:322:    at::redispatch::atanh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:327:Tensor & avg_pool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:330:    at::redispatch::avg_pool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:335:Tensor & avg_pool3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:338:    at::redispatch::avg_pool3d_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
autograd/generated/InplaceOrViewType_1.cpp:343:Tensor & bernoulli__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & p, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_1.cpp:346:    at::redispatch::bernoulli_(ks & c10::after_InplaceOrView_keyset, self, p, generator);
autograd/generated/InplaceOrViewType_1.cpp:351:Tensor & bernoulli__float(c10::DispatchKeySet ks, Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_1.cpp:354:    at::redispatch::bernoulli_(ks & c10::after_InplaceOrView_keyset, self, p, generator);
autograd/generated/InplaceOrViewType_1.cpp:359:Tensor & bernoulli_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:362:    at::redispatch::bernoulli_outf(ks & c10::after_InplaceOrView_keyset, self, generator, out);
autograd/generated/InplaceOrViewType_1.cpp:367:Tensor & binary_cross_entropy_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:370:    at::redispatch::binary_cross_entropy_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, weight, reduction, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:375:Tensor & binary_cross_entropy_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:378:    at::redispatch::binary_cross_entropy_outf(ks & c10::after_InplaceOrView_keyset, self, target, weight, reduction, out);
autograd/generated/InplaceOrViewType_1.cpp:383:Tensor & bmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat2, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:386:    at::redispatch::bmm_outf(ks & c10::after_InplaceOrView_keyset, self, mat2, out);
autograd/generated/InplaceOrViewType_1.cpp:391:Tensor & bucketize_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & boundaries, bool out_int32, bool right, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:394:    at::redispatch::bucketize_outf(ks & c10::after_InplaceOrView_keyset, self, boundaries, out_int32, right, out);
autograd/generated/InplaceOrViewType_1.cpp:399:Tensor & cat_out_out(c10::DispatchKeySet ks, TensorList tensors, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:402:    at::redispatch::cat_outf(ks & c10::after_InplaceOrView_keyset, tensors, dim, out);
autograd/generated/InplaceOrViewType_1.cpp:407:Tensor & cholesky_out_out(c10::DispatchKeySet ks, const Tensor & self, bool upper, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:410:    at::redispatch::cholesky_outf(ks & c10::after_InplaceOrView_keyset, self, upper, out);
autograd/generated/InplaceOrViewType_1.cpp:415:Tensor & cholesky_solve_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & input2, bool upper, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:418:    at::redispatch::cholesky_solve_outf(ks & c10::after_InplaceOrView_keyset, self, input2, upper, out);
autograd/generated/InplaceOrViewType_1.cpp:423:Tensor & clamp_max_(c10::DispatchKeySet ks, Tensor & self, const Scalar & max) {
autograd/generated/InplaceOrViewType_1.cpp:426:    at::redispatch::clamp_max_(ks & c10::after_InplaceOrView_keyset, self, max);
autograd/generated/InplaceOrViewType_1.cpp:431:Tensor & clamp_max_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & max, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:434:    at::redispatch::clamp_max_outf(ks & c10::after_InplaceOrView_keyset, self, max, out);
autograd/generated/InplaceOrViewType_1.cpp:439:Tensor & clamp_min_(c10::DispatchKeySet ks, Tensor & self, const Scalar & min) {
autograd/generated/InplaceOrViewType_1.cpp:442:    at::redispatch::clamp_min_(ks & c10::after_InplaceOrView_keyset, self, min);
autograd/generated/InplaceOrViewType_1.cpp:447:Tensor & clamp_min_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & min, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:450:    at::redispatch::clamp_min_outf(ks & c10::after_InplaceOrView_keyset, self, min, out);
autograd/generated/InplaceOrViewType_1.cpp:455:Tensor & col2im_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:458:    at::redispatch::col2im_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, kernel_size, dilation, padding, stride, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:463:Tensor & col2im_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:466:    at::redispatch::col2im_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, kernel_size, dilation, padding, stride, out);
autograd/generated/InplaceOrViewType_1.cpp:471:Tensor & complex_out_out(c10::DispatchKeySet ks, const Tensor & real, const Tensor & imag, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:474:    at::redispatch::complex_outf(ks & c10::after_InplaceOrView_keyset, real, imag, out);
autograd/generated/InplaceOrViewType_1.cpp:479:Tensor & conj_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:482:    at::redispatch::conj_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:487:Tensor & copysign__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:490:    at::redispatch::copysign_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:495:Tensor & copysign__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_1.cpp:498:    at::redispatch::copysign_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:503:Tensor & copysign_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:506:    at::redispatch::copysign_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:511:Tensor & cross_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:514:    at::redispatch::cross_outf(ks & c10::after_InplaceOrView_keyset, self, other, dim, out);
autograd/generated/InplaceOrViewType_1.cpp:519:Tensor & cumprod_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/InplaceOrViewType_1.cpp:522:    at::redispatch::cumprod_(ks & c10::after_InplaceOrView_keyset, self, dim, dtype);
autograd/generated/InplaceOrViewType_1.cpp:527:Tensor & cumprod_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:530:    at::redispatch::cumprod_outf(ks & c10::after_InplaceOrView_keyset, self, dim, dtype, out);
autograd/generated/InplaceOrViewType_1.cpp:535:Tensor & cumsum_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/InplaceOrViewType_1.cpp:538:    at::redispatch::cumsum_(ks & c10::after_InplaceOrView_keyset, self, dim, dtype);
autograd/generated/InplaceOrViewType_1.cpp:543:Tensor & cumsum_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:546:    at::redispatch::cumsum_outf(ks & c10::after_InplaceOrView_keyset, self, dim, dtype, out);
autograd/generated/InplaceOrViewType_1.cpp:551:Tensor diagonal(c10::DispatchKeySet ks, const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
autograd/generated/InplaceOrViewType_1.cpp:554:    return at::redispatch::diagonal(ks & c10::after_InplaceOrView_keyset, self, offset, dim1, dim2);
autograd/generated/InplaceOrViewType_1.cpp:565:Tensor & digamma_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:568:    at::redispatch::digamma_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:573:Tensor & digamma_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:576:    at::redispatch::digamma_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:581:Tensor & elu_(c10::DispatchKeySet ks, Tensor & self, const Scalar & alpha, const Scalar & scale, const Scalar & input_scale) {
autograd/generated/InplaceOrViewType_1.cpp:584:    at::redispatch::elu_(ks & c10::after_InplaceOrView_keyset, self, alpha, scale, input_scale);
autograd/generated/InplaceOrViewType_1.cpp:589:Tensor & elu_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & alpha, const Scalar & scale, const Scalar & input_scale, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:592:    at::redispatch::elu_outf(ks & c10::after_InplaceOrView_keyset, self, alpha, scale, input_scale, out);
autograd/generated/InplaceOrViewType_1.cpp:597:Tensor & eq__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_1.cpp:600:    at::redispatch::eq_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:605:Tensor & eq__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:608:    at::redispatch::eq_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:613:Tensor & eq_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:616:    at::redispatch::eq_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:621:Tensor & eq_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:624:    at::redispatch::eq_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:629:Tensor & erfc_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:632:    at::redispatch::erfc_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:637:Tensor & erfc_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:640:    at::redispatch::erfc_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:645:Tensor & erfinv_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:648:    at::redispatch::erfinv_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:653:Tensor & erfinv_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:656:    at::redispatch::erfinv_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:661:Tensor & floor_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:664:    at::redispatch::floor_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:669:Tensor & floor_divide__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:672:    at::redispatch::floor_divide_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:677:Tensor & floor_divide_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:680:    at::redispatch::floor_divide_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:685:Tensor & floor_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:688:    at::redispatch::floor_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:693:Tensor & fmax_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:696:    at::redispatch::fmax_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:701:Tensor & fmin_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:704:    at::redispatch::fmin_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:709:Tensor & fmod__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_1.cpp:712:    at::redispatch::fmod_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:717:Tensor & fmod__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:720:    at::redispatch::fmod_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:725:Tensor & fmod_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:728:    at::redispatch::fmod_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:733:Tensor & fmod_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:736:    at::redispatch::fmod_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:741:Tensor & frac_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:744:    at::redispatch::frac_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:749:Tensor & frac_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:752:    at::redispatch::frac_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:757:Tensor & fractional_max_pool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:760:    at::redispatch::fractional_max_pool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, output_size, indices, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:765:std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out_output(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples, Tensor & output, Tensor & indices) {
autograd/generated/InplaceOrViewType_1.cpp:768:    at::redispatch::fractional_max_pool3d_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, output_size, random_samples, output, indices);
autograd/generated/InplaceOrViewType_1.cpp:774:Tensor & gcd_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:777:    at::redispatch::gcd_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:782:Tensor & ge__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_1.cpp:785:    at::redispatch::ge_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:790:Tensor & ge__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:793:    at::redispatch::ge_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:798:Tensor & ge_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:801:    at::redispatch::ge_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:806:Tensor & ge_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:809:    at::redispatch::ge_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:814:Tensor & ger_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & vec2, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:817:    at::redispatch::ger_outf(ks & c10::after_InplaceOrView_keyset, self, vec2, out);
autograd/generated/InplaceOrViewType_1.cpp:822:Tensor & glu_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, int64_t dim, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:825:    at::redispatch::glu_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, dim, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:830:Tensor & glu_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:833:    at::redispatch::glu_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewType_1.cpp:838:Tensor & hardtanh_(c10::DispatchKeySet ks, Tensor & self, const Scalar & min_val, const Scalar & max_val) {
autograd/generated/InplaceOrViewType_1.cpp:841:    at::redispatch::hardtanh_(ks & c10::after_InplaceOrView_keyset, self, min_val, max_val);
autograd/generated/InplaceOrViewType_1.cpp:846:Tensor & hardtanh_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Scalar & min_val, const Scalar & max_val, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:849:    at::redispatch::hardtanh_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, min_val, max_val, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:854:Tensor & hardtanh_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & min_val, const Scalar & max_val, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:857:    at::redispatch::hardtanh_outf(ks & c10::after_InplaceOrView_keyset, self, min_val, max_val, out);
autograd/generated/InplaceOrViewType_1.cpp:862:Tensor & heaviside_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & values, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:865:    at::redispatch::heaviside_outf(ks & c10::after_InplaceOrView_keyset, self, values, out);
autograd/generated/InplaceOrViewType_1.cpp:870:Tensor & huber_loss_backward_out_out(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double delta, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:873:    at::redispatch::huber_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, delta, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:878:Tensor & huber_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, double delta, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:881:    at::redispatch::huber_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, delta, out);
autograd/generated/InplaceOrViewType_1.cpp:886:Tensor & hypot_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:889:    at::redispatch::hypot_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:894:Tensor & hypot_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:897:    at::redispatch::hypot_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:902:Tensor & igamma_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:905:    at::redispatch::igamma_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:910:Tensor & igamma_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:913:    at::redispatch::igamma_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:918:Tensor & im2col_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:921:    at::redispatch::im2col_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, input_size, kernel_size, dilation, padding, stride, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:926:Tensor & im2col_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:929:    at::redispatch::im2col_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, dilation, padding, stride, out);
autograd/generated/InplaceOrViewType_1.cpp:934:Tensor & index_add_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
autograd/generated/InplaceOrViewType_1.cpp:937:    at::redispatch::index_add_(ks & c10::after_InplaceOrView_keyset, self, dim, index, source);
autograd/generated/InplaceOrViewType_1.cpp:942:Tensor & index_copy_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
autograd/generated/InplaceOrViewType_1.cpp:945:    at::redispatch::index_copy_(ks & c10::after_InplaceOrView_keyset, self, dim, index, source);
autograd/generated/InplaceOrViewType_1.cpp:950:Tensor & index_fill__int_Scalar(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Scalar & value) {
autograd/generated/InplaceOrViewType_1.cpp:953:    at::redispatch::index_fill_(ks & c10::after_InplaceOrView_keyset, self, dim, index, value);
autograd/generated/InplaceOrViewType_1.cpp:958:Tensor & index_fill__int_Tensor(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {
autograd/generated/InplaceOrViewType_1.cpp:961:    at::redispatch::index_fill_(ks & c10::after_InplaceOrView_keyset, self, dim, index, value);
autograd/generated/InplaceOrViewType_1.cpp:966:Tensor & index_put_(c10::DispatchKeySet ks, Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) {
autograd/generated/InplaceOrViewType_1.cpp:969:    at::redispatch::index_put_(ks & c10::after_InplaceOrView_keyset, self, indices, values, accumulate);
autograd/generated/InplaceOrViewType_1.cpp:974:Tensor indices(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:977:    return at::redispatch::indices(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:982:Tensor & inverse_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:985:    at::redispatch::inverse_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:990:std::tuple<Tensor &,Tensor &> kthvalue_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t k, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_1.cpp:993:    at::redispatch::kthvalue_outf(ks & c10::after_InplaceOrView_keyset, self, k, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewType_1.cpp:999:Tensor & lcm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1002:    at::redispatch::lcm_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:1007:Tensor & linalg_cholesky_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1010:    at::redispatch::linalg_cholesky_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1015:Tensor & linalg_householder_product_out_out(c10::DispatchKeySet ks, const Tensor & input, const Tensor & tau, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1018:    at::redispatch::linalg_householder_product_outf(ks & c10::after_InplaceOrView_keyset, input, tau, out);
autograd/generated/InplaceOrViewType_1.cpp:1023:std::tuple<Tensor &,Tensor &> linalg_slogdet_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & sign, Tensor & logabsdet) {
autograd/generated/InplaceOrViewType_1.cpp:1026:    at::redispatch::linalg_slogdet_outf(ks & c10::after_InplaceOrView_keyset, self, sign, logabsdet);
autograd/generated/InplaceOrViewType_1.cpp:1032:Tensor & linalg_vector_norm_out_out(c10::DispatchKeySet ks, const Tensor & self, const c10::optional<Scalar> & ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1035:    at::redispatch::linalg_vector_norm_outf(ks & c10::after_InplaceOrView_keyset, self, ord, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewType_1.cpp:1040:Tensor & log2_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1043:    at::redispatch::log2_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1048:Tensor & log2_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1051:    at::redispatch::log2_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1056:Tensor & log_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1059:    at::redispatch::log_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1064:Tensor & log_normal_(c10::DispatchKeySet ks, Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_1.cpp:1067:    at::redispatch::log_normal_(ks & c10::after_InplaceOrView_keyset, self, mean, std, generator);
autograd/generated/InplaceOrViewType_1.cpp:1072:Tensor & log_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1075:    at::redispatch::log_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1080:Tensor & logaddexp2_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1083:    at::redispatch::logaddexp2_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:1088:Tensor & logaddexp_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1091:    at::redispatch::logaddexp_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:1096:Tensor & logspace_out_out(c10::DispatchKeySet ks, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, double base, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1099:    at::redispatch::logspace_outf(ks & c10::after_InplaceOrView_keyset, start, end, steps, base, out);
autograd/generated/InplaceOrViewType_1.cpp:1104:Tensor & logsumexp_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1107:    at::redispatch::logsumexp_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewType_1.cpp:1112:Tensor & lt__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_1.cpp:1115:    at::redispatch::lt_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:1120:Tensor & lt__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:1123:    at::redispatch::lt_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:1128:Tensor & lt_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1131:    at::redispatch::lt_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:1136:Tensor & lt_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1139:    at::redispatch::lt_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:1144:Tensor & masked_scatter_(c10::DispatchKeySet ks, Tensor & self, const Tensor & mask, const Tensor & source) {
autograd/generated/InplaceOrViewType_1.cpp:1147:    at::redispatch::masked_scatter_(ks & c10::after_InplaceOrView_keyset, self, mask, source);
autograd/generated/InplaceOrViewType_1.cpp:1152:Tensor & masked_select_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mask, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1155:    at::redispatch::masked_select_outf(ks & c10::after_InplaceOrView_keyset, self, mask, out);
autograd/generated/InplaceOrViewType_1.cpp:1160:std::tuple<Tensor &,Tensor &> max_out_dim_max(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & max, Tensor & max_values) {
autograd/generated/InplaceOrViewType_1.cpp:1163:    at::redispatch::max_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, max, max_values);
autograd/generated/InplaceOrViewType_1.cpp:1169:Tensor & max_pool2d_with_indices_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1172:    at::redispatch::max_pool2d_with_indices_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1177:std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, Tensor & out, Tensor & indices) {
autograd/generated/InplaceOrViewType_1.cpp:1180:    at::redispatch::max_pool2d_with_indices_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
autograd/generated/InplaceOrViewType_1.cpp:1186:Tensor & max_unpool2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1189:    at::redispatch::max_unpool2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, indices, output_size, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1194:Tensor & max_unpool2d_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & indices, IntArrayRef output_size, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1197:    at::redispatch::max_unpool2d_outf(ks & c10::after_InplaceOrView_keyset, self, indices, output_size, out);
autograd/generated/InplaceOrViewType_1.cpp:1202:Tensor & maximum_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1205:    at::redispatch::maximum_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:1210:std::tuple<Tensor &,Tensor &> median_out_dim_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_1.cpp:1213:    at::redispatch::median_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewType_1.cpp:1219:std::tuple<Tensor &,Tensor &> min_out_dim_min(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & min, Tensor & min_indices) {
autograd/generated/InplaceOrViewType_1.cpp:1222:    at::redispatch::min_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, min, min_indices);
autograd/generated/InplaceOrViewType_1.cpp:1228:Tensor & minimum_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1231:    at::redispatch::minimum_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:1236:Tensor & mm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat2, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1239:    at::redispatch::mm_outf(ks & c10::after_InplaceOrView_keyset, self, mat2, out);
autograd/generated/InplaceOrViewType_1.cpp:1244:Tensor & mul__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_1.cpp:1247:    at::redispatch::mul_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:1252:Tensor & mul__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_1.cpp:1255:    at::redispatch::mul_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_1.cpp:1260:Tensor & mul_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1263:    at::redispatch::mul_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_1.cpp:1268:Tensor & multi_margin_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1271:    at::redispatch::multi_margin_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, p, margin, weight, reduction, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1276:Tensor & multi_margin_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, const Scalar & p, const Scalar & margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1279:    at::redispatch::multi_margin_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, p, margin, weight, reduction, out);
autograd/generated/InplaceOrViewType_1.cpp:1284:Tensor & multilabel_margin_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1287:    at::redispatch::multilabel_margin_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, is_target, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1292:std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & output, Tensor & is_target) {
autograd/generated/InplaceOrViewType_1.cpp:1295:    at::redispatch::multilabel_margin_loss_forward_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, output, is_target);
autograd/generated/InplaceOrViewType_1.cpp:1301:Tensor & mvlgamma_(c10::DispatchKeySet ks, Tensor & self, int64_t p) {
autograd/generated/InplaceOrViewType_1.cpp:1304:    at::redispatch::mvlgamma_(ks & c10::after_InplaceOrView_keyset, self, p);
autograd/generated/InplaceOrViewType_1.cpp:1309:Tensor & nan_to_num_(c10::DispatchKeySet ks, Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/InplaceOrViewType_1.cpp:1312:    at::redispatch::nan_to_num_(ks & c10::after_InplaceOrView_keyset, self, nan, posinf, neginf);
autograd/generated/InplaceOrViewType_1.cpp:1317:Tensor & nan_to_num_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1320:    at::redispatch::nan_to_num_outf(ks & c10::after_InplaceOrView_keyset, self, nan, posinf, neginf, out);
autograd/generated/InplaceOrViewType_1.cpp:1325:Tensor & nansum_out_IntList_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1328:    at::redispatch::nansum_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewType_1.cpp:1333:Tensor & neg_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1336:    at::redispatch::neg_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1341:Tensor & neg_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1344:    at::redispatch::neg_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1349:Tensor & nll_loss2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1352:    at::redispatch::nll_loss2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1357:std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/InplaceOrViewType_1.cpp:1360:    at::redispatch::nll_loss2d_forward_outf(ks & c10::after_InplaceOrView_keyset, self, target, weight, reduction, ignore_index, output, total_weight);
autograd/generated/InplaceOrViewType_1.cpp:1366:Tensor & nll_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1369:    at::redispatch::nll_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1374:std::tuple<Tensor &,Tensor &> nll_loss_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/InplaceOrViewType_1.cpp:1377:    at::redispatch::nll_loss_forward_outf(ks & c10::after_InplaceOrView_keyset, self, target, weight, reduction, ignore_index, output, total_weight);
autograd/generated/InplaceOrViewType_1.cpp:1383:Tensor & norm_out_dtype_out(c10::DispatchKeySet ks, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, ScalarType dtype, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1386:    at::redispatch::norm_outf(ks & c10::after_InplaceOrView_keyset, self, p, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewType_1.cpp:1391:Tensor & norm_out_out(c10::DispatchKeySet ks, const Tensor & self, const c10::optional<Scalar> & p, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1394:    at::redispatch::norm_outf(ks & c10::after_InplaceOrView_keyset, self, p, dim, keepdim, out);
autograd/generated/InplaceOrViewType_1.cpp:1399:Tensor & polar_out_out(c10::DispatchKeySet ks, const Tensor & abs, const Tensor & angle, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1402:    at::redispatch::polar_outf(ks & c10::after_InplaceOrView_keyset, abs, angle, out);
autograd/generated/InplaceOrViewType_1.cpp:1407:Tensor & pow__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & exponent) {
autograd/generated/InplaceOrViewType_1.cpp:1410:    at::redispatch::pow_(ks & c10::after_InplaceOrView_keyset, self, exponent);
autograd/generated/InplaceOrViewType_1.cpp:1415:Tensor & pow__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & exponent) {
autograd/generated/InplaceOrViewType_1.cpp:1418:    at::redispatch::pow_(ks & c10::after_InplaceOrView_keyset, self, exponent);
autograd/generated/InplaceOrViewType_1.cpp:1423:Tensor & pow_out_Tensor_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & exponent, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1426:    at::redispatch::pow_outf(ks & c10::after_InplaceOrView_keyset, self, exponent, out);
autograd/generated/InplaceOrViewType_1.cpp:1431:Tensor & pow_out_Scalar_out(c10::DispatchKeySet ks, const Scalar & self, const Tensor & exponent, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1434:    at::redispatch::pow_outf(ks & c10::after_InplaceOrView_keyset, self, exponent, out);
autograd/generated/InplaceOrViewType_1.cpp:1439:Tensor & pow_out_Tensor_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & exponent, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1442:    at::redispatch::pow_outf(ks & c10::after_InplaceOrView_keyset, self, exponent, out);
autograd/generated/InplaceOrViewType_1.cpp:1447:Tensor & reciprocal_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1450:    at::redispatch::reciprocal_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1455:Tensor & reciprocal_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1458:    at::redispatch::reciprocal_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1463:Tensor & reflection_pad1d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1466:    at::redispatch::reflection_pad1d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1471:Tensor & reflection_pad1d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1474:    at::redispatch::reflection_pad1d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewType_1.cpp:1479:Tensor & relu_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1482:    at::redispatch::relu_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1487:Tensor & replication_pad2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1490:    at::redispatch::replication_pad2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1495:Tensor & replication_pad2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1498:    at::redispatch::replication_pad2d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewType_1.cpp:1503:Tensor & round_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1506:    at::redispatch::round_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1511:Tensor & round_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1514:    at::redispatch::round_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1519:Tensor & rrelu_with_noise_(c10::DispatchKeySet ks, Tensor & self, const Tensor & noise, const Scalar & lower, const Scalar & upper, bool training, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_1.cpp:1522:    at::redispatch::rrelu_with_noise_(ks & c10::after_InplaceOrView_keyset, self, noise, lower, upper, training, generator);
autograd/generated/InplaceOrViewType_1.cpp:1527:Tensor & rrelu_with_noise_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & noise, const Scalar & lower, const Scalar & upper, bool training, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1530:    at::redispatch::rrelu_with_noise_outf(ks & c10::after_InplaceOrView_keyset, self, noise, lower, upper, training, generator, out);
autograd/generated/InplaceOrViewType_1.cpp:1535:Tensor & rsqrt_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1538:    at::redispatch::rsqrt_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1543:Tensor & rsqrt_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1546:    at::redispatch::rsqrt_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1551:Tensor & scatter__src(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
autograd/generated/InplaceOrViewType_1.cpp:1554:    at::redispatch::scatter_(ks & c10::after_InplaceOrView_keyset, self, dim, index, src);
autograd/generated/InplaceOrViewType_1.cpp:1559:Tensor & scatter__value(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Scalar & value) {
autograd/generated/InplaceOrViewType_1.cpp:1562:    at::redispatch::scatter_(ks & c10::after_InplaceOrView_keyset, self, dim, index, value);
autograd/generated/InplaceOrViewType_1.cpp:1567:Tensor & scatter__reduce(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & src, std::string reduce) {
autograd/generated/InplaceOrViewType_1.cpp:1570:    at::redispatch::scatter_(ks & c10::after_InplaceOrView_keyset, self, dim, index, src, reduce);
autograd/generated/InplaceOrViewType_1.cpp:1575:Tensor & scatter__value_reduce(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Scalar & value, std::string reduce) {
autograd/generated/InplaceOrViewType_1.cpp:1578:    at::redispatch::scatter_(ks & c10::after_InplaceOrView_keyset, self, dim, index, value, reduce);
autograd/generated/InplaceOrViewType_1.cpp:1583:Tensor & scatter_add_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
autograd/generated/InplaceOrViewType_1.cpp:1586:    at::redispatch::scatter_add_(ks & c10::after_InplaceOrView_keyset, self, dim, index, src);
autograd/generated/InplaceOrViewType_1.cpp:1591:Tensor & set__source_Storage(c10::DispatchKeySet ks, Tensor & self, Storage source) {
autograd/generated/InplaceOrViewType_1.cpp:1594:    at::redispatch::set_(ks & c10::after_InplaceOrView_keyset, self, source);
autograd/generated/InplaceOrViewType_1.cpp:1599:Tensor & set__source_Storage_storage_offset(c10::DispatchKeySet ks, Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) {
autograd/generated/InplaceOrViewType_1.cpp:1602:    at::redispatch::set_(ks & c10::after_InplaceOrView_keyset, self, source, storage_offset, size, stride);
autograd/generated/InplaceOrViewType_1.cpp:1607:Tensor & set__source_Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & source) {
autograd/generated/InplaceOrViewType_1.cpp:1610:    at::redispatch::set_(ks & c10::after_InplaceOrView_keyset, self, source);
autograd/generated/InplaceOrViewType_1.cpp:1615:Tensor & set_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1618:    at::redispatch::set_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1623:Tensor & sgn_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1626:    at::redispatch::sgn_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1631:Tensor & sgn_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1634:    at::redispatch::sgn_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1639:Tensor & sigmoid_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1642:    at::redispatch::sigmoid_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1647:Tensor & sigmoid_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & output, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1650:    at::redispatch::sigmoid_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1655:Tensor & sigmoid_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1658:    at::redispatch::sigmoid_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1663:Tensor & signbit_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1666:    at::redispatch::signbit_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1671:Tensor & sin_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1674:    at::redispatch::sin_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1679:Tensor & sin_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1682:    at::redispatch::sin_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1687:Tensor & sinh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1690:    at::redispatch::sinh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1695:Tensor & sinh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1698:    at::redispatch::sinh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1703:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out_grad_output(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewType_1.cpp:1706:    at::redispatch::slow_conv_transpose2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewType_1.cpp:1713:Tensor & slow_conv_transpose2d_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1716:    at::redispatch::slow_conv_transpose2d_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
autograd/generated/InplaceOrViewType_1.cpp:1721:Tensor & smooth_l1_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, double beta, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1724:    at::redispatch::smooth_l1_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, beta, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1729:Tensor & smooth_l1_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, double beta, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1732:    at::redispatch::smooth_l1_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, beta, out);
autograd/generated/InplaceOrViewType_1.cpp:1737:Tensor & softplus_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Scalar & beta, const Scalar & threshold, const Tensor & output, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1740:    at::redispatch::softplus_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, beta, threshold, output, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1745:Tensor & softplus_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & beta, const Scalar & threshold, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1748:    at::redispatch::softplus_outf(ks & c10::after_InplaceOrView_keyset, self, beta, threshold, out);
autograd/generated/InplaceOrViewType_1.cpp:1753:std::tuple<Tensor &,Tensor &> sort_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool descending, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_1.cpp:1756:    at::redispatch::sort_outf(ks & c10::after_InplaceOrView_keyset, self, dim, descending, values, indices);
autograd/generated/InplaceOrViewType_1.cpp:1762:std::tuple<Tensor &,Tensor &> sort_out_values_stable(c10::DispatchKeySet ks, const Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_1.cpp:1765:    at::redispatch::sort_outf(ks & c10::after_InplaceOrView_keyset, self, stable, dim, descending, values, indices);
autograd/generated/InplaceOrViewType_1.cpp:1771:Tensor & sqrt_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1774:    at::redispatch::sqrt_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1779:Tensor & sqrt_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1782:    at::redispatch::sqrt_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1787:Tensor & squeeze_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1790:    at::redispatch::squeeze_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1795:Tensor & squeeze__dim(c10::DispatchKeySet ks, Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewType_1.cpp:1798:    at::redispatch::squeeze_(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewType_1.cpp:1803:Tensor & stack_out_out(c10::DispatchKeySet ks, TensorList tensors, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1806:    at::redispatch::stack_outf(ks & c10::after_InplaceOrView_keyset, tensors, dim, out);
autograd/generated/InplaceOrViewType_1.cpp:1811:Tensor & sub__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_1.cpp:1814:    at::redispatch::sub_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewType_1.cpp:1819:Tensor & sub__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_1.cpp:1822:    at::redispatch::sub_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewType_1.cpp:1827:Tensor & sub_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1830:    at::redispatch::sub_outf(ks & c10::after_InplaceOrView_keyset, self, other, alpha, out);
autograd/generated/InplaceOrViewType_1.cpp:1835:std::tuple<Tensor &,Tensor &> symeig_out_e(c10::DispatchKeySet ks, const Tensor & self, bool eigenvectors, bool upper, Tensor & e, Tensor & V) {
autograd/generated/InplaceOrViewType_1.cpp:1838:    at::redispatch::symeig_outf(ks & c10::after_InplaceOrView_keyset, self, eigenvectors, upper, e, V);
autograd/generated/InplaceOrViewType_1.cpp:1844:Tensor & t_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1847:    at::redispatch::t_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1852:Tensor & tensordot_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1855:    at::redispatch::tensordot_outf(ks & c10::after_InplaceOrView_keyset, self, other, dims_self, dims_other, out);
autograd/generated/InplaceOrViewType_1.cpp:1860:std::tuple<Tensor &,Tensor &> topk_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_1.cpp:1863:    at::redispatch::topk_outf(ks & c10::after_InplaceOrView_keyset, self, k, dim, largest, sorted, values, indices);
autograd/generated/InplaceOrViewType_1.cpp:1869:Tensor transpose_int(c10::DispatchKeySet ks, const Tensor & self, int64_t dim0, int64_t dim1) {
autograd/generated/InplaceOrViewType_1.cpp:1872:    return at::redispatch::transpose(ks & c10::after_InplaceOrView_keyset, self, dim0, dim1);
autograd/generated/InplaceOrViewType_1.cpp:1883:Tensor & triu_(c10::DispatchKeySet ks, Tensor & self, int64_t diagonal) {
autograd/generated/InplaceOrViewType_1.cpp:1886:    at::redispatch::triu_(ks & c10::after_InplaceOrView_keyset, self, diagonal);
autograd/generated/InplaceOrViewType_1.cpp:1891:Tensor & triu_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t diagonal, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1894:    at::redispatch::triu_outf(ks & c10::after_InplaceOrView_keyset, self, diagonal, out);
autograd/generated/InplaceOrViewType_1.cpp:1899:Tensor & trunc_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:1902:    at::redispatch::trunc_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:1907:Tensor & trunc_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1910:    at::redispatch::trunc_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_1.cpp:1915:Tensor & uniform_(c10::DispatchKeySet ks, Tensor & self, double from, double to, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_1.cpp:1918:    at::redispatch::uniform_(ks & c10::after_InplaceOrView_keyset, self, from, to, generator);
autograd/generated/InplaceOrViewType_1.cpp:1923:Tensor unsqueeze(c10::DispatchKeySet ks, const Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewType_1.cpp:1926:    return at::redispatch::unsqueeze(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewType_1.cpp:1937:Tensor & upsample_bilinear2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1940:    at::redispatch::upsample_bilinear2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1945:Tensor & upsample_bilinear2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1948:    at::redispatch::upsample_bilinear2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, align_corners, scales_h, scales_w, out);
autograd/generated/InplaceOrViewType_1.cpp:1953:Tensor & upsample_linear1d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1956:    at::redispatch::upsample_linear1d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, align_corners, scales, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1961:Tensor & upsample_linear1d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1964:    at::redispatch::upsample_linear1d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, align_corners, scales, out);
autograd/generated/InplaceOrViewType_1.cpp:1969:Tensor & upsample_nearest2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_1.cpp:1972:    at::redispatch::upsample_nearest2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewType_1.cpp:1977:Tensor & upsample_nearest2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewType_1.cpp:1980:    at::redispatch::upsample_nearest2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, scales_h, scales_w, out);
autograd/generated/InplaceOrViewType_1.cpp:1985:Tensor view(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef size) {
autograd/generated/InplaceOrViewType_1.cpp:1988:    return at::redispatch::view(ks & c10::after_InplaceOrView_keyset, self, size);
autograd/generated/InplaceOrViewType_1.cpp:2000:Tensor view_dtype(c10::DispatchKeySet ks, const Tensor & self, ScalarType dtype) {
autograd/generated/InplaceOrViewType_1.cpp:2003:    return at::redispatch::view(ks & c10::after_InplaceOrView_keyset, self, dtype);
autograd/generated/InplaceOrViewType_1.cpp:2008:Tensor view_as_complex(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:2011:    return at::redispatch::view_as_complex(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:2022:Tensor view_as_real(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:2025:    return at::redispatch::view_as_real(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_1.cpp:2036:Tensor & zero_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_1.cpp:2039:    at::redispatch::zero_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/TraceTypeEverything.cpp:36:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:62:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:65:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:66:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:88:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:91:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:92:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:114:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:117:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:118:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:140:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:143:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:144:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:166:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:169:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:170:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:192:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:195:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:196:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:221:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:222:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:244:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:247:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:248:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:270:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:273:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:274:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:296:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:299:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:300:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:322:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:325:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:326:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:348:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:351:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:352:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:374:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:377:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:378:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:400:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:403:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:404:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:426:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:429:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:430:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:452:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:455:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:456:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:478:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:481:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:482:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:504:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:507:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:508:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:530:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:533:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:534:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:556:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:559:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:560:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceTypeEverything.cpp:582:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:585:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:586:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceTypeEverything.cpp:609:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:612:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:613:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, batch_dim, level);
autograd/generated/TraceTypeEverything.cpp:636:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:639:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:640:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:668:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:671:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:672:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:701:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:704:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:705:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, alpha, out);
autograd/generated/TraceTypeEverything.cpp:736:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:739:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:740:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, self2, mat, vec, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:763:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:766:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:767:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:793:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:796:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:797:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:806:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:809:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:810:      .redispatch<void, TensorList, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, found_inf, inv_scale);
autograd/generated/TraceTypeEverything.cpp:831:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:834:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:835:      .redispatch<Tensor, Tensor &, const Tensor &, const Tensor &, double, double, int64_t>(op, c10::DispatchKey::Tracer, growth_tracker, current_scale, found_inf, scale_growth_factor, scale_backoff_factor, growth_interval);
autograd/generated/TraceTypeEverything.cpp:865:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:868:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:869:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:876:std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
autograd/generated/TraceTypeEverything.cpp:903:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:905:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool)>();
autograd/generated/TraceTypeEverything.cpp:906:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:907:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
autograd/generated/TraceTypeEverything.cpp:918:std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var_transform, bool train, double eps, std::array<bool,3> output_mask, const Tensor & reservedSpace) {
autograd/generated/TraceTypeEverything.cpp:946:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:948:      .typed<std::tuple<Tensor,Tensor,Tensor> (int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, std::array<bool,3>, const Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:949:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:950:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, std::array<bool,3>, const Tensor &>(op, c10::DispatchKey::Tracer, impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace);
autograd/generated/TraceTypeEverything.cpp:975:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:978:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:979:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, mat2, deterministic);
autograd/generated/TraceTypeEverything.cpp:1008:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1011:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1012:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, mat2, deterministic, out);
autograd/generated/TraceTypeEverything.cpp:1034:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1037:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1038:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceTypeEverything.cpp:1060:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1063:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1064:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceTypeEverything.cpp:1086:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1089:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1090:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceTypeEverything.cpp:1112:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1115:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1116:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceTypeEverything.cpp:1138:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1141:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1142:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceTypeEverything.cpp:1164:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1167:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1168:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceTypeEverything.cpp:1190:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1193:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1194:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceTypeEverything.cpp:1216:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1219:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1220:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceTypeEverything.cpp:1242:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1245:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1246:      .redispatch<Tensor, TensorList, int64_t>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceTypeEverything.cpp:1274:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1277:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1278:      .redispatch<Tensor &, TensorList, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceTypeEverything.cpp:1303:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1306:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1307:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, double, const Tensor &>(op, c10::DispatchKey::Tracer, grad, x1, x2, p, cdist);
autograd/generated/TraceTypeEverything.cpp:1314:Tensor _cdist_forward(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
autograd/generated/TraceTypeEverything.cpp:1331:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1333:      .typed<Tensor (const Tensor &, const Tensor &, double, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:1334:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1335:      .redispatch<Tensor, const Tensor &, const Tensor &, double, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, x1, x2, p, compute_mode);
autograd/generated/TraceTypeEverything.cpp:1357:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1360:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1361:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, upper);
autograd/generated/TraceTypeEverything.cpp:1384:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1387:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1388:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, A, upper);
autograd/generated/TraceTypeEverything.cpp:1398:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1401:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1402:      .redispatch<std::tuple<double,int64_t>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, reduce_range);
autograd/generated/TraceTypeEverything.cpp:1406:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1409:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1410:      .redispatch<Tensor &, Tensor &, bool>(op, c10::DispatchKey::Tracer, self, coalesced);
autograd/generated/TraceTypeEverything.cpp:1428:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1431:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1432:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input, coefficients);
autograd/generated/TraceTypeEverything.cpp:1460:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1463:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1464:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, input, coefficients, out);
autograd/generated/TraceTypeEverything.cpp:1485:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1488:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1489:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:1496:Tensor _convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) {
autograd/generated/TraceTypeEverything.cpp:1522:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1524:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, bool)>();
autograd/generated/TraceTypeEverything.cpp:1525:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1526:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, allow_tf32);
autograd/generated/TraceTypeEverything.cpp:1533:Tensor _convolution_deprecated(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
autograd/generated/TraceTypeEverything.cpp:1558:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1560:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool)>();
autograd/generated/TraceTypeEverything.cpp:1561:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1562:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
autograd/generated/TraceTypeEverything.cpp:1569:std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const c10::optional<Tensor> & ggI, const c10::optional<Tensor> & ggW, const c10::optional<Tensor> & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32, std::array<bool,3> output_mask) {
autograd/generated/TraceTypeEverything.cpp:1602:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1604:      .typed<std::tuple<Tensor,Tensor,Tensor> (const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, bool, std::array<bool,3>)>();
autograd/generated/TraceTypeEverything.cpp:1605:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1606:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, bool, std::array<bool,3>>(op, c10::DispatchKey::Tracer, ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, allow_tf32, output_mask);
autograd/generated/TraceTypeEverything.cpp:1615:Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) {
autograd/generated/TraceTypeEverything.cpp:1636:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1638:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:1639:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1640:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding);
autograd/generated/TraceTypeEverything.cpp:1663:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1666:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1667:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, dst, non_blocking);
autograd/generated/TraceTypeEverything.cpp:1695:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1698:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1699:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
autograd/generated/TraceTypeEverything.cpp:1729:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1732:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1733:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
autograd/generated/TraceTypeEverything.cpp:1762:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1765:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1766:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity);
autograd/generated/TraceTypeEverything.cpp:1774:Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:1794:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1796:      .typed<Tensor (double, bool, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:1797:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1798:      .redispatch<Tensor, double, bool, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, dropout, train, dropout_seed, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:1805:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const c10::optional<Tensor> & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) {
autograd/generated/TraceTypeEverything.cpp:1839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1841:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, TensorList, int64_t, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:1842:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1843:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, TensorList, int64_t, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);
autograd/generated/TraceTypeEverything.cpp:1854:std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
autograd/generated/TraceTypeEverything.cpp:1893:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1895:      .typed<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &, const Tensor &, std::array<bool,4>)>();
autograd/generated/TraceTypeEverything.cpp:1896:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1897:      .redispatch<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>>, const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &, const Tensor &, std::array<bool,4>>(op, c10::DispatchKey::Tracer, input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
autograd/generated/TraceTypeEverything.cpp:1929:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1932:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1933:      .redispatch<Tensor, TensorList, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight_arr, weight_stride0, input_size, mode, hidden_size, proj_size, num_layers, batch_first, bidirectional);
autograd/generated/TraceTypeEverything.cpp:1941:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1944:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1945:      .redispatch<void, int64_t>(op, c10::DispatchKey::Tracer, device_index);
autograd/generated/TraceTypeEverything.cpp:1948:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1951:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1952:      .redispatch<int64_t, int64_t>(op, c10::DispatchKey::Tracer, device_index);
autograd/generated/TraceTypeEverything.cpp:1956:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1959:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1960:      .redispatch<int64_t, int64_t>(op, c10::DispatchKey::Tracer, device_index);
autograd/generated/TraceTypeEverything.cpp:1964:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1967:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1968:      .redispatch<void, int64_t, int64_t>(op, c10::DispatchKey::Tracer, device_index, max_size);
autograd/generated/TraceTypeEverything.cpp:1971:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1974:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1975:      .redispatch<void, const Tensor &, Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, values, indices, dim);
autograd/generated/TraceTypeEverything.cpp:1978:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1981:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:1982:      .redispatch<void, const Tensor &, Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, values, indices, dim);
autograd/generated/TraceTypeEverything.cpp:1999:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2002:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2003:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:2031:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2034:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2035:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceTypeEverything.cpp:2057:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2060:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2061:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:2089:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2092:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2093:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceTypeEverything.cpp:2101:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2104:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2105:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:2109:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2112:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2113:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:2117:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2120:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2121:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:2139:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2142:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2143:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, like, dim);
autograd/generated/TraceTypeEverything.cpp:2166:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2169:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2170:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, x, alpha, total);
autograd/generated/TraceTypeEverything.cpp:2177:std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/TraceTypeEverything.cpp:2202:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2204:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool)>();
autograd/generated/TraceTypeEverything.cpp:2205:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2206:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool>(op, c10::DispatchKey::Tracer, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
autograd/generated/TraceTypeEverything.cpp:2216:Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights) {
autograd/generated/TraceTypeEverything.cpp:2240:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2242:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, bool, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:2243:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2244:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, bool, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);
autograd/generated/TraceTypeEverything.cpp:2251:Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights) {
autograd/generated/TraceTypeEverything.cpp:2274:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2276:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:2277:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2278:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);
autograd/generated/TraceTypeEverything.cpp:2285:std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_forward_only(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/TraceTypeEverything.cpp:2310:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2312:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool)>();
autograd/generated/TraceTypeEverything.cpp:2313:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2314:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool>(op, c10::DispatchKey::Tracer, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
autograd/generated/TraceTypeEverything.cpp:2343:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2346:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2347:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad, weight, indices, offsets, offset2bag, mode);
autograd/generated/TraceTypeEverything.cpp:2354:Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights) {
autograd/generated/TraceTypeEverything.cpp:2376:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2378:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:2379:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2380:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);
autograd/generated/TraceTypeEverything.cpp:2387:Tensor _empty_affine_quantized(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:2408:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2410:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, double, int64_t, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:2411:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2412:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, double, int64_t, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory, scale, zero_point, memory_format);
autograd/generated/TraceTypeEverything.cpp:2419:Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:2441:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2443:      .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:2444:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2445:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, scales, zero_points, axis, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:2467:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2470:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2471:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, x1, x2);
autograd/generated/TraceTypeEverything.cpp:2498:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2501:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2502:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, self, scale, zero_point, axis, quant_min, quant_max, grad_factor);
autograd/generated/TraceTypeEverything.cpp:2533:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2536:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2537:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, grad, self, scale, zero_point, axis, quant_min, quant_max, grad_factor);
autograd/generated/TraceTypeEverything.cpp:2565:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2568:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2569:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, self, scale, zero_point, quant_min, quant_max, grad_factor);
autograd/generated/TraceTypeEverything.cpp:2599:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2602:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2603:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, grad, self, scale, zero_point, quant_min, quant_max, grad_factor);
autograd/generated/TraceTypeEverything.cpp:2629:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2632:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2633:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, normalization, forward);
autograd/generated/TraceTypeEverything.cpp:2663:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2666:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2667:      .redispatch<Tensor &, const Tensor &, IntArrayRef, int64_t, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, normalization, forward, out);
autograd/generated/TraceTypeEverything.cpp:2691:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2694:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2695:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim, normalization, last_dim_size);
autograd/generated/TraceTypeEverything.cpp:2725:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2728:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2729:      .redispatch<Tensor &, const Tensor &, IntArrayRef, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, normalization, last_dim_size, out);
autograd/generated/TraceTypeEverything.cpp:2753:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2756:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2757:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, normalization, onesided);
autograd/generated/TraceTypeEverything.cpp:2787:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2790:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2791:      .redispatch<Tensor &, const Tensor &, IntArrayRef, int64_t, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, normalization, onesided, out);
autograd/generated/TraceTypeEverything.cpp:2812:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2815:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2816:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:2824:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2827:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2828:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:2844:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2847:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2848:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:2856:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2859:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2860:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:2877:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2880:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2881:      .redispatch<std::vector<Tensor>, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors, scalar);
autograd/generated/TraceTypeEverything.cpp:2904:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2907:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2908:      .redispatch<std::vector<Tensor>, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors1, tensors2, alpha);
autograd/generated/TraceTypeEverything.cpp:2930:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2933:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2934:      .redispatch<std::vector<Tensor>, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, tensors, scalars);
autograd/generated/TraceTypeEverything.cpp:2942:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2945:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2946:      .redispatch<void, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, scalar);
autograd/generated/TraceTypeEverything.cpp:2949:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2952:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2953:      .redispatch<void, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:2956:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2959:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2960:      .redispatch<void, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, scalars);
autograd/generated/TraceTypeEverything.cpp:2979:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2982:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:2983:      .redispatch<std::vector<Tensor>, TensorList, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, input, tensor1, tensor2, value);
autograd/generated/TraceTypeEverything.cpp:3007:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3010:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3011:      .redispatch<std::vector<Tensor>, TensorList, TensorList, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, input, tensor1, tensor2, scalars);
autograd/generated/TraceTypeEverything.cpp:3019:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3022:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3023:      .redispatch<void, TensorList, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceTypeEverything.cpp:3026:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3029:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3030:      .redispatch<void, TensorList, TensorList, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, scalars);
autograd/generated/TraceTypeEverything.cpp:3049:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3052:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3053:      .redispatch<std::vector<Tensor>, TensorList, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, input, tensor1, tensor2, value);
autograd/generated/TraceTypeEverything.cpp:3077:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3080:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3081:      .redispatch<std::vector<Tensor>, TensorList, TensorList, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, input, tensor1, tensor2, scalars);
autograd/generated/TraceTypeEverything.cpp:3089:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3092:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3093:      .redispatch<void, TensorList, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceTypeEverything.cpp:3096:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3099:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3100:      .redispatch<void, TensorList, TensorList, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, scalars);
autograd/generated/TraceTypeEverything.cpp:3116:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3119:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3120:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3128:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3131:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3132:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3148:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3151:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3152:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3160:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3163:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3164:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3180:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3183:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3184:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3192:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3195:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3196:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3212:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3215:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3216:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3224:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3227:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3228:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3244:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3247:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3248:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3259:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3260:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3277:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3280:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3281:      .redispatch<std::vector<Tensor>, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors, scalar);
autograd/generated/TraceTypeEverything.cpp:3303:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3306:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3307:      .redispatch<std::vector<Tensor>, TensorList, TensorList>(op, c10::DispatchKey::Tracer, tensors1, tensors2);
autograd/generated/TraceTypeEverything.cpp:3329:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3332:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3333:      .redispatch<std::vector<Tensor>, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, tensors, scalars);
autograd/generated/TraceTypeEverything.cpp:3341:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3344:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3345:      .redispatch<void, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, scalar);
autograd/generated/TraceTypeEverything.cpp:3348:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3351:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3352:      .redispatch<void, TensorList, TensorList>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:3355:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3358:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3359:      .redispatch<void, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, scalars);
autograd/generated/TraceTypeEverything.cpp:3375:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3378:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3379:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3387:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3390:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3391:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3407:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3410:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3411:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3419:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3422:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3423:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3439:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3442:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3443:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3451:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3454:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3455:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3471:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3474:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3475:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3483:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3486:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3487:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3503:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3506:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3507:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3515:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3518:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3519:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3535:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3538:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3539:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3547:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3550:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3551:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3567:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3570:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3571:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3579:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3582:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3583:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3599:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3602:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3603:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3624:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3627:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3628:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3636:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3639:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3640:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3656:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3659:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3660:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3668:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3671:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3672:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3688:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3691:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3692:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3700:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3703:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3704:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3707:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3710:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3711:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3728:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3731:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3732:      .redispatch<std::vector<Tensor>, TensorList, TensorList>(op, c10::DispatchKey::Tracer, tensors1, tensors2);
autograd/generated/TraceTypeEverything.cpp:3754:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3757:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3758:      .redispatch<std::vector<Tensor>, TensorList, TensorList>(op, c10::DispatchKey::Tracer, tensors1, tensors2);
autograd/generated/TraceTypeEverything.cpp:3780:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3783:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3784:      .redispatch<std::vector<Tensor>, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors, scalar);
autograd/generated/TraceTypeEverything.cpp:3806:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3809:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3810:      .redispatch<std::vector<Tensor>, TensorList, TensorList>(op, c10::DispatchKey::Tracer, tensors1, tensors2);
autograd/generated/TraceTypeEverything.cpp:3832:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3835:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3836:      .redispatch<std::vector<Tensor>, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, tensors, scalars);
autograd/generated/TraceTypeEverything.cpp:3844:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3847:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3848:      .redispatch<void, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, scalar);
autograd/generated/TraceTypeEverything.cpp:3851:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3854:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3855:      .redispatch<void, TensorList, TensorList>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:3858:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3861:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3862:      .redispatch<void, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, scalars);
autograd/generated/TraceTypeEverything.cpp:3878:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3881:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3882:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3890:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3893:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3894:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3910:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3913:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3914:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3922:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3925:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3926:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3942:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3945:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3946:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3954:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3957:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3958:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:3974:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3977:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3978:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:3986:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3989:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:3990:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4006:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4009:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4010:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:4018:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4021:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4022:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4038:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4041:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4042:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:4050:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4053:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4054:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4070:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4073:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4074:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:4082:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4085:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4086:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4103:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4106:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4107:      .redispatch<std::vector<Tensor>, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors, scalar);
autograd/generated/TraceTypeEverything.cpp:4130:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4133:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4134:      .redispatch<std::vector<Tensor>, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors1, tensors2, alpha);
autograd/generated/TraceTypeEverything.cpp:4156:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4159:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4160:      .redispatch<std::vector<Tensor>, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, tensors, scalars);
autograd/generated/TraceTypeEverything.cpp:4168:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4171:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4172:      .redispatch<void, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, scalar);
autograd/generated/TraceTypeEverything.cpp:4175:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4178:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4179:      .redispatch<void, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:4182:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4185:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4186:      .redispatch<void, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, scalars);
autograd/generated/TraceTypeEverything.cpp:4202:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4205:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4206:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:4214:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4217:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4218:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4234:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4237:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4238:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:4246:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4249:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4250:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4266:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4269:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4270:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:4278:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4281:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4282:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4285:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4288:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4289:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4291:std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:4309:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4311:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:4312:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4313:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceTypeEverything.cpp:4338:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4341:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4342:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, grad);
autograd/generated/TraceTypeEverything.cpp:4367:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4370:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4371:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceTypeEverything.cpp:4399:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4402:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4403:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceTypeEverything.cpp:4412:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4415:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4416:      .redispatch<bool, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, from);
autograd/generated/TraceTypeEverything.cpp:4441:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4444:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4445:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceTypeEverything.cpp:4452:Tensor & _index_put_impl_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate, bool unsafe) {
autograd/generated/TraceTypeEverything.cpp:4475:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4477:      .typed<Tensor & (Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool, bool)>();
autograd/generated/TraceTypeEverything.cpp:4478:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4479:      .redispatch<Tensor &, Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, indices, values, accumulate, unsafe);
autograd/generated/TraceTypeEverything.cpp:4500:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4503:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4504:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4525:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4528:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4529:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4557:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4560:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4561:      .redispatch<Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, infos_lu, infos_getri);
autograd/generated/TraceTypeEverything.cpp:4585:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4588:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4589:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, mode);
autograd/generated/TraceTypeEverything.cpp:4618:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4621:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4622:      .redispatch<Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, infos);
autograd/generated/TraceTypeEverything.cpp:4630:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4633:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4634:      .redispatch<Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:4653:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4656:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4657:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, half_to_float);
autograd/generated/TraceTypeEverything.cpp:4681:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4684:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4685:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, dim, self);
autograd/generated/TraceTypeEverything.cpp:4707:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4710:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4711:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:4739:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4742:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4743:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceTypeEverything.cpp:4766:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4769:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4770:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, LU_data, LU_pivots);
autograd/generated/TraceTypeEverything.cpp:4796:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4799:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4800:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, pivot, check_errors);
autograd/generated/TraceTypeEverything.cpp:4825:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4828:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4829:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, primal, tangent, level);
autograd/generated/TraceTypeEverything.cpp:4853:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4856:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4857:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, axis);
autograd/generated/TraceTypeEverything.cpp:4880:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4883:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4884:      .redispatch<Tensor, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point);
autograd/generated/TraceTypeEverything.cpp:4907:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4910:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4911:      .redispatch<Tensor, const Tensor &, const Tensor &, double>(op, c10::DispatchKey::Tracer, self, mask, scale);
autograd/generated/TraceTypeEverything.cpp:4933:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4936:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4937:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, shape);
autograd/generated/TraceTypeEverything.cpp:4960:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4963:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4964:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceTypeEverything.cpp:4992:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4995:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:4996:      .redispatch<Tensor &, Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceTypeEverything.cpp:5021:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5024:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5025:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:5056:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5059:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5060:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceTypeEverything.cpp:5069:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5072:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5073:      .redispatch<bool>(op, c10::DispatchKey::Tracer);
autograd/generated/TraceTypeEverything.cpp:5076:Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride) {
autograd/generated/TraceTypeEverything.cpp:5094:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5096:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:5097:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5098:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, padding, stride);
autograd/generated/TraceTypeEverything.cpp:5126:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5129:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5130:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, std::array<bool,3>>(op, c10::DispatchKey::Tracer, input, grad_output, weight, padding, output_mask);
autograd/generated/TraceTypeEverything.cpp:5156:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5159:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5160:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, input, grad_output, weight, padding);
autograd/generated/TraceTypeEverything.cpp:5184:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5187:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5188:      .redispatch<Tensor, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weightsize, grad_output, padding);
autograd/generated/TraceTypeEverything.cpp:5196:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5199:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5200:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:5221:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5224:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5225:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, input, lengths, batch_first);
autograd/generated/TraceTypeEverything.cpp:5250:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5253:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5254:      .redispatch<Tensor, const Tensor &, IntArrayRef, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad, input_size, batch_sizes, batch_first);
autograd/generated/TraceTypeEverything.cpp:5281:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5284:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5285:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, Scalar, int64_t>(op, c10::DispatchKey::Tracer, data, batch_sizes, batch_first, padding_value, total_length);
autograd/generated/TraceTypeEverything.cpp:5310:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5313:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5314:      .redispatch<Tensor, const Tensor &, const Tensor &, double, const Tensor &>(op, c10::DispatchKey::Tracer, grad, self, p, pdist);
autograd/generated/TraceTypeEverything.cpp:5336:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5339:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5340:      .redispatch<Tensor, const Tensor &, double>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceTypeEverything.cpp:5364:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5367:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5368:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, level, batch_size, out_dim);
autograd/generated/TraceTypeEverything.cpp:5390:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5393:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5394:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, shape);
autograd/generated/TraceTypeEverything.cpp:5419:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5422:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5423:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, ScalarType>(op, c10::DispatchKey::Tracer, weight, mask, compressed_indices_dtype);
autograd/generated/TraceTypeEverything.cpp:5447:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5450:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5451:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceTypeEverything.cpp:5458:Tensor _sample_dirichlet(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:5473:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5475:      .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:5476:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5477:      .redispatch<Tensor, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceTypeEverything.cpp:5498:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5501:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5502:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, weight);
autograd/generated/TraceTypeEverything.cpp:5523:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5526:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5527:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:5534:std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:5555:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5557:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:5558:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5559:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, quasi, n, sobolstate, dimension, num_generated, dtype);
autograd/generated/TraceTypeEverything.cpp:5590:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5593:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5594:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, n, sobolstate, dimension, num_generated);
autograd/generated/TraceTypeEverything.cpp:5621:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5624:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5625:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dimension);
autograd/generated/TraceTypeEverything.cpp:5653:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5656:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5657:      .redispatch<Tensor &, Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, ltm, dimension);
autograd/generated/TraceTypeEverything.cpp:5680:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5683:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5684:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, half_to_float);
autograd/generated/TraceTypeEverything.cpp:5708:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5711:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5712:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, dim, self);
autograd/generated/TraceTypeEverything.cpp:5736:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5739:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5740:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, A);
autograd/generated/TraceTypeEverything.cpp:5766:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5769:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5770:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, sparse, dense, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:5777:Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:5797:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5799:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:5800:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5801:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, indices, values, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:5808:Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:5828:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5830:      .typed<Tensor (int64_t, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:5831:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5832:      .redispatch<Tensor, int64_t, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, sparse_dim, dense_dim, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:5839:Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:5861:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5863:      .typed<Tensor (int64_t, int64_t, IntArrayRef, const Tensor &, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:5864:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5865:      .redispatch<Tensor, int64_t, int64_t, IntArrayRef, const Tensor &, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, sparse_dim, dense_dim, size, indices, values, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:5872:Tensor _sparse_log_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:5888:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5890:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:5891:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5892:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:5899:Tensor _sparse_log_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:5915:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5917:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:5918:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5919:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:5942:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5945:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5946:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, half_to_float);
autograd/generated/TraceTypeEverything.cpp:5970:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5973:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5974:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, dim, self);
autograd/generated/TraceTypeEverything.cpp:5996:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:5999:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6000:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, t, mask_indices);
autograd/generated/TraceTypeEverything.cpp:6022:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6025:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6026:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, sparse, dense);
autograd/generated/TraceTypeEverything.cpp:6033:Tensor _sparse_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:6049:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6051:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:6052:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6053:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:6060:Tensor _sparse_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:6076:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6078:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:6079:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6080:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:6103:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6106:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6107:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, half_to_float);
autograd/generated/TraceTypeEverything.cpp:6131:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6134:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6135:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, dim, self);
autograd/generated/TraceTypeEverything.cpp:6157:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6160:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6161:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:6182:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6185:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6186:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:6208:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6211:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6212:      .redispatch<Tensor, const Tensor &, ScalarType>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceTypeEverything.cpp:6234:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6237:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6238:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:6261:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6264:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6265:      .redispatch<Tensor, const Tensor &, IntArrayRef, ScalarType>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:6288:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6291:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6292:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad, self, dim);
autograd/generated/TraceTypeEverything.cpp:6314:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6317:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6318:      .redispatch<Tensor, TensorList, int64_t>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceTypeEverything.cpp:6346:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6349:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6350:      .redispatch<Tensor &, TensorList, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceTypeEverything.cpp:6357:Tensor _standard_gamma(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:6372:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6374:      .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:6375:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6376:      .redispatch<Tensor, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceTypeEverything.cpp:6398:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6401:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6402:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, output);
autograd/generated/TraceTypeEverything.cpp:6424:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6427:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6428:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceTypeEverything.cpp:6454:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6457:  std::tie(U, S, V) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6458:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, some, compute_uv);
autograd/generated/TraceTypeEverything.cpp:6485:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6488:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6489:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool, std::string>(op, c10::DispatchKey::Tracer, self, compute_eigenvectors, uplo);
autograd/generated/TraceTypeEverything.cpp:6515:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6518:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6519:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, eigenvectors, upper);
autograd/generated/TraceTypeEverything.cpp:6543:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6546:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6547:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, dummy, a, b);
autograd/generated/TraceTypeEverything.cpp:6570:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6573:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6574:      .redispatch<Tensor, const Tensor &, int64_t, std::string>(op, c10::DispatchKey::Tracer, dummy, a, b);
autograd/generated/TraceTypeEverything.cpp:6581:Tensor _test_optional_filled_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
autograd/generated/TraceTypeEverything.cpp:6596:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6598:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceTypeEverything.cpp:6599:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6600:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, values, addends);
autograd/generated/TraceTypeEverything.cpp:6607:Tensor _test_optional_floatlist(const Tensor & values, c10::optional<ArrayRef<double>> addends) {
autograd/generated/TraceTypeEverything.cpp:6622:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6624:      .typed<Tensor (const Tensor &, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:6625:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6626:      .redispatch<Tensor, const Tensor &, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, values, addends);
autograd/generated/TraceTypeEverything.cpp:6633:Tensor _test_optional_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
autograd/generated/TraceTypeEverything.cpp:6648:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6650:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceTypeEverything.cpp:6651:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6652:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, values, addends);
autograd/generated/TraceTypeEverything.cpp:6675:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6678:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6679:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:6702:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6705:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6706:      .redispatch<Tensor, const Tensor &, std::string, std::string>(op, c10::DispatchKey::Tracer, dummy, a, b);
autograd/generated/TraceTypeEverything.cpp:6713:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/TraceTypeEverything.cpp:6737:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6739:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:6740:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6741:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);
autograd/generated/TraceTypeEverything.cpp:6752:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias, const Tensor & cx, const Tensor & cy) {
autograd/generated/TraceTypeEverything.cpp:6778:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6780:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:6781:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6782:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);
autograd/generated/TraceTypeEverything.cpp:6793:std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/TraceTypeEverything.cpp:6813:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6815:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:6816:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6817:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input_gates, hidden_gates, hx, input_bias, hidden_bias);
autograd/generated/TraceTypeEverything.cpp:6846:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6849:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6850:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad_hy, workspace, has_bias);
autograd/generated/TraceTypeEverything.cpp:6861:std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/TraceTypeEverything.cpp:6882:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6884:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:6885:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6886:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input_gates, hidden_gates, cx, input_bias, hidden_bias);
autograd/generated/TraceTypeEverything.cpp:6895:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) {
autograd/generated/TraceTypeEverything.cpp:6919:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6921:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const Tensor &, bool)>();
autograd/generated/TraceTypeEverything.cpp:6922:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6923:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad_hy, grad_cy, cx, cy, workspace, has_bias);
autograd/generated/TraceTypeEverything.cpp:6954:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6957:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6958:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, A, upper, transpose, unitriangular);
autograd/generated/TraceTypeEverything.cpp:6987:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6990:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:6991:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);
autograd/generated/TraceTypeEverything.cpp:7016:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7019:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7020:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, sorted, return_inverse);
autograd/generated/TraceTypeEverything.cpp:7048:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7051:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7052:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, sorted, return_inverse, return_counts);
autograd/generated/TraceTypeEverything.cpp:7078:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7081:  std::tie(primal, tangent) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7082:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, dual, level);
autograd/generated/TraceTypeEverything.cpp:7105:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7108:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7109:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, size);
autograd/generated/TraceTypeEverything.cpp:7117:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7120:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7121:      .redispatch<bool, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank);
autograd/generated/TraceTypeEverything.cpp:7125:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7128:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7129:      .redispatch<bool>(op, c10::DispatchKey::Tracer);
autograd/generated/TraceTypeEverything.cpp:7133:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7136:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7137:      .redispatch<void, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, indices, values, size);
autograd/generated/TraceTypeEverything.cpp:7153:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7156:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7157:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:7179:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7182:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7183:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceTypeEverything.cpp:7206:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7209:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7210:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, v, g, dim);
autograd/generated/TraceTypeEverything.cpp:7235:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7238:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7239:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, v, g, dim);
autograd/generated/TraceTypeEverything.cpp:7267:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7270:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7271:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_w, saved_v, saved_g, saved_norms, dim);
autograd/generated/TraceTypeEverything.cpp:7299:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7302:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7303:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_w, saved_v, saved_g, saved_norms, dim);
autograd/generated/TraceTypeEverything.cpp:7325:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7328:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7329:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:7355:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7358:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7359:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:7386:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7389:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7390:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:7411:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7414:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7415:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:7441:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7444:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7445:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:7472:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7475:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7476:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:7497:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7500:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7501:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:7527:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7530:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7531:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:7558:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7561:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7562:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:7583:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7586:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7587:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:7613:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7616:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7617:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:7644:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7647:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7648:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:7670:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7673:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7674:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceTypeEverything.cpp:7696:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7699:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7700:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceTypeEverything.cpp:7728:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7731:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7732:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, out);
autograd/generated/TraceTypeEverything.cpp:7754:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7757:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7758:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceTypeEverything.cpp:7780:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7783:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7784:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceTypeEverything.cpp:7812:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7815:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7816:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, grad_input);
autograd/generated/TraceTypeEverything.cpp:7844:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7847:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7848:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, out);
autograd/generated/TraceTypeEverything.cpp:7872:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7875:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7876:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceTypeEverything.cpp:7901:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7904:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7905:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceTypeEverything.cpp:7929:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7932:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7933:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices);
autograd/generated/TraceTypeEverything.cpp:7962:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7965:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7966:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices, grad_input);
autograd/generated/TraceTypeEverything.cpp:7995:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7998:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:7999:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, out, indices);
autograd/generated/TraceTypeEverything.cpp:8024:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8027:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8028:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceTypeEverything.cpp:8052:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8055:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8056:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices);
autograd/generated/TraceTypeEverything.cpp:8085:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8088:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8089:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices, grad_input);
autograd/generated/TraceTypeEverything.cpp:8118:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8121:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8122:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, out, indices);
autograd/generated/TraceTypeEverything.cpp:8146:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8149:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8150:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:8173:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8176:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8177:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:8205:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8208:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8209:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:8237:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8240:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8241:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:8270:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8273:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8274:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, alpha, out);
autograd/generated/TraceTypeEverything.cpp:8299:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8302:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8303:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:8333:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8336:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8337:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:8368:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8371:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8372:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha, out);
autograd/generated/TraceTypeEverything.cpp:8396:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8399:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8400:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceTypeEverything.cpp:8429:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8432:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8433:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceTypeEverything.cpp:8463:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8466:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8467:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value, out);
autograd/generated/TraceTypeEverything.cpp:8491:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8494:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8495:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceTypeEverything.cpp:8524:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8527:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8528:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceTypeEverything.cpp:8558:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8561:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8562:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value, out);
autograd/generated/TraceTypeEverything.cpp:8587:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8590:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8591:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:8621:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8624:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8625:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:8656:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8659:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8660:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha, out);
autograd/generated/TraceTypeEverything.cpp:8685:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8688:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8689:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat, vec, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:8719:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8722:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8723:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat, vec, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:8754:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8757:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8758:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, mat, vec, beta, alpha, out);
autograd/generated/TraceTypeEverything.cpp:8783:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8786:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8787:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, vec1, vec2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:8817:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8820:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8821:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, vec1, vec2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:8852:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8855:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8856:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, vec1, vec2, beta, alpha, out);
autograd/generated/TraceTypeEverything.cpp:8879:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8882:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8883:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, theta, size, align_corners);
autograd/generated/TraceTypeEverything.cpp:8906:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8909:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8910:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, grad, size, align_corners);
autograd/generated/TraceTypeEverything.cpp:8931:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8934:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8935:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:8957:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8960:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8961:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:8982:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8985:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:8986:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:9008:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9011:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9012:      .redispatch<Tensor, const Tensor &, DimnameList>(op, c10::DispatchKey::Tracer, self, names);
autograd/generated/TraceTypeEverything.cpp:9035:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9038:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9039:      .redispatch<Tensor, const Tensor &, DimnameList, int64_t>(op, c10::DispatchKey::Tracer, self, order, ellipsis_idx);
autograd/generated/TraceTypeEverything.cpp:9062:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9065:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9066:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:9089:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9092:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9093:      .redispatch<Tensor, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:9114:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9117:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9118:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:9147:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9150:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9151:      .redispatch<Tensor &, const Tensor &, int64_t, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:9180:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9183:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9184:      .redispatch<Tensor &, const Tensor &, Dimname, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:9192:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9195:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9196:      .redispatch<bool, const Tensor &, const Tensor &, double, double, bool>(op, c10::DispatchKey::Tracer, self, other, rtol, atol, equal_nan);
autograd/generated/TraceTypeEverything.cpp:9215:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9218:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9219:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, input, p, train);
autograd/generated/TraceTypeEverything.cpp:9247:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9250:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9251:      .redispatch<Tensor &, Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, p, train);
autograd/generated/TraceTypeEverything.cpp:9274:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9277:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9278:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:9307:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9310:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9311:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:9334:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9337:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9338:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:9367:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9370:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9371:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:9392:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9395:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9396:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:9423:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9426:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9427:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:9450:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9453:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9454:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:9477:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9480:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9481:      .redispatch<Tensor, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:9502:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9505:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9506:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:9535:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9538:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9539:      .redispatch<Tensor &, const Tensor &, int64_t, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:9568:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9571:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9572:      .redispatch<Tensor &, const Tensor &, Dimname, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:9579:Tensor arange(Scalar end, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:9597:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9599:      .typed<Tensor (Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:9600:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9601:      .redispatch<Tensor, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, end, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:9608:Tensor arange_start(Scalar start, Scalar end, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:9627:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9629:      .typed<Tensor (Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:9630:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9631:      .redispatch<Tensor, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:9638:Tensor arange_start_step(Scalar start, Scalar end, Scalar step, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:9658:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9660:      .typed<Tensor (Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:9661:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9662:      .redispatch<Tensor, Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, step, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:9692:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9695:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9696:      .redispatch<Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, end, out);
autograd/generated/TraceTypeEverything.cpp:9728:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9731:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9732:      .redispatch<Tensor &, Scalar, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, start, end, step, out);
autograd/generated/TraceTypeEverything.cpp:9753:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9756:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9757:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:9783:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9786:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9787:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:9814:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9817:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9818:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:9839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9842:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9843:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:9869:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9872:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9873:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:9900:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9903:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9904:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:9925:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9928:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9929:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:9955:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9958:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9959:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:9986:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9989:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:9990:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:10011:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10014:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10015:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10041:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10044:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10045:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10072:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10075:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10076:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:10097:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10100:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10101:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10127:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10130:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10131:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10158:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10161:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10162:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:10183:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10186:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10187:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10213:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10216:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10217:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10244:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10247:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10248:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:10255:Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceTypeEverything.cpp:10271:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10273:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceTypeEverything.cpp:10274:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10275:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:10282:Tensor & argmax_out_out(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:10304:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10306:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:10307:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10308:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:10315:Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceTypeEverything.cpp:10331:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10333:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceTypeEverything.cpp:10334:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10335:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:10342:Tensor & argmin_out_out(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:10364:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10366:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:10367:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10368:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:10391:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10394:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10395:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, descending);
autograd/generated/TraceTypeEverything.cpp:10418:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10421:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10422:      .redispatch<Tensor, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, descending);
autograd/generated/TraceTypeEverything.cpp:10429:Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/TraceTypeEverything.cpp:10446:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10448:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:10449:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10450:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, size, stride, storage_offset);
autograd/generated/TraceTypeEverything.cpp:10457:Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/TraceTypeEverything.cpp:10479:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10481:      .typed<Tensor & (Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:10482:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10483:      .redispatch<Tensor &, Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, size, stride, storage_offset);
autograd/generated/TraceTypeEverything.cpp:10504:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10507:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10508:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10534:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10537:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10538:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10565:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10568:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10569:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:10590:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10593:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10594:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10620:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10623:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10624:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10651:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10654:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10655:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:10676:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10679:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10680:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10702:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10705:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10706:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:10733:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10736:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10737:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:10765:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10768:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10769:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:10795:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10798:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10799:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10826:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10829:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10830:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:10851:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10854:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10855:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10881:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10884:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10885:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10912:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10915:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10916:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:10937:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10940:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10941:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:10962:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10965:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10966:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:10987:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10990:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:10991:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:11012:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11015:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11016:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:11037:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11040:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11041:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:11062:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11065:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11066:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:11092:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11095:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11096:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad);
autograd/generated/TraceTypeEverything.cpp:11103:Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/TraceTypeEverything.cpp:11123:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11125:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:11126:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11127:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
autograd/generated/TraceTypeEverything.cpp:11134:Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/TraceTypeEverything.cpp:11155:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11157:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:11158:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11159:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
autograd/generated/TraceTypeEverything.cpp:11166:Tensor & avg_pool2d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:11193:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11195:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:11196:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11197:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
autograd/generated/TraceTypeEverything.cpp:11204:Tensor & avg_pool2d_out_out(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:11230:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11232:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:11233:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11234:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
autograd/generated/TraceTypeEverything.cpp:11241:Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/TraceTypeEverything.cpp:11261:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11263:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:11264:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11265:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
autograd/generated/TraceTypeEverything.cpp:11272:Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/TraceTypeEverything.cpp:11293:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11295:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:11296:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11297:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
autograd/generated/TraceTypeEverything.cpp:11304:Tensor & avg_pool3d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:11331:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11333:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:11334:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11335:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
autograd/generated/TraceTypeEverything.cpp:11342:Tensor & avg_pool3d_out_out(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:11368:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11370:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:11371:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11372:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
autograd/generated/TraceTypeEverything.cpp:11397:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11400:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11401:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:11431:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11434:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11435:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:11466:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11469:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11470:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha, out);
autograd/generated/TraceTypeEverything.cpp:11477:Tensor bartlett_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:11495:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11497:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:11498:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11499:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:11506:Tensor bartlett_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:11525:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11527:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:11528:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11529:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:11536:Tensor batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
autograd/generated/TraceTypeEverything.cpp:11558:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11560:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool)>();
autograd/generated/TraceTypeEverything.cpp:11561:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11562:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
autograd/generated/TraceTypeEverything.cpp:11569:Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) {
autograd/generated/TraceTypeEverything.cpp:11589:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11591:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:11592:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11593:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu);
autograd/generated/TraceTypeEverything.cpp:11600:std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, bool input_g, bool weight_g, bool bias_g) {
autograd/generated/TraceTypeEverything.cpp:11625:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11627:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, bool, bool, bool)>();
autograd/generated/TraceTypeEverything.cpp:11628:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11629:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, bool, bool, bool>(op, c10::DispatchKey::Tracer, grad_out, input, mean, invstd, weight, input_g, weight_g, bias_g);
autograd/generated/TraceTypeEverything.cpp:11639:Tensor batch_norm_elemt(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps) {
autograd/generated/TraceTypeEverything.cpp:11658:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11660:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double)>();
autograd/generated/TraceTypeEverything.cpp:11661:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11662:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double>(op, c10::DispatchKey::Tracer, input, weight, bias, mean, invstd, eps);
autograd/generated/TraceTypeEverything.cpp:11669:Tensor & batch_norm_elemt_out_out(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:11694:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11696:      .typed<Tensor & (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:11697:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11698:      .redispatch<Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double, Tensor &>(op, c10::DispatchKey::Tracer, input, weight, bias, mean, invstd, eps, out);
autograd/generated/TraceTypeEverything.cpp:11705:std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, int64_t count) {
autograd/generated/TraceTypeEverything.cpp:11728:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11730:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, double, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:11731:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11732:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, double, int64_t>(op, c10::DispatchKey::Tracer, input, mean, invstd, running_mean, running_var, momentum, eps, count);
autograd/generated/TraceTypeEverything.cpp:11740:std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, const Tensor & counts) {
autograd/generated/TraceTypeEverything.cpp:11763:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11765:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, double, const Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:11766:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11767:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, double, const Tensor &>(op, c10::DispatchKey::Tracer, input, mean, invstd, running_mean, running_var, momentum, eps, counts);
autograd/generated/TraceTypeEverything.cpp:11792:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11795:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11796:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, double>(op, c10::DispatchKey::Tracer, input, eps);
autograd/generated/TraceTypeEverything.cpp:11804:std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum) {
autograd/generated/TraceTypeEverything.cpp:11823:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11825:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double)>();
autograd/generated/TraceTypeEverything.cpp:11826:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11827:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double>(op, c10::DispatchKey::Tracer, input, running_mean, running_var, momentum);
autograd/generated/TraceTypeEverything.cpp:11835:Tensor bernoulli(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:11850:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11852:      .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:11853:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11854:      .redispatch<Tensor, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceTypeEverything.cpp:11861:Tensor bernoulli_p(const Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:11877:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11879:      .typed<Tensor (const Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:11880:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11881:      .redispatch<Tensor, const Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceTypeEverything.cpp:11888:Tensor & bernoulli__Tensor(Tensor & self, const Tensor & p, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:11909:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11911:      .typed<Tensor & (Tensor &, const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:11912:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11913:      .redispatch<Tensor &, Tensor &, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceTypeEverything.cpp:11920:Tensor & bernoulli__float(Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:11941:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11943:      .typed<Tensor & (Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:11944:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11945:      .redispatch<Tensor &, Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceTypeEverything.cpp:11952:Tensor & bernoulli_out_out(const Tensor & self, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:11973:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11975:      .typed<Tensor & (const Tensor &, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:11976:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:11977:      .redispatch<Tensor &, const Tensor &, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, self, generator, out);
autograd/generated/TraceTypeEverything.cpp:11984:Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const c10::optional<Tensor> & bias) {
autograd/generated/TraceTypeEverything.cpp:12001:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12003:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:12004:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12005:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input1, input2, weight, bias);
autograd/generated/TraceTypeEverything.cpp:12012:Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/TraceTypeEverything.cpp:12029:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12031:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:12032:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12033:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction);
autograd/generated/TraceTypeEverything.cpp:12040:Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/TraceTypeEverything.cpp:12058:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12060:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:12061:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12062:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction);
autograd/generated/TraceTypeEverything.cpp:12069:Tensor & binary_cross_entropy_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:12093:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12095:      .typed<Tensor & (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:12096:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12097:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, grad_input);
autograd/generated/TraceTypeEverything.cpp:12104:Tensor & binary_cross_entropy_out_out(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:12127:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12129:      .typed<Tensor & (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:12130:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12131:      .redispatch<Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, out);
autograd/generated/TraceTypeEverything.cpp:12138:Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & pos_weight, int64_t reduction) {
autograd/generated/TraceTypeEverything.cpp:12156:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12158:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:12159:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12160:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, pos_weight, reduction);
autograd/generated/TraceTypeEverything.cpp:12167:Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & pos_weight, int64_t reduction) {
autograd/generated/TraceTypeEverything.cpp:12186:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12188:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:12189:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12190:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, pos_weight, reduction);
autograd/generated/TraceTypeEverything.cpp:12197:Tensor bincount(const Tensor & self, const c10::optional<Tensor> & weights, int64_t minlength) {
autograd/generated/TraceTypeEverything.cpp:12213:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12215:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:12216:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12217:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, self, weights, minlength);
autograd/generated/TraceTypeEverything.cpp:12224:Tensor binomial(const Tensor & count, const Tensor & prob, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:12240:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12242:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:12243:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12244:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, count, prob, generator);
autograd/generated/TraceTypeEverything.cpp:12266:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12269:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12270:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12292:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12295:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12296:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12323:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12326:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12327:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12354:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12357:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12358:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12386:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12389:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12390:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:12418:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12421:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12422:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:12443:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12446:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12447:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:12473:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12476:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12477:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:12504:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12507:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12508:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:12530:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12533:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12534:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12556:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12559:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12560:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12587:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12590:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12591:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12618:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12621:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12622:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12650:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12653:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12654:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:12682:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12685:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12686:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:12708:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12711:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12712:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12734:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12737:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12738:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12765:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12768:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12769:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12796:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12799:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12800:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:12828:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12831:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12832:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:12860:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12863:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12864:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:12871:Tensor blackman_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:12889:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12891:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:12892:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12893:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:12900:Tensor blackman_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:12919:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12921:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:12922:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12923:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:12944:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12947:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12948:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:12970:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12973:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:12974:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mat2);
autograd/generated/TraceTypeEverything.cpp:13002:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13005:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13006:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, mat2, out);
autograd/generated/TraceTypeEverything.cpp:13027:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13030:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13031:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:13053:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13056:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13057:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, size);
autograd/generated/TraceTypeEverything.cpp:13081:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13084:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13085:      .redispatch<Tensor, const Tensor &, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, boundaries, out_int32, right);
autograd/generated/TraceTypeEverything.cpp:13109:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13112:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13113:      .redispatch<Tensor, Scalar, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, boundaries, out_int32, right);
autograd/generated/TraceTypeEverything.cpp:13143:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13146:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13147:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, boundaries, out_int32, right, out);
autograd/generated/TraceTypeEverything.cpp:13155:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13158:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13159:      .redispatch<bool, ScalarType, ScalarType>(op, c10::DispatchKey::Tracer, from, to);
autograd/generated/TraceTypeEverything.cpp:13176:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13179:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13180:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:13202:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13205:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13206:      .redispatch<Tensor, TensorList, int64_t>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceTypeEverything.cpp:13228:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13231:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13232:      .redispatch<Tensor, TensorList, Dimname>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceTypeEverything.cpp:13260:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13263:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13264:      .redispatch<Tensor &, TensorList, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceTypeEverything.cpp:13292:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13295:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13296:      .redispatch<Tensor &, TensorList, Dimname, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceTypeEverything.cpp:13303:Tensor & cauchy_(Tensor & self, double median, double sigma, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:13325:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13327:      .typed<Tensor & (Tensor &, double, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:13328:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13329:      .redispatch<Tensor &, Tensor &, double, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, median, sigma, generator);
autograd/generated/TraceTypeEverything.cpp:13336:Tensor cdist(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
autograd/generated/TraceTypeEverything.cpp:13353:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13355:      .typed<Tensor (const Tensor &, const Tensor &, double, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:13356:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13357:      .redispatch<Tensor, const Tensor &, const Tensor &, double, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, x1, x2, p, compute_mode);
autograd/generated/TraceTypeEverything.cpp:13378:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13381:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13382:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:13408:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13411:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13412:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:13439:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13442:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13443:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:13465:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13468:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13469:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, alpha);
autograd/generated/TraceTypeEverything.cpp:13496:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13499:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13500:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, alpha);
autograd/generated/TraceTypeEverything.cpp:13521:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13524:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13525:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, matrices);
autograd/generated/TraceTypeEverything.cpp:13547:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13550:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13551:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, groups);
autograd/generated/TraceTypeEverything.cpp:13573:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13576:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13577:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, upper);
autograd/generated/TraceTypeEverything.cpp:13599:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13602:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13603:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, upper);
autograd/generated/TraceTypeEverything.cpp:13631:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13634:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13635:      .redispatch<Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, upper, out);
autograd/generated/TraceTypeEverything.cpp:13663:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13666:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13667:      .redispatch<Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, upper, out);
autograd/generated/TraceTypeEverything.cpp:13690:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13693:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13694:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, input2, upper);
autograd/generated/TraceTypeEverything.cpp:13723:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13726:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13727:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, input2, upper, out);
autograd/generated/TraceTypeEverything.cpp:13754:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13757:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13758:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, double, int64_t>(op, c10::DispatchKey::Tracer, input, numel, n_bins, ratio, bit_width);
autograd/generated/TraceTypeEverything.cpp:13782:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13785:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13786:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, chunks, dim);
autograd/generated/TraceTypeEverything.cpp:13793:Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/TraceTypeEverything.cpp:13809:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13811:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
autograd/generated/TraceTypeEverything.cpp:13812:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13813:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, min, max);
autograd/generated/TraceTypeEverything.cpp:13820:Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/TraceTypeEverything.cpp:13841:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13843:      .typed<Tensor & (Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
autograd/generated/TraceTypeEverything.cpp:13844:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13845:      .redispatch<Tensor &, Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, min, max);
autograd/generated/TraceTypeEverything.cpp:13867:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13870:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13871:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, max);
autograd/generated/TraceTypeEverything.cpp:13898:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13901:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13902:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, max);
autograd/generated/TraceTypeEverything.cpp:13930:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13933:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13934:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, max, out);
autograd/generated/TraceTypeEverything.cpp:13956:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13959:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13960:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, min);
autograd/generated/TraceTypeEverything.cpp:13987:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13990:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:13991:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, min);
autograd/generated/TraceTypeEverything.cpp:14019:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14022:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14023:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, min, out);
autograd/generated/TraceTypeEverything.cpp:14030:Tensor & clamp_out_out(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:14052:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14054:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:14055:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14056:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>, Tensor &>(op, c10::DispatchKey::Tracer, self, min, max, out);
autograd/generated/TraceTypeEverything.cpp:14063:Tensor clip(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/TraceTypeEverything.cpp:14079:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14081:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
autograd/generated/TraceTypeEverything.cpp:14082:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14083:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, min, max);
autograd/generated/TraceTypeEverything.cpp:14090:Tensor & clip_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/TraceTypeEverything.cpp:14111:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14113:      .typed<Tensor & (Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
autograd/generated/TraceTypeEverything.cpp:14114:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14115:      .redispatch<Tensor &, Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, min, max);
autograd/generated/TraceTypeEverything.cpp:14122:Tensor & clip_out_out(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:14144:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14146:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:14147:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14148:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>, Tensor &>(op, c10::DispatchKey::Tracer, self, min, max, out);
autograd/generated/TraceTypeEverything.cpp:14155:Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:14170:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14172:      .typed<Tensor (const Tensor &, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:14173:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14174:      .redispatch<Tensor, const Tensor &, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, memory_format);
autograd/generated/TraceTypeEverything.cpp:14195:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14198:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14199:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:14225:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14228:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14229:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size, kernel_size, dilation, padding, stride);
autograd/generated/TraceTypeEverything.cpp:14254:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14257:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14258:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, kernel_size, dilation, padding, stride);
autograd/generated/TraceTypeEverything.cpp:14289:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14292:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14293:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, kernel_size, dilation, padding, stride, grad_input);
autograd/generated/TraceTypeEverything.cpp:14325:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14328:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14329:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, kernel_size, dilation, padding, stride, out);
autograd/generated/TraceTypeEverything.cpp:14350:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14353:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14354:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:14381:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14384:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14385:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/generated/TraceTypeEverything.cpp:14408:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14411:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14412:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, r, with_replacement);
autograd/generated/TraceTypeEverything.cpp:14434:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14437:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14438:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, real, imag);
autograd/generated/TraceTypeEverything.cpp:14466:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14469:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14470:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, real, imag, out);
autograd/generated/TraceTypeEverything.cpp:14491:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14494:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14495:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:14522:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14525:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14526:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:14549:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14552:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14553:      .redispatch<Tensor, const Tensor &, IntArrayRef, Scalar>(op, c10::DispatchKey::Tracer, self, pad, value);
autograd/generated/TraceTypeEverything.cpp:14575:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14578:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14579:      .redispatch<Tensor, const Tensor &, MemoryFormat>(op, c10::DispatchKey::Tracer, self, memory_format);
autograd/generated/TraceTypeEverything.cpp:14586:Tensor conv1d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
autograd/generated/TraceTypeEverything.cpp:14587:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14589:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:14590:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14591:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, groups);
autograd/generated/TraceTypeEverything.cpp:14594:Tensor conv2d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
autograd/generated/TraceTypeEverything.cpp:14595:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14597:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:14598:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14599:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, groups);
autograd/generated/TraceTypeEverything.cpp:14602:Tensor conv3d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
autograd/generated/TraceTypeEverything.cpp:14603:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14605:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:14606:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14607:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, groups);
autograd/generated/TraceTypeEverything.cpp:14627:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14630:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14631:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, weight, bias, pad);
autograd/generated/TraceTypeEverything.cpp:14659:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14662:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14663:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, input, weight, bias, pad);
autograd/generated/TraceTypeEverything.cpp:14672:Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
autograd/generated/TraceTypeEverything.cpp:14673:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14675:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:14676:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14677:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, output_padding, groups, dilation);
autograd/generated/TraceTypeEverything.cpp:14680:Tensor conv_transpose2d_input(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
autograd/generated/TraceTypeEverything.cpp:14681:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14683:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:14684:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14685:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, output_padding, groups, dilation);
autograd/generated/TraceTypeEverything.cpp:14688:Tensor conv_transpose3d_input(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
autograd/generated/TraceTypeEverything.cpp:14689:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14691:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:14692:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14693:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, output_padding, groups, dilation);
autograd/generated/TraceTypeEverything.cpp:14696:Tensor convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
autograd/generated/TraceTypeEverything.cpp:14697:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14699:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:14700:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14701:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
autograd/generated/TraceTypeEverything.cpp:14730:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14733:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14734:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);
autograd/generated/TraceTypeEverything.cpp:14743:Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
autograd/generated/TraceTypeEverything.cpp:14765:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14767:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:14768:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14769:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
autograd/generated/TraceTypeEverything.cpp:14797:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14800:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14801:      .redispatch<Tensor &, Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, src, non_blocking);
autograd/generated/TraceTypeEverything.cpp:14823:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14826:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14827:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:14849:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14852:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14853:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:14880:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14883:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14884:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:14911:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14914:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14915:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:14943:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14946:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14947:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:14968:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14971:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:14972:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:14998:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15001:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15002:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:15029:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15032:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15033:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:15054:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15057:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15058:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:15084:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15087:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15088:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:15115:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15118:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15119:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:15144:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15147:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15148:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, input1, input2, target, margin, reduction);
autograd/generated/TraceTypeEverything.cpp:15172:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15175:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15176:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, double>(op, c10::DispatchKey::Tracer, x1, x2, dim, eps);
autograd/generated/TraceTypeEverything.cpp:15198:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15201:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15202:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:15209:Tensor count_nonzero(const Tensor & self, c10::optional<int64_t> dim) {
autograd/generated/TraceTypeEverything.cpp:15224:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15226:      .typed<Tensor (const Tensor &, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:15227:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15228:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:15235:Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
autograd/generated/TraceTypeEverything.cpp:15251:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15253:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:15254:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15255:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, other, dim);
autograd/generated/TraceTypeEverything.cpp:15262:Tensor & cross_out_out(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:15284:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15286:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:15287:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15288:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, self, other, dim, out);
autograd/generated/TraceTypeEverything.cpp:15315:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15318:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15319:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
autograd/generated/TraceTypeEverything.cpp:15346:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15349:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15350:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
autograd/generated/TraceTypeEverything.cpp:15375:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15378:  auto grid =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15379:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, theta, N, C, H, W);
autograd/generated/TraceTypeEverything.cpp:15404:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15407:  auto grad_theta =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15408:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad, N, C, H, W);
autograd/generated/TraceTypeEverything.cpp:15415:std::tuple<Tensor,Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) {
autograd/generated/TraceTypeEverything.cpp:15440:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15442:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double)>();
autograd/generated/TraceTypeEverything.cpp:15443:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15444:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
autograd/generated/TraceTypeEverything.cpp:15454:std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon, const Tensor & reserveSpace) {
autograd/generated/TraceTypeEverything.cpp:15479:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15481:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, const Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:15482:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15483:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, const Tensor &>(op, c10::DispatchKey::Tracer, input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon, reserveSpace);
autograd/generated/TraceTypeEverything.cpp:15492:Tensor cudnn_convolution_deprecated(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceTypeEverything.cpp:15514:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15516:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceTypeEverything.cpp:15517:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15518:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:15546:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15549:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15550:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:15579:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15582:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15583:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceTypeEverything.cpp:15616:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15619:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15620:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool, std::array<bool,2>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32, output_mask);
autograd/generated/TraceTypeEverything.cpp:15651:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15654:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15655:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceTypeEverything.cpp:15685:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15688:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15689:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceTypeEverything.cpp:15696:Tensor cudnn_convolution_transpose_deprecated(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceTypeEverything.cpp:15719:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15721:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceTypeEverything.cpp:15722:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15723:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:15752:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15755:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15756:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:15786:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15789:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15790:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceTypeEverything.cpp:15824:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15827:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15828:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool, std::array<bool,2>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, allow_tf32, output_mask);
autograd/generated/TraceTypeEverything.cpp:15858:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15861:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15862:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceTypeEverything.cpp:15892:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15895:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15896:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceTypeEverything.cpp:15918:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15921:  auto output =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15922:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, grid);
autograd/generated/TraceTypeEverything.cpp:15947:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15950:  std::tie(grad_self, grad_grid) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15951:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, grid, grad_output);
autograd/generated/TraceTypeEverything.cpp:15960:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15963:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15964:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:15984:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15987:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:15988:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:16013:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16016:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16017:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:16047:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16050:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16051:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, values, indices);
autograd/generated/TraceTypeEverything.cpp:16081:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16084:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16085:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, values, indices);
autograd/generated/TraceTypeEverything.cpp:16110:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16113:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16114:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad, input, indices, dim);
autograd/generated/TraceTypeEverything.cpp:16138:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16141:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16142:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:16167:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16170:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16171:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:16201:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16204:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16205:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, values, indices);
autograd/generated/TraceTypeEverything.cpp:16235:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16238:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16239:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, values, indices);
autograd/generated/TraceTypeEverything.cpp:16247:Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:16263:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16265:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:16266:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16267:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:16274:Tensor cumprod_dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:16290:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16292:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:16293:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16294:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:16301:Tensor & cumprod_(Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:16322:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16324:      .typed<Tensor & (Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:16325:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16326:      .redispatch<Tensor &, Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:16333:Tensor & cumprod__dimname(Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:16354:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16356:      .typed<Tensor & (Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:16357:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16358:      .redispatch<Tensor &, Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:16381:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16384:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16385:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad, input, dim);
autograd/generated/TraceTypeEverything.cpp:16392:Tensor & cumprod_out_out(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:16414:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16416:      .typed<Tensor & (const Tensor &, int64_t, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:16417:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16418:      .redispatch<Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:16425:Tensor & cumprod_out_dimname_out(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:16447:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16449:      .typed<Tensor & (const Tensor &, Dimname, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:16450:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16451:      .redispatch<Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:16458:Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:16474:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16476:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:16477:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16478:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:16485:Tensor cumsum_dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:16501:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16503:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:16504:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16505:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:16512:Tensor & cumsum_(Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:16533:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16535:      .typed<Tensor & (Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:16536:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16537:      .redispatch<Tensor &, Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:16544:Tensor & cumsum__dimname(Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:16565:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16567:      .typed<Tensor & (Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:16568:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16569:      .redispatch<Tensor &, Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:16576:Tensor & cumsum_out_out(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:16598:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16600:      .typed<Tensor & (const Tensor &, int64_t, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:16601:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16602:      .redispatch<Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:16609:Tensor & cumsum_out_dimname_out(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:16631:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16633:      .typed<Tensor & (const Tensor &, Dimname, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:16634:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16635:      .redispatch<Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:16656:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16659:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16660:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:16686:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16689:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16690:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:16717:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16720:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16721:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:16729:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16732:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16733:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:16750:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16753:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16754:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:16775:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16778:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16779:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:16800:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16803:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16804:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:16826:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16829:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16830:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceTypeEverything.cpp:16853:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16856:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16857:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, grad, input_sizes, diagonal);
autograd/generated/TraceTypeEverything.cpp:16881:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16884:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16885:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, offset, dim1, dim2);
autograd/generated/TraceTypeEverything.cpp:16913:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16916:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16917:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, diagonal, out);
autograd/generated/TraceTypeEverything.cpp:16939:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16942:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16943:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, offset);
autograd/generated/TraceTypeEverything.cpp:16967:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16970:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16971:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, offset, dim1, dim2);
autograd/generated/TraceTypeEverything.cpp:16996:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:16999:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17000:      .redispatch<Tensor, const Tensor &, Dimname, Dimname, Dimname, int64_t>(op, c10::DispatchKey::Tracer, self, outdim, dim1, dim2, offset);
autograd/generated/TraceTypeEverything.cpp:17025:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17028:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17029:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad, input_sizes, offset, dim1, dim2);
autograd/generated/TraceTypeEverything.cpp:17036:Tensor diff(const Tensor & self, int64_t n, int64_t dim, const c10::optional<Tensor> & prepend, const c10::optional<Tensor> & append) {
autograd/generated/TraceTypeEverything.cpp:17054:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17056:      .typed<Tensor (const Tensor &, int64_t, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:17057:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17058:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, self, n, dim, prepend, append);
autograd/generated/TraceTypeEverything.cpp:17065:Tensor & diff_out_out(const Tensor & self, int64_t n, int64_t dim, const c10::optional<Tensor> & prepend, const c10::optional<Tensor> & append, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:17089:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17091:      .typed<Tensor & (const Tensor &, int64_t, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:17092:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17093:      .redispatch<Tensor &, const Tensor &, int64_t, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, prepend, append, out);
autograd/generated/TraceTypeEverything.cpp:17114:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17117:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17118:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:17144:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17147:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17148:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:17175:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17178:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17179:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:17202:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17205:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17206:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, p);
autograd/generated/TraceTypeEverything.cpp:17228:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17231:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17232:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:17255:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17258:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17259:      .redispatch<Tensor, const Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceTypeEverything.cpp:17281:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17284:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17285:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:17308:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17311:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17312:      .redispatch<Tensor, const Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceTypeEverything.cpp:17339:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17342:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17343:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:17371:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17374:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17375:      .redispatch<Tensor &, Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceTypeEverything.cpp:17402:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17405:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17406:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:17434:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17437:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17438:      .redispatch<Tensor &, Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceTypeEverything.cpp:17466:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17469:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17470:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:17499:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17502:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17503:      .redispatch<Tensor &, const Tensor &, const Tensor &, std::string, Tensor &>(op, c10::DispatchKey::Tracer, self, other, rounding_mode, out);
autograd/generated/TraceTypeEverything.cpp:17525:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17528:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17529:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:17551:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17554:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17555:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:17578:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17581:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17582:      .redispatch<Tensor, const Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceTypeEverything.cpp:17605:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17608:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17609:      .redispatch<Tensor, const Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceTypeEverything.cpp:17636:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17639:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17640:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:17667:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17670:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17671:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:17699:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17702:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17703:      .redispatch<Tensor &, Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceTypeEverything.cpp:17731:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17734:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17735:      .redispatch<Tensor &, Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceTypeEverything.cpp:17763:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17766:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17767:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:17796:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17799:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17800:      .redispatch<Tensor &, const Tensor &, const Tensor &, std::string, Tensor &>(op, c10::DispatchKey::Tracer, self, other, rounding_mode, out);
autograd/generated/TraceTypeEverything.cpp:17822:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17825:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17826:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, tensor);
autograd/generated/TraceTypeEverything.cpp:17854:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17857:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17858:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, tensor, out);
autograd/generated/TraceTypeEverything.cpp:17881:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17884:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17885:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, input, p, train);
autograd/generated/TraceTypeEverything.cpp:17913:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17916:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17917:      .redispatch<Tensor &, Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, p, train);
autograd/generated/TraceTypeEverything.cpp:17938:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17941:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17942:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:17969:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17972:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:17973:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/generated/TraceTypeEverything.cpp:17997:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18000:  std::tie(eigenvalues, eigenvectors_return) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18001:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, eigenvectors);
autograd/generated/TraceTypeEverything.cpp:18031:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18034:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18035:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, eigenvectors, e, v);
autograd/generated/TraceTypeEverything.cpp:18058:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18061:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18062:      .redispatch<Tensor, std::string, TensorList>(op, c10::DispatchKey::Tracer, equation, tensors);
autograd/generated/TraceTypeEverything.cpp:18086:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18089:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18090:      .redispatch<Tensor, const Tensor &, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, alpha, scale, input_scale);
autograd/generated/TraceTypeEverything.cpp:18119:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18122:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18123:      .redispatch<Tensor &, Tensor &, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, alpha, scale, input_scale);
autograd/generated/TraceTypeEverything.cpp:18149:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18152:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18153:      .redispatch<Tensor, const Tensor &, Scalar, Scalar, Scalar, bool, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, alpha, scale, input_scale, is_result, self_or_result);
autograd/generated/TraceTypeEverything.cpp:18183:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18186:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18187:      .redispatch<Tensor &, const Tensor &, Scalar, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, alpha, scale, input_scale, out);
autograd/generated/TraceTypeEverything.cpp:18212:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18215:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18216:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight, indices, padding_idx, scale_grad_by_freq, sparse);
autograd/generated/TraceTypeEverything.cpp:18242:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18245:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18246:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
autograd/generated/TraceTypeEverything.cpp:18253:std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/TraceTypeEverything.cpp:18278:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18280:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool)>();
autograd/generated/TraceTypeEverything.cpp:18281:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18282:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool>(op, c10::DispatchKey::Tracer, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
autograd/generated/TraceTypeEverything.cpp:18310:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18313:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18314:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
autograd/generated/TraceTypeEverything.cpp:18343:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18346:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18347:      .redispatch<Tensor &, Tensor &, const Tensor &, double, double>(op, c10::DispatchKey::Tracer, self, indices, max_norm, norm_type);
autograd/generated/TraceTypeEverything.cpp:18372:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18375:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18376:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad, indices, num_weights, padding_idx, scale_grad_by_freq);
autograd/generated/TraceTypeEverything.cpp:18383:Tensor empty_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:18403:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18405:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:18406:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18407:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:18414:Tensor empty_memory_format(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:18433:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18435:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:18436:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18437:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:18444:Tensor empty_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:18463:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18465:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:18466:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18467:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:18474:Tensor empty_meta(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:18493:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18495:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:18496:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18497:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:18504:Tensor & empty_out_out(IntArrayRef size, c10::optional<MemoryFormat> memory_format, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:18528:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18530:      .typed<Tensor & (IntArrayRef, c10::optional<MemoryFormat>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:18531:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18532:      .redispatch<Tensor &, IntArrayRef, c10::optional<MemoryFormat>, Tensor &>(op, c10::DispatchKey::Tracer, size, memory_format, out);
autograd/generated/TraceTypeEverything.cpp:18554:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18557:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18558:      .redispatch<Tensor, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, size, qtensor);
autograd/generated/TraceTypeEverything.cpp:18565:Tensor empty_strided(IntArrayRef size, IntArrayRef stride, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:18584:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18586:      .typed<Tensor (IntArrayRef, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:18587:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18588:      .redispatch<Tensor, IntArrayRef, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, stride, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:18610:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18613:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18614:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:18636:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18639:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18640:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:18667:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18670:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18671:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:18698:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18701:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18702:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:18730:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18733:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18734:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:18762:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18765:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18766:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:18774:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18777:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18778:      .redispatch<bool, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:18795:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18798:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18799:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:18825:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18828:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18829:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:18856:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18859:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18860:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:18881:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18884:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18885:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:18911:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18914:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18915:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:18942:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18945:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18946:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:18967:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18970:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:18971:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:18997:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19000:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19001:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:19028:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19031:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19032:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:19053:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19056:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19057:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:19078:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19081:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19082:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:19108:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19111:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19112:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:19139:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19142:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19143:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:19169:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19172:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19173:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:19200:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19203:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19204:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:19227:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19230:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19231:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, size, implicit);
autograd/generated/TraceTypeEverything.cpp:19253:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19256:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19257:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:19278:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19281:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19282:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:19308:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19311:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19312:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:19339:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19342:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19343:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:19350:Tensor & exponential_(Tensor & self, double lambd, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:19371:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19373:      .typed<Tensor & (Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:19374:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19375:      .redispatch<Tensor &, Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, lambd, generator);
autograd/generated/TraceTypeEverything.cpp:19382:Tensor eye(int64_t n, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:19400:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19402:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:19403:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19404:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:19411:Tensor eye_m(int64_t n, int64_t m, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:19430:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19432:      .typed<Tensor (int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:19433:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19434:      .redispatch<Tensor, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, m, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:19464:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19467:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19468:      .redispatch<Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, n, out);
autograd/generated/TraceTypeEverything.cpp:19499:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19502:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19503:      .redispatch<Tensor &, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, n, m, out);
autograd/generated/TraceTypeEverything.cpp:19529:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19532:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19533:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, axis, quant_min, quant_max);
autograd/generated/TraceTypeEverything.cpp:19561:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19564:  std::tie(output, mask) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19565:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, axis, quant_min, quant_max);
autograd/generated/TraceTypeEverything.cpp:19588:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19591:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19592:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, mask);
autograd/generated/TraceTypeEverything.cpp:19617:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19620:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19621:      .redispatch<Tensor, const Tensor &, double, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, quant_min, quant_max);
autograd/generated/TraceTypeEverything.cpp:19648:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19651:  std::tie(output, mask) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19652:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, double, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, quant_min, quant_max);
autograd/generated/TraceTypeEverything.cpp:19675:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19678:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19679:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, mask);
autograd/generated/TraceTypeEverything.cpp:19702:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19705:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19706:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input, packed_weight, bias);
autograd/generated/TraceTypeEverything.cpp:19729:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19732:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19733:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input, packed_weight, bias);
autograd/generated/TraceTypeEverything.cpp:19760:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19763:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19764:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
autograd/generated/TraceTypeEverything.cpp:19791:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19794:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19795:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
autograd/generated/TraceTypeEverything.cpp:19820:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19823:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19824:      .redispatch<std::tuple<Tensor,Tensor,double,int64_t>, const Tensor &>(op, c10::DispatchKey::Tracer, input);
autograd/generated/TraceTypeEverything.cpp:19848:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19851:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19852:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, input);
autograd/generated/TraceTypeEverything.cpp:19873:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19876:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19877:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, input);
autograd/generated/TraceTypeEverything.cpp:19900:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19903:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19904:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, input, K, N);
autograd/generated/TraceTypeEverything.cpp:19927:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19930:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19931:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, input, p, train);
autograd/generated/TraceTypeEverything.cpp:19959:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19962:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19963:      .redispatch<Tensor &, Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, p, train);
autograd/generated/TraceTypeEverything.cpp:19986:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19989:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:19990:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, input, p, train);
autograd/generated/TraceTypeEverything.cpp:20018:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20021:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20022:      .redispatch<Tensor &, Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, p, train);
autograd/generated/TraceTypeEverything.cpp:20029:Tensor fft_fft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20046:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20048:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20049:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20050:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20057:Tensor fft_fft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20074:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20076:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20077:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20078:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20085:Tensor & fft_fft2_out_out(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20108:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20110:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20111:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20112:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20119:Tensor & fft_fft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20142:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20144:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20145:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20146:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20153:Tensor fft_fftfreq(int64_t n, double d, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:20172:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20174:      .typed<Tensor (int64_t, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:20175:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20176:      .redispatch<Tensor, int64_t, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, d, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:20207:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20210:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20211:      .redispatch<Tensor &, int64_t, double, Tensor &>(op, c10::DispatchKey::Tracer, n, d, out);
autograd/generated/TraceTypeEverything.cpp:20218:Tensor fft_fftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20235:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20237:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20238:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20239:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20246:Tensor & fft_fftn_out_out(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20269:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20271:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20272:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20273:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20280:Tensor fft_fftshift(const Tensor & self, c10::optional<IntArrayRef> dim) {
autograd/generated/TraceTypeEverything.cpp:20295:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20297:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceTypeEverything.cpp:20298:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20299:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:20306:Tensor fft_hfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20323:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20325:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20326:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20327:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20334:Tensor & fft_hfft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20357:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20359:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20360:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20361:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20368:Tensor fft_ifft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20385:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20387:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20388:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20389:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20396:Tensor fft_ifft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20413:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20415:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20416:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20417:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20424:Tensor & fft_ifft2_out_out(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20447:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20449:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20450:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20451:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20458:Tensor & fft_ifft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20481:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20483:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20484:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20485:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20492:Tensor fft_ifftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20509:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20511:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20512:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20513:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20520:Tensor & fft_ifftn_out_out(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20543:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20545:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20546:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20547:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20554:Tensor fft_ifftshift(const Tensor & self, c10::optional<IntArrayRef> dim) {
autograd/generated/TraceTypeEverything.cpp:20569:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20571:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceTypeEverything.cpp:20572:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20573:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:20580:Tensor fft_ihfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20597:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20599:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20600:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20601:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20608:Tensor & fft_ihfft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20631:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20633:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20634:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20635:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20642:Tensor fft_irfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20659:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20661:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20662:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20663:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20670:Tensor fft_irfft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20687:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20689:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20690:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20691:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20698:Tensor & fft_irfft2_out_out(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20721:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20723:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20724:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20725:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20732:Tensor & fft_irfft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20755:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20757:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20758:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20759:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20766:Tensor fft_irfftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20783:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20785:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20786:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20787:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20794:Tensor & fft_irfftn_out_out(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20817:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20819:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20820:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20821:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20828:Tensor fft_rfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20845:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20847:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20848:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20849:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20856:Tensor fft_rfft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:20873:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20875:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:20876:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20877:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceTypeEverything.cpp:20884:Tensor & fft_rfft2_out_out(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20907:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20909:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20910:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20911:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20918:Tensor & fft_rfft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:20941:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20943:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:20944:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20945:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:20952:Tensor fft_rfftfreq(int64_t n, double d, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:20971:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20973:      .typed<Tensor (int64_t, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:20974:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:20975:      .redispatch<Tensor, int64_t, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, d, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:21006:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21009:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21010:      .redispatch<Tensor &, int64_t, double, Tensor &>(op, c10::DispatchKey::Tracer, n, d, out);
autograd/generated/TraceTypeEverything.cpp:21017:Tensor fft_rfftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) {
autograd/generated/TraceTypeEverything.cpp:21034:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21036:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>)>();
autograd/generated/TraceTypeEverything.cpp:21037:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21038:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceTypeEverything.cpp:21045:Tensor & fft_rfftn_out_out(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:21068:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21070:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:21071:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21072:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceTypeEverything.cpp:21096:          jit::tracer::addInputs(node, "options", c10::optional<ScalarType>());
autograd/generated/TraceTypeEverything.cpp:21097:          jit::tracer::addInputs(node, "options", layout_or_default(c10::nullopt));
autograd/generated/TraceTypeEverything.cpp:21098:          jit::tracer::addInputs(node, "options", device_or_default(c10::nullopt));
autograd/generated/TraceTypeEverything.cpp:21099:          jit::tracer::addInputs(node, "options", pinned_memory_or_default(c10::nullopt));
autograd/generated/TraceTypeEverything.cpp:21100:          c10::optional<MemoryFormat> memory_format = c10::MemoryFormat::Preserve;
autograd/generated/TraceTypeEverything.cpp:21109:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21112:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21113:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, value);
autograd/generated/TraceTypeEverything.cpp:21137:          jit::tracer::addInputs(node, "options", c10::optional<ScalarType>());
autograd/generated/TraceTypeEverything.cpp:21138:          jit::tracer::addInputs(node, "options", layout_or_default(c10::nullopt));
autograd/generated/TraceTypeEverything.cpp:21139:          jit::tracer::addInputs(node, "options", device_or_default(c10::nullopt));
autograd/generated/TraceTypeEverything.cpp:21140:          jit::tracer::addInputs(node, "options", pinned_memory_or_default(c10::nullopt));
autograd/generated/TraceTypeEverything.cpp:21141:          c10::optional<MemoryFormat> memory_format = c10::MemoryFormat::Preserve;
autograd/generated/TraceTypeEverything.cpp:21150:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21153:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21154:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, value);
autograd/generated/TraceTypeEverything.cpp:21182:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21185:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21186:      .redispatch<Tensor &, Tensor &, Scalar, bool>(op, c10::DispatchKey::Tracer, self, fill_value, wrap);
autograd/generated/TraceTypeEverything.cpp:21207:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21210:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21211:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:21237:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21240:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21241:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:21268:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21271:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21272:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:21295:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21298:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21299:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, start_dim, end_dim);
autograd/generated/TraceTypeEverything.cpp:21323:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21326:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21327:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, Dimname>(op, c10::DispatchKey::Tracer, self, start_dim, end_dim, out_dim);
autograd/generated/TraceTypeEverything.cpp:21351:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21354:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21355:      .redispatch<Tensor, const Tensor &, Dimname, Dimname, Dimname>(op, c10::DispatchKey::Tracer, self, start_dim, end_dim, out_dim);
autograd/generated/TraceTypeEverything.cpp:21378:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21381:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21382:      .redispatch<Tensor, const Tensor &, DimnameList, Dimname>(op, c10::DispatchKey::Tracer, self, dims, out_dim);
autograd/generated/TraceTypeEverything.cpp:21404:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21407:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21408:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dims);
autograd/generated/TraceTypeEverything.cpp:21429:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21432:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21433:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:21454:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21457:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21458:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:21480:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21483:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21484:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:21506:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21509:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21510:      .redispatch<Tensor, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:21532:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21535:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21536:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:21563:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21566:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21567:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:21594:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21597:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21598:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:21626:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21629:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21630:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceTypeEverything.cpp:21658:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21661:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21662:      .redispatch<Tensor &, Scalar, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceTypeEverything.cpp:21690:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21693:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21694:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceTypeEverything.cpp:21715:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21718:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21719:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:21745:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21748:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21749:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:21771:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21774:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21775:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:21797:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21800:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21801:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:21828:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21831:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21832:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:21859:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21862:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21863:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:21891:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21894:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21895:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:21922:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21925:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21926:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:21948:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21951:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21952:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:21980:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21983:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:21984:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:22006:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22009:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22010:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:22038:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22041:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22042:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:22064:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22067:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22068:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:22090:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22093:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22094:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:22121:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22124:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22125:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:22152:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22155:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22156:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:22184:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22187:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22188:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:22216:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22219:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22220:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:22241:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22244:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22245:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:22271:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22274:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22275:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:22302:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22305:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22306:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:22332:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22335:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22336:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, output_size, random_samples);
autograd/generated/TraceTypeEverything.cpp:22362:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22365:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22366:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, output_size, indices);
autograd/generated/TraceTypeEverything.cpp:22397:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22400:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22401:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, output_size, indices, grad_input);
autograd/generated/TraceTypeEverything.cpp:22432:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22435:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22436:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, output_size, random_samples, output, indices);
autograd/generated/TraceTypeEverything.cpp:22463:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22466:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22467:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, output_size, random_samples);
autograd/generated/TraceTypeEverything.cpp:22493:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22496:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22497:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, output_size, indices);
autograd/generated/TraceTypeEverything.cpp:22528:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22531:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22532:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, output_size, indices, grad_input);
autograd/generated/TraceTypeEverything.cpp:22563:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22566:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22567:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, output_size, random_samples, output, indices);
autograd/generated/TraceTypeEverything.cpp:22589:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22592:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22593:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:22616:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22619:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22620:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:22649:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22652:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22653:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:22660:Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:22680:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22682:      .typed<Tensor (std::string, c10::optional<bool>, c10::optional<int64_t>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:22683:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22684:      .redispatch<Tensor, std::string, c10::optional<bool>, c10::optional<int64_t>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, filename, shared, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:22691:Tensor full_names(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:22711:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22713:      .typed<Tensor (IntArrayRef, Scalar, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:22714:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22715:      .redispatch<Tensor, IntArrayRef, Scalar, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, fill_value, names, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:22722:Tensor full(IntArrayRef size, Scalar fill_value, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:22741:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22743:      .typed<Tensor (IntArrayRef, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:22744:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22745:      .redispatch<Tensor, IntArrayRef, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, fill_value, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:22752:Tensor full_like(const Tensor & self, Scalar fill_value, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:22772:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22774:      .typed<Tensor (const Tensor &, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:22775:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22776:      .redispatch<Tensor, const Tensor &, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, fill_value, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:22807:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22810:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22811:      .redispatch<Tensor &, IntArrayRef, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, size, fill_value, out);
autograd/generated/TraceTypeEverything.cpp:22835:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22838:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22839:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, dim, index, sparse_grad);
autograd/generated/TraceTypeEverything.cpp:22863:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22866:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22867:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, dim, index, sparse_grad);
autograd/generated/TraceTypeEverything.cpp:22892:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22895:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22896:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad, self, dim, index, sparse_grad);
autograd/generated/TraceTypeEverything.cpp:22926:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22929:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22930:      .redispatch<Tensor &, const Tensor &, int64_t, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, sparse_grad, out);
autograd/generated/TraceTypeEverything.cpp:22960:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22963:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22964:      .redispatch<Tensor &, const Tensor &, Dimname, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, sparse_grad, out);
autograd/generated/TraceTypeEverything.cpp:22986:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22989:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:22990:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23017:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23020:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23021:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23049:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23052:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23053:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:23075:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23078:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23079:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23101:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23104:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23105:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23132:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23135:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23136:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23163:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23166:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23167:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23195:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23198:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23199:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:23227:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23230:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23231:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:23252:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23255:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23256:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:23278:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23281:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23282:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, self);
autograd/generated/TraceTypeEverything.cpp:23289:Tensor & geometric_(Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:23310:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23312:      .typed<Tensor & (Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:23313:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23314:      .redispatch<Tensor &, Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceTypeEverything.cpp:23337:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23340:  std::tie(a, tau) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23341:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:23370:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23373:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23374:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, a, tau);
autograd/generated/TraceTypeEverything.cpp:23397:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23400:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23401:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, vec2);
autograd/generated/TraceTypeEverything.cpp:23429:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23432:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23433:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, vec2, out);
autograd/generated/TraceTypeEverything.cpp:23455:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23458:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23459:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:23482:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23485:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23486:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, dim);
autograd/generated/TraceTypeEverything.cpp:23515:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23518:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23519:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, dim, grad_input);
autograd/generated/TraceTypeEverything.cpp:23547:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23550:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23551:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceTypeEverything.cpp:23573:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23576:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23577:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23599:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23602:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23603:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23630:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23633:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23634:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23661:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23664:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23665:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23687:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23690:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23691:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23713:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23716:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23717:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23744:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23747:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23748:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23775:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23778:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23779:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:23807:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23810:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23811:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:23839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23842:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23843:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:23871:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23874:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23875:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:23903:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23906:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23907:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:23932:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23935:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23936:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceTypeEverything.cpp:23961:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23964:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23965:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceTypeEverything.cpp:23993:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23996:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:23997:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceTypeEverything.cpp:24023:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24026:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24027:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceTypeEverything.cpp:24055:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24058:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24059:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceTypeEverything.cpp:24067:Tensor group_norm(const Tensor & input, int64_t num_groups, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps, bool cudnn_enabled) {
autograd/generated/TraceTypeEverything.cpp:24086:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24088:      .typed<Tensor (const Tensor &, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, bool)>();
autograd/generated/TraceTypeEverything.cpp:24089:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24090:      .redispatch<Tensor, const Tensor &, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, bool>(op, c10::DispatchKey::Tracer, input, num_groups, weight, bias, eps, cudnn_enabled);
autograd/generated/TraceTypeEverything.cpp:24121:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24124:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24125:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
autograd/generated/TraceTypeEverything.cpp:24157:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24160:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24161:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(op, c10::DispatchKey::Tracer, data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
autograd/generated/TraceTypeEverything.cpp:24169:Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) {
autograd/generated/TraceTypeEverything.cpp:24170:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24172:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:24173:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24174:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh);
autograd/generated/TraceTypeEverything.cpp:24192:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24195:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24196:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:24218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24221:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24222:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:24249:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24252:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24253:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:24280:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24283:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24284:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:24312:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24315:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24316:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:24344:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24347:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24348:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:24355:Tensor hamming_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:24373:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24375:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:24376:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24377:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:24384:Tensor hamming_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:24403:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24405:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:24406:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24407:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:24414:Tensor hamming_window_periodic_alpha(int64_t window_length, bool periodic, double alpha, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:24434:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24436:      .typed<Tensor (int64_t, bool, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:24437:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24438:      .redispatch<Tensor, int64_t, bool, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, alpha, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:24445:Tensor hamming_window_periodic_alpha_beta(int64_t window_length, bool periodic, double alpha, double beta, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:24466:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24468:      .typed<Tensor (int64_t, bool, double, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:24469:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24470:      .redispatch<Tensor, int64_t, bool, double, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, alpha, beta, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:24477:Tensor hann_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:24495:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24497:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:24498:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24499:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:24506:Tensor hann_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:24525:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24527:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:24528:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24529:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:24551:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24554:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24555:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, lambd);
autograd/generated/TraceTypeEverything.cpp:24578:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24581:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24582:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, grad_out, self, lambd);
autograd/generated/TraceTypeEverything.cpp:24603:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24606:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24607:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:24633:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24636:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24637:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:24659:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24662:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24663:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceTypeEverything.cpp:24690:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24693:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24694:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:24715:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24718:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24719:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:24745:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24748:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24749:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:24771:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24774:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24775:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceTypeEverything.cpp:24802:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24805:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24806:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:24829:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24832:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24833:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, min_val, max_val);
autograd/generated/TraceTypeEverything.cpp:24861:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24864:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24865:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, min_val, max_val);
autograd/generated/TraceTypeEverything.cpp:24889:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24892:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24893:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, grad_output, self, min_val, max_val);
autograd/generated/TraceTypeEverything.cpp:24923:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24926:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24927:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, min_val, max_val, grad_input);
autograd/generated/TraceTypeEverything.cpp:24956:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24959:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24960:      .redispatch<Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, min_val, max_val, out);
autograd/generated/TraceTypeEverything.cpp:24982:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24985:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:24986:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, values);
autograd/generated/TraceTypeEverything.cpp:25013:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25016:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25017:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, values);
autograd/generated/TraceTypeEverything.cpp:25045:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25048:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25049:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, values, out);
autograd/generated/TraceTypeEverything.cpp:25073:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25076:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25077:      .redispatch<Tensor, const Tensor &, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, self, target, margin, reduction);
autograd/generated/TraceTypeEverything.cpp:25101:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25104:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25105:      .redispatch<Tensor, const Tensor &, int64_t, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, bins, min, max);
autograd/generated/TraceTypeEverything.cpp:25135:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25138:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25139:      .redispatch<Tensor &, const Tensor &, int64_t, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, bins, min, max, out);
autograd/generated/TraceTypeEverything.cpp:25161:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25164:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25165:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, mat1, mat2);
autograd/generated/TraceTypeEverything.cpp:25193:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25196:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25197:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, mat1, mat2, out);
autograd/generated/TraceTypeEverything.cpp:25218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25221:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25222:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:25249:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25252:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25253:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/generated/TraceTypeEverything.cpp:25275:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25278:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25279:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:25306:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25309:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25310:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:25338:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25341:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25342:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:25363:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25366:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25367:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:25393:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25396:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25397:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:25424:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25427:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25428:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:25450:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25453:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25454:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:25481:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25484:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25485:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:25513:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25516:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25517:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:25539:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25542:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25543:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:25570:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25573:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25574:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:25602:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25605:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25606:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:25631:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25634:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25635:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, kernel_size, dilation, padding, stride);
autograd/generated/TraceTypeEverything.cpp:25661:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25664:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25665:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, input_size, kernel_size, dilation, padding, stride);
autograd/generated/TraceTypeEverything.cpp:25697:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25700:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25701:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, input_size, kernel_size, dilation, padding, stride, grad_input);
autograd/generated/TraceTypeEverything.cpp:25732:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25735:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25736:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, dilation, padding, stride, out);
autograd/generated/TraceTypeEverything.cpp:25757:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25760:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25761:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:25768:Tensor index_Tensor(const Tensor & self, const c10::List<c10::optional<Tensor>> & indices) {
autograd/generated/TraceTypeEverything.cpp:25783:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25785:      .typed<Tensor (const Tensor &, const c10::List<c10::optional<Tensor>> &)>();
autograd/generated/TraceTypeEverything.cpp:25786:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25787:      .redispatch<Tensor, const Tensor &, const c10::List<c10::optional<Tensor>> &>(op, c10::DispatchKey::Tracer, self, indices);
autograd/generated/TraceTypeEverything.cpp:25811:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25814:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25815:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceTypeEverything.cpp:25839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25842:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25843:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceTypeEverything.cpp:25872:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25875:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25876:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceTypeEverything.cpp:25900:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25903:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25904:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceTypeEverything.cpp:25928:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25931:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25932:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceTypeEverything.cpp:25961:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25964:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25965:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceTypeEverything.cpp:25994:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25997:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:25998:      .redispatch<Tensor &, Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceTypeEverything.cpp:26022:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26025:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26026:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:26050:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26053:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26054:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:26078:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26081:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26082:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:26106:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26109:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26110:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:26139:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26142:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26143:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:26172:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26175:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26176:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:26205:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26208:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26209:      .redispatch<Tensor &, Tensor &, Dimname, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:26238:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26241:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26242:      .redispatch<Tensor &, Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:26249:Tensor index_put(const Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) {
autograd/generated/TraceTypeEverything.cpp:26266:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26268:      .typed<Tensor (const Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool)>();
autograd/generated/TraceTypeEverything.cpp:26269:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26270:      .redispatch<Tensor, const Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, indices, values, accumulate);
autograd/generated/TraceTypeEverything.cpp:26277:Tensor & index_put_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) {
autograd/generated/TraceTypeEverything.cpp:26299:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26301:      .typed<Tensor & (Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool)>();
autograd/generated/TraceTypeEverything.cpp:26302:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26303:      .redispatch<Tensor &, Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, indices, values, accumulate);
autograd/generated/TraceTypeEverything.cpp:26326:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26329:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26330:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index);
autograd/generated/TraceTypeEverything.cpp:26353:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26356:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26357:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index);
autograd/generated/TraceTypeEverything.cpp:26381:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26384:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26385:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad, self_sizes, dim, index);
autograd/generated/TraceTypeEverything.cpp:26414:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26417:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26418:      .redispatch<Tensor &, const Tensor &, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, out);
autograd/generated/TraceTypeEverything.cpp:26447:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26450:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26451:      .redispatch<Tensor &, const Tensor &, Dimname, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, out);
autograd/generated/TraceTypeEverything.cpp:26472:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26475:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26476:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26498:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26501:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26502:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, self);
autograd/generated/TraceTypeEverything.cpp:26524:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26527:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26528:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:26556:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26559:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26560:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:26567:Tensor instance_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
autograd/generated/TraceTypeEverything.cpp:26589:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26591:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool)>();
autograd/generated/TraceTypeEverything.cpp:26592:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26593:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);
autograd/generated/TraceTypeEverything.cpp:26614:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26617:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26618:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26639:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26642:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26643:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26670:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26673:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26674:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:26682:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26685:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26686:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26690:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26693:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26694:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26698:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26701:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26702:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26706:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26709:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26710:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26714:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26717:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26718:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26722:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26725:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26726:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26730:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26733:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26734:      .redispatch<bool, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:26738:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26741:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26742:      .redispatch<bool, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, tensor);
autograd/generated/TraceTypeEverything.cpp:26746:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26749:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26750:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26754:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26757:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26758:      .redispatch<bool>(op, c10::DispatchKey::Tracer);
autograd/generated/TraceTypeEverything.cpp:26779:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26782:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26783:      .redispatch<Tensor, const Tensor &, const Tensor &, double, double, bool>(op, c10::DispatchKey::Tracer, self, other, rtol, atol, equal_nan);
autograd/generated/TraceTypeEverything.cpp:26804:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26807:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26808:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26829:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26832:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26833:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26854:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26857:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26858:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26879:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26882:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26883:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26910:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26913:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26914:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:26935:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26938:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26939:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:26966:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26969:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26970:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:26991:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26994:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:26995:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:27002:Tensor istft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool center, bool normalized, c10::optional<bool> onesided, c10::optional<int64_t> length, bool return_complex) {
autograd/generated/TraceTypeEverything.cpp:27025:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27027:      .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const c10::optional<Tensor> &, bool, bool, c10::optional<bool>, c10::optional<int64_t>, bool)>();
autograd/generated/TraceTypeEverything.cpp:27028:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27029:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const c10::optional<Tensor> &, bool, bool, c10::optional<bool>, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, n_fft, hop_length, win_length, window, center, normalized, onesided, length, return_complex);
autograd/generated/TraceTypeEverything.cpp:27037:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27040:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27041:      .redispatch<Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:27044:Tensor kaiser_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:27062:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27064:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:27065:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27066:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:27073:Tensor kaiser_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:27092:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27094:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:27095:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27096:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:27103:Tensor kaiser_window_beta(int64_t window_length, bool periodic, double beta, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:27123:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27125:      .typed<Tensor (int64_t, bool, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:27126:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27127:      .redispatch<Tensor, int64_t, bool, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, beta, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:27151:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27154:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27155:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, target, reduction, log_target);
autograd/generated/TraceTypeEverything.cpp:27180:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27183:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27184:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, log_target);
autograd/generated/TraceTypeEverything.cpp:27206:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27209:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27210:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:27238:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27241:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27242:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:27268:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27271:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27272:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, self, k, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:27299:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27302:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27303:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, Dimname, bool>(op, c10::DispatchKey::Tracer, self, k, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:27335:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27338:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27339:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, k, dim, keepdim, values, indices);
autograd/generated/TraceTypeEverything.cpp:27371:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27374:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27375:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, k, dim, keepdim, values, indices);
autograd/generated/TraceTypeEverything.cpp:27399:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27402:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27403:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceTypeEverything.cpp:27427:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27430:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27431:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction);
autograd/generated/TraceTypeEverything.cpp:27461:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27464:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27465:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, grad_input);
autograd/generated/TraceTypeEverything.cpp:27494:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27497:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27498:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, out);
autograd/generated/TraceTypeEverything.cpp:27505:Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps, bool cudnn_enable) {
autograd/generated/TraceTypeEverything.cpp:27524:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27526:      .typed<Tensor (const Tensor &, IntArrayRef, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, bool)>();
autograd/generated/TraceTypeEverything.cpp:27527:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27528:      .redispatch<Tensor, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, bool>(op, c10::DispatchKey::Tracer, input, normalized_shape, weight, bias, eps, cudnn_enable);
autograd/generated/TraceTypeEverything.cpp:27550:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27553:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27554:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:27581:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27584:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27585:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:27613:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27616:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27617:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:27639:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27642:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27643:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:27670:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27673:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27674:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:27702:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27705:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27706:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:27728:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27731:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27732:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:27754:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27757:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27758:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:27785:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27788:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27789:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:27816:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27819:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27820:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:27848:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27851:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27852:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:27880:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27883:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27884:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:27906:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27909:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27910:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, negative_slope);
autograd/generated/TraceTypeEverything.cpp:27937:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27940:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27941:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, negative_slope);
autograd/generated/TraceTypeEverything.cpp:27965:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27968:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:27969:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, bool>(op, c10::DispatchKey::Tracer, grad_output, self, negative_slope, self_is_result);
autograd/generated/TraceTypeEverything.cpp:27997:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28000:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28001:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, negative_slope, out);
autograd/generated/TraceTypeEverything.cpp:28024:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28027:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28028:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, end, weight);
autograd/generated/TraceTypeEverything.cpp:28051:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28054:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28055:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, end, weight);
autograd/generated/TraceTypeEverything.cpp:28083:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28086:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28087:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, end, weight);
autograd/generated/TraceTypeEverything.cpp:28115:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28118:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28119:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, end, weight);
autograd/generated/TraceTypeEverything.cpp:28148:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28151:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28152:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, end, weight, out);
autograd/generated/TraceTypeEverything.cpp:28181:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28184:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28185:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, end, weight, out);
autograd/generated/TraceTypeEverything.cpp:28207:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28210:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28211:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:28233:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28236:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28237:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:28264:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28267:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28268:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:28295:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28298:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28299:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:28321:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28324:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28325:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:28347:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28350:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28351:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:28378:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28381:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28382:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:28409:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28412:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28413:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:28441:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28444:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28445:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:28473:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28476:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28477:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:28505:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28508:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28509:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:28537:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28540:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28541:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:28562:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28565:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28566:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:28592:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28595:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28596:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:28623:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28626:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28627:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:28648:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28651:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28652:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:28679:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28682:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28683:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:28690:Tensor linalg_cond(const Tensor & self, c10::optional<Scalar> p) {
autograd/generated/TraceTypeEverything.cpp:28705:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28707:      .typed<Tensor (const Tensor &, c10::optional<Scalar>)>();
autograd/generated/TraceTypeEverything.cpp:28708:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28709:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceTypeEverything.cpp:28731:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28734:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28735:      .redispatch<Tensor, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceTypeEverything.cpp:28742:Tensor & linalg_cond_out_out(const Tensor & self, c10::optional<Scalar> p, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:28763:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28765:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:28766:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28767:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, Tensor &>(op, c10::DispatchKey::Tracer, self, p, out);
autograd/generated/TraceTypeEverything.cpp:28795:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28798:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28799:      .redispatch<Tensor &, const Tensor &, std::string, Tensor &>(op, c10::DispatchKey::Tracer, self, p, out);
autograd/generated/TraceTypeEverything.cpp:28820:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28823:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28824:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:28848:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28851:  std::tie(eigenvalues, eigenvectors) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28852:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, UPLO);
autograd/generated/TraceTypeEverything.cpp:28882:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28885:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28886:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, std::string, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, UPLO, eigvals, eigvecs);
autograd/generated/TraceTypeEverything.cpp:28909:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28912:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28913:      .redispatch<Tensor, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, UPLO);
autograd/generated/TraceTypeEverything.cpp:28941:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28944:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28945:      .redispatch<Tensor &, const Tensor &, std::string, Tensor &>(op, c10::DispatchKey::Tracer, self, UPLO, out);
autograd/generated/TraceTypeEverything.cpp:28966:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28969:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:28970:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:28997:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29000:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29001:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:29008:Tensor linalg_matrix_rank(const Tensor & self, c10::optional<double> tol, bool hermitian) {
autograd/generated/TraceTypeEverything.cpp:29024:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29026:      .typed<Tensor (const Tensor &, c10::optional<double>, bool)>();
autograd/generated/TraceTypeEverything.cpp:29027:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29028:      .redispatch<Tensor, const Tensor &, c10::optional<double>, bool>(op, c10::DispatchKey::Tracer, self, tol, hermitian);
autograd/generated/TraceTypeEverything.cpp:29035:Tensor & linalg_matrix_rank_out_out(const Tensor & self, c10::optional<double> tol, bool hermitian, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:29057:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29059:      .typed<Tensor & (const Tensor &, c10::optional<double>, bool, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:29060:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29061:      .redispatch<Tensor &, const Tensor &, c10::optional<double>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, tol, hermitian, out);
autograd/generated/TraceTypeEverything.cpp:29068:Tensor linalg_norm(const Tensor & self, c10::optional<Scalar> ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:29086:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29088:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:29089:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29090:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, ord, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:29097:Tensor linalg_norm_ord_str(const Tensor & self, std::string ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:29115:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29117:      .typed<Tensor (const Tensor &, std::string, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:29118:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29119:      .redispatch<Tensor, const Tensor &, std::string, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, ord, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:29126:Tensor & linalg_norm_out_out(const Tensor & self, c10::optional<Scalar> ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:29150:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29152:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:29153:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29154:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, ord, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:29161:Tensor & linalg_norm_out_ord_str_out(const Tensor & self, std::string ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:29185:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29187:      .typed<Tensor & (const Tensor &, std::string, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:29188:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29189:      .redispatch<Tensor &, const Tensor &, std::string, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, ord, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:29212:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29215:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29216:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, rcond, hermitian);
autograd/generated/TraceTypeEverything.cpp:29239:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29242:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29243:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, rcond, hermitian);
autograd/generated/TraceTypeEverything.cpp:29272:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29275:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29276:      .redispatch<Tensor &, const Tensor &, double, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, rcond, hermitian, out);
autograd/generated/TraceTypeEverything.cpp:29305:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29308:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29309:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, rcond, hermitian, out);
autograd/generated/TraceTypeEverything.cpp:29333:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29336:  std::tie(Q, R) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29337:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, mode);
autograd/generated/TraceTypeEverything.cpp:29367:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29370:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29371:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, std::string, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, mode, Q, R);
autograd/generated/TraceTypeEverything.cpp:29395:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29398:  std::tie(sign, logabsdet) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29399:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:29428:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29431:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29432:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, sign, logabsdet);
autograd/generated/TraceTypeEverything.cpp:29455:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29458:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29459:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input, other);
autograd/generated/TraceTypeEverything.cpp:29487:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29490:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29491:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, input, other, out);
autograd/generated/TraceTypeEverything.cpp:29517:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29520:  std::tie(U, S, V) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29521:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, full_matrices, compute_uv);
autograd/generated/TraceTypeEverything.cpp:29554:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29557:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29558:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, bool, bool, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, full_matrices, compute_uv, U, S, V);
autograd/generated/TraceTypeEverything.cpp:29582:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29585:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29586:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, ind);
autograd/generated/TraceTypeEverything.cpp:29614:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29617:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29618:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, ind, out);
autograd/generated/TraceTypeEverything.cpp:29625:Tensor linalg_tensorsolve(const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims) {
autograd/generated/TraceTypeEverything.cpp:29641:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29643:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceTypeEverything.cpp:29644:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29645:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, self, other, dims);
autograd/generated/TraceTypeEverything.cpp:29652:Tensor & linalg_tensorsolve_out_out(const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:29674:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29676:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<IntArrayRef>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:29677:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29678:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<IntArrayRef>, Tensor &>(op, c10::DispatchKey::Tracer, self, other, dims, out);
autograd/generated/TraceTypeEverything.cpp:29685:Tensor linear(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias) {
autograd/generated/TraceTypeEverything.cpp:29686:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29688:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:29689:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29690:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, weight, bias);
autograd/generated/TraceTypeEverything.cpp:29693:Tensor linspace(Scalar start, Scalar end, c10::optional<int64_t> steps, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:29713:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29715:      .typed<Tensor (Scalar, Scalar, c10::optional<int64_t>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:29716:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29717:      .redispatch<Tensor, Scalar, Scalar, c10::optional<int64_t>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, steps, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:29724:Tensor & linspace_out_out(Scalar start, Scalar end, c10::optional<int64_t> steps, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:29749:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29751:      .typed<Tensor & (Scalar, Scalar, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:29752:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29753:      .redispatch<Tensor &, Scalar, Scalar, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, start, end, steps, out);
autograd/generated/TraceTypeEverything.cpp:29774:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29777:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29778:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:29799:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29802:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29803:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:29829:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29832:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29833:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:29860:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29863:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29864:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:29885:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29888:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29889:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:29915:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29918:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29919:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:29946:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29949:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29950:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:29971:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29974:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:29975:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:30001:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30004:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30005:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:30032:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30035:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30036:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:30062:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30065:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30066:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:30073:Tensor & log_normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:30095:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30097:      .typed<Tensor & (Tensor &, double, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:30098:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30099:      .redispatch<Tensor &, Tensor &, double, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, mean, std, generator);
autograd/generated/TraceTypeEverything.cpp:30126:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30129:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30130:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:30151:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30154:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30155:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:30178:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30181:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30182:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, buffer);
autograd/generated/TraceTypeEverything.cpp:30211:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30214:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30215:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, buffer, grad_input);
autograd/generated/TraceTypeEverything.cpp:30238:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30241:  std::tie(output, buffer) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30242:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:30271:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30274:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30275:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, output, buffer);
autograd/generated/TraceTypeEverything.cpp:30303:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30306:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30307:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:30314:Tensor log_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:30330:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30332:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:30333:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30334:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:30341:Tensor log_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:30357:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30359:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:30360:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30361:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:30383:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30386:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30387:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:30409:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30412:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30413:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:30441:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30444:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30445:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:30473:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30476:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30477:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:30499:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30502:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30503:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:30525:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30528:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30529:      .redispatch<Tensor, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:30557:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30560:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30561:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceTypeEverything.cpp:30589:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30592:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30593:      .redispatch<Tensor &, const Tensor &, Dimname, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceTypeEverything.cpp:30614:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30617:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30618:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:30640:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30643:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30644:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:30671:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30674:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30675:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:30703:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30706:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30707:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:30728:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30731:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30732:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:30758:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30761:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30762:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:30789:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30792:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30793:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:30815:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30818:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30819:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:30846:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30849:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30850:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:30878:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30881:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30882:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:30904:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30907:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30908:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:30935:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30938:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30939:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:30967:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30970:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30971:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:30978:Tensor logit(const Tensor & self, c10::optional<double> eps) {
autograd/generated/TraceTypeEverything.cpp:30993:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30995:      .typed<Tensor (const Tensor &, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:30996:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:30997:      .redispatch<Tensor, const Tensor &, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, eps);
autograd/generated/TraceTypeEverything.cpp:31004:Tensor & logit_(Tensor & self, c10::optional<double> eps) {
autograd/generated/TraceTypeEverything.cpp:31024:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31026:      .typed<Tensor & (Tensor &, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:31027:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31028:      .redispatch<Tensor &, Tensor &, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, eps);
autograd/generated/TraceTypeEverything.cpp:31035:Tensor logit_backward(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps) {
autograd/generated/TraceTypeEverything.cpp:31051:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31053:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:31054:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31055:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, self, eps);
autograd/generated/TraceTypeEverything.cpp:31062:Tensor & logit_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:31084:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31086:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:31087:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31088:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, eps, grad_input);
autograd/generated/TraceTypeEverything.cpp:31095:Tensor & logit_out_out(const Tensor & self, c10::optional<double> eps, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:31116:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31118:      .typed<Tensor & (const Tensor &, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:31119:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31120:      .redispatch<Tensor &, const Tensor &, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, eps, out);
autograd/generated/TraceTypeEverything.cpp:31127:Tensor logspace(Scalar start, Scalar end, c10::optional<int64_t> steps, double base, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:31148:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31150:      .typed<Tensor (Scalar, Scalar, c10::optional<int64_t>, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:31151:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31152:      .redispatch<Tensor, Scalar, Scalar, c10::optional<int64_t>, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, steps, base, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:31159:Tensor & logspace_out_out(Scalar start, Scalar end, c10::optional<int64_t> steps, double base, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:31185:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31187:      .typed<Tensor & (Scalar, Scalar, c10::optional<int64_t>, double, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:31188:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31189:      .redispatch<Tensor &, Scalar, Scalar, c10::optional<int64_t>, double, Tensor &>(op, c10::DispatchKey::Tracer, start, end, steps, base, out);
autograd/generated/TraceTypeEverything.cpp:31212:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31215:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31216:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:31239:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31242:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31243:      .redispatch<Tensor, const Tensor &, DimnameList, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:31272:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31275:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31276:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:31305:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31308:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31309:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:31341:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31344:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31345:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
autograd/generated/TraceTypeEverything.cpp:31379:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31382:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31383:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool>(op, c10::DispatchKey::Tracer, data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
autograd/generated/TraceTypeEverything.cpp:31392:std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) {
autograd/generated/TraceTypeEverything.cpp:31395:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31397:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:31398:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31399:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, TensorList, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh);
autograd/generated/TraceTypeEverything.cpp:31419:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31422:  std::tie(solution, QR) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31423:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, A);
autograd/generated/TraceTypeEverything.cpp:31453:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31456:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31457:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, A, X, qr);
autograd/generated/TraceTypeEverything.cpp:31480:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31483:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31484:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:31506:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31509:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31510:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:31537:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31540:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31541:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:31568:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31571:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31572:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:31600:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31603:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31604:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:31632:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31635:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31636:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:31659:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31662:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31663:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, LU_data, LU_pivots);
autograd/generated/TraceTypeEverything.cpp:31692:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31695:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31696:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, LU_data, LU_pivots, out);
autograd/generated/TraceTypeEverything.cpp:31721:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31724:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31725:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, input1, input2, target, margin, reduction);
autograd/generated/TraceTypeEverything.cpp:31748:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31751:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31752:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, mask, value);
autograd/generated/TraceTypeEverything.cpp:31775:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31778:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31779:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask, value);
autograd/generated/TraceTypeEverything.cpp:31807:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31810:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31811:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, mask, value);
autograd/generated/TraceTypeEverything.cpp:31839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31842:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31843:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask, value);
autograd/generated/TraceTypeEverything.cpp:31866:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31869:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31870:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask, source);
autograd/generated/TraceTypeEverything.cpp:31898:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31901:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31902:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask, source);
autograd/generated/TraceTypeEverything.cpp:31924:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31927:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31928:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask);
autograd/generated/TraceTypeEverything.cpp:31951:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31954:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31955:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, input, mask);
autograd/generated/TraceTypeEverything.cpp:31983:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31986:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:31987:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, mask, out);
autograd/generated/TraceTypeEverything.cpp:32009:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32012:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32013:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:32041:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32044:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32045:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:32066:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32069:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32070:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:32092:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32095:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32096:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, grad);
autograd/generated/TraceTypeEverything.cpp:32118:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32121:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32122:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, n);
autograd/generated/TraceTypeEverything.cpp:32145:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32148:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32149:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, tol, symmetric);
autograd/generated/TraceTypeEverything.cpp:32171:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32174:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32175:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, symmetric);
autograd/generated/TraceTypeEverything.cpp:32200:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32203:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32204:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:32230:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32233:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32234:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:32256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32259:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32260:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:32282:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32285:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32286:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:32316:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32319:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32320:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, max, max_values);
autograd/generated/TraceTypeEverything.cpp:32351:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32354:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32355:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, max, max_values);
autograd/generated/TraceTypeEverything.cpp:32384:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32387:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32388:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:32414:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32417:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32418:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:32446:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32449:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32450:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:32477:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32480:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32481:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:32509:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32512:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32513:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:32542:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32545:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32546:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
autograd/generated/TraceTypeEverything.cpp:32580:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32583:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32584:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
autograd/generated/TraceTypeEverything.cpp:32617:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32620:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32621:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
autograd/generated/TraceTypeEverything.cpp:32648:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32651:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32652:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:32680:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32683:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32684:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:32713:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32716:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32717:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
autograd/generated/TraceTypeEverything.cpp:32751:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32754:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32755:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
autograd/generated/TraceTypeEverything.cpp:32788:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32791:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32792:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
autograd/generated/TraceTypeEverything.cpp:32816:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32819:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32820:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, indices, output_size);
autograd/generated/TraceTypeEverything.cpp:32844:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32847:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32848:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, indices, output_size);
autograd/generated/TraceTypeEverything.cpp:32878:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32881:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32882:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices, output_size, grad_input);
autograd/generated/TraceTypeEverything.cpp:32911:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32914:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32915:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, indices, output_size, out);
autograd/generated/TraceTypeEverything.cpp:32940:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32943:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32944:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, indices, output_size, stride, padding);
autograd/generated/TraceTypeEverything.cpp:32970:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32973:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:32974:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, indices, output_size, stride, padding);
autograd/generated/TraceTypeEverything.cpp:33006:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33009:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33010:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices, output_size, stride, padding, grad_input);
autograd/generated/TraceTypeEverything.cpp:33041:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33044:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33045:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, indices, output_size, stride, padding, out);
autograd/generated/TraceTypeEverything.cpp:33067:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33070:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33071:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:33099:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33102:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33103:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:33110:Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:33125:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33127:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:33128:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33129:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceTypeEverything.cpp:33136:Tensor mean_dim(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:33153:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33155:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:33156:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33157:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:33164:Tensor mean_names_dim(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:33181:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33183:      .typed<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:33184:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33185:      .redispatch<Tensor, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:33192:Tensor & mean_out_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:33215:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33217:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:33218:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33219:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:33226:Tensor & mean_out_names_out(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:33249:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33251:      .typed<Tensor & (const Tensor &, DimnameList, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:33252:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33253:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:33274:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33277:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33278:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:33303:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33306:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33307:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:33333:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33336:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33337:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:33368:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33371:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33372:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceTypeEverything.cpp:33403:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33406:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33407:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceTypeEverything.cpp:33429:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33432:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33433:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:33458:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33461:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33462:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:33488:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33491:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33492:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:33514:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33517:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33518:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:33540:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33543:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33544:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:33574:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33577:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33578:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, min, min_indices);
autograd/generated/TraceTypeEverything.cpp:33609:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33612:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33613:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, min, min_indices);
autograd/generated/TraceTypeEverything.cpp:33642:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33645:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33646:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:33668:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33671:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33672:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:33700:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33703:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33704:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:33711:std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) {
autograd/generated/TraceTypeEverything.cpp:33735:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33737:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double)>();
autograd/generated/TraceTypeEverything.cpp:33738:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33739:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
autograd/generated/TraceTypeEverything.cpp:33748:std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon) {
autograd/generated/TraceTypeEverything.cpp:33772:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33774:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double)>();
autograd/generated/TraceTypeEverything.cpp:33775:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33776:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double>(op, c10::DispatchKey::Tracer, input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon);
autograd/generated/TraceTypeEverything.cpp:33785:Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceTypeEverything.cpp:33807:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33809:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceTypeEverything.cpp:33810:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33811:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:33844:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33847:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33848:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
autograd/generated/TraceTypeEverything.cpp:33871:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33874:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33875:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output);
autograd/generated/TraceTypeEverything.cpp:33904:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33907:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33908:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:33937:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33940:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33941:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:33948:Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceTypeEverything.cpp:33971:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33973:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceTypeEverything.cpp:33974:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:33975:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:34009:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34012:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34013:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
autograd/generated/TraceTypeEverything.cpp:34043:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34046:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34047:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:34076:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34079:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34080:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:34087:Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceTypeEverything.cpp:34109:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34111:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceTypeEverything.cpp:34112:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34113:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:34146:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34149:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34150:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
autograd/generated/TraceTypeEverything.cpp:34181:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34184:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34185:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:34214:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34217:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34218:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceTypeEverything.cpp:34225:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) {
autograd/generated/TraceTypeEverything.cpp:34257:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34259:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, TensorList, int64_t, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:34260:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34261:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, TensorList, int64_t, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, weight, weight_stride0, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);
autograd/generated/TraceTypeEverything.cpp:34272:std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
autograd/generated/TraceTypeEverything.cpp:34310:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34312:      .typed<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &, const Tensor &, std::array<bool,4>)>();
autograd/generated/TraceTypeEverything.cpp:34313:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34314:      .redispatch<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>>, const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &, const Tensor &, std::array<bool,4>>(op, c10::DispatchKey::Tracer, input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
autograd/generated/TraceTypeEverything.cpp:34339:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34342:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34343:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceTypeEverything.cpp:34350:Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
autograd/generated/TraceTypeEverything.cpp:34370:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34372:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:34373:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34374:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, stride, dilation, groups);
autograd/generated/TraceTypeEverything.cpp:34405:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34408:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34409:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, stride, dilation, groups, output_mask);
autograd/generated/TraceTypeEverything.cpp:34439:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34442:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34443:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);
autograd/generated/TraceTypeEverything.cpp:34473:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34476:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34477:      .redispatch<std::tuple<Tensor,Tensor>, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);
autograd/generated/TraceTypeEverything.cpp:34485:Tensor mkldnn_linear(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias) {
autograd/generated/TraceTypeEverything.cpp:34501:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34503:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:34504:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34505:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, self, weight, bias);
autograd/generated/TraceTypeEverything.cpp:34532:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34535:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34536:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, output_mask);
autograd/generated/TraceTypeEverything.cpp:34561:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34564:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34565:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input_size, grad_output, weight);
autograd/generated/TraceTypeEverything.cpp:34591:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34594:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34595:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad_output, input, weight, bias_defined);
autograd/generated/TraceTypeEverything.cpp:34622:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34625:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34626:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:34652:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34655:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34656:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:34681:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34684:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34685:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, padding, stride, dilation, groups);
autograd/generated/TraceTypeEverything.cpp:34710:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34713:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34714:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, padding, stride, dilation, groups);
autograd/generated/TraceTypeEverything.cpp:34736:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34739:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34740:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mat2);
autograd/generated/TraceTypeEverything.cpp:34768:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34771:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34772:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, mat2, out);
autograd/generated/TraceTypeEverything.cpp:34797:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34800:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34801:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:34827:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34830:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34831:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:34862:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34865:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34866:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceTypeEverything.cpp:34897:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34900:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34901:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceTypeEverything.cpp:34925:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34928:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34929:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, source, destination);
autograd/generated/TraceTypeEverything.cpp:34952:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34955:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34956:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, source, destination);
autograd/generated/TraceTypeEverything.cpp:34979:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34982:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:34983:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, source, destination);
autograd/generated/TraceTypeEverything.cpp:35006:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35009:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35010:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, source, destination);
autograd/generated/TraceTypeEverything.cpp:35033:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35036:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35037:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceTypeEverything.cpp:35061:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35064:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35065:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction);
autograd/generated/TraceTypeEverything.cpp:35095:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35098:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35099:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, grad_input);
autograd/generated/TraceTypeEverything.cpp:35128:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35131:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35132:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, out);
autograd/generated/TraceTypeEverything.cpp:35153:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35156:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35157:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:35184:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35187:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35188:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:35210:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35213:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35214:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:35236:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35239:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35240:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:35267:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35270:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35271:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:35298:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35301:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35302:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:35330:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35333:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35334:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:35341:Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/TraceTypeEverything.cpp:35360:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35362:      .typed<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:35363:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35364:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, self, target, p, margin, weight, reduction);
autograd/generated/TraceTypeEverything.cpp:35371:Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/TraceTypeEverything.cpp:35391:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35393:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:35394:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35395:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, p, margin, weight, reduction);
autograd/generated/TraceTypeEverything.cpp:35402:Tensor & multi_margin_loss_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:35428:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35430:      .typed<Tensor & (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:35431:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35432:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, p, margin, weight, reduction, grad_input);
autograd/generated/TraceTypeEverything.cpp:35439:Tensor & multi_margin_loss_out_out(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:35464:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35466:      .typed<Tensor & (const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:35467:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35468:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, p, margin, weight, reduction, out);
autograd/generated/TraceTypeEverything.cpp:35491:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35494:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35495:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceTypeEverything.cpp:35520:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35523:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35524:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, is_target);
autograd/generated/TraceTypeEverything.cpp:35555:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35558:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35559:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, is_target, grad_input);
autograd/generated/TraceTypeEverything.cpp:35584:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35587:  std::tie(output, is_target) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35588:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceTypeEverything.cpp:35619:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35622:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35623:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, output, is_target);
autograd/generated/TraceTypeEverything.cpp:35653:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35656:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35657:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, out);
autograd/generated/TraceTypeEverything.cpp:35664:Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:35681:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35683:      .typed<Tensor (const Tensor &, int64_t, bool, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:35684:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35685:      .redispatch<Tensor, const Tensor &, int64_t, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, num_samples, replacement, generator);
autograd/generated/TraceTypeEverything.cpp:35692:Tensor & multinomial_out_out(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:35715:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35717:      .typed<Tensor & (const Tensor &, int64_t, bool, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:35718:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35719:      .redispatch<Tensor &, const Tensor &, int64_t, bool, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, self, num_samples, replacement, generator, out);
autograd/generated/TraceTypeEverything.cpp:35741:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35744:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35745:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:35767:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35770:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35771:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:35798:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35801:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35802:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:35829:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35832:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35833:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:35861:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35864:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35865:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:35887:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35890:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35891:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, vec);
autograd/generated/TraceTypeEverything.cpp:35919:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35922:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35923:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, vec, out);
autograd/generated/TraceTypeEverything.cpp:35945:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35948:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35949:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceTypeEverything.cpp:35976:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35979:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:35980:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceTypeEverything.cpp:35987:Tensor nan_to_num(const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/TraceTypeEverything.cpp:36004:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36006:      .typed<Tensor (const Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:36007:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36008:      .redispatch<Tensor, const Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, nan, posinf, neginf);
autograd/generated/TraceTypeEverything.cpp:36015:Tensor & nan_to_num_(Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/TraceTypeEverything.cpp:36037:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36039:      .typed<Tensor & (Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:36040:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36041:      .redispatch<Tensor &, Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, nan, posinf, neginf);
autograd/generated/TraceTypeEverything.cpp:36048:Tensor & nan_to_num_out_out(const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:36071:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36073:      .typed<Tensor & (const Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:36074:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36075:      .redispatch<Tensor &, const Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, nan, posinf, neginf, out);
autograd/generated/TraceTypeEverything.cpp:36096:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36099:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36100:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:36125:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36128:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36129:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:36155:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36158:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36159:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:36190:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36193:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36194:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceTypeEverything.cpp:36225:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36228:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36229:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceTypeEverything.cpp:36237:Tensor nanquantile_scalar(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceTypeEverything.cpp:36254:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36256:      .typed<Tensor (const Tensor &, double, c10::optional<int64_t>, bool)>();
autograd/generated/TraceTypeEverything.cpp:36257:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36258:      .redispatch<Tensor, const Tensor &, double, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:36265:Tensor nanquantile(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceTypeEverything.cpp:36282:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36284:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceTypeEverything.cpp:36285:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36286:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:36293:Tensor & nanquantile_out_scalar_out(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:36316:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36318:      .typed<Tensor & (const Tensor &, double, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:36319:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36320:      .redispatch<Tensor &, const Tensor &, double, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:36327:Tensor & nanquantile_out_out(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:36350:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36352:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:36353:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36354:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:36361:Tensor nansum(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:36376:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36378:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:36379:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36380:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceTypeEverything.cpp:36387:Tensor nansum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:36404:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36406:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:36407:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36408:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:36415:Tensor & nansum_out_IntList_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:36438:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36440:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:36441:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36442:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:36466:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36469:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36470:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim, start, length);
autograd/generated/TraceTypeEverything.cpp:36494:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36497:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36498:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim, start, length);
autograd/generated/TraceTypeEverything.cpp:36522:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36525:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36526:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim, start, length);
autograd/generated/TraceTypeEverything.cpp:36556:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36559:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36560:      .redispatch<Tensor &, const Tensor &, int64_t, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, start, length, out);
autograd/generated/TraceTypeEverything.cpp:36567:std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps) {
autograd/generated/TraceTypeEverything.cpp:36591:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36593:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double)>();
autograd/generated/TraceTypeEverything.cpp:36594:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36595:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, momentum, eps);
autograd/generated/TraceTypeEverything.cpp:36604:std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
autograd/generated/TraceTypeEverything.cpp:36630:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36632:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, std::array<bool,3>)>();
autograd/generated/TraceTypeEverything.cpp:36633:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36634:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
autograd/generated/TraceTypeEverything.cpp:36643:std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_out_out(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, Tensor & out, Tensor & save_mean, Tensor & save_invstd) {
autograd/generated/TraceTypeEverything.cpp:36672:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36674:      .typed<std::tuple<Tensor &,Tensor &,Tensor &> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, Tensor &, Tensor &, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:36675:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36676:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, momentum, eps, out, save_mean, save_invstd);
autograd/generated/TraceTypeEverything.cpp:36685:std::tuple<Tensor,Tensor,Tensor> native_group_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps) {
autograd/generated/TraceTypeEverything.cpp:36709:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36711:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, double)>();
autograd/generated/TraceTypeEverything.cpp:36712:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36713:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, input, weight, bias, N, C, HxW, group, eps);
autograd/generated/TraceTypeEverything.cpp:36722:std::tuple<Tensor,Tensor,Tensor> native_group_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, std::array<bool,3> output_mask) {
autograd/generated/TraceTypeEverything.cpp:36748:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36750:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, std::array<bool,3>)>();
autograd/generated/TraceTypeEverything.cpp:36751:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36752:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_out, input, mean, rstd, weight, N, C, HxW, group, output_mask);
autograd/generated/TraceTypeEverything.cpp:36761:std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps) {
autograd/generated/TraceTypeEverything.cpp:36782:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36784:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, IntArrayRef, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double)>();
autograd/generated/TraceTypeEverything.cpp:36785:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36786:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double>(op, c10::DispatchKey::Tracer, input, normalized_shape, weight, bias, eps);
autograd/generated/TraceTypeEverything.cpp:36795:std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, IntArrayRef normalized_shape, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, std::array<bool,3> output_mask) {
autograd/generated/TraceTypeEverything.cpp:36819:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36821:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, std::array<bool,3>)>();
autograd/generated/TraceTypeEverything.cpp:36822:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36823:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_out, input, normalized_shape, mean, rstd, weight, bias, output_mask);
autograd/generated/TraceTypeEverything.cpp:36847:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36850:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36851:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceTypeEverything.cpp:36858:Tensor native_norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:36876:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36878:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:36879:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36880:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:36902:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36905:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36906:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:36928:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36931:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36932:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:36959:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36962:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36963:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:36990:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36993:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:36994:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:37022:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37025:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37026:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:37054:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37057:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37058:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:37079:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37082:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37083:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:37109:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37112:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37113:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:37140:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37143:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37144:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:37165:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37168:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37169:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:37195:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37198:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37199:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:37226:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37229:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37230:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:37237:Tensor new_empty(const Tensor & self, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:37256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37258:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:37259:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37260:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:37267:Tensor new_empty_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:37287:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37289:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:37290:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37291:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, size, stride, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:37298:Tensor new_full(const Tensor & self, IntArrayRef size, Scalar fill_value, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:37318:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37320:      .typed<Tensor (const Tensor &, IntArrayRef, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:37321:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37322:      .redispatch<Tensor, const Tensor &, IntArrayRef, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, size, fill_value, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:37329:Tensor new_zeros(const Tensor & self, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:37348:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37350:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:37351:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37352:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:37374:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37377:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37378:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:37405:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37408:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37409:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:37437:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37440:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37441:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:37448:Tensor nll_loss(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/TraceTypeEverything.cpp:37466:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37468:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:37469:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37470:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index);
autograd/generated/TraceTypeEverything.cpp:37477:Tensor nll_loss2d(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/TraceTypeEverything.cpp:37495:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37497:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:37498:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37499:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index);
autograd/generated/TraceTypeEverything.cpp:37506:Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
autograd/generated/TraceTypeEverything.cpp:37526:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37528:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:37529:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37530:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, ignore_index, total_weight);
autograd/generated/TraceTypeEverything.cpp:37537:Tensor & nll_loss2d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:37563:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37565:      .typed<Tensor & (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:37566:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37567:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
autograd/generated/TraceTypeEverything.cpp:37574:std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/TraceTypeEverything.cpp:37594:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37596:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:37597:  std::tie(output, total_weight) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37598:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index);
autograd/generated/TraceTypeEverything.cpp:37606:std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out_output(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/TraceTypeEverything.cpp:37631:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37633:      .typed<std::tuple<Tensor &,Tensor &> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:37634:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37635:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index, output, total_weight);
autograd/generated/TraceTypeEverything.cpp:37643:Tensor & nll_loss2d_out_out(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:37667:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37669:      .typed<Tensor & (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:37670:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37671:      .redispatch<Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index, out);
autograd/generated/TraceTypeEverything.cpp:37678:Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
autograd/generated/TraceTypeEverything.cpp:37698:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37700:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:37701:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37702:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, ignore_index, total_weight);
autograd/generated/TraceTypeEverything.cpp:37709:Tensor & nll_loss_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:37735:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37737:      .typed<Tensor & (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:37738:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37739:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
autograd/generated/TraceTypeEverything.cpp:37746:std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/TraceTypeEverything.cpp:37766:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37768:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:37769:  std::tie(output, total_weight) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37770:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index);
autograd/generated/TraceTypeEverything.cpp:37778:std::tuple<Tensor &,Tensor &> nll_loss_forward_out_output(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/TraceTypeEverything.cpp:37803:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37805:      .typed<std::tuple<Tensor &,Tensor &> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:37806:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37807:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index, output, total_weight);
autograd/generated/TraceTypeEverything.cpp:37815:Tensor & nll_loss_out_out(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:37839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37841:      .typed<Tensor & (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:37842:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37843:      .redispatch<Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index, out);
autograd/generated/TraceTypeEverything.cpp:37864:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37867:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37868:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:37889:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37892:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37893:      .redispatch<std::vector<Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:37920:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37923:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37924:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:37931:Tensor norm_ScalarOpt_dtype(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {
autograd/generated/TraceTypeEverything.cpp:37947:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37949:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, ScalarType)>();
autograd/generated/TraceTypeEverything.cpp:37950:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37951:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, ScalarType>(op, c10::DispatchKey::Tracer, self, p, dtype);
autograd/generated/TraceTypeEverything.cpp:37973:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37976:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:37977:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceTypeEverything.cpp:37984:Tensor norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
autograd/generated/TraceTypeEverything.cpp:38002:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38004:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType)>();
autograd/generated/TraceTypeEverything.cpp:38005:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38006:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:38013:Tensor norm_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
autograd/generated/TraceTypeEverything.cpp:38030:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38032:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool)>();
autograd/generated/TraceTypeEverything.cpp:38033:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38034:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:38041:Tensor norm_names_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
autograd/generated/TraceTypeEverything.cpp:38059:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38061:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType)>();
autograd/generated/TraceTypeEverything.cpp:38062:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38063:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:38070:Tensor norm_names_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
autograd/generated/TraceTypeEverything.cpp:38087:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38089:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool)>();
autograd/generated/TraceTypeEverything.cpp:38090:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38091:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, DimnameList, bool>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:38114:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38117:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38118:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, v, pow, dim);
autograd/generated/TraceTypeEverything.cpp:38125:Tensor & norm_out_dtype_out(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:38149:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38151:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:38152:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38153:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:38160:Tensor & norm_out_out(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:38183:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38185:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:38186:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38187:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:38194:Tensor & norm_out_names_dtype_out(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:38218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38220:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:38221:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38222:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:38229:Tensor & norm_out_names_out(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:38252:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38254:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, DimnameList, bool, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:38255:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38256:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:38263:Tensor normal_Tensor_float(const Tensor & mean, double std, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:38279:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38281:      .typed<Tensor (const Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:38282:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38283:      .redispatch<Tensor, const Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, mean, std, generator);
autograd/generated/TraceTypeEverything.cpp:38290:Tensor normal_float_Tensor(double mean, const Tensor & std, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:38306:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38308:      .typed<Tensor (double, const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:38309:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38310:      .redispatch<Tensor, double, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, mean, std, generator);
autograd/generated/TraceTypeEverything.cpp:38317:Tensor normal_Tensor_Tensor(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:38333:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38335:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:38336:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38337:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, mean, std, generator);
autograd/generated/TraceTypeEverything.cpp:38344:Tensor normal_float_float(double mean, double std, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:38365:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38367:      .typed<Tensor (double, double, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:38368:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38369:      .redispatch<Tensor, double, double, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, mean, std, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:38376:Tensor & normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:38398:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38400:      .typed<Tensor & (Tensor &, double, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:38401:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38402:      .redispatch<Tensor &, Tensor &, double, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, mean, std, generator);
autograd/generated/TraceTypeEverything.cpp:38409:Tensor & normal_out_Tensor_float_out(const Tensor & mean, double std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:38434:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38436:      .typed<Tensor & (const Tensor &, double, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:38437:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38438:      .redispatch<Tensor &, const Tensor &, double, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, mean, std, generator, out);
autograd/generated/TraceTypeEverything.cpp:38445:Tensor & normal_out_float_Tensor_out(double mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:38470:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38472:      .typed<Tensor & (double, const Tensor &, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:38473:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38474:      .redispatch<Tensor &, double, const Tensor &, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, mean, std, generator, out);
autograd/generated/TraceTypeEverything.cpp:38481:Tensor & normal_out_Tensor_Tensor_out(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:38506:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38508:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:38509:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38510:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, mean, std, generator, out);
autograd/generated/TraceTypeEverything.cpp:38517:Tensor & normal_out_float_float_out(double mean, double std, IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:38543:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38545:      .typed<Tensor & (double, double, IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:38546:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38547:      .redispatch<Tensor &, double, double, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, mean, std, size, generator, out);
autograd/generated/TraceTypeEverything.cpp:38569:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38572:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38573:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:38595:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38598:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38599:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:38626:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38629:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38630:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:38657:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38660:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38661:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:38689:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38692:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38693:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:38721:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38724:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38725:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:38747:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38750:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38751:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, keepdim);
autograd/generated/TraceTypeEverything.cpp:38774:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38777:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38778:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:38806:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38809:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38810:      .redispatch<Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:38839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38842:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38843:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:38864:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38867:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38868:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:38890:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38893:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38894:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, num_classes);
autograd/generated/TraceTypeEverything.cpp:38901:Tensor ones_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:38920:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38922:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:38923:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38924:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:38931:Tensor ones(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:38949:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38951:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:38952:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38953:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:38960:Tensor ones_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:38979:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38981:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:38982:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:38983:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:39013:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39016:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39017:      .redispatch<Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, size, out);
autograd/generated/TraceTypeEverything.cpp:39039:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39042:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39043:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, input2);
autograd/generated/TraceTypeEverything.cpp:39071:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39074:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39075:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, input2, out);
autograd/generated/TraceTypeEverything.cpp:39100:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39103:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39104:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, input2, input3, left, transpose);
autograd/generated/TraceTypeEverything.cpp:39135:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39138:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39139:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, input2, input3, left, transpose, out);
autograd/generated/TraceTypeEverything.cpp:39161:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39164:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39165:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, vec2);
autograd/generated/TraceTypeEverything.cpp:39193:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39196:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39197:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, vec2, out);
autograd/generated/TraceTypeEverything.cpp:39222:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39225:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39226:      .redispatch<Tensor, const Tensor &, const Tensor &, double, double, bool>(op, c10::DispatchKey::Tracer, x1, x2, p, eps, keepdim);
autograd/generated/TraceTypeEverything.cpp:39248:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39251:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39252:      .redispatch<Tensor, const Tensor &, double>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceTypeEverything.cpp:39274:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39277:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39278:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dims);
autograd/generated/TraceTypeEverything.cpp:39299:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39302:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39303:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:39325:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39328:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39329:      .redispatch<Tensor, const Tensor &, double>(op, c10::DispatchKey::Tracer, self, rcond);
autograd/generated/TraceTypeEverything.cpp:39351:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39354:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39355:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, upscale_factor);
autograd/generated/TraceTypeEverything.cpp:39377:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39380:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39381:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, downscale_factor);
autograd/generated/TraceTypeEverything.cpp:39388:Tensor poisson(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:39403:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39405:      .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:39406:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39407:      .redispatch<Tensor, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceTypeEverything.cpp:39433:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39436:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39437:      .redispatch<Tensor, const Tensor &, const Tensor &, bool, bool, double, int64_t>(op, c10::DispatchKey::Tracer, input, target, log_input, full, eps, reduction);
autograd/generated/TraceTypeEverything.cpp:39459:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39462:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39463:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, abs, angle);
autograd/generated/TraceTypeEverything.cpp:39491:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39494:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39495:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, abs, angle, out);
autograd/generated/TraceTypeEverything.cpp:39517:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39520:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39521:      .redispatch<Tensor, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, n, self);
autograd/generated/TraceTypeEverything.cpp:39548:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39551:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39552:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, n);
autograd/generated/TraceTypeEverything.cpp:39580:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39583:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39584:      .redispatch<Tensor &, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, n, self, out);
autograd/generated/TraceTypeEverything.cpp:39606:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39609:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39610:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:39632:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39635:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39636:      .redispatch<Tensor, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:39658:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39661:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39662:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:39689:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39692:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39693:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:39720:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39723:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39724:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceTypeEverything.cpp:39752:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39755:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39756:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceTypeEverything.cpp:39784:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39787:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39788:      .redispatch<Tensor &, Scalar, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceTypeEverything.cpp:39816:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39819:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39820:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceTypeEverything.cpp:39842:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39845:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39846:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, weight);
autograd/generated/TraceTypeEverything.cpp:39871:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39874:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39875:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight);
autograd/generated/TraceTypeEverything.cpp:39883:Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:39898:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39900:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:39901:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39902:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceTypeEverything.cpp:39909:Tensor prod_dim_int(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:39926:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39928:      .typed<Tensor (const Tensor &, int64_t, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:39929:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39930:      .redispatch<Tensor, const Tensor &, int64_t, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:39937:Tensor prod_dim_Dimname(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:39954:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39956:      .typed<Tensor (const Tensor &, Dimname, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:39957:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39958:      .redispatch<Tensor, const Tensor &, Dimname, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:39965:Tensor & prod_out_int_out(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:39988:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39990:      .typed<Tensor & (const Tensor &, int64_t, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:39991:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:39992:      .redispatch<Tensor &, const Tensor &, int64_t, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:39999:Tensor & prod_out_Dimname_out(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:40022:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40024:      .typed<Tensor & (const Tensor &, Dimname, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:40025:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40026:      .redispatch<Tensor &, const Tensor &, Dimname, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:40034:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40037:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40038:      .redispatch<ScalarType, ScalarType, ScalarType>(op, c10::DispatchKey::Tracer, type1, type2);
autograd/generated/TraceTypeEverything.cpp:40063:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40066:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40067:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, index, source, accumulate);
autograd/generated/TraceTypeEverything.cpp:40075:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40078:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40079:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:40096:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40099:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40100:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:40121:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40124:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40125:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:40133:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40136:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40137:      .redispatch<double, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:40141:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40144:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40145:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:40165:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40168:  std::tie(Q, R) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40169:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, some);
autograd/generated/TraceTypeEverything.cpp:40199:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40202:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40203:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, some, Q, R);
autograd/generated/TraceTypeEverything.cpp:40212:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40215:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40216:      .redispatch<QScheme, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:40219:Tensor quantile_scalar(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceTypeEverything.cpp:40236:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40238:      .typed<Tensor (const Tensor &, double, c10::optional<int64_t>, bool)>();
autograd/generated/TraceTypeEverything.cpp:40239:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40240:      .redispatch<Tensor, const Tensor &, double, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:40247:Tensor quantile(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceTypeEverything.cpp:40264:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40266:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceTypeEverything.cpp:40267:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40268:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim);
autograd/generated/TraceTypeEverything.cpp:40275:Tensor & quantile_out_scalar_out(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:40298:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40300:      .typed<Tensor & (const Tensor &, double, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:40301:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40302:      .redispatch<Tensor &, const Tensor &, double, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:40309:Tensor & quantile_out_out(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:40332:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40334:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:40335:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40336:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:40361:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40364:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40365:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, ScalarType>(op, c10::DispatchKey::Tracer, self, scales, zero_points, axis, dtype);
autograd/generated/TraceTypeEverything.cpp:40389:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40392:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40393:      .redispatch<Tensor, const Tensor &, double, int64_t, ScalarType>(op, c10::DispatchKey::Tracer, self, scale, zero_point, dtype);
autograd/generated/TraceTypeEverything.cpp:40417:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40420:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40421:      .redispatch<std::vector<Tensor>, TensorList, const Tensor &, const Tensor &, ScalarType>(op, c10::DispatchKey::Tracer, tensors, scales, zero_points, dtype);
autograd/generated/TraceTypeEverything.cpp:40428:Tensor quantized_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & var, double eps, double output_scale, int64_t output_zero_point) {
autograd/generated/TraceTypeEverything.cpp:40449:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40451:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double, double, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:40452:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40453:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double, double, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, mean, var, eps, output_scale, output_zero_point);
autograd/generated/TraceTypeEverything.cpp:40487:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40490:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40491:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
autograd/generated/TraceTypeEverything.cpp:40527:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40530:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40531:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
autograd/generated/TraceTypeEverything.cpp:40558:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40561:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40562:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:40588:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40591:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40592:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceTypeEverything.cpp:40626:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40629:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40630:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
autograd/generated/TraceTypeEverything.cpp:40664:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40667:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40668:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
autograd/generated/TraceTypeEverything.cpp:40689:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40692:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40693:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:40719:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40722:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40723:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:40750:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40753:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40754:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:40761:Tensor rand_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:40780:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40782:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:40783:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40784:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:40791:Tensor rand_generator_with_names(IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:40811:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40813:      .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:40814:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40815:      .redispatch<Tensor, IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, generator, names, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:40822:Tensor rand(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:40840:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40842:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:40843:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40844:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:40851:Tensor rand_generator(IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:40870:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40872:      .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:40873:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40874:      .redispatch<Tensor, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:40881:Tensor rand_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:40900:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40902:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:40903:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40904:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:40934:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40937:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40938:      .redispatch<Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, size, out);
autograd/generated/TraceTypeEverything.cpp:40945:Tensor & rand_out_generator_out(IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:40969:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40971:      .typed<Tensor & (IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:40972:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:40973:      .redispatch<Tensor &, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, size, generator, out);
autograd/generated/TraceTypeEverything.cpp:40980:Tensor randint(int64_t high, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:40999:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41001:      .typed<Tensor (int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41002:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41003:      .redispatch<Tensor, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, high, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41010:Tensor randint_generator(int64_t high, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41030:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41032:      .typed<Tensor (int64_t, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41033:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41034:      .redispatch<Tensor, int64_t, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, high, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41041:Tensor randint_low(int64_t low, int64_t high, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41061:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41063:      .typed<Tensor (int64_t, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41064:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41065:      .redispatch<Tensor, int64_t, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, low, high, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41072:Tensor randint_low_generator(int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41093:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41095:      .typed<Tensor (int64_t, int64_t, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41096:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41097:      .redispatch<Tensor, int64_t, int64_t, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, low, high, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41104:Tensor randint_like(const Tensor & self, int64_t high, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:41124:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41126:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:41127:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41128:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, high, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:41135:Tensor randint_like_low_dtype(const Tensor & self, int64_t low, int64_t high, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:41156:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41158:      .typed<Tensor (const Tensor &, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:41159:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41160:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, low, high, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:41191:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41194:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41195:      .redispatch<Tensor &, int64_t, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, high, size, out);
autograd/generated/TraceTypeEverything.cpp:41202:Tensor & randint_out_generator_out(int64_t high, IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:41227:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41229:      .typed<Tensor & (int64_t, IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:41230:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41231:      .redispatch<Tensor &, int64_t, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, high, size, generator, out);
autograd/generated/TraceTypeEverything.cpp:41263:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41266:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41267:      .redispatch<Tensor &, int64_t, int64_t, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, low, high, size, out);
autograd/generated/TraceTypeEverything.cpp:41274:Tensor & randint_out_low_generator_out(int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:41300:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41302:      .typed<Tensor & (int64_t, int64_t, IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:41303:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41304:      .redispatch<Tensor &, int64_t, int64_t, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, low, high, size, generator, out);
autograd/generated/TraceTypeEverything.cpp:41311:Tensor randn(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41329:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41331:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41332:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41333:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41340:Tensor randn_generator(IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41359:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41361:      .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41362:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41363:      .redispatch<Tensor, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41370:Tensor randn_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41389:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41391:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41392:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41393:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41400:Tensor randn_generator_with_names(IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41420:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41422:      .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41423:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41424:      .redispatch<Tensor, IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, generator, names, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41431:Tensor randn_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:41450:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41452:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:41453:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41454:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:41484:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41487:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41488:      .redispatch<Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, size, out);
autograd/generated/TraceTypeEverything.cpp:41495:Tensor & randn_out_generator_out(IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:41519:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41521:      .typed<Tensor & (IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:41522:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41523:      .redispatch<Tensor &, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, size, generator, out);
autograd/generated/TraceTypeEverything.cpp:41530:Tensor & random__from(Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:41552:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41554:      .typed<Tensor & (Tensor &, int64_t, c10::optional<int64_t>, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:41555:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41556:      .redispatch<Tensor &, Tensor &, int64_t, c10::optional<int64_t>, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, from, to, generator);
autograd/generated/TraceTypeEverything.cpp:41563:Tensor & random__to(Tensor & self, int64_t to, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:41584:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41586:      .typed<Tensor & (Tensor &, int64_t, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:41587:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41588:      .redispatch<Tensor &, Tensor &, int64_t, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, to, generator);
autograd/generated/TraceTypeEverything.cpp:41595:Tensor & random_(Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:41615:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41617:      .typed<Tensor & (Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:41618:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41619:      .redispatch<Tensor &, Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceTypeEverything.cpp:41626:Tensor randperm(int64_t n, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41644:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41646:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41647:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41648:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41655:Tensor randperm_generator(int64_t n, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41674:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41676:      .typed<Tensor (int64_t, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41677:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41678:      .redispatch<Tensor, int64_t, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41708:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41711:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41712:      .redispatch<Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, n, out);
autograd/generated/TraceTypeEverything.cpp:41719:Tensor & randperm_out_generator_out(int64_t n, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:41743:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41745:      .typed<Tensor & (int64_t, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:41746:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41747:      .redispatch<Tensor &, int64_t, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, n, generator, out);
autograd/generated/TraceTypeEverything.cpp:41754:Tensor range_step(Scalar start, Scalar end, Scalar step, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41774:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41776:      .typed<Tensor (Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41777:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41778:      .redispatch<Tensor, Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, step, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41785:Tensor range(Scalar start, Scalar end, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:41804:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41806:      .typed<Tensor (Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:41807:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41808:      .redispatch<Tensor, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:41840:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41843:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41844:      .redispatch<Tensor &, Scalar, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, start, end, step, out);
autograd/generated/TraceTypeEverything.cpp:41865:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41868:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41869:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:41890:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41893:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41894:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:41915:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41918:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41919:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:41945:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41948:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41949:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:41976:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41979:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41980:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:41988:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41991:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:41992:      .redispatch<void, Tensor &, Stream>(op, c10::DispatchKey::Tracer, self, s);
autograd/generated/TraceTypeEverything.cpp:42009:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42012:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42013:      .redispatch<Tensor, const Tensor &, DimnameList>(op, c10::DispatchKey::Tracer, self, names);
autograd/generated/TraceTypeEverything.cpp:42035:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42038:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42039:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceTypeEverything.cpp:42062:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42065:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42066:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceTypeEverything.cpp:42095:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42098:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42099:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceTypeEverything.cpp:42127:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42130:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42131:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceTypeEverything.cpp:42153:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42156:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42157:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceTypeEverything.cpp:42180:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42183:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42184:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceTypeEverything.cpp:42213:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42216:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42217:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceTypeEverything.cpp:42245:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42248:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42249:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceTypeEverything.cpp:42270:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42273:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42274:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:42300:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42303:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42304:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:42326:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42329:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42330:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:42352:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42355:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42356:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:42383:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42386:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42387:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:42414:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42417:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42418:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:42446:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42449:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42450:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:42478:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42481:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42482:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:42489:Tensor rename(const Tensor & self, c10::optional<DimnameList> names) {
autograd/generated/TraceTypeEverything.cpp:42504:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42506:      .typed<Tensor (const Tensor &, c10::optional<DimnameList>)>();
autograd/generated/TraceTypeEverything.cpp:42507:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42508:      .redispatch<Tensor, const Tensor &, c10::optional<DimnameList>>(op, c10::DispatchKey::Tracer, self, names);
autograd/generated/TraceTypeEverything.cpp:42515:Tensor & rename_(Tensor & self, c10::optional<DimnameList> names) {
autograd/generated/TraceTypeEverything.cpp:42535:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42537:      .typed<Tensor & (Tensor &, c10::optional<DimnameList>)>();
autograd/generated/TraceTypeEverything.cpp:42538:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42539:      .redispatch<Tensor &, Tensor &, c10::optional<DimnameList>>(op, c10::DispatchKey::Tracer, self, names);
autograd/generated/TraceTypeEverything.cpp:42563:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42566:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42567:      .redispatch<Tensor, const Tensor &, Scalar, int64_t, Scalar>(op, c10::DispatchKey::Tracer, self, p, dim, maxnorm);
autograd/generated/TraceTypeEverything.cpp:42596:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42599:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42600:      .redispatch<Tensor &, Tensor &, Scalar, int64_t, Scalar>(op, c10::DispatchKey::Tracer, self, p, dim, maxnorm);
autograd/generated/TraceTypeEverything.cpp:42630:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42633:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42634:      .redispatch<Tensor &, const Tensor &, Scalar, int64_t, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, maxnorm, out);
autograd/generated/TraceTypeEverything.cpp:42656:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42659:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42660:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, repeats);
autograd/generated/TraceTypeEverything.cpp:42681:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42684:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42685:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, repeats);
autograd/generated/TraceTypeEverything.cpp:42692:Tensor repeat_interleave_self_Tensor(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) {
autograd/generated/TraceTypeEverything.cpp:42708:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42710:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:42711:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42712:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, repeats, dim);
autograd/generated/TraceTypeEverything.cpp:42719:Tensor repeat_interleave_self_int(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {
autograd/generated/TraceTypeEverything.cpp:42735:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42737:      .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:42738:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42739:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, repeats, dim);
autograd/generated/TraceTypeEverything.cpp:42761:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42764:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42765:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceTypeEverything.cpp:42788:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42791:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42792:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceTypeEverything.cpp:42821:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42824:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42825:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceTypeEverything.cpp:42853:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42856:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42857:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceTypeEverything.cpp:42879:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42882:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42883:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceTypeEverything.cpp:42906:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42909:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42910:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceTypeEverything.cpp:42939:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42942:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42943:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceTypeEverything.cpp:42971:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42974:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:42975:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceTypeEverything.cpp:42997:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43000:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43001:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceTypeEverything.cpp:43024:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43027:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43028:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceTypeEverything.cpp:43057:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43060:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43061:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceTypeEverything.cpp:43089:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43092:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43093:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceTypeEverything.cpp:43115:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43118:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43119:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, shape);
autograd/generated/TraceTypeEverything.cpp:43141:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43144:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43145:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:43153:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43156:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43157:      .redispatch<ScalarType, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, tensor, other);
autograd/generated/TraceTypeEverything.cpp:43161:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43164:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43165:      .redispatch<ScalarType, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, tensor, other);
autograd/generated/TraceTypeEverything.cpp:43169:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43172:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43173:      .redispatch<ScalarType, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, scalar, tensor);
autograd/generated/TraceTypeEverything.cpp:43177:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43180:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43181:      .redispatch<ScalarType, Scalar, Scalar>(op, c10::DispatchKey::Tracer, scalar1, scalar2);
autograd/generated/TraceTypeEverything.cpp:43208:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43211:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43212:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
autograd/generated/TraceTypeEverything.cpp:43244:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43247:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43248:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(op, c10::DispatchKey::Tracer, data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
autograd/generated/TraceTypeEverything.cpp:43256:Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) {
autograd/generated/TraceTypeEverything.cpp:43257:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43259:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:43260:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43261:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh);
autograd/generated/TraceTypeEverything.cpp:43288:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43291:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43292:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
autograd/generated/TraceTypeEverything.cpp:43324:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43327:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43328:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(op, c10::DispatchKey::Tracer, data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
autograd/generated/TraceTypeEverything.cpp:43336:Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) {
autograd/generated/TraceTypeEverything.cpp:43337:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43339:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceTypeEverything.cpp:43340:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43341:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh);
autograd/generated/TraceTypeEverything.cpp:43360:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43363:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43364:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, shifts, dims);
autograd/generated/TraceTypeEverything.cpp:43387:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43390:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43391:      .redispatch<Tensor, const Tensor &, int64_t, IntArrayRef>(op, c10::DispatchKey::Tracer, self, k, dims);
autograd/generated/TraceTypeEverything.cpp:43412:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43415:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43416:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:43442:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43445:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43446:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:43473:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43476:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43477:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:43498:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43501:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43502:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:43529:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43532:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43533:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/generated/TraceTypeEverything.cpp:43540:Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:43558:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43560:      .typed<Tensor (const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:43561:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43562:      .redispatch<Tensor, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, lower, upper, training, generator);
autograd/generated/TraceTypeEverything.cpp:43569:Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:43592:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43594:      .typed<Tensor & (Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:43595:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43596:      .redispatch<Tensor &, Tensor &, Scalar, Scalar, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, lower, upper, training, generator);
autograd/generated/TraceTypeEverything.cpp:43603:Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:43622:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43624:      .typed<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:43625:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43626:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, noise, lower, upper, training, generator);
autograd/generated/TraceTypeEverything.cpp:43633:Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:43657:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43659:      .typed<Tensor & (Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:43660:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43661:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, noise, lower, upper, training, generator);
autograd/generated/TraceTypeEverything.cpp:43688:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43691:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43692:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool, bool>(op, c10::DispatchKey::Tracer, grad_output, self, noise, lower, upper, training, self_is_result);
autograd/generated/TraceTypeEverything.cpp:43699:Tensor & rrelu_with_noise_out_out(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:43724:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43726:      .typed<Tensor & (const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:43727:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43728:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, self, noise, lower, upper, training, generator, out);
autograd/generated/TraceTypeEverything.cpp:43749:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43752:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43753:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:43779:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43782:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43783:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:43810:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43813:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43814:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:43837:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43840:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43841:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:43864:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43867:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43868:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:43875:Tensor scalar_tensor(Scalar s, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:43893:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43895:      .typed<Tensor (Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:43896:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43897:      .redispatch<Tensor, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, s, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:43921:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43924:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43925:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceTypeEverything.cpp:43949:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43952:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43953:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:43977:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43980:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:43981:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceTypeEverything.cpp:44005:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44008:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44009:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:44038:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44041:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44042:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceTypeEverything.cpp:44071:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44074:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44075:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceTypeEverything.cpp:44105:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44108:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44109:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, dim, index, src, reduce);
autograd/generated/TraceTypeEverything.cpp:44139:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44142:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44143:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, dim, index, value, reduce);
autograd/generated/TraceTypeEverything.cpp:44167:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44170:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44171:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceTypeEverything.cpp:44195:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44198:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44199:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceTypeEverything.cpp:44228:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44231:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44232:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceTypeEverything.cpp:44256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44259:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44260:      .redispatch<Tensor, const Tensor &, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, sorted_sequence, self, out_int32, right);
autograd/generated/TraceTypeEverything.cpp:44284:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44287:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44288:      .redispatch<Tensor, const Tensor &, Scalar, bool, bool>(op, c10::DispatchKey::Tracer, sorted_sequence, self, out_int32, right);
autograd/generated/TraceTypeEverything.cpp:44318:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44321:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44322:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, sorted_sequence, self, out_int32, right, out);
autograd/generated/TraceTypeEverything.cpp:44345:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44348:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44349:      .redispatch<Tensor, const Tensor &, Dimname, int64_t>(op, c10::DispatchKey::Tracer, self, dim, index);
autograd/generated/TraceTypeEverything.cpp:44372:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44375:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44376:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim, index);
autograd/generated/TraceTypeEverything.cpp:44400:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44403:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44404:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad, input_sizes, dim, index);
autograd/generated/TraceTypeEverything.cpp:44425:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44428:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44429:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44455:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44458:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44459:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44467:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44470:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44471:      .redispatch<Tensor &, Tensor &, Storage>(op, c10::DispatchKey::Tracer, self, source);
autograd/generated/TraceTypeEverything.cpp:44475:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44478:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44479:      .redispatch<Tensor &, Tensor &, Storage, int64_t, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, source, storage_offset, size, stride);
autograd/generated/TraceTypeEverything.cpp:44502:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44505:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44506:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, source);
autograd/generated/TraceTypeEverything.cpp:44532:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44535:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44536:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44557:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44560:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44561:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44587:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44590:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44591:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44618:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44621:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44622:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:44643:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44646:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44647:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44673:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44676:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44677:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44699:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44702:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44703:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output);
autograd/generated/TraceTypeEverything.cpp:44731:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44734:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44735:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, grad_input);
autograd/generated/TraceTypeEverything.cpp:44762:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44765:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44766:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:44787:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44790:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44791:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44817:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44820:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44821:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44848:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44851:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44852:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:44873:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44876:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44877:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44904:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44907:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44908:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:44929:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44932:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44933:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44959:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44962:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44963:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:44985:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44988:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:44989:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceTypeEverything.cpp:45016:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45019:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45020:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:45041:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45044:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45045:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:45071:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45074:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45075:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:45102:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45105:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45106:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:45127:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45130:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45131:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:45157:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45160:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45161:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:45188:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45191:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45192:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:45213:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45216:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45217:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:45243:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45246:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45247:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:45274:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45277:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45278:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:45286:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45289:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45290:      .redispatch<int64_t, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:45294:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45297:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45298:      .redispatch<int64_t, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:45301:Tensor slice_Tensor(const Tensor & self, int64_t dim, c10::optional<int64_t> start, c10::optional<int64_t> end, int64_t step) {
autograd/generated/TraceTypeEverything.cpp:45319:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45321:      .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, int64_t)>();
autograd/generated/TraceTypeEverything.cpp:45322:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45323:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, int64_t>(op, c10::DispatchKey::Tracer, self, dim, start, end, step);
autograd/generated/TraceTypeEverything.cpp:45349:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45352:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45353:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad, input_sizes, dim, start, end, step);
autograd/generated/TraceTypeEverything.cpp:45376:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45379:  std::tie(sign, logabsdet) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45380:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:45388:Tensor slow_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/TraceTypeEverything.cpp:45407:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45409:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:45410:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45411:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding);
autograd/generated/TraceTypeEverything.cpp:45443:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45446:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45447:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
autograd/generated/TraceTypeEverything.cpp:45485:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45488:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45489:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/TraceTypeEverything.cpp:45498:std::tuple<Tensor,Tensor,Tensor> slow_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/TraceTypeEverything.cpp:45520:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45522:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:45523:  std::tie(output, finput, fgrad_input) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45524:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding);
autograd/generated/TraceTypeEverything.cpp:45533:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out_output(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/TraceTypeEverything.cpp:45560:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45562:      .typed<std::tuple<Tensor &,Tensor &,Tensor &> (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &, Tensor &, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:45563:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45564:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
autograd/generated/TraceTypeEverything.cpp:45573:Tensor & slow_conv3d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:45598:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45600:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:45601:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45602:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, out);
autograd/generated/TraceTypeEverything.cpp:45609:Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/TraceTypeEverything.cpp:45629:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45631:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:45632:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45633:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation);
autograd/generated/TraceTypeEverything.cpp:45664:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45667:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45668:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
autograd/generated/TraceTypeEverything.cpp:45677:Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/TraceTypeEverything.cpp:45697:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45699:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:45700:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45701:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation);
autograd/generated/TraceTypeEverything.cpp:45732:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45735:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45736:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
autograd/generated/TraceTypeEverything.cpp:45745:Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
autograd/generated/TraceTypeEverything.cpp:45766:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45768:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:45769:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45770:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
autograd/generated/TraceTypeEverything.cpp:45804:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45807:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45808:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
autograd/generated/TraceTypeEverything.cpp:45848:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45851:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45852:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, grad_input, grad_weight, grad_bias);
autograd/generated/TraceTypeEverything.cpp:45861:Tensor & slow_conv_transpose2d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:45888:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45890:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:45891:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45892:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
autograd/generated/TraceTypeEverything.cpp:45899:Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
autograd/generated/TraceTypeEverything.cpp:45920:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45922:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:45923:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45924:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
autograd/generated/TraceTypeEverything.cpp:45958:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45961:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:45962:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
autograd/generated/TraceTypeEverything.cpp:46002:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46005:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46006:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/TraceTypeEverything.cpp:46015:Tensor & slow_conv_transpose3d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:46042:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46044:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:46045:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46046:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
autograd/generated/TraceTypeEverything.cpp:46068:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46071:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46072:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mat2);
autograd/generated/TraceTypeEverything.cpp:46096:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46099:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46100:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, double>(op, c10::DispatchKey::Tracer, self, target, reduction, beta);
autograd/generated/TraceTypeEverything.cpp:46125:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46128:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46129:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, double>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, beta);
autograd/generated/TraceTypeEverything.cpp:46160:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46163:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46164:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, double, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, beta, grad_input);
autograd/generated/TraceTypeEverything.cpp:46194:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46197:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46198:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, double, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, beta, out);
autograd/generated/TraceTypeEverything.cpp:46221:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46224:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46225:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceTypeEverything.cpp:46249:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46252:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46253:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction);
autograd/generated/TraceTypeEverything.cpp:46283:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46286:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46287:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, grad_input);
autograd/generated/TraceTypeEverything.cpp:46316:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46319:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46320:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, out);
autograd/generated/TraceTypeEverything.cpp:46327:Tensor softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:46343:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46345:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:46346:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46347:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:46354:Tensor softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:46370:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46372:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:46373:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46374:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceTypeEverything.cpp:46397:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46400:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46401:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, beta, threshold);
autograd/generated/TraceTypeEverything.cpp:46426:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46429:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46430:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, beta, threshold, output);
autograd/generated/TraceTypeEverything.cpp:46461:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46464:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46465:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, beta, threshold, output, grad_input);
autograd/generated/TraceTypeEverything.cpp:46494:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46497:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46498:      .redispatch<Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, beta, threshold, out);
autograd/generated/TraceTypeEverything.cpp:46520:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46523:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46524:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, lambd);
autograd/generated/TraceTypeEverything.cpp:46547:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46550:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46551:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, grad_output, self, lambd);
autograd/generated/TraceTypeEverything.cpp:46580:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46583:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46584:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, lambd, grad_input);
autograd/generated/TraceTypeEverything.cpp:46612:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46615:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46616:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, lambd, out);
autograd/generated/TraceTypeEverything.cpp:46640:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46643:  std::tie(solution, LU) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46644:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, A);
autograd/generated/TraceTypeEverything.cpp:46674:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46677:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46678:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, A, solution, lu);
autograd/generated/TraceTypeEverything.cpp:46704:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46707:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46708:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, descending);
autograd/generated/TraceTypeEverything.cpp:46734:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46737:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46738:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, descending);
autograd/generated/TraceTypeEverything.cpp:46769:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46772:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46773:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, descending, values, indices);
autograd/generated/TraceTypeEverything.cpp:46804:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46807:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46808:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, descending, values, indices);
autograd/generated/TraceTypeEverything.cpp:46816:Tensor sparse_coo_tensor_size(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:46834:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46836:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:46837:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46838:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:46845:Tensor sparse_coo_tensor_indices(const Tensor & indices, const Tensor & values, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:46864:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46866:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:46867:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46868:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, indices, values, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:46875:Tensor sparse_coo_tensor_indices_size(const Tensor & indices, const Tensor & values, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:46895:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46897:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:46898:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46899:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, indices, values, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:46907:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46910:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46911:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:46929:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46932:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46933:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask);
autograd/generated/TraceTypeEverything.cpp:46962:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46965:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46966:      .redispatch<Tensor &, Tensor &, IntArrayRef, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, size, sparse_dim, dense_dim);
autograd/generated/TraceTypeEverything.cpp:46995:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46998:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:46999:      .redispatch<Tensor &, Tensor &, IntArrayRef, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, size, sparse_dim, dense_dim);
autograd/generated/TraceTypeEverything.cpp:47022:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47025:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47026:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, split_size, dim);
autograd/generated/TraceTypeEverything.cpp:47049:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47052:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47053:      .redispatch<std::vector<Tensor>, const Tensor &, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, split_sizes, dim);
autograd/generated/TraceTypeEverything.cpp:47074:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47077:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47078:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:47104:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47107:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47108:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:47135:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47138:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47139:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:47160:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47163:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47164:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:47190:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47193:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47194:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:47215:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47218:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47219:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:47241:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47244:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47245:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:47267:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47270:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47271:      .redispatch<Tensor, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:47297:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47300:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47301:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:47328:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47331:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47332:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:47359:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47362:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47363:      .redispatch<Tensor &, Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:47388:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47391:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47392:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha);
autograd/generated/TraceTypeEverything.cpp:47423:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47426:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47427:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha, out);
autograd/generated/TraceTypeEverything.cpp:47449:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47452:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47453:      .redispatch<Tensor, TensorList, int64_t>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceTypeEverything.cpp:47481:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47484:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47485:      .redispatch<Tensor &, TensorList, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceTypeEverything.cpp:47507:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47510:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47511:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceTypeEverything.cpp:47535:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47538:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47539:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceTypeEverything.cpp:47563:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47566:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47567:      .redispatch<Tensor, const Tensor &, DimnameList, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceTypeEverything.cpp:47591:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47594:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47595:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceTypeEverything.cpp:47622:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47625:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47626:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceTypeEverything.cpp:47653:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47656:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47657:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, DimnameList, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceTypeEverything.cpp:47688:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47691:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47692:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:47722:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47725:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47726:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:47733:Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool normalized, c10::optional<bool> onesided, c10::optional<bool> return_complex) {
autograd/generated/TraceTypeEverything.cpp:47754:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47756:      .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const c10::optional<Tensor> &, bool, c10::optional<bool>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:47757:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47758:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const c10::optional<Tensor> &, bool, c10::optional<bool>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, n_fft, hop_length, win_length, window, normalized, onesided, return_complex);
autograd/generated/TraceTypeEverything.cpp:47766:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47769:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47770:      .redispatch<int64_t, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:47774:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47777:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47778:      .redispatch<int64_t, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:47797:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47800:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47801:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:47824:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47827:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47828:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:47856:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47859:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47860:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:47888:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47891:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47892:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:47921:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47924:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47925:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, alpha, out);
autograd/generated/TraceTypeEverything.cpp:47948:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47951:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47952:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:47975:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47978:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:47979:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:48007:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48010:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48011:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:48039:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48042:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48043:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceTypeEverything.cpp:48072:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48075:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48076:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, alpha, out);
autograd/generated/TraceTypeEverything.cpp:48083:Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:48098:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48100:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:48101:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48102:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceTypeEverything.cpp:48109:Tensor sum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:48126:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48128:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:48129:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48130:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:48137:Tensor sum_dim_DimnameList(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:48154:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48156:      .typed<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:48157:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48158:      .redispatch<Tensor, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceTypeEverything.cpp:48165:Tensor & sum_out_IntList_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:48188:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48190:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:48191:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48192:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:48199:Tensor & sum_out_DimnameList_out(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:48222:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48224:      .typed<Tensor & (const Tensor &, DimnameList, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:48225:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48226:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceTypeEverything.cpp:48248:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48251:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48252:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, size);
autograd/generated/TraceTypeEverything.cpp:48278:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48281:  std::tie(U, S, V) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48282:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, some, compute_uv);
autograd/generated/TraceTypeEverything.cpp:48315:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48318:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48319:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, bool, bool, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, some, compute_uv, U, S, V);
autograd/generated/TraceTypeEverything.cpp:48344:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48347:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48348:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, axis0, axis1);
autograd/generated/TraceTypeEverything.cpp:48376:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48379:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48380:      .redispatch<Tensor &, Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, axis0, axis1);
autograd/generated/TraceTypeEverything.cpp:48403:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48406:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48407:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceTypeEverything.cpp:48435:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48438:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48439:      .redispatch<Tensor &, Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceTypeEverything.cpp:48464:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48467:  std::tie(eigenvalues, eigenvectors_return) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48468:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, eigenvectors, upper);
autograd/generated/TraceTypeEverything.cpp:48499:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48502:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48503:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, bool, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, eigenvectors, upper, e, V);
autograd/generated/TraceTypeEverything.cpp:48525:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48528:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48529:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:48555:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48558:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48559:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:48581:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48584:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48585:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, index);
autograd/generated/TraceTypeEverything.cpp:48608:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48611:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48612:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, input, index);
autograd/generated/TraceTypeEverything.cpp:48640:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48643:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48644:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, index, out);
autograd/generated/TraceTypeEverything.cpp:48665:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48668:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48669:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:48695:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48698:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48699:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:48726:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48729:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48730:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:48751:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48754:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48755:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:48781:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48784:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48785:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:48807:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48810:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48811:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output);
autograd/generated/TraceTypeEverything.cpp:48839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48842:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48843:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, grad_input);
autograd/generated/TraceTypeEverything.cpp:48870:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48873:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48874:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:48897:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48900:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48901:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, sections, dim);
autograd/generated/TraceTypeEverything.cpp:48924:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48927:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48928:      .redispatch<std::vector<Tensor>, const Tensor &, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, indices, dim);
autograd/generated/TraceTypeEverything.cpp:48951:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48954:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48955:      .redispatch<std::vector<Tensor>, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, tensor_indices_or_sections, dim);
autograd/generated/TraceTypeEverything.cpp:48979:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48982:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:48983:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, other, dims_self, dims_other);
autograd/generated/TraceTypeEverything.cpp:49013:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49016:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49017:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, other, dims_self, dims_other, out);
autograd/generated/TraceTypeEverything.cpp:49024:Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/TraceTypeEverything.cpp:49043:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49045:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:49046:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49047:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding);
autograd/generated/TraceTypeEverything.cpp:49079:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49082:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49083:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
autograd/generated/TraceTypeEverything.cpp:49121:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49124:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49125:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/TraceTypeEverything.cpp:49134:std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/TraceTypeEverything.cpp:49156:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49158:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:49159:  std::tie(output, finput, fgrad_input) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49160:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding);
autograd/generated/TraceTypeEverything.cpp:49169:std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out_output(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/TraceTypeEverything.cpp:49196:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49198:      .typed<std::tuple<Tensor &,Tensor &,Tensor &> (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &, Tensor &, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:49199:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49200:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
autograd/generated/TraceTypeEverything.cpp:49209:Tensor & thnn_conv2d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:49234:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49236:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:49237:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49238:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, out);
autograd/generated/TraceTypeEverything.cpp:49245:Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/TraceTypeEverything.cpp:49265:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49267:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:49268:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49269:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation);
autograd/generated/TraceTypeEverything.cpp:49299:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49302:  std::tie(grad_input, grad_weight) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49303:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,2>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
autograd/generated/TraceTypeEverything.cpp:49338:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49341:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49342:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, dilation, grad_input, grad_weight);
autograd/generated/TraceTypeEverything.cpp:49350:Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/TraceTypeEverything.cpp:49370:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49372:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceTypeEverything.cpp:49373:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49374:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation);
autograd/generated/TraceTypeEverything.cpp:49381:Tensor & thnn_conv_depthwise2d_forward_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:49407:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49409:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:49410:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49411:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation, out);
autograd/generated/TraceTypeEverything.cpp:49418:Tensor & thnn_conv_depthwise2d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:49444:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49446:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:49447:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49448:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation, out);
autograd/generated/TraceTypeEverything.cpp:49471:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49474:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49475:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, threshold, value);
autograd/generated/TraceTypeEverything.cpp:49503:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49506:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49507:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, threshold, value);
autograd/generated/TraceTypeEverything.cpp:49530:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49533:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49534:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, grad_output, self, threshold);
autograd/generated/TraceTypeEverything.cpp:49563:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49566:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49567:      .redispatch<Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, threshold, value, out);
autograd/generated/TraceTypeEverything.cpp:49589:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49592:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49593:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dims);
autograd/generated/TraceTypeEverything.cpp:49600:Tensor to_dtype_layout(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:49621:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49623:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, bool, bool, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:49624:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49625:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, bool, bool, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, non_blocking, copy, memory_format);
autograd/generated/TraceTypeEverything.cpp:49632:Tensor to_device(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:49651:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49653:      .typed<Tensor (const Tensor &, Device, ScalarType, bool, bool, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:49654:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49655:      .redispatch<Tensor, const Tensor &, Device, ScalarType, bool, bool, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, device, dtype, non_blocking, copy, memory_format);
autograd/generated/TraceTypeEverything.cpp:49662:Tensor to_dtype(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:49680:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49682:      .typed<Tensor (const Tensor &, ScalarType, bool, bool, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:49683:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49684:      .redispatch<Tensor, const Tensor &, ScalarType, bool, bool, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, non_blocking, copy, memory_format);
autograd/generated/TraceTypeEverything.cpp:49691:Tensor to_other(const Tensor & self, const Tensor & other, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:49709:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49711:      .typed<Tensor (const Tensor &, const Tensor &, bool, bool, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:49712:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49713:      .redispatch<Tensor, const Tensor &, const Tensor &, bool, bool, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, other, non_blocking, copy, memory_format);
autograd/generated/TraceTypeEverything.cpp:49720:Tensor to_dense(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:49735:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49737:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:49738:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49739:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceTypeEverything.cpp:49761:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49764:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49765:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, input);
autograd/generated/TraceTypeEverything.cpp:49772:Tensor to_mkldnn(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceTypeEverything.cpp:49787:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49789:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceTypeEverything.cpp:49790:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49791:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceTypeEverything.cpp:49813:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49816:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49817:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, input);
autograd/generated/TraceTypeEverything.cpp:49839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49842:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49843:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, sparse_dim);
autograd/generated/TraceTypeEverything.cpp:49864:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49867:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49868:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:49895:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49898:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49899:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, k, dim, largest, sorted);
autograd/generated/TraceTypeEverything.cpp:49932:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49935:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49936:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, int64_t, bool, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, k, dim, largest, sorted, values, indices);
autograd/generated/TraceTypeEverything.cpp:49958:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49961:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49962:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:49984:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49987:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:49988:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad, sizes);
autograd/generated/TraceTypeEverything.cpp:50011:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50014:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50015:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceTypeEverything.cpp:50038:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50041:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50042:      .redispatch<Tensor, const Tensor &, Dimname, Dimname>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceTypeEverything.cpp:50070:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50073:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50074:      .redispatch<Tensor &, Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceTypeEverything.cpp:50097:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50100:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50101:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, y, x, dim);
autograd/generated/TraceTypeEverything.cpp:50124:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50127:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50128:      .redispatch<Tensor, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, y, dx, dim);
autograd/generated/TraceTypeEverything.cpp:50155:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50158:  std::tie(solution, cloned_coefficient) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50159:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, A, upper, transpose, unitriangular);
autograd/generated/TraceTypeEverything.cpp:50192:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50195:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50196:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, bool, bool, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, A, upper, transpose, unitriangular, X, M);
autograd/generated/TraceTypeEverything.cpp:50219:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50222:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50223:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceTypeEverything.cpp:50250:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50253:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50254:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceTypeEverything.cpp:50261:Tensor tril_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:50281:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50283:      .typed<Tensor (int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:50284:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50285:      .redispatch<Tensor, int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, row, col, offset, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:50313:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50316:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50317:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, diagonal, out);
autograd/generated/TraceTypeEverything.cpp:50345:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50348:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50349:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, double, double, double, bool, int64_t>(op, c10::DispatchKey::Tracer, anchor, positive, negative, margin, p, eps, swap, reduction);
autograd/generated/TraceTypeEverything.cpp:50371:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50374:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50375:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceTypeEverything.cpp:50402:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50405:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50406:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceTypeEverything.cpp:50413:Tensor triu_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:50433:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50435:      .typed<Tensor (int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:50436:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50437:      .redispatch<Tensor, int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, row, col, offset, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:50465:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50468:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50469:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, diagonal, out);
autograd/generated/TraceTypeEverything.cpp:50491:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50494:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50495:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:50517:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50520:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50521:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:50548:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50551:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50552:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:50579:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50582:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50583:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:50611:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50614:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50615:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:50636:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50639:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50640:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:50666:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50669:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50670:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:50697:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50700:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50701:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceTypeEverything.cpp:50723:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50726:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50727:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:50749:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50752:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50753:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:50775:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50778:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50779:      .redispatch<std::vector<Tensor>, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:50786:Tensor unflatten_int(const Tensor & self, int64_t dim, IntArrayRef sizes, c10::optional<DimnameList> names) {
autograd/generated/TraceTypeEverything.cpp:50803:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50805:      .typed<Tensor (const Tensor &, int64_t, IntArrayRef, c10::optional<DimnameList>)>();
autograd/generated/TraceTypeEverything.cpp:50806:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50807:      .redispatch<Tensor, const Tensor &, int64_t, IntArrayRef, c10::optional<DimnameList>>(op, c10::DispatchKey::Tracer, self, dim, sizes, names);
autograd/generated/TraceTypeEverything.cpp:50831:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50834:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50835:      .redispatch<Tensor, const Tensor &, Dimname, IntArrayRef, DimnameList>(op, c10::DispatchKey::Tracer, self, dim, sizes, names);
autograd/generated/TraceTypeEverything.cpp:50859:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50862:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50863:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dimension, size, step);
autograd/generated/TraceTypeEverything.cpp:50888:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50891:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50892:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad_in, input_sizes, dim, size, step);
autograd/generated/TraceTypeEverything.cpp:50899:Tensor & uniform_(Tensor & self, double from, double to, c10::optional<Generator> generator) {
autograd/generated/TraceTypeEverything.cpp:50921:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50923:      .typed<Tensor & (Tensor &, double, double, c10::optional<Generator>)>();
autograd/generated/TraceTypeEverything.cpp:50924:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50925:      .redispatch<Tensor &, Tensor &, double, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, from, to, generator);
autograd/generated/TraceTypeEverything.cpp:50932:std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
autograd/generated/TraceTypeEverything.cpp:50952:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50954:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceTypeEverything.cpp:50955:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50956:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, return_inverse, return_counts, dim);
autograd/generated/TraceTypeEverything.cpp:50986:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50989:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:50990:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, sorted, return_inverse, return_counts);
autograd/generated/TraceTypeEverything.cpp:51019:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51022:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51023:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, return_inverse, return_counts);
autograd/generated/TraceTypeEverything.cpp:51048:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51051:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51052:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, chunks, dim);
autograd/generated/TraceTypeEverything.cpp:51075:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51078:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51079:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, split_size, dim);
autograd/generated/TraceTypeEverything.cpp:51102:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51105:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51106:      .redispatch<std::vector<Tensor>, const Tensor &, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, split_sizes, dim);
autograd/generated/TraceTypeEverything.cpp:51128:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51131:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51132:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:51159:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51162:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51163:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceTypeEverything.cpp:51170:Tensor upsample_bicubic2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51187:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51189:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51190:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51191:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, align_corners, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51198:Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:51216:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51218:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:51219:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51220:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:51227:Tensor upsample_bicubic2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51245:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51247:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51248:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51249:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51256:Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:51275:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51277:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:51278:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51279:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:51286:Tensor & upsample_bicubic2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:51311:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51313:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:51314:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51315:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
autograd/generated/TraceTypeEverything.cpp:51322:Tensor & upsample_bicubic2d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:51346:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51348:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:51349:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51350:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_h, scales_w, out);
autograd/generated/TraceTypeEverything.cpp:51357:Tensor upsample_bilinear2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51374:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51376:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51377:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51378:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, align_corners, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51385:Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:51403:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51405:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:51406:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51407:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:51414:Tensor upsample_bilinear2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51432:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51434:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51435:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51436:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51443:Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:51462:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51464:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:51465:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51466:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:51473:Tensor & upsample_bilinear2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:51498:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51500:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:51501:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51502:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
autograd/generated/TraceTypeEverything.cpp:51509:Tensor & upsample_bilinear2d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:51533:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51535:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:51536:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51537:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_h, scales_w, out);
autograd/generated/TraceTypeEverything.cpp:51544:Tensor upsample_linear1d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51561:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51563:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51564:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51565:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, align_corners, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51572:Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
autograd/generated/TraceTypeEverything.cpp:51589:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51591:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:51592:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51593:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales);
autograd/generated/TraceTypeEverything.cpp:51600:Tensor upsample_linear1d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51618:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51620:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51621:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51622:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51629:Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
autograd/generated/TraceTypeEverything.cpp:51647:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51649:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:51650:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51651:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales);
autograd/generated/TraceTypeEverything.cpp:51658:Tensor & upsample_linear1d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:51682:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51684:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:51685:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51686:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales, grad_input);
autograd/generated/TraceTypeEverything.cpp:51693:Tensor & upsample_linear1d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:51716:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51718:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:51719:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51720:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales, out);
autograd/generated/TraceTypeEverything.cpp:51727:Tensor upsample_nearest1d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51743:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51745:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51746:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51747:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51754:Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
autograd/generated/TraceTypeEverything.cpp:51770:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51772:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:51773:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51774:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, scales);
autograd/generated/TraceTypeEverything.cpp:51781:Tensor upsample_nearest1d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51798:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51800:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51801:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51802:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51809:Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
autograd/generated/TraceTypeEverything.cpp:51826:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51828:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:51829:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51830:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales);
autograd/generated/TraceTypeEverything.cpp:51837:Tensor & upsample_nearest1d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:51860:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51862:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:51863:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51864:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales, grad_input);
autograd/generated/TraceTypeEverything.cpp:51871:Tensor & upsample_nearest1d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:51893:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51895:      .typed<Tensor & (const Tensor &, IntArrayRef, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:51896:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51897:      .redispatch<Tensor &, const Tensor &, IntArrayRef, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, scales, out);
autograd/generated/TraceTypeEverything.cpp:51904:Tensor upsample_nearest2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51920:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51922:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51923:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51924:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51931:Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:51948:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51950:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:51951:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51952:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:51959:Tensor upsample_nearest2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:51976:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51978:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:51979:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:51980:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scale_factors);
autograd/generated/TraceTypeEverything.cpp:51987:Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:52005:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52007:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:52008:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52009:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:52016:Tensor & upsample_nearest2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:52040:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52042:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:52043:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52044:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales_h, scales_w, grad_input);
autograd/generated/TraceTypeEverything.cpp:52051:Tensor & upsample_nearest2d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:52074:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52076:      .typed<Tensor & (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:52077:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52078:      .redispatch<Tensor &, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, scales_h, scales_w, out);
autograd/generated/TraceTypeEverything.cpp:52085:Tensor upsample_nearest3d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:52101:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52103:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:52104:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52105:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, scale_factors);
autograd/generated/TraceTypeEverything.cpp:52112:Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:52130:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52132:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:52133:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52134:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, scales_d, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:52141:Tensor upsample_nearest3d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:52158:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52160:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:52161:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52162:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scale_factors);
autograd/generated/TraceTypeEverything.cpp:52169:Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:52188:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52190:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:52191:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52192:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales_d, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:52199:Tensor & upsample_nearest3d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:52224:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52226:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:52227:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52228:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales_d, scales_h, scales_w, grad_input);
autograd/generated/TraceTypeEverything.cpp:52235:Tensor & upsample_nearest3d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:52259:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52261:      .typed<Tensor & (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:52262:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52263:      .redispatch<Tensor &, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, scales_d, scales_h, scales_w, out);
autograd/generated/TraceTypeEverything.cpp:52270:Tensor upsample_trilinear3d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:52287:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52289:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:52290:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52291:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, align_corners, scale_factors);
autograd/generated/TraceTypeEverything.cpp:52298:Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:52317:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52319:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:52320:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52321:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_d, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:52328:Tensor upsample_trilinear3d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceTypeEverything.cpp:52346:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52348:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceTypeEverything.cpp:52349:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52350:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scale_factors);
autograd/generated/TraceTypeEverything.cpp:52357:Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceTypeEverything.cpp:52377:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52379:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceTypeEverything.cpp:52380:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52381:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
autograd/generated/TraceTypeEverything.cpp:52388:Tensor & upsample_trilinear3d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceTypeEverything.cpp:52414:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52416:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:52417:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52418:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, grad_input);
autograd/generated/TraceTypeEverything.cpp:52425:Tensor & upsample_trilinear3d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceTypeEverything.cpp:52450:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52452:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceTypeEverything.cpp:52453:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52454:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_d, scales_h, scales_w, out);
autograd/generated/TraceTypeEverything.cpp:52479:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52482:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52483:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, grad, dim, indices, sizes, keepdim);
autograd/generated/TraceTypeEverything.cpp:52504:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52507:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52508:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:52515:Tensor vander(const Tensor & x, c10::optional<int64_t> N, bool increasing) {
autograd/generated/TraceTypeEverything.cpp:52531:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52533:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceTypeEverything.cpp:52534:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52535:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, x, N, increasing);
autograd/generated/TraceTypeEverything.cpp:52557:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52560:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52561:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceTypeEverything.cpp:52585:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52588:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52589:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceTypeEverything.cpp:52613:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52616:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52617:      .redispatch<Tensor, const Tensor &, DimnameList, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceTypeEverything.cpp:52641:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52644:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52645:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceTypeEverything.cpp:52672:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52675:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52676:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceTypeEverything.cpp:52703:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52706:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52707:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, DimnameList, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceTypeEverything.cpp:52738:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52741:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52742:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:52772:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52775:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52776:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim, out);
autograd/generated/TraceTypeEverything.cpp:52798:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52801:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52802:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:52830:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52833:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52834:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:52856:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52859:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52860:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, size);
autograd/generated/TraceTypeEverything.cpp:52882:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52885:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52886:      .redispatch<Tensor, const Tensor &, ScalarType>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceTypeEverything.cpp:52908:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52911:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52912:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:52933:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52936:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52937:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:52958:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52961:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52962:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:52983:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52986:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:52987:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceTypeEverything.cpp:53014:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53017:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53018:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/generated/TraceTypeEverything.cpp:53041:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53044:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53045:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceTypeEverything.cpp:53068:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53071:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53072:      .redispatch<Tensor, const Tensor &, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceTypeEverything.cpp:53095:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53098:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53099:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceTypeEverything.cpp:53122:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53125:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53126:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceTypeEverything.cpp:53147:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53150:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53151:      .redispatch<std::vector<Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, condition);
autograd/generated/TraceTypeEverything.cpp:53173:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53176:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53177:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:53199:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53202:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53203:      .redispatch<Tensor, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:53225:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53228:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53229:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:53256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53259:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53260:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:53287:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53290:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53291:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceTypeEverything.cpp:53319:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53322:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53323:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:53351:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53354:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53355:      .redispatch<Tensor &, Scalar, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:53383:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53386:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53387:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceTypeEverything.cpp:53410:          jit::tracer::addInputs(node, "options", c10::optional<ScalarType>());
autograd/generated/TraceTypeEverything.cpp:53411:          jit::tracer::addInputs(node, "options", layout_or_default(c10::nullopt));
autograd/generated/TraceTypeEverything.cpp:53412:          jit::tracer::addInputs(node, "options", device_or_default(c10::nullopt));
autograd/generated/TraceTypeEverything.cpp:53413:          jit::tracer::addInputs(node, "options", pinned_memory_or_default(c10::nullopt));
autograd/generated/TraceTypeEverything.cpp:53414:          c10::optional<MemoryFormat> memory_format = c10::MemoryFormat::Preserve;
autograd/generated/TraceTypeEverything.cpp:53423:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53426:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53427:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceTypeEverything.cpp:53434:Tensor zeros_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:53453:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53455:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:53456:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53457:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:53464:Tensor zeros(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceTypeEverything.cpp:53482:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53484:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceTypeEverything.cpp:53485:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53486:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/TraceTypeEverything.cpp:53493:Tensor zeros_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceTypeEverything.cpp:53512:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53514:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceTypeEverything.cpp:53515:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53516:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceTypeEverything.cpp:53546:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53549:  c10::Dispatcher::singleton()
autograd/generated/TraceTypeEverything.cpp:53550:      .redispatch<Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, size, out);
autograd/generated/Functions.h:24:using c10::optional;
autograd/generated/Functions.h:25:using c10::fmap;
autograd/generated/Functions.h:35:inline c10::List<c10::optional<Tensor>> unpack_opt_list(at::ArrayRef<SavedVariable> xs) {
autograd/generated/Functions.h:36:  torch::List<c10::optional<Tensor>> result;
autograd/generated/Functions.h:422:  c10::optional<int64_t> storage_offset;
autograd/generated/Functions.h:667:  c10::optional<Scalar> min;
autograd/generated/Functions.h:668:  c10::optional<Scalar> max;
autograd/generated/Functions.h:839:  c10::optional<int64_t> dim;
autograd/generated/Functions.h:2843:  c10::optional<Scalar> p;
autograd/generated/Functions.h:2862:  c10::optional<Scalar> p;
autograd/generated/Functions.h:2879:  c10::optional<Scalar> p;
autograd/generated/Functions.h:3400:  c10::optional<double> eps;
autograd/generated/Functions.h:3481:  c10::optional<int64_t> start;
autograd/generated/Functions.h:3482:  c10::optional<int64_t> end;
autograd/generated/Functions.h:5363:  c10::optional<double> scales;
autograd/generated/Functions.h:5378:  c10::optional<double> scales_h;
autograd/generated/Functions.h:5379:  c10::optional<double> scales_w;
autograd/generated/Functions.h:5394:  c10::optional<double> scales_h;
autograd/generated/Functions.h:5395:  c10::optional<double> scales_w;
autograd/generated/Functions.h:5410:  c10::optional<double> scales_d;
autograd/generated/Functions.h:5411:  c10::optional<double> scales_h;
autograd/generated/Functions.h:5412:  c10::optional<double> scales_w;
autograd/generated/Functions.h:5426:  c10::optional<double> scales;
autograd/generated/Functions.h:5440:  c10::optional<double> scales_h;
autograd/generated/Functions.h:5441:  c10::optional<double> scales_w;
autograd/generated/Functions.h:5455:  c10::optional<double> scales_d;
autograd/generated/Functions.h:5456:  c10::optional<double> scales_h;
autograd/generated/Functions.h:5457:  c10::optional<double> scales_w;
autograd/generated/Functions.h:5470:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:5472:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:5485:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:5487:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:5500:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:5502:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:5515:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:5517:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:5530:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:5531:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:5544:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:5545:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:5558:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:5559:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:5636:  c10::optional<int64_t> divisor_override;
autograd/generated/Functions.h:5655:  c10::optional<int64_t> divisor_override;
autograd/generated/Functions.h:6259:  c10::optional<int64_t> divisor_override;
autograd/generated/Functions.h:6277:  c10::optional<int64_t> divisor_override;
autograd/generated/Functions.h:6756:  c10::optional<double> scales;
autograd/generated/Functions.h:6770:  c10::optional<double> scales_h;
autograd/generated/Functions.h:6771:  c10::optional<double> scales_w;
autograd/generated/Functions.h:6785:  c10::optional<double> scales_h;
autograd/generated/Functions.h:6786:  c10::optional<double> scales_w;
autograd/generated/Functions.h:6800:  c10::optional<double> scales_d;
autograd/generated/Functions.h:6801:  c10::optional<double> scales_h;
autograd/generated/Functions.h:6802:  c10::optional<double> scales_w;
autograd/generated/Functions.h:6815:  c10::optional<double> scales;
autograd/generated/Functions.h:6828:  c10::optional<double> scales_h;
autograd/generated/Functions.h:6829:  c10::optional<double> scales_w;
autograd/generated/Functions.h:6842:  c10::optional<double> scales_d;
autograd/generated/Functions.h:6843:  c10::optional<double> scales_h;
autograd/generated/Functions.h:6844:  c10::optional<double> scales_w;
autograd/generated/Functions.h:6856:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:6858:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:6870:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:6872:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:6884:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:6886:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:6898:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:6900:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:6912:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:6913:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:6925:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:6926:  c10::OptionalArray<double> scale_factors;
autograd/generated/Functions.h:6938:  c10::OptionalArray<int64_t> output_size;
autograd/generated/Functions.h:6939:  c10::OptionalArray<double> scale_factors;
autograd/generated/TraceType_0.cpp:36:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:39:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:40:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:62:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:65:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:66:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:88:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:91:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:92:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:114:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:117:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:118:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:140:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:143:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:144:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:166:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:169:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:170:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:192:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:195:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:196:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:221:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:222:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:244:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:247:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:248:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:270:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:273:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:274:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:296:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:299:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:300:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:322:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:325:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:326:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:349:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:352:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:353:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, batch_dim, level);
autograd/generated/TraceType_0.cpp:361:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:364:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:365:      .redispatch<void, TensorList, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, found_inf, inv_scale);
autograd/generated/TraceType_0.cpp:390:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:393:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:394:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceType_0.cpp:423:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:426:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:427:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, mat2, deterministic, out);
autograd/generated/TraceType_0.cpp:449:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:452:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:453:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceType_0.cpp:475:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:478:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:479:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceType_0.cpp:507:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:510:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:511:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, input, coefficients, out);
autograd/generated/TraceType_0.cpp:518:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const c10::optional<Tensor> & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) {
autograd/generated/TraceType_0.cpp:552:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:554:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, TensorList, int64_t, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_0.cpp:555:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:556:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, TensorList, int64_t, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);
autograd/generated/TraceType_0.cpp:588:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:591:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:592:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceType_0.cpp:600:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:603:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:604:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:607:std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/TraceType_0.cpp:632:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:634:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool)>();
autograd/generated/TraceType_0.cpp:635:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:636:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool>(op, c10::DispatchKey::Tracer, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
autograd/generated/TraceType_0.cpp:646:Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights) {
autograd/generated/TraceType_0.cpp:668:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:670:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_0.cpp:671:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:672:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);
autograd/generated/TraceType_0.cpp:699:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:702:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:703:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, self, scale, zero_point, axis, quant_min, quant_max, grad_factor);
autograd/generated/TraceType_0.cpp:724:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:727:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:728:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:736:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:739:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:740:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:757:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:760:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:761:      .redispatch<std::vector<Tensor>, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors, scalar);
autograd/generated/TraceType_0.cpp:784:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:787:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:788:      .redispatch<std::vector<Tensor>, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors1, tensors2, alpha);
autograd/generated/TraceType_0.cpp:810:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:813:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:814:      .redispatch<std::vector<Tensor>, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, tensors, scalars);
autograd/generated/TraceType_0.cpp:822:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:825:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:826:      .redispatch<void, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, scalar);
autograd/generated/TraceType_0.cpp:829:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:832:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:833:      .redispatch<void, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_0.cpp:836:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:839:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:840:      .redispatch<void, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, scalars);
autograd/generated/TraceType_0.cpp:856:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:859:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:860:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:868:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:871:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:872:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:888:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:891:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:892:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:900:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:903:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:904:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:920:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:923:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:924:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:932:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:935:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:936:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:952:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:955:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:956:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:977:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:980:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:981:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:989:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:992:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:993:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:996:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:999:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1000:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:1016:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1019:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1020:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:1028:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1031:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1032:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:1048:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1051:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1052:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:1060:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1063:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1064:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:1083:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1086:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1087:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, grad);
autograd/generated/TraceType_0.cpp:1094:Tensor & _index_put_impl_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate, bool unsafe) {
autograd/generated/TraceType_0.cpp:1117:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1119:      .typed<Tensor & (Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool, bool)>();
autograd/generated/TraceType_0.cpp:1120:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1121:      .redispatch<Tensor &, Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, indices, values, accumulate, unsafe);
autograd/generated/TraceType_0.cpp:1142:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1145:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1146:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:1154:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1157:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1158:      .redispatch<Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:1182:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1185:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1186:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceType_0.cpp:1209:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1212:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1213:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceType_0.cpp:1241:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1244:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1245:      .redispatch<Tensor &, Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceType_0.cpp:1275:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1278:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1279:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceType_0.cpp:1304:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1307:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1308:      .redispatch<Tensor, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weightsize, grad_output, padding);
autograd/generated/TraceType_0.cpp:1330:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1333:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1334:      .redispatch<Tensor, const Tensor &, double>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceType_0.cpp:1355:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1358:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1359:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, weight);
autograd/generated/TraceType_0.cpp:1382:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1385:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1386:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, half_to_float);
autograd/generated/TraceType_0.cpp:1393:Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:1413:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1415:      .typed<Tensor (int64_t, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:1416:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1417:      .redispatch<Tensor, int64_t, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, sparse_dim, dense_dim, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:1441:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1444:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1445:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, dim, self);
autograd/generated/TraceType_0.cpp:1466:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1469:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1470:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:1492:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1495:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1496:      .redispatch<Tensor, const Tensor &, ScalarType>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceType_0.cpp:1518:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1521:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1522:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_0.cpp:1545:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1548:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1549:      .redispatch<Tensor, const Tensor &, IntArrayRef, ScalarType>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_0.cpp:1574:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1577:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1578:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool, std::string>(op, c10::DispatchKey::Tracer, self, compute_eigenvectors, uplo);
autograd/generated/TraceType_0.cpp:1586:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias, const Tensor & cx, const Tensor & cy) {
autograd/generated/TraceType_0.cpp:1612:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1614:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &)>();
autograd/generated/TraceType_0.cpp:1615:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1616:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);
autograd/generated/TraceType_0.cpp:1627:std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/TraceType_0.cpp:1647:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1649:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_0.cpp:1650:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1651:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input_gates, hidden_gates, hx, input_bias, hidden_bias);
autograd/generated/TraceType_0.cpp:1659:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) {
autograd/generated/TraceType_0.cpp:1683:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1685:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const Tensor &, bool)>();
autograd/generated/TraceType_0.cpp:1686:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1687:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad_hy, grad_cy, cx, cy, workspace, has_bias);
autograd/generated/TraceType_0.cpp:1719:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1722:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1723:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);
autograd/generated/TraceType_0.cpp:1745:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1748:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1749:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, size);
autograd/generated/TraceType_0.cpp:1774:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1777:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1778:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, v, g, dim);
autograd/generated/TraceType_0.cpp:1800:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1803:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1804:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:1830:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1833:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1834:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:1861:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1864:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1865:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:1887:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1890:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1891:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceType_0.cpp:1919:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1922:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1923:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, out);
autograd/generated/TraceType_0.cpp:1946:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1949:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1950:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices);
autograd/generated/TraceType_0.cpp:1974:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1977:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:1978:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceType_0.cpp:2008:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2011:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2012:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices, grad_input);
autograd/generated/TraceType_0.cpp:2036:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2039:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2040:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceType_0.cpp:2069:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2072:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2073:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceType_0.cpp:2098:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2101:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2102:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha);
autograd/generated/TraceType_0.cpp:2132:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2135:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2136:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha);
autograd/generated/TraceType_0.cpp:2167:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2170:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2171:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, vec1, vec2, beta, alpha, out);
autograd/generated/TraceType_0.cpp:2193:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2196:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2197:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:2218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2221:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2222:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:2244:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2247:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2248:      .redispatch<Tensor, const Tensor &, DimnameList>(op, c10::DispatchKey::Tracer, self, names);
autograd/generated/TraceType_0.cpp:2271:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2274:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2275:      .redispatch<Tensor, const Tensor &, DimnameList, int64_t>(op, c10::DispatchKey::Tracer, self, order, ellipsis_idx);
autograd/generated/TraceType_0.cpp:2304:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2307:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2308:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_0.cpp:2329:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2332:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2333:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:2359:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2362:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2363:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:2384:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2387:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2388:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:2414:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2417:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2418:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:2425:Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceType_0.cpp:2441:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2443:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceType_0.cpp:2444:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2445:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_0.cpp:2468:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2471:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2472:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, descending);
autograd/generated/TraceType_0.cpp:2495:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2498:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2499:      .redispatch<Tensor, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, descending);
autograd/generated/TraceType_0.cpp:2526:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2529:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2530:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:2551:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2554:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2555:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:2577:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2580:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2581:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:2608:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2611:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2612:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:2638:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2641:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2642:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:2663:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2666:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2667:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:2688:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2691:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2692:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_0.cpp:2699:Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/TraceType_0.cpp:2719:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2721:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceType_0.cpp:2722:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2723:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
autograd/generated/TraceType_0.cpp:2730:Tensor & avg_pool2d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/TraceType_0.cpp:2757:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2759:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceType_0.cpp:2760:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2761:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
autograd/generated/TraceType_0.cpp:2768:Tensor & avg_pool3d_out_out(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/TraceType_0.cpp:2794:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2796:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceType_0.cpp:2797:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2798:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
autograd/generated/TraceType_0.cpp:2829:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2832:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2833:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha, out);
autograd/generated/TraceType_0.cpp:2840:Tensor bartlett_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:2858:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2860:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:2861:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2862:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:2869:Tensor bartlett_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:2888:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2890:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:2891:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2892:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:2899:std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum) {
autograd/generated/TraceType_0.cpp:2918:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2920:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double)>();
autograd/generated/TraceType_0.cpp:2921:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2922:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double>(op, c10::DispatchKey::Tracer, input, running_mean, running_var, momentum);
autograd/generated/TraceType_0.cpp:2930:Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/TraceType_0.cpp:2948:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2950:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceType_0.cpp:2951:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2952:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction);
autograd/generated/TraceType_0.cpp:2980:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2983:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:2984:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:3012:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3015:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3016:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:3043:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3046:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3047:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:3075:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3078:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3079:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, mat2, out);
autograd/generated/TraceType_0.cpp:3109:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3112:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3113:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, boundaries, out_int32, right, out);
autograd/generated/TraceType_0.cpp:3120:Tensor cdist(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
autograd/generated/TraceType_0.cpp:3137:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3139:      .typed<Tensor (const Tensor &, const Tensor &, double, c10::optional<int64_t>)>();
autograd/generated/TraceType_0.cpp:3140:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3141:      .redispatch<Tensor, const Tensor &, const Tensor &, double, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, x1, x2, p, compute_mode);
autograd/generated/TraceType_0.cpp:3163:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3166:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3167:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, alpha);
autograd/generated/TraceType_0.cpp:3194:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3197:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3198:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, alpha);
autograd/generated/TraceType_0.cpp:3220:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3223:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3224:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, upper);
autograd/generated/TraceType_0.cpp:3252:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3255:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3256:      .redispatch<Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, upper, out);
autograd/generated/TraceType_0.cpp:3263:Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/TraceType_0.cpp:3279:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3281:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
autograd/generated/TraceType_0.cpp:3282:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3283:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, min, max);
autograd/generated/TraceType_0.cpp:3290:Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/TraceType_0.cpp:3311:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3313:      .typed<Tensor & (Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
autograd/generated/TraceType_0.cpp:3314:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3315:      .redispatch<Tensor &, Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, min, max);
autograd/generated/TraceType_0.cpp:3343:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3346:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3347:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, max, out);
autograd/generated/TraceType_0.cpp:3369:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3372:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3373:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, real, imag);
autograd/generated/TraceType_0.cpp:3400:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3403:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3404:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:3411:Tensor conv_transpose3d_input(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
autograd/generated/TraceType_0.cpp:3412:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3414:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>();
autograd/generated/TraceType_0.cpp:3415:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3416:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, output_padding, groups, dilation);
autograd/generated/TraceType_0.cpp:3445:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3448:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3449:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);
autograd/generated/TraceType_0.cpp:3479:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3482:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3483:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:3504:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3507:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3508:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:3534:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3537:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3538:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:3545:std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon, const Tensor & reserveSpace) {
autograd/generated/TraceType_0.cpp:3570:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3572:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, const Tensor &)>();
autograd/generated/TraceType_0.cpp:3573:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3574:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, const Tensor &>(op, c10::DispatchKey::Tracer, input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon, reserveSpace);
autograd/generated/TraceType_0.cpp:3601:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3604:  std::tie(grad_self, grad_grid) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3605:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, grid, grad_output);
autograd/generated/TraceType_0.cpp:3635:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3638:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3639:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, values, indices);
autograd/generated/TraceType_0.cpp:3669:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3672:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3673:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, values, indices);
autograd/generated/TraceType_0.cpp:3681:Tensor & cumsum_out_out(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_0.cpp:3703:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3705:      .typed<Tensor & (const Tensor &, int64_t, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_0.cpp:3706:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3707:      .redispatch<Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, dtype, out);
autograd/generated/TraceType_0.cpp:3714:Tensor & cumsum_out_dimname_out(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_0.cpp:3736:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3738:      .typed<Tensor & (const Tensor &, Dimname, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_0.cpp:3739:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3740:      .redispatch<Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, dtype, out);
autograd/generated/TraceType_0.cpp:3761:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3764:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3765:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:3791:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3794:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3795:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:3817:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3820:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3821:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceType_0.cpp:3842:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3845:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3846:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:3872:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3875:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3876:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:3906:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3909:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3910:      .redispatch<Tensor &, const Tensor &, Scalar, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, alpha, scale, input_scale, out);
autograd/generated/TraceType_0.cpp:3917:std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/TraceType_0.cpp:3942:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3944:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool)>();
autograd/generated/TraceType_0.cpp:3945:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3946:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool>(op, c10::DispatchKey::Tracer, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
autograd/generated/TraceType_0.cpp:3974:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3977:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:3978:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
autograd/generated/TraceType_0.cpp:3985:Tensor empty_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_0.cpp:4004:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4006:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_0.cpp:4007:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4008:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_0.cpp:4030:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4033:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4034:      .redispatch<Tensor, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, size, qtensor);
autograd/generated/TraceType_0.cpp:4041:Tensor empty_strided(IntArrayRef size, IntArrayRef stride, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:4060:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4062:      .typed<Tensor (IntArrayRef, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:4063:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4064:      .redispatch<Tensor, IntArrayRef, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, stride, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:4091:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4094:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4095:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:4116:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4119:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4120:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:4146:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4149:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4150:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:4173:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4176:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4177:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, size, implicit);
autograd/generated/TraceType_0.cpp:4204:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4207:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4208:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:4230:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4233:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4234:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, mask);
autograd/generated/TraceType_0.cpp:4241:Tensor fft_fft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_0.cpp:4258:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4260:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceType_0.cpp:4261:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4262:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceType_0.cpp:4269:Tensor fft_fft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_0.cpp:4286:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4288:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>)>();
autograd/generated/TraceType_0.cpp:4289:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4290:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceType_0.cpp:4297:Tensor fft_fftfreq(int64_t n, double d, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:4316:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4318:      .typed<Tensor (int64_t, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:4319:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4320:      .redispatch<Tensor, int64_t, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, d, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:4327:Tensor fft_fftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_0.cpp:4344:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4346:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>)>();
autograd/generated/TraceType_0.cpp:4347:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4348:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceType_0.cpp:4355:Tensor fft_ifft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_0.cpp:4372:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4374:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceType_0.cpp:4375:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4376:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceType_0.cpp:4383:Tensor fft_ifft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_0.cpp:4400:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4402:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>)>();
autograd/generated/TraceType_0.cpp:4403:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4404:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceType_0.cpp:4411:Tensor fft_ifftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_0.cpp:4428:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4430:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>)>();
autograd/generated/TraceType_0.cpp:4431:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4432:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceType_0.cpp:4455:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4458:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4459:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, start_dim, end_dim);
autograd/generated/TraceType_0.cpp:4483:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4486:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4487:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, Dimname>(op, c10::DispatchKey::Tracer, self, start_dim, end_dim, out_dim);
autograd/generated/TraceType_0.cpp:4511:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4514:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4515:      .redispatch<Tensor, const Tensor &, Dimname, Dimname, Dimname>(op, c10::DispatchKey::Tracer, self, start_dim, end_dim, out_dim);
autograd/generated/TraceType_0.cpp:4538:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4541:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4542:      .redispatch<Tensor, const Tensor &, DimnameList, Dimname>(op, c10::DispatchKey::Tracer, self, dims, out_dim);
autograd/generated/TraceType_0.cpp:4570:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4573:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4574:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceType_0.cpp:4602:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4605:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4606:      .redispatch<Tensor &, Scalar, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceType_0.cpp:4634:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4637:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4638:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceType_0.cpp:4660:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4663:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4664:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:4686:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4689:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4690:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:4717:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4720:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4721:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:4748:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4751:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4752:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:4779:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4782:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4783:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:4811:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4814:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4815:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:4822:Tensor full_names(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:4842:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4844:      .typed<Tensor (IntArrayRef, Scalar, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:4845:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4846:      .redispatch<Tensor, IntArrayRef, Scalar, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, fill_value, names, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:4853:Tensor full(IntArrayRef size, Scalar fill_value, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:4872:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4874:      .typed<Tensor (IntArrayRef, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:4875:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4876:      .redispatch<Tensor, IntArrayRef, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, fill_value, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:4900:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4903:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4904:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, dim, index, sparse_grad);
autograd/generated/TraceType_0.cpp:4928:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4931:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4932:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, dim, index, sparse_grad);
autograd/generated/TraceType_0.cpp:4954:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4957:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4958:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, self);
autograd/generated/TraceType_0.cpp:4986:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4989:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:4990:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:5018:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5021:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5022:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:5050:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5053:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5054:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceType_0.cpp:5062:Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) {
autograd/generated/TraceType_0.cpp:5063:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5065:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_0.cpp:5066:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5067:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh);
autograd/generated/TraceType_0.cpp:5070:Tensor hann_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:5088:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5090:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:5091:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5092:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:5099:Tensor hann_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:5118:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5120:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:5121:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5122:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:5144:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5147:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5148:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, lambd);
autograd/generated/TraceType_0.cpp:5176:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5179:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5180:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, values, out);
autograd/generated/TraceType_0.cpp:5202:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5205:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5206:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:5233:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5236:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5237:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:5266:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5269:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5270:      .redispatch<Tensor &, const Tensor &, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, out);
autograd/generated/TraceType_0.cpp:5299:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5302:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5303:      .redispatch<Tensor &, const Tensor &, Dimname, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, out);
autograd/generated/TraceType_0.cpp:5324:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5327:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5328:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:5350:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5353:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5354:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:5362:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5365:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5366:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:5370:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5373:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5374:      .redispatch<bool, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:5397:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5400:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5401:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:5422:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5425:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5426:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:5447:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5450:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5451:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:5480:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5483:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5484:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, out);
autograd/generated/TraceType_0.cpp:5491:Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps, bool cudnn_enable) {
autograd/generated/TraceType_0.cpp:5510:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5512:      .typed<Tensor (const Tensor &, IntArrayRef, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, bool)>();
autograd/generated/TraceType_0.cpp:5513:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5514:      .redispatch<Tensor, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, bool>(op, c10::DispatchKey::Tracer, input, normalized_shape, weight, bias, eps, cudnn_enable);
autograd/generated/TraceType_0.cpp:5542:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5545:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5546:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:5574:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5577:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5578:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:5602:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5605:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5606:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, bool>(op, c10::DispatchKey::Tracer, grad_output, self, negative_slope, self_is_result);
autograd/generated/TraceType_0.cpp:5629:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5632:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5633:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, end, weight);
autograd/generated/TraceType_0.cpp:5656:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5659:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5660:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, end, weight);
autograd/generated/TraceType_0.cpp:5688:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5691:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5692:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, end, weight);
autograd/generated/TraceType_0.cpp:5720:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5723:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5724:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, end, weight);
autograd/generated/TraceType_0.cpp:5746:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5749:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5750:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:5772:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5775:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5776:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:5803:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5806:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5807:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:5834:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5837:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5838:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:5845:Tensor & linalg_cond_out_out(const Tensor & self, c10::optional<Scalar> p, Tensor & out) {
autograd/generated/TraceType_0.cpp:5866:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5868:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, Tensor &)>();
autograd/generated/TraceType_0.cpp:5869:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5870:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, Tensor &>(op, c10::DispatchKey::Tracer, self, p, out);
autograd/generated/TraceType_0.cpp:5898:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5901:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5902:      .redispatch<Tensor &, const Tensor &, std::string, Tensor &>(op, c10::DispatchKey::Tracer, self, p, out);
autograd/generated/TraceType_0.cpp:5909:Tensor linalg_matrix_rank(const Tensor & self, c10::optional<double> tol, bool hermitian) {
autograd/generated/TraceType_0.cpp:5925:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5927:      .typed<Tensor (const Tensor &, c10::optional<double>, bool)>();
autograd/generated/TraceType_0.cpp:5928:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5929:      .redispatch<Tensor, const Tensor &, c10::optional<double>, bool>(op, c10::DispatchKey::Tracer, self, tol, hermitian);
autograd/generated/TraceType_0.cpp:5936:Tensor linalg_norm(const Tensor & self, c10::optional<Scalar> ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_0.cpp:5954:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5956:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_0.cpp:5957:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5958:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, ord, dim, keepdim, dtype);
autograd/generated/TraceType_0.cpp:5965:Tensor linalg_norm_ord_str(const Tensor & self, std::string ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_0.cpp:5983:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5985:      .typed<Tensor (const Tensor &, std::string, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_0.cpp:5986:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:5987:      .redispatch<Tensor, const Tensor &, std::string, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, ord, dim, keepdim, dtype);
autograd/generated/TraceType_0.cpp:6016:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6019:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6020:      .redispatch<Tensor &, const Tensor &, double, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, rcond, hermitian, out);
autograd/generated/TraceType_0.cpp:6049:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6052:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6053:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, rcond, hermitian, out);
autograd/generated/TraceType_0.cpp:6076:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6079:  std::tie(sign, logabsdet) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6080:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:6109:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6112:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6113:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, ind, out);
autograd/generated/TraceType_0.cpp:6120:Tensor & linalg_tensorsolve_out_out(const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims, Tensor & out) {
autograd/generated/TraceType_0.cpp:6142:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6144:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<IntArrayRef>, Tensor &)>();
autograd/generated/TraceType_0.cpp:6145:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6146:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<IntArrayRef>, Tensor &>(op, c10::DispatchKey::Tracer, self, other, dims, out);
autograd/generated/TraceType_0.cpp:6153:Tensor linear(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias) {
autograd/generated/TraceType_0.cpp:6154:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6156:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_0.cpp:6157:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6158:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, weight, bias);
autograd/generated/TraceType_0.cpp:6175:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6178:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6179:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:6208:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6211:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6212:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, buffer, grad_input);
autograd/generated/TraceType_0.cpp:6240:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6243:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6244:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceType_0.cpp:6272:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6275:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6276:      .redispatch<Tensor &, const Tensor &, Dimname, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceType_0.cpp:6304:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6307:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6308:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:6336:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6339:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6340:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:6347:Tensor & logspace_out_out(Scalar start, Scalar end, c10::optional<int64_t> steps, double base, Tensor & out) {
autograd/generated/TraceType_0.cpp:6373:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6375:      .typed<Tensor & (Scalar, Scalar, c10::optional<int64_t>, double, Tensor &)>();
autograd/generated/TraceType_0.cpp:6376:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6377:      .redispatch<Tensor &, Scalar, Scalar, c10::optional<int64_t>, double, Tensor &>(op, c10::DispatchKey::Tracer, start, end, steps, base, out);
autograd/generated/TraceType_0.cpp:6406:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6409:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6410:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_0.cpp:6439:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6442:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6443:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_0.cpp:6466:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6469:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6470:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, input, mask);
autograd/generated/TraceType_0.cpp:6498:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6501:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6502:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:6524:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6527:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6528:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, grad);
autograd/generated/TraceType_0.cpp:6558:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6561:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6562:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, max, max_values);
autograd/generated/TraceType_0.cpp:6593:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6596:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6597:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, max, max_values);
autograd/generated/TraceType_0.cpp:6626:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6629:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6630:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:6653:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6656:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6657:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, indices, output_size);
autograd/generated/TraceType_0.cpp:6687:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6690:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6691:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices, output_size, grad_input);
autograd/generated/TraceType_0.cpp:6722:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6725:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6726:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, indices, output_size, stride, padding, out);
autograd/generated/TraceType_0.cpp:6754:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6757:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6758:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:6791:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6794:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6795:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
autograd/generated/TraceType_0.cpp:6818:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6821:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6822:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output);
autograd/generated/TraceType_0.cpp:6851:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6854:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6855:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_0.cpp:6862:Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceType_0.cpp:6885:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6887:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceType_0.cpp:6888:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6889:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_0.cpp:6911:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6914:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6915:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceType_0.cpp:6922:Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
autograd/generated/TraceType_0.cpp:6942:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6944:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
autograd/generated/TraceType_0.cpp:6945:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6946:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, stride, dilation, groups);
autograd/generated/TraceType_0.cpp:6973:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6976:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:6977:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, output_mask);
autograd/generated/TraceType_0.cpp:7002:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7005:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7006:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input_size, grad_output, weight);
autograd/generated/TraceType_0.cpp:7031:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7034:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7035:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, padding, stride, dilation, groups);
autograd/generated/TraceType_0.cpp:7065:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7068:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7069:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceType_0.cpp:7100:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7103:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7104:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceType_0.cpp:7129:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7132:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7133:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction);
autograd/generated/TraceType_0.cpp:7154:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7157:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7158:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:7183:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7186:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7187:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, is_target);
autograd/generated/TraceType_0.cpp:7217:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7220:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7221:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, output, is_target);
autograd/generated/TraceType_0.cpp:7229:Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) {
autograd/generated/TraceType_0.cpp:7246:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7248:      .typed<Tensor (const Tensor &, int64_t, bool, c10::optional<Generator>)>();
autograd/generated/TraceType_0.cpp:7249:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7250:      .redispatch<Tensor, const Tensor &, int64_t, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, num_samples, replacement, generator);
autograd/generated/TraceType_0.cpp:7278:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7281:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7282:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:7304:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7307:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7308:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceType_0.cpp:7335:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7338:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7339:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceType_0.cpp:7346:Tensor nan_to_num(const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/TraceType_0.cpp:7363:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7365:      .typed<Tensor (const Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_0.cpp:7366:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7367:      .redispatch<Tensor, const Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, nan, posinf, neginf);
autograd/generated/TraceType_0.cpp:7374:Tensor & nan_to_num_(Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/TraceType_0.cpp:7396:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7398:      .typed<Tensor & (Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_0.cpp:7399:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7400:      .redispatch<Tensor &, Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, nan, posinf, neginf);
autograd/generated/TraceType_0.cpp:7424:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7427:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7428:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim, start, length);
autograd/generated/TraceType_0.cpp:7452:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7455:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7456:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim, start, length);
autograd/generated/TraceType_0.cpp:7463:std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps) {
autograd/generated/TraceType_0.cpp:7487:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7489:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double)>();
autograd/generated/TraceType_0.cpp:7490:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7491:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, momentum, eps);
autograd/generated/TraceType_0.cpp:7521:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7524:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7525:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:7553:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7556:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7557:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:7584:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7587:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7588:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:7595:Tensor new_empty_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:7615:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7617:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:7618:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7619:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, size, stride, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:7626:Tensor new_full(const Tensor & self, IntArrayRef size, Scalar fill_value, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:7646:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7648:      .typed<Tensor (const Tensor &, IntArrayRef, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:7649:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7650:      .redispatch<Tensor, const Tensor &, IntArrayRef, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, size, fill_value, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:7657:Tensor nll_loss(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/TraceType_0.cpp:7675:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7677:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t)>();
autograd/generated/TraceType_0.cpp:7678:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7679:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index);
autograd/generated/TraceType_0.cpp:7686:Tensor nll_loss2d(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/TraceType_0.cpp:7704:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7706:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t)>();
autograd/generated/TraceType_0.cpp:7707:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7708:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index);
autograd/generated/TraceType_0.cpp:7715:Tensor & nll_loss2d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/TraceType_0.cpp:7741:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7743:      .typed<Tensor & (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &, Tensor &)>();
autograd/generated/TraceType_0.cpp:7744:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7745:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
autograd/generated/TraceType_0.cpp:7752:Tensor & nll_loss_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/TraceType_0.cpp:7778:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7780:      .typed<Tensor & (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &, Tensor &)>();
autograd/generated/TraceType_0.cpp:7781:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7782:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
autograd/generated/TraceType_0.cpp:7804:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7807:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7808:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, keepdim);
autograd/generated/TraceType_0.cpp:7831:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7834:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7835:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_0.cpp:7857:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7860:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7861:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, input2);
autograd/generated/TraceType_0.cpp:7892:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7895:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7896:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, input2, input3, left, transpose, out);
autograd/generated/TraceType_0.cpp:7918:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7921:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7922:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dims);
autograd/generated/TraceType_0.cpp:7944:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7947:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7948:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, upscale_factor);
autograd/generated/TraceType_0.cpp:7977:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7980:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7981:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, index, source, accumulate);
autograd/generated/TraceType_0.cpp:7989:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7992:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:7993:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8013:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8016:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8017:      .redispatch<Tensor, const Tensor &, double, int64_t, ScalarType>(op, c10::DispatchKey::Tracer, self, scale, zero_point, dtype);
autograd/generated/TraceType_0.cpp:8041:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8044:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8045:      .redispatch<std::vector<Tensor>, TensorList, const Tensor &, const Tensor &, ScalarType>(op, c10::DispatchKey::Tracer, tensors, scales, zero_points, dtype);
autograd/generated/TraceType_0.cpp:8081:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8084:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8085:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
autograd/generated/TraceType_0.cpp:8107:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8110:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8111:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8137:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8140:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8141:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8171:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8174:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8175:      .redispatch<Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, size, out);
autograd/generated/TraceType_0.cpp:8182:Tensor & rand_out_generator_out(IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_0.cpp:8206:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8208:      .typed<Tensor & (IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_0.cpp:8209:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8210:      .redispatch<Tensor &, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, size, generator, out);
autograd/generated/TraceType_0.cpp:8240:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8243:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8244:      .redispatch<Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, size, out);
autograd/generated/TraceType_0.cpp:8251:Tensor & randn_out_generator_out(IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_0.cpp:8275:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8277:      .typed<Tensor & (IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_0.cpp:8278:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8279:      .redispatch<Tensor &, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, size, generator, out);
autograd/generated/TraceType_0.cpp:8286:Tensor range_step(Scalar start, Scalar end, Scalar step, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:8306:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8308:      .typed<Tensor (Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:8309:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8310:      .redispatch<Tensor, Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, step, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:8317:Tensor range(Scalar start, Scalar end, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_0.cpp:8336:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8338:      .typed<Tensor (Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_0.cpp:8339:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8340:      .redispatch<Tensor, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, dtype, layout, device, pin_memory);
autograd/generated/TraceType_0.cpp:8361:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8364:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8365:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8386:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8389:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8390:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8416:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8419:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8420:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8442:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8445:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8446:      .redispatch<Tensor, const Tensor &, DimnameList>(op, c10::DispatchKey::Tracer, self, names);
autograd/generated/TraceType_0.cpp:8468:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8471:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8472:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceType_0.cpp:8501:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8504:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8505:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceType_0.cpp:8533:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8536:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8537:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceType_0.cpp:8558:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8561:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8562:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8588:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8591:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8592:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8620:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8623:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8624:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:8652:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8655:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8656:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_0.cpp:8684:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8687:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8688:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceType_0.cpp:8695:Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) {
autograd/generated/TraceType_0.cpp:8696:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8698:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_0.cpp:8699:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8700:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh);
autograd/generated/TraceType_0.cpp:8703:Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/TraceType_0.cpp:8722:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8724:      .typed<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
autograd/generated/TraceType_0.cpp:8725:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8726:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, noise, lower, upper, training, generator);
autograd/generated/TraceType_0.cpp:8733:Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/TraceType_0.cpp:8757:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8759:      .typed<Tensor & (Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
autograd/generated/TraceType_0.cpp:8760:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8761:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, noise, lower, upper, training, generator);
autograd/generated/TraceType_0.cpp:8785:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8788:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8789:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceType_0.cpp:8813:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8816:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8817:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceType_0.cpp:8846:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8849:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8850:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceType_0.cpp:8873:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8876:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8877:      .redispatch<Tensor, const Tensor &, Dimname, int64_t>(op, c10::DispatchKey::Tracer, self, dim, index);
autograd/generated/TraceType_0.cpp:8900:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8903:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8904:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim, index);
autograd/generated/TraceType_0.cpp:8925:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8928:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8929:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8955:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8958:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8959:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:8980:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8983:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:8984:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:9010:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9013:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9014:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:9045:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9048:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9049:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
autograd/generated/TraceType_0.cpp:9080:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9083:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9084:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, out);
autograd/generated/TraceType_0.cpp:9091:Tensor softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_0.cpp:9107:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9109:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceType_0.cpp:9110:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9111:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_0.cpp:9118:Tensor softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_0.cpp:9134:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9136:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceType_0.cpp:9137:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9138:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_0.cpp:9167:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9170:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9171:      .redispatch<Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, beta, threshold, out);
autograd/generated/TraceType_0.cpp:9194:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9197:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9198:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, grad_output, self, lambd);
autograd/generated/TraceType_0.cpp:9228:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9231:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9232:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, descending, values, indices);
autograd/generated/TraceType_0.cpp:9263:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9266:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9267:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, descending, values, indices);
autograd/generated/TraceType_0.cpp:9289:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9292:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9293:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:9315:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9318:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9319:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_0.cpp:9341:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9344:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9345:      .redispatch<Tensor, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_0.cpp:9371:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9374:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9375:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:9402:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9405:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9406:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_0.cpp:9433:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9436:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9437:      .redispatch<Tensor &, Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_0.cpp:9467:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9470:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9471:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim, out);
autograd/generated/TraceType_0.cpp:9501:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9504:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9505:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim, out);
autograd/generated/TraceType_0.cpp:9528:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9531:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9532:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_0.cpp:9555:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9558:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9559:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_0.cpp:9587:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9590:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9591:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_0.cpp:9619:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9622:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9623:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_0.cpp:9630:Tensor & sum_out_IntList_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_0.cpp:9653:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9655:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_0.cpp:9656:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9657:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceType_0.cpp:9664:Tensor & sum_out_DimnameList_out(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_0.cpp:9687:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9689:      .typed<Tensor & (const Tensor &, DimnameList, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_0.cpp:9690:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9691:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceType_0.cpp:9719:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9722:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9723:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, index, out);
autograd/generated/TraceType_0.cpp:9730:std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/TraceType_0.cpp:9752:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9754:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_0.cpp:9755:  std::tie(output, finput, fgrad_input) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9756:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding);
autograd/generated/TraceType_0.cpp:9765:Tensor & thnn_conv_depthwise2d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/TraceType_0.cpp:9791:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9793:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceType_0.cpp:9794:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9795:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation, out);
autograd/generated/TraceType_0.cpp:9817:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9820:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9821:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dims);
autograd/generated/TraceType_0.cpp:9843:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9846:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9847:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, input);
autograd/generated/TraceType_0.cpp:9879:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9882:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9883:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, int64_t, bool, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, k, dim, largest, sorted, values, indices);
autograd/generated/TraceType_0.cpp:9911:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9914:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9915:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_0.cpp:9937:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9940:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9941:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_0.cpp:9963:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9966:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9967:      .redispatch<std::vector<Tensor>, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_0.cpp:9974:std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
autograd/generated/TraceType_0.cpp:9994:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9996:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceType_0.cpp:9997:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:9998:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, return_inverse, return_counts, dim);
autograd/generated/TraceType_0.cpp:10023:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10026:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10027:      .redispatch<std::vector<Tensor>, const Tensor &, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, split_sizes, dim);
autograd/generated/TraceType_0.cpp:10034:Tensor upsample_bilinear2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_0.cpp:10052:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10054:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_0.cpp:10055:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10056:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scale_factors);
autograd/generated/TraceType_0.cpp:10063:Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_0.cpp:10082:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10084:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_0.cpp:10085:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10086:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
autograd/generated/TraceType_0.cpp:10093:Tensor upsample_linear1d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_0.cpp:10110:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10112:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_0.cpp:10113:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10114:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, align_corners, scale_factors);
autograd/generated/TraceType_0.cpp:10121:Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
autograd/generated/TraceType_0.cpp:10138:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10140:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>)>();
autograd/generated/TraceType_0.cpp:10141:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10142:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales);
autograd/generated/TraceType_0.cpp:10149:Tensor & upsample_linear1d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/TraceType_0.cpp:10173:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10175:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_0.cpp:10176:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10177:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales, grad_input);
autograd/generated/TraceType_0.cpp:10184:Tensor upsample_nearest1d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_0.cpp:10201:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10203:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_0.cpp:10204:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10205:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scale_factors);
autograd/generated/TraceType_0.cpp:10212:Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
autograd/generated/TraceType_0.cpp:10229:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10231:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>)>();
autograd/generated/TraceType_0.cpp:10232:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10233:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales);
autograd/generated/TraceType_0.cpp:10240:Tensor upsample_nearest2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_0.cpp:10256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10258:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_0.cpp:10259:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10260:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, scale_factors);
autograd/generated/TraceType_0.cpp:10267:Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_0.cpp:10284:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10286:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_0.cpp:10287:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10288:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, scales_h, scales_w);
autograd/generated/TraceType_0.cpp:10295:Tensor & upsample_nearest2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceType_0.cpp:10319:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10321:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_0.cpp:10322:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10323:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales_h, scales_w, grad_input);
autograd/generated/TraceType_0.cpp:10330:Tensor & upsample_nearest3d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceType_0.cpp:10354:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10356:      .typed<Tensor & (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_0.cpp:10357:  c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10358:      .redispatch<Tensor &, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, scales_d, scales_h, scales_w, out);
autograd/generated/TraceType_0.cpp:10365:Tensor vander(const Tensor & x, c10::optional<int64_t> N, bool increasing) {
autograd/generated/TraceType_0.cpp:10381:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10383:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceType_0.cpp:10384:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10385:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, x, N, increasing);
autograd/generated/TraceType_0.cpp:10407:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10410:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10411:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:10433:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10436:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10437:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_0.cpp:10458:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10461:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10462:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_0.cpp:10483:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10486:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_0.cpp:10487:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/InplaceOrViewType_0.cpp:21:Tensor & _add_relu__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_0.cpp:24:    at::redispatch::_add_relu_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewType_0.cpp:29:Tensor & _add_relu_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:32:    at::redispatch::_add_relu_outf(ks & c10::after_InplaceOrView_keyset, self, other, alpha, out);
autograd/generated/InplaceOrViewType_0.cpp:37:Tensor & _bmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat2, bool deterministic, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:40:    at::redispatch::_bmm_outf(ks & c10::after_InplaceOrView_keyset, self, mat2, deterministic, out);
autograd/generated/InplaceOrViewType_0.cpp:45:Tensor & _cat_out_out(c10::DispatchKeySet ks, TensorList tensors, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:48:    at::redispatch::_cat_outf(ks & c10::after_InplaceOrView_keyset, tensors, dim, out);
autograd/generated/InplaceOrViewType_0.cpp:53:Tensor & _cumprod_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:56:    at::redispatch::_cumprod_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewType_0.cpp:61:Tensor & _cumsum_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:64:    at::redispatch::_cumsum_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewType_0.cpp:69:Tensor & _fft_c2r_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, int64_t normalization, int64_t last_dim_size, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:72:    at::redispatch::_fft_c2r_outf(ks & c10::after_InplaceOrView_keyset, self, dim, normalization, last_dim_size, out);
autograd/generated/InplaceOrViewType_0.cpp:77:Tensor & _fft_r2c_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, int64_t normalization, bool onesided, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:80:    at::redispatch::_fft_r2c_outf(ks & c10::after_InplaceOrView_keyset, self, dim, normalization, onesided, out);
autograd/generated/InplaceOrViewType_0.cpp:85:Tensor & _index_copy_(c10::DispatchKeySet ks, Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
autograd/generated/InplaceOrViewType_0.cpp:88:    at::redispatch::_index_copy_(ks & c10::after_InplaceOrView_keyset, self, dim, index, source);
autograd/generated/InplaceOrViewType_0.cpp:93:Tensor _indices(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:96:    return at::redispatch::_indices(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:101:Tensor & _mkldnn_transpose_(c10::DispatchKeySet ks, Tensor & self, int64_t dim0, int64_t dim1) {
autograd/generated/InplaceOrViewType_0.cpp:104:    at::redispatch::_mkldnn_transpose_(ks & c10::after_InplaceOrView_keyset, self, dim0, dim1);
autograd/generated/InplaceOrViewType_0.cpp:109:Tensor & _stack_out_out(c10::DispatchKeySet ks, TensorList tensors, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:112:    at::redispatch::_stack_outf(ks & c10::after_InplaceOrView_keyset, tensors, dim, out);
autograd/generated/InplaceOrViewType_0.cpp:117:Tensor & adaptive_avg_pool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:120:    at::redispatch::adaptive_avg_pool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:125:Tensor & adaptive_avg_pool3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:128:    at::redispatch::adaptive_avg_pool3d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, out);
autograd/generated/InplaceOrViewType_0.cpp:133:Tensor & adaptive_max_pool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:136:    at::redispatch::adaptive_max_pool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, indices, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:141:std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, Tensor & out, Tensor & indices) {
autograd/generated/InplaceOrViewType_0.cpp:144:    at::redispatch::adaptive_max_pool3d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, out, indices);
autograd/generated/InplaceOrViewType_0.cpp:150:Tensor & add__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_0.cpp:153:    at::redispatch::add_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewType_0.cpp:158:Tensor & add__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_0.cpp:161:    at::redispatch::add_(ks & c10::after_InplaceOrView_keyset, self, other, alpha);
autograd/generated/InplaceOrViewType_0.cpp:166:Tensor & add_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:169:    at::redispatch::add_outf(ks & c10::after_InplaceOrView_keyset, self, other, alpha, out);
autograd/generated/InplaceOrViewType_0.cpp:174:Tensor & addbmm_(c10::DispatchKeySet ks, Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_0.cpp:177:    at::redispatch::addbmm_(ks & c10::after_InplaceOrView_keyset, self, batch1, batch2, beta, alpha);
autograd/generated/InplaceOrViewType_0.cpp:182:Tensor & addbmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:185:    at::redispatch::addbmm_outf(ks & c10::after_InplaceOrView_keyset, self, batch1, batch2, beta, alpha, out);
autograd/generated/InplaceOrViewType_0.cpp:190:Tensor & addcdiv_(c10::DispatchKeySet ks, Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value) {
autograd/generated/InplaceOrViewType_0.cpp:193:    at::redispatch::addcdiv_(ks & c10::after_InplaceOrView_keyset, self, tensor1, tensor2, value);
autograd/generated/InplaceOrViewType_0.cpp:198:Tensor & addcdiv_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, const Scalar & value, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:201:    at::redispatch::addcdiv_outf(ks & c10::after_InplaceOrView_keyset, self, tensor1, tensor2, value, out);
autograd/generated/InplaceOrViewType_0.cpp:206:Tensor & addmm_(c10::DispatchKeySet ks, Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_0.cpp:209:    at::redispatch::addmm_(ks & c10::after_InplaceOrView_keyset, self, mat1, mat2, beta, alpha);
autograd/generated/InplaceOrViewType_0.cpp:214:Tensor & addmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:217:    at::redispatch::addmm_outf(ks & c10::after_InplaceOrView_keyset, self, mat1, mat2, beta, alpha, out);
autograd/generated/InplaceOrViewType_0.cpp:222:Tensor & addr_(c10::DispatchKeySet ks, Tensor & self, const Tensor & vec1, const Tensor & vec2, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_0.cpp:225:    at::redispatch::addr_(ks & c10::after_InplaceOrView_keyset, self, vec1, vec2, beta, alpha);
autograd/generated/InplaceOrViewType_0.cpp:230:Tensor & addr_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & vec1, const Tensor & vec2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:233:    at::redispatch::addr_outf(ks & c10::after_InplaceOrView_keyset, self, vec1, vec2, beta, alpha, out);
autograd/generated/InplaceOrViewType_0.cpp:238:Tensor alias(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:241:    return at::redispatch::alias(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:252:Tensor & all_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:255:    at::redispatch::all_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewType_0.cpp:260:Tensor & amax_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:263:    at::redispatch::amax_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewType_0.cpp:268:Tensor & amin_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:271:    at::redispatch::amin_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, out);
autograd/generated/InplaceOrViewType_0.cpp:276:Tensor & angle_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:279:    at::redispatch::angle_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:284:Tensor as_strided(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/InplaceOrViewType_0.cpp:287:    return at::redispatch::as_strided(ks & c10::after_InplaceOrView_keyset, self, size, stride, storage_offset);
autograd/generated/InplaceOrViewType_0.cpp:301:Tensor & asin_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:304:    at::redispatch::asin_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:309:Tensor & asin_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:312:    at::redispatch::asin_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:317:Tensor & asinh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:320:    at::redispatch::asinh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:325:Tensor & asinh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:328:    at::redispatch::asinh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:333:Tensor & avg_pool2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:336:    at::redispatch::avg_pool2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:341:Tensor & avg_pool2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:344:    at::redispatch::avg_pool2d_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
autograd/generated/InplaceOrViewType_0.cpp:349:Tensor & baddbmm_(c10::DispatchKeySet ks, Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_0.cpp:352:    at::redispatch::baddbmm_(ks & c10::after_InplaceOrView_keyset, self, batch1, batch2, beta, alpha);
autograd/generated/InplaceOrViewType_0.cpp:357:Tensor & baddbmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & batch1, const Tensor & batch2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:360:    at::redispatch::baddbmm_outf(ks & c10::after_InplaceOrView_keyset, self, batch1, batch2, beta, alpha, out);
autograd/generated/InplaceOrViewType_0.cpp:365:Tensor & batch_norm_elemt_out_out(c10::DispatchKeySet ks, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:368:    at::redispatch::batch_norm_elemt_outf(ks & c10::after_InplaceOrView_keyset, input, weight, bias, mean, invstd, eps, out);
autograd/generated/InplaceOrViewType_0.cpp:373:Tensor & bitwise_and_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:376:    at::redispatch::bitwise_and_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:381:Tensor & bitwise_and_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:384:    at::redispatch::bitwise_and_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:389:Tensor & bitwise_not_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:392:    at::redispatch::bitwise_not_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:397:Tensor & bitwise_or_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:400:    at::redispatch::bitwise_or_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:405:Tensor & bitwise_or_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:408:    at::redispatch::bitwise_or_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:413:Tensor & bitwise_xor_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:416:    at::redispatch::bitwise_xor_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:421:Tensor & bitwise_xor_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:424:    at::redispatch::bitwise_xor_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:429:Tensor & cauchy_(c10::DispatchKeySet ks, Tensor & self, double median, double sigma, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_0.cpp:432:    at::redispatch::cauchy_(ks & c10::after_InplaceOrView_keyset, self, median, sigma, generator);
autograd/generated/InplaceOrViewType_0.cpp:437:Tensor & ceil_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:440:    at::redispatch::ceil_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:445:Tensor & ceil_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:448:    at::redispatch::ceil_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:453:Tensor & celu_(c10::DispatchKeySet ks, Tensor & self, const Scalar & alpha) {
autograd/generated/InplaceOrViewType_0.cpp:456:    at::redispatch::celu_(ks & c10::after_InplaceOrView_keyset, self, alpha);
autograd/generated/InplaceOrViewType_0.cpp:461:Tensor & cholesky_inverse_out_out(c10::DispatchKeySet ks, const Tensor & self, bool upper, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:464:    at::redispatch::cholesky_inverse_outf(ks & c10::after_InplaceOrView_keyset, self, upper, out);
autograd/generated/InplaceOrViewType_0.cpp:469:Tensor & clamp_(c10::DispatchKeySet ks, Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max) {
autograd/generated/InplaceOrViewType_0.cpp:472:    at::redispatch::clamp_(ks & c10::after_InplaceOrView_keyset, self, min, max);
autograd/generated/InplaceOrViewType_0.cpp:477:Tensor & clamp_out_out(c10::DispatchKeySet ks, const Tensor & self, const c10::optional<Scalar> & min, const c10::optional<Scalar> & max, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:480:    at::redispatch::clamp_outf(ks & c10::after_InplaceOrView_keyset, self, min, max, out);
autograd/generated/InplaceOrViewType_0.cpp:485:std::tuple<Tensor &,Tensor &,Tensor &> conv_depthwise3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewType_0.cpp:488:    at::redispatch::conv_depthwise3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, dilation, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewType_0.cpp:495:Tensor & copy_sparse_to_sparse_(c10::DispatchKeySet ks, Tensor & self, const Tensor & src, bool non_blocking) {
autograd/generated/InplaceOrViewType_0.cpp:498:    at::redispatch::copy_sparse_to_sparse_(ks & c10::after_InplaceOrView_keyset, self, src, non_blocking);
autograd/generated/InplaceOrViewType_0.cpp:503:Tensor & cos_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:506:    at::redispatch::cos_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:511:Tensor & cos_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:514:    at::redispatch::cos_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:519:Tensor & cosh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:522:    at::redispatch::cosh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:527:Tensor & cosh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:530:    at::redispatch::cosh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:535:std::tuple<Tensor &,Tensor &> cummax_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_0.cpp:538:    at::redispatch::cummax_outf(ks & c10::after_InplaceOrView_keyset, self, dim, values, indices);
autograd/generated/InplaceOrViewType_0.cpp:544:std::tuple<Tensor &,Tensor &> cummin_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_0.cpp:547:    at::redispatch::cummin_outf(ks & c10::after_InplaceOrView_keyset, self, dim, values, indices);
autograd/generated/InplaceOrViewType_0.cpp:553:Tensor & deg2rad_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:556:    at::redispatch::deg2rad_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:561:Tensor & deg2rad_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:564:    at::redispatch::deg2rad_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:569:Tensor & diag_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t diagonal, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:572:    at::redispatch::diag_outf(ks & c10::after_InplaceOrView_keyset, self, diagonal, out);
autograd/generated/InplaceOrViewType_0.cpp:577:Tensor & div__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_0.cpp:580:    at::redispatch::div_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:585:Tensor & div__Tensor_mode(c10::DispatchKeySet ks, Tensor & self, const Tensor & other, std::string rounding_mode) {
autograd/generated/InplaceOrViewType_0.cpp:588:    at::redispatch::div_(ks & c10::after_InplaceOrView_keyset, self, other, rounding_mode);
autograd/generated/InplaceOrViewType_0.cpp:593:Tensor & div__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_0.cpp:596:    at::redispatch::div_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:601:Tensor & div__Scalar_mode(c10::DispatchKeySet ks, Tensor & self, const Scalar & other, std::string rounding_mode) {
autograd/generated/InplaceOrViewType_0.cpp:604:    at::redispatch::div_(ks & c10::after_InplaceOrView_keyset, self, other, rounding_mode);
autograd/generated/InplaceOrViewType_0.cpp:609:Tensor & div_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:612:    at::redispatch::div_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:617:Tensor & div_out_out_mode(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, std::string rounding_mode, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:620:    at::redispatch::div_outf(ks & c10::after_InplaceOrView_keyset, self, other, rounding_mode, out);
autograd/generated/InplaceOrViewType_0.cpp:625:Tensor & dot_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & tensor, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:628:    at::redispatch::dot_outf(ks & c10::after_InplaceOrView_keyset, self, tensor, out);
autograd/generated/InplaceOrViewType_0.cpp:633:std::tuple<Tensor &,Tensor &> eig_out_e(c10::DispatchKeySet ks, const Tensor & self, bool eigenvectors, Tensor & e, Tensor & v) {
autograd/generated/InplaceOrViewType_0.cpp:636:    at::redispatch::eig_outf(ks & c10::after_InplaceOrView_keyset, self, eigenvectors, e, v);
autograd/generated/InplaceOrViewType_0.cpp:642:Tensor & embedding_renorm_(c10::DispatchKeySet ks, Tensor & self, const Tensor & indices, double max_norm, double norm_type) {
autograd/generated/InplaceOrViewType_0.cpp:645:    at::redispatch::embedding_renorm_(ks & c10::after_InplaceOrView_keyset, self, indices, max_norm, norm_type);
autograd/generated/InplaceOrViewType_0.cpp:650:Tensor & erf_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:653:    at::redispatch::erf_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:658:Tensor & erf_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:661:    at::redispatch::erf_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:666:Tensor & exp2_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:669:    at::redispatch::exp2_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:674:Tensor & exp2_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:677:    at::redispatch::exp2_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:682:Tensor & exp_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:685:    at::redispatch::exp_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:690:Tensor & exp_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:693:    at::redispatch::exp_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:698:Tensor expand(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef size, bool implicit) {
autograd/generated/InplaceOrViewType_0.cpp:701:    return at::redispatch::expand(ks & c10::after_InplaceOrView_keyset, self, size, implicit);
autograd/generated/InplaceOrViewType_0.cpp:713:Tensor & expm1_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:716:    at::redispatch::expm1_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:721:Tensor & expm1_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:724:    at::redispatch::expm1_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:729:Tensor & exponential_(c10::DispatchKeySet ks, Tensor & self, double lambd, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_0.cpp:732:    at::redispatch::exponential_(ks & c10::after_InplaceOrView_keyset, self, lambd, generator);
autograd/generated/InplaceOrViewType_0.cpp:737:Tensor & eye_out_out(c10::DispatchKeySet ks, int64_t n, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:740:    at::redispatch::eye_outf(ks & c10::after_InplaceOrView_keyset, n, out);
autograd/generated/InplaceOrViewType_0.cpp:745:Tensor & eye_out_m_out(c10::DispatchKeySet ks, int64_t n, int64_t m, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:748:    at::redispatch::eye_outf(ks & c10::after_InplaceOrView_keyset, n, m, out);
autograd/generated/InplaceOrViewType_0.cpp:753:Tensor & fill__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & value) {
autograd/generated/InplaceOrViewType_0.cpp:756:    at::redispatch::fill_(ks & c10::after_InplaceOrView_keyset, self, value);
autograd/generated/InplaceOrViewType_0.cpp:761:Tensor & fill__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & value) {
autograd/generated/InplaceOrViewType_0.cpp:764:    at::redispatch::fill_(ks & c10::after_InplaceOrView_keyset, self, value);
autograd/generated/InplaceOrViewType_0.cpp:769:Tensor & fractional_max_pool2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:772:    at::redispatch::fractional_max_pool2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, output_size, indices, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:777:std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out_output(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples, Tensor & output, Tensor & indices) {
autograd/generated/InplaceOrViewType_0.cpp:780:    at::redispatch::fractional_max_pool2d_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, output_size, random_samples, output, indices);
autograd/generated/InplaceOrViewType_0.cpp:786:std::tuple<Tensor &,Tensor &> frexp_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & mantissa, Tensor & exponent) {
autograd/generated/InplaceOrViewType_0.cpp:789:    at::redispatch::frexp_outf(ks & c10::after_InplaceOrView_keyset, self, mantissa, exponent);
autograd/generated/InplaceOrViewType_0.cpp:795:Tensor & gather_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:798:    at::redispatch::gather_outf(ks & c10::after_InplaceOrView_keyset, self, dim, index, sparse_grad, out);
autograd/generated/InplaceOrViewType_0.cpp:803:Tensor & geometric_(c10::DispatchKeySet ks, Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_0.cpp:806:    at::redispatch::geometric_(ks & c10::after_InplaceOrView_keyset, self, p, generator);
autograd/generated/InplaceOrViewType_0.cpp:811:std::tuple<Tensor &,Tensor &> geqrf_out_a(c10::DispatchKeySet ks, const Tensor & self, Tensor & a, Tensor & tau) {
autograd/generated/InplaceOrViewType_0.cpp:814:    at::redispatch::geqrf_outf(ks & c10::after_InplaceOrView_keyset, self, a, tau);
autograd/generated/InplaceOrViewType_0.cpp:820:Tensor & gt__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_0.cpp:823:    at::redispatch::gt_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:828:Tensor & gt__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_0.cpp:831:    at::redispatch::gt_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:836:Tensor & gt_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:839:    at::redispatch::gt_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:844:Tensor & gt_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:847:    at::redispatch::gt_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:852:Tensor & hardsigmoid_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:855:    at::redispatch::hardsigmoid_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:860:Tensor & hardsigmoid_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:863:    at::redispatch::hardsigmoid_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:868:Tensor & hardswish_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:871:    at::redispatch::hardswish_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:876:Tensor & hardswish_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:879:    at::redispatch::hardswish_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:884:Tensor & histc_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t bins, const Scalar & min, const Scalar & max, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:887:    at::redispatch::histc_outf(ks & c10::after_InplaceOrView_keyset, self, bins, min, max, out);
autograd/generated/InplaceOrViewType_0.cpp:892:Tensor & hspmm_out_out(c10::DispatchKeySet ks, const Tensor & mat1, const Tensor & mat2, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:895:    at::redispatch::hspmm_outf(ks & c10::after_InplaceOrView_keyset, mat1, mat2, out);
autograd/generated/InplaceOrViewType_0.cpp:900:Tensor & i0_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:903:    at::redispatch::i0_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:908:Tensor & i0_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:911:    at::redispatch::i0_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:916:Tensor & igammac_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_0.cpp:919:    at::redispatch::igammac_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:924:Tensor & igammac_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:927:    at::redispatch::igammac_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:932:Tensor & index_select_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, const Tensor & index, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:935:    at::redispatch::index_select_outf(ks & c10::after_InplaceOrView_keyset, self, dim, index, out);
autograd/generated/InplaceOrViewType_0.cpp:940:Tensor & isneginf_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:943:    at::redispatch::isneginf_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:948:Tensor & isposinf_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:951:    at::redispatch::isposinf_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:956:Tensor & l1_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:959:    at::redispatch::l1_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:964:Tensor & l1_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:967:    at::redispatch::l1_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, out);
autograd/generated/InplaceOrViewType_0.cpp:972:Tensor & le__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_0.cpp:975:    at::redispatch::le_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:980:Tensor & le__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_0.cpp:983:    at::redispatch::le_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:988:Tensor & le_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:991:    at::redispatch::le_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:996:Tensor & le_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:999:    at::redispatch::le_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1004:Tensor & leaky_relu_(c10::DispatchKeySet ks, Tensor & self, const Scalar & negative_slope) {
autograd/generated/InplaceOrViewType_0.cpp:1007:    at::redispatch::leaky_relu_(ks & c10::after_InplaceOrView_keyset, self, negative_slope);
autograd/generated/InplaceOrViewType_0.cpp:1012:Tensor & leaky_relu_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & negative_slope, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1015:    at::redispatch::leaky_relu_outf(ks & c10::after_InplaceOrView_keyset, self, negative_slope, out);
autograd/generated/InplaceOrViewType_0.cpp:1020:Tensor & lerp__Scalar(c10::DispatchKeySet ks, Tensor & self, const Tensor & end, const Scalar & weight) {
autograd/generated/InplaceOrViewType_0.cpp:1023:    at::redispatch::lerp_(ks & c10::after_InplaceOrView_keyset, self, end, weight);
autograd/generated/InplaceOrViewType_0.cpp:1028:Tensor & lerp__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & end, const Tensor & weight) {
autograd/generated/InplaceOrViewType_0.cpp:1031:    at::redispatch::lerp_(ks & c10::after_InplaceOrView_keyset, self, end, weight);
autograd/generated/InplaceOrViewType_0.cpp:1036:Tensor & lerp_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & end, const Scalar & weight, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1039:    at::redispatch::lerp_outf(ks & c10::after_InplaceOrView_keyset, self, end, weight, out);
autograd/generated/InplaceOrViewType_0.cpp:1044:Tensor & lerp_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & end, const Tensor & weight, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1047:    at::redispatch::lerp_outf(ks & c10::after_InplaceOrView_keyset, self, end, weight, out);
autograd/generated/InplaceOrViewType_0.cpp:1052:Tensor & lgamma_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1055:    at::redispatch::lgamma_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1060:Tensor & lgamma_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1063:    at::redispatch::lgamma_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1068:std::tuple<Tensor &,Tensor &> linalg_eigh_out_eigvals(c10::DispatchKeySet ks, const Tensor & self, std::string UPLO, Tensor & eigvals, Tensor & eigvecs) {
autograd/generated/InplaceOrViewType_0.cpp:1071:    at::redispatch::linalg_eigh_outf(ks & c10::after_InplaceOrView_keyset, self, UPLO, eigvals, eigvecs);
autograd/generated/InplaceOrViewType_0.cpp:1077:Tensor & linalg_eigvalsh_out_out(c10::DispatchKeySet ks, const Tensor & self, std::string UPLO, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1080:    at::redispatch::linalg_eigvalsh_outf(ks & c10::after_InplaceOrView_keyset, self, UPLO, out);
autograd/generated/InplaceOrViewType_0.cpp:1085:Tensor & linalg_inv_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1088:    at::redispatch::linalg_inv_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1093:std::tuple<Tensor &,Tensor &> linalg_qr_out_out(c10::DispatchKeySet ks, const Tensor & self, std::string mode, Tensor & Q, Tensor & R) {
autograd/generated/InplaceOrViewType_0.cpp:1096:    at::redispatch::linalg_qr_outf(ks & c10::after_InplaceOrView_keyset, self, mode, Q, R);
autograd/generated/InplaceOrViewType_0.cpp:1102:Tensor & linalg_solve_out_out(c10::DispatchKeySet ks, const Tensor & input, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1105:    at::redispatch::linalg_solve_outf(ks & c10::after_InplaceOrView_keyset, input, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1110:Tensor & linspace_out_out(c10::DispatchKeySet ks, const Scalar & start, const Scalar & end, c10::optional<int64_t> steps, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1113:    at::redispatch::linspace_outf(ks & c10::after_InplaceOrView_keyset, start, end, steps, out);
autograd/generated/InplaceOrViewType_0.cpp:1118:Tensor & log10_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1121:    at::redispatch::log10_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1126:Tensor & log10_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1129:    at::redispatch::log10_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1134:Tensor & log1p_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1137:    at::redispatch::log1p_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1142:Tensor & log1p_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1145:    at::redispatch::log1p_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1150:Tensor & log_sigmoid_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & buffer, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1153:    at::redispatch::log_sigmoid_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, buffer, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1158:std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, Tensor & output, Tensor & buffer) {
autograd/generated/InplaceOrViewType_0.cpp:1161:    at::redispatch::log_sigmoid_forward_outf(ks & c10::after_InplaceOrView_keyset, self, output, buffer);
autograd/generated/InplaceOrViewType_0.cpp:1167:Tensor & logcumsumexp_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1170:    at::redispatch::logcumsumexp_outf(ks & c10::after_InplaceOrView_keyset, self, dim, out);
autograd/generated/InplaceOrViewType_0.cpp:1175:Tensor & logical_and_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1178:    at::redispatch::logical_and_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1183:Tensor & logical_not_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1186:    at::redispatch::logical_not_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1191:Tensor & logical_or_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1194:    at::redispatch::logical_or_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1199:Tensor & logical_xor_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1202:    at::redispatch::logical_xor_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1207:Tensor & logit_(c10::DispatchKeySet ks, Tensor & self, c10::optional<double> eps) {
autograd/generated/InplaceOrViewType_0.cpp:1210:    at::redispatch::logit_(ks & c10::after_InplaceOrView_keyset, self, eps);
autograd/generated/InplaceOrViewType_0.cpp:1215:Tensor & logit_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, c10::optional<double> eps, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1218:    at::redispatch::logit_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, eps, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1223:Tensor & logit_out_out(c10::DispatchKeySet ks, const Tensor & self, c10::optional<double> eps, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1226:    at::redispatch::logit_outf(ks & c10::after_InplaceOrView_keyset, self, eps, out);
autograd/generated/InplaceOrViewType_0.cpp:1231:std::tuple<Tensor &,Tensor &> lstsq_out_X(c10::DispatchKeySet ks, const Tensor & self, const Tensor & A, Tensor & X, Tensor & qr) {
autograd/generated/InplaceOrViewType_0.cpp:1234:    at::redispatch::lstsq_outf(ks & c10::after_InplaceOrView_keyset, self, A, X, qr);
autograd/generated/InplaceOrViewType_0.cpp:1240:Tensor & lu_solve_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1243:    at::redispatch::lu_solve_outf(ks & c10::after_InplaceOrView_keyset, self, LU_data, LU_pivots, out);
autograd/generated/InplaceOrViewType_0.cpp:1248:Tensor & masked_fill__Scalar(c10::DispatchKeySet ks, Tensor & self, const Tensor & mask, const Scalar & value) {
autograd/generated/InplaceOrViewType_0.cpp:1251:    at::redispatch::masked_fill_(ks & c10::after_InplaceOrView_keyset, self, mask, value);
autograd/generated/InplaceOrViewType_0.cpp:1256:Tensor & masked_fill__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & mask, const Tensor & value) {
autograd/generated/InplaceOrViewType_0.cpp:1259:    at::redispatch::masked_fill_(ks & c10::after_InplaceOrView_keyset, self, mask, value);
autograd/generated/InplaceOrViewType_0.cpp:1264:Tensor & max_pool3d_with_indices_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1267:    at::redispatch::max_pool3d_with_indices_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1272:std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, Tensor & out, Tensor & indices) {
autograd/generated/InplaceOrViewType_0.cpp:1275:    at::redispatch::max_pool3d_with_indices_outf(ks & c10::after_InplaceOrView_keyset, self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
autograd/generated/InplaceOrViewType_0.cpp:1281:Tensor & max_unpool3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1284:    at::redispatch::max_unpool3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, indices, output_size, stride, padding, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1289:Tensor & max_unpool3d_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1292:    at::redispatch::max_unpool3d_outf(ks & c10::after_InplaceOrView_keyset, self, indices, output_size, stride, padding, out);
autograd/generated/InplaceOrViewType_0.cpp:1297:Tensor & mean_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1300:    at::redispatch::mean_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewType_0.cpp:1305:std::tuple<Tensor &,Tensor &> mode_out_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_0.cpp:1308:    at::redispatch::mode_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewType_0.cpp:1314:Tensor & mse_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1317:    at::redispatch::mse_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1322:Tensor & mse_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1325:    at::redispatch::mse_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, out);
autograd/generated/InplaceOrViewType_0.cpp:1330:Tensor & multinomial_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1333:    at::redispatch::multinomial_outf(ks & c10::after_InplaceOrView_keyset, self, num_samples, replacement, generator, out);
autograd/generated/InplaceOrViewType_0.cpp:1338:Tensor & mv_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & vec, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1341:    at::redispatch::mv_outf(ks & c10::after_InplaceOrView_keyset, self, vec, out);
autograd/generated/InplaceOrViewType_0.cpp:1346:std::tuple<Tensor &,Tensor &> nanmedian_out_dim_values(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, Tensor & values, Tensor & indices) {
autograd/generated/InplaceOrViewType_0.cpp:1349:    at::redispatch::nanmedian_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, values, indices);
autograd/generated/InplaceOrViewType_0.cpp:1355:Tensor & narrow_copy_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, int64_t start, int64_t length, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1358:    at::redispatch::narrow_copy_outf(ks & c10::after_InplaceOrView_keyset, self, dim, start, length, out);
autograd/generated/InplaceOrViewType_0.cpp:1363:std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_out_out(c10::DispatchKeySet ks, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, Tensor & out, Tensor & save_mean, Tensor & save_invstd) {
autograd/generated/InplaceOrViewType_0.cpp:1366:    at::redispatch::native_batch_norm_outf(ks & c10::after_InplaceOrView_keyset, input, weight, bias, running_mean, running_var, training, momentum, eps, out, save_mean, save_invstd);
autograd/generated/InplaceOrViewType_0.cpp:1373:Tensor & ne__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_0.cpp:1376:    at::redispatch::ne_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:1381:Tensor & ne__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_0.cpp:1384:    at::redispatch::ne_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:1389:Tensor & ne_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1392:    at::redispatch::ne_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1397:Tensor & ne_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1400:    at::redispatch::ne_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1405:Tensor & nextafter_(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_0.cpp:1408:    at::redispatch::nextafter_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:1413:Tensor & nextafter_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1416:    at::redispatch::nextafter_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1421:Tensor & nonzero_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1424:    at::redispatch::nonzero_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1429:Tensor & normal_(c10::DispatchKeySet ks, Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_0.cpp:1432:    at::redispatch::normal_(ks & c10::after_InplaceOrView_keyset, self, mean, std, generator);
autograd/generated/InplaceOrViewType_0.cpp:1437:Tensor & normal_out_Tensor_float_out(c10::DispatchKeySet ks, const Tensor & mean, double std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1440:    at::redispatch::normal_outf(ks & c10::after_InplaceOrView_keyset, mean, std, generator, out);
autograd/generated/InplaceOrViewType_0.cpp:1445:Tensor & normal_out_float_Tensor_out(c10::DispatchKeySet ks, double mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1448:    at::redispatch::normal_outf(ks & c10::after_InplaceOrView_keyset, mean, std, generator, out);
autograd/generated/InplaceOrViewType_0.cpp:1453:Tensor & normal_out_Tensor_Tensor_out(c10::DispatchKeySet ks, const Tensor & mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1456:    at::redispatch::normal_outf(ks & c10::after_InplaceOrView_keyset, mean, std, generator, out);
autograd/generated/InplaceOrViewType_0.cpp:1461:Tensor & ormqr_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1464:    at::redispatch::ormqr_outf(ks & c10::after_InplaceOrView_keyset, self, input2, input3, left, transpose, out);
autograd/generated/InplaceOrViewType_0.cpp:1469:Tensor permute(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dims) {
autograd/generated/InplaceOrViewType_0.cpp:1472:    return at::redispatch::permute(ks & c10::after_InplaceOrView_keyset, self, dims);
autograd/generated/InplaceOrViewType_0.cpp:1484:Tensor & polygamma_out_out(c10::DispatchKeySet ks, int64_t n, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1487:    at::redispatch::polygamma_outf(ks & c10::after_InplaceOrView_keyset, n, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1492:Tensor & prod_out_int_out(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1495:    at::redispatch::prod_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewType_0.cpp:1500:Tensor & put_(c10::DispatchKeySet ks, Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) {
autograd/generated/InplaceOrViewType_0.cpp:1503:    at::redispatch::put_(ks & c10::after_InplaceOrView_keyset, self, index, source, accumulate);
autograd/generated/InplaceOrViewType_0.cpp:1508:Tensor & rad2deg_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1511:    at::redispatch::rad2deg_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1516:Tensor & rad2deg_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1519:    at::redispatch::rad2deg_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1524:Tensor & random__from(c10::DispatchKeySet ks, Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_0.cpp:1527:    at::redispatch::random_(ks & c10::after_InplaceOrView_keyset, self, from, to, generator);
autograd/generated/InplaceOrViewType_0.cpp:1532:Tensor & random__to(c10::DispatchKeySet ks, Tensor & self, int64_t to, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_0.cpp:1535:    at::redispatch::random_(ks & c10::after_InplaceOrView_keyset, self, to, generator);
autograd/generated/InplaceOrViewType_0.cpp:1540:Tensor & random_(c10::DispatchKeySet ks, Tensor & self, c10::optional<Generator> generator) {
autograd/generated/InplaceOrViewType_0.cpp:1543:    at::redispatch::random_(ks & c10::after_InplaceOrView_keyset, self, generator);
autograd/generated/InplaceOrViewType_0.cpp:1548:Tensor & randperm_out_generator_out(c10::DispatchKeySet ks, int64_t n, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1551:    at::redispatch::randperm_outf(ks & c10::after_InplaceOrView_keyset, n, generator, out);
autograd/generated/InplaceOrViewType_0.cpp:1556:Tensor & range_out_out(c10::DispatchKeySet ks, const Scalar & start, const Scalar & end, const Scalar & step, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1559:    at::redispatch::range_outf(ks & c10::after_InplaceOrView_keyset, start, end, step, out);
autograd/generated/InplaceOrViewType_0.cpp:1564:Tensor & reflection_pad2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1567:    at::redispatch::reflection_pad2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1572:Tensor & reflection_pad2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1575:    at::redispatch::reflection_pad2d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewType_0.cpp:1580:Tensor & remainder__Scalar(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_0.cpp:1583:    at::redispatch::remainder_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:1588:Tensor & remainder__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_0.cpp:1591:    at::redispatch::remainder_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:1596:Tensor & remainder_out_Scalar_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1599:    at::redispatch::remainder_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1604:Tensor & remainder_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1607:    at::redispatch::remainder_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:1612:Tensor & renorm_(c10::DispatchKeySet ks, Tensor & self, const Scalar & p, int64_t dim, const Scalar & maxnorm) {
autograd/generated/InplaceOrViewType_0.cpp:1615:    at::redispatch::renorm_(ks & c10::after_InplaceOrView_keyset, self, p, dim, maxnorm);
autograd/generated/InplaceOrViewType_0.cpp:1620:Tensor & renorm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & p, int64_t dim, const Scalar & maxnorm, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1623:    at::redispatch::renorm_outf(ks & c10::after_InplaceOrView_keyset, self, p, dim, maxnorm, out);
autograd/generated/InplaceOrViewType_0.cpp:1628:Tensor & replication_pad1d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1631:    at::redispatch::replication_pad1d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1636:Tensor & replication_pad1d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1639:    at::redispatch::replication_pad1d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewType_0.cpp:1644:Tensor & replication_pad3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1647:    at::redispatch::replication_pad3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, padding, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1652:Tensor & replication_pad3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef padding, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1655:    at::redispatch::replication_pad3d_outf(ks & c10::after_InplaceOrView_keyset, self, padding, out);
autograd/generated/InplaceOrViewType_0.cpp:1660:Tensor & searchsorted_out_Tensor_out(c10::DispatchKeySet ks, const Tensor & sorted_sequence, const Tensor & self, bool out_int32, bool right, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1663:    at::redispatch::searchsorted_outf(ks & c10::after_InplaceOrView_keyset, sorted_sequence, self, out_int32, right, out);
autograd/generated/InplaceOrViewType_0.cpp:1668:Tensor select_int(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, int64_t index) {
autograd/generated/InplaceOrViewType_0.cpp:1671:    return at::redispatch::select(ks & c10::after_InplaceOrView_keyset, self, dim, index);
autograd/generated/InplaceOrViewType_0.cpp:1682:Tensor & sign_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1685:    at::redispatch::sign_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1690:Tensor & sign_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1693:    at::redispatch::sign_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1698:Tensor & silu_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1701:    at::redispatch::silu_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1706:Tensor & silu_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1709:    at::redispatch::silu_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1714:Tensor & sinc_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1717:    at::redispatch::sinc_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1722:Tensor & sinc_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1725:    at::redispatch::sinc_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1730:Tensor slice_Tensor(c10::DispatchKeySet ks, const Tensor & self, int64_t dim, c10::optional<int64_t> start, c10::optional<int64_t> end, int64_t step) {
autograd/generated/InplaceOrViewType_0.cpp:1733:    return at::redispatch::slice(ks & c10::after_InplaceOrView_keyset, self, dim, start, end, step);
autograd/generated/InplaceOrViewType_0.cpp:1746:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewType_0.cpp:1749:    at::redispatch::slow_conv3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewType_0.cpp:1756:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1759:    at::redispatch::slow_conv3d_forward_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
autograd/generated/InplaceOrViewType_0.cpp:1766:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out_grad_output(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewType_0.cpp:1769:    at::redispatch::slow_conv_transpose3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewType_0.cpp:1776:Tensor & slow_conv_transpose3d_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1779:    at::redispatch::slow_conv_transpose3d_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
autograd/generated/InplaceOrViewType_0.cpp:1784:Tensor & soft_margin_loss_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1787:    at::redispatch::soft_margin_loss_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, target, reduction, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1792:Tensor & soft_margin_loss_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & target, int64_t reduction, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1795:    at::redispatch::soft_margin_loss_outf(ks & c10::after_InplaceOrView_keyset, self, target, reduction, out);
autograd/generated/InplaceOrViewType_0.cpp:1800:Tensor & softshrink_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Scalar & lambd, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1803:    at::redispatch::softshrink_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, lambd, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1808:Tensor & softshrink_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & lambd, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1811:    at::redispatch::softshrink_outf(ks & c10::after_InplaceOrView_keyset, self, lambd, out);
autograd/generated/InplaceOrViewType_0.cpp:1816:std::tuple<Tensor &,Tensor &> solve_out_solution(c10::DispatchKeySet ks, const Tensor & self, const Tensor & A, Tensor & solution, Tensor & lu) {
autograd/generated/InplaceOrViewType_0.cpp:1819:    at::redispatch::solve_outf(ks & c10::after_InplaceOrView_keyset, self, A, solution, lu);
autograd/generated/InplaceOrViewType_0.cpp:1825:Tensor & sparse_resize_(c10::DispatchKeySet ks, Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
autograd/generated/InplaceOrViewType_0.cpp:1828:    at::redispatch::sparse_resize_(ks & c10::after_InplaceOrView_keyset, self, size, sparse_dim, dense_dim);
autograd/generated/InplaceOrViewType_0.cpp:1833:Tensor & sparse_resize_and_clear_(c10::DispatchKeySet ks, Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
autograd/generated/InplaceOrViewType_0.cpp:1836:    at::redispatch::sparse_resize_and_clear_(ks & c10::after_InplaceOrView_keyset, self, size, sparse_dim, dense_dim);
autograd/generated/InplaceOrViewType_0.cpp:1841:Tensor & special_entr_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1844:    at::redispatch::special_entr_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1849:std::vector<Tensor> split_Tensor(c10::DispatchKeySet ks, const Tensor & self, int64_t split_size, int64_t dim) {
autograd/generated/InplaceOrViewType_0.cpp:1852:    return at::redispatch::split(ks & c10::after_InplaceOrView_keyset, self, split_size, dim);
autograd/generated/InplaceOrViewType_0.cpp:1858:std::vector<Tensor> split_with_sizes(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef split_sizes, int64_t dim) {
autograd/generated/InplaceOrViewType_0.cpp:1861:    return at::redispatch::split_with_sizes(ks & c10::after_InplaceOrView_keyset, self, split_sizes, dim);
autograd/generated/InplaceOrViewType_0.cpp:1867:Tensor & square_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1870:    at::redispatch::square_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1875:Tensor squeeze(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1878:    return at::redispatch::squeeze(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1889:Tensor squeeze_dim(c10::DispatchKeySet ks, const Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewType_0.cpp:1892:    return at::redispatch::squeeze(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewType_0.cpp:1903:Tensor & sspaddmm_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & mat1, const Tensor & mat2, const Scalar & beta, const Scalar & alpha, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1906:    at::redispatch::sspaddmm_outf(ks & c10::after_InplaceOrView_keyset, self, mat1, mat2, beta, alpha, out);
autograd/generated/InplaceOrViewType_0.cpp:1911:Tensor & std_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1914:    at::redispatch::std_outf(ks & c10::after_InplaceOrView_keyset, self, dim, unbiased, keepdim, out);
autograd/generated/InplaceOrViewType_0.cpp:1919:Tensor & sum_out_IntList_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1922:    at::redispatch::sum_outf(ks & c10::after_InplaceOrView_keyset, self, dim, keepdim, dtype, out);
autograd/generated/InplaceOrViewType_0.cpp:1927:Tensor t(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1930:    return at::redispatch::t(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1941:Tensor & take_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & index, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1944:    at::redispatch::take_outf(ks & c10::after_InplaceOrView_keyset, self, index, out);
autograd/generated/InplaceOrViewType_0.cpp:1949:Tensor & tan_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1952:    at::redispatch::tan_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1957:Tensor & tan_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1960:    at::redispatch::tan_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1965:Tensor & tanh_(c10::DispatchKeySet ks, Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:1968:    at::redispatch::tanh_(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:1973:Tensor & tanh_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & output, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:1976:    at::redispatch::tanh_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:1981:Tensor & tanh_out_out(c10::DispatchKeySet ks, const Tensor & self, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:1984:    at::redispatch::tanh_outf(ks & c10::after_InplaceOrView_keyset, self, out);
autograd/generated/InplaceOrViewType_0.cpp:1989:std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias) {
autograd/generated/InplaceOrViewType_0.cpp:1992:    at::redispatch::thnn_conv2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/InplaceOrViewType_0.cpp:1999:std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out_output(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/InplaceOrViewType_0.cpp:2002:    at::redispatch::thnn_conv2d_forward_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
autograd/generated/InplaceOrViewType_0.cpp:2009:std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & grad_input, Tensor & grad_weight) {
autograd/generated/InplaceOrViewType_0.cpp:2012:    at::redispatch::thnn_conv_depthwise2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, self, weight, kernel_size, stride, padding, dilation, grad_input, grad_weight);
autograd/generated/InplaceOrViewType_0.cpp:2018:Tensor & thnn_conv_depthwise2d_forward_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2021:    at::redispatch::thnn_conv_depthwise2d_forward_outf(ks & c10::after_InplaceOrView_keyset, self, weight, kernel_size, bias, stride, padding, dilation, out);
autograd/generated/InplaceOrViewType_0.cpp:2026:Tensor & threshold_(c10::DispatchKeySet ks, Tensor & self, const Scalar & threshold, const Scalar & value) {
autograd/generated/InplaceOrViewType_0.cpp:2029:    at::redispatch::threshold_(ks & c10::after_InplaceOrView_keyset, self, threshold, value);
autograd/generated/InplaceOrViewType_0.cpp:2034:Tensor & threshold_out_out(c10::DispatchKeySet ks, const Tensor & self, const Scalar & threshold, const Scalar & value, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2037:    at::redispatch::threshold_outf(ks & c10::after_InplaceOrView_keyset, self, threshold, value, out);
autograd/generated/InplaceOrViewType_0.cpp:2042:Tensor & transpose_(c10::DispatchKeySet ks, Tensor & self, int64_t dim0, int64_t dim1) {
autograd/generated/InplaceOrViewType_0.cpp:2045:    at::redispatch::transpose_(ks & c10::after_InplaceOrView_keyset, self, dim0, dim1);
autograd/generated/InplaceOrViewType_0.cpp:2050:std::tuple<Tensor &,Tensor &> triangular_solve_out_X(c10::DispatchKeySet ks, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular, Tensor & X, Tensor & M) {
autograd/generated/InplaceOrViewType_0.cpp:2053:    at::redispatch::triangular_solve_outf(ks & c10::after_InplaceOrView_keyset, self, A, upper, transpose, unitriangular, X, M);
autograd/generated/InplaceOrViewType_0.cpp:2059:Tensor & tril_(c10::DispatchKeySet ks, Tensor & self, int64_t diagonal) {
autograd/generated/InplaceOrViewType_0.cpp:2062:    at::redispatch::tril_(ks & c10::after_InplaceOrView_keyset, self, diagonal);
autograd/generated/InplaceOrViewType_0.cpp:2067:Tensor & tril_out_out(c10::DispatchKeySet ks, const Tensor & self, int64_t diagonal, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2070:    at::redispatch::tril_outf(ks & c10::after_InplaceOrView_keyset, self, diagonal, out);
autograd/generated/InplaceOrViewType_0.cpp:2075:std::vector<Tensor> unbind_int(c10::DispatchKeySet ks, const Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewType_0.cpp:2078:    return at::redispatch::unbind(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewType_0.cpp:2084:Tensor unfold(c10::DispatchKeySet ks, const Tensor & self, int64_t dimension, int64_t size, int64_t step) {
autograd/generated/InplaceOrViewType_0.cpp:2087:    return at::redispatch::unfold(ks & c10::after_InplaceOrView_keyset, self, dimension, size, step);
autograd/generated/InplaceOrViewType_0.cpp:2098:Tensor & unsqueeze_(c10::DispatchKeySet ks, Tensor & self, int64_t dim) {
autograd/generated/InplaceOrViewType_0.cpp:2101:    at::redispatch::unsqueeze_(ks & c10::after_InplaceOrView_keyset, self, dim);
autograd/generated/InplaceOrViewType_0.cpp:2106:Tensor & upsample_bicubic2d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:2109:    at::redispatch::upsample_bicubic2d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:2114:Tensor & upsample_bicubic2d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2117:    at::redispatch::upsample_bicubic2d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, align_corners, scales_h, scales_w, out);
autograd/generated/InplaceOrViewType_0.cpp:2122:Tensor & upsample_nearest1d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:2125:    at::redispatch::upsample_nearest1d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, scales, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:2130:Tensor & upsample_nearest1d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2133:    at::redispatch::upsample_nearest1d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, scales, out);
autograd/generated/InplaceOrViewType_0.cpp:2138:Tensor & upsample_nearest3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:2141:    at::redispatch::upsample_nearest3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, scales_d, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:2146:Tensor & upsample_nearest3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2149:    at::redispatch::upsample_nearest3d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, scales_d, scales_h, scales_w, out);
autograd/generated/InplaceOrViewType_0.cpp:2154:Tensor & upsample_trilinear3d_backward_out_grad_input(c10::DispatchKeySet ks, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/InplaceOrViewType_0.cpp:2157:    at::redispatch::upsample_trilinear3d_backward_outf(ks & c10::after_InplaceOrView_keyset, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, grad_input);
autograd/generated/InplaceOrViewType_0.cpp:2162:Tensor & upsample_trilinear3d_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2165:    at::redispatch::upsample_trilinear3d_outf(ks & c10::after_InplaceOrView_keyset, self, output_size, align_corners, scales_d, scales_h, scales_w, out);
autograd/generated/InplaceOrViewType_0.cpp:2170:Tensor values(c10::DispatchKeySet ks, const Tensor & self) {
autograd/generated/InplaceOrViewType_0.cpp:2173:    return at::redispatch::values(ks & c10::after_InplaceOrView_keyset, self);
autograd/generated/InplaceOrViewType_0.cpp:2184:Tensor & var_out_out(c10::DispatchKeySet ks, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2187:    at::redispatch::var_outf(ks & c10::after_InplaceOrView_keyset, self, dim, unbiased, keepdim, out);
autograd/generated/InplaceOrViewType_0.cpp:2192:Tensor & vdot_out_out(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2195:    at::redispatch::vdot_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:2200:Tensor & xlogy__Tensor(c10::DispatchKeySet ks, Tensor & self, const Tensor & other) {
autograd/generated/InplaceOrViewType_0.cpp:2203:    at::redispatch::xlogy_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:2208:Tensor & xlogy__Scalar_Other(c10::DispatchKeySet ks, Tensor & self, const Scalar & other) {
autograd/generated/InplaceOrViewType_0.cpp:2211:    at::redispatch::xlogy_(ks & c10::after_InplaceOrView_keyset, self, other);
autograd/generated/InplaceOrViewType_0.cpp:2216:Tensor & xlogy_out_OutTensor(c10::DispatchKeySet ks, const Tensor & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2219:    at::redispatch::xlogy_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:2224:Tensor & xlogy_out_OutScalar_Self(c10::DispatchKeySet ks, const Scalar & self, const Tensor & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2227:    at::redispatch::xlogy_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/InplaceOrViewType_0.cpp:2232:Tensor & xlogy_out_OutScalar_Other(c10::DispatchKeySet ks, const Tensor & self, const Scalar & other, Tensor & out) {
autograd/generated/InplaceOrViewType_0.cpp:2235:    at::redispatch::xlogy_outf(ks & c10::after_InplaceOrView_keyset, self, other, out);
autograd/generated/VariableType_1.cpp:48:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:49:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:50:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:69:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:70:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:71:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:73:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:74:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:75:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:96:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:97:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:98:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:117:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:118:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:119:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:121:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:122:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:123:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:152:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:153:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:154:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:187:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:188:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:189:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:191:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:192:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:193:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:195:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:196:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:197:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:233:  c10::optional<Storage> growth_tracker__storage_saved =
autograd/generated/VariableType_1.cpp:234:    growth_tracker_.has_storage() ? c10::optional<Storage>(growth_tracker_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:235:  c10::intrusive_ptr<TensorImpl> growth_tracker__impl_saved;
autograd/generated/VariableType_1.cpp:237:  c10::optional<Storage> current_scale__storage_saved =
autograd/generated/VariableType_1.cpp:238:    current_scale_.has_storage() ? c10::optional<Storage>(current_scale_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:239:  c10::intrusive_ptr<TensorImpl> current_scale__impl_saved;
autograd/generated/VariableType_1.cpp:241:  c10::optional<Storage> found_inf__storage_saved =
autograd/generated/VariableType_1.cpp:242:    found_inf_.has_storage() ? c10::optional<Storage>(found_inf_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:243:  c10::intrusive_ptr<TensorImpl> found_inf__impl_saved;
autograd/generated/VariableType_1.cpp:286:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:287:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:288:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:290:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_1.cpp:291:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:292:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_1.cpp:327:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:330:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:331:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:334:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:335:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:336:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:375:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableType_1.cpp:376:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:377:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableType_1.cpp:379:  c10::optional<Storage> x1__storage_saved =
autograd/generated/VariableType_1.cpp:380:    x1_.has_storage() ? c10::optional<Storage>(x1_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:381:  c10::intrusive_ptr<TensorImpl> x1__impl_saved;
autograd/generated/VariableType_1.cpp:383:  c10::optional<Storage> x2__storage_saved =
autograd/generated/VariableType_1.cpp:384:    x2_.has_storage() ? c10::optional<Storage>(x2_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:385:  c10::intrusive_ptr<TensorImpl> x2__impl_saved;
autograd/generated/VariableType_1.cpp:387:  c10::optional<Storage> cdist__storage_saved =
autograd/generated/VariableType_1.cpp:388:    cdist_.has_storage() ? c10::optional<Storage>(cdist_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:389:  c10::intrusive_ptr<TensorImpl> cdist__impl_saved;
autograd/generated/VariableType_1.cpp:427:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:428:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:429:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:451:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:452:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:453:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:479:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_1.cpp:480:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:481:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_1.cpp:483:  c10::optional<Storage> coefficients__storage_saved =
autograd/generated/VariableType_1.cpp:484:    coefficients_.has_storage() ? c10::optional<Storage>(coefficients_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:485:  c10::intrusive_ptr<TensorImpl> coefficients__impl_saved;
autograd/generated/VariableType_1.cpp:517:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:518:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:519:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:537:std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
autograd/generated/VariableType_1.cpp:559:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_1.cpp:560:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:561:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_1.cpp:563:  std::vector<c10::optional<Storage>> weight__storage_saved(weight_.size());
autograd/generated/VariableType_1.cpp:566:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:567:  std::vector<c10::intrusive_ptr<TensorImpl>> weight__impl_saved(weight_.size());
autograd/generated/VariableType_1.cpp:570:  c10::optional<Storage> weight_buf__storage_saved =
autograd/generated/VariableType_1.cpp:571:    weight_buf_.has_storage() ? c10::optional<Storage>(weight_buf_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:572:  c10::intrusive_ptr<TensorImpl> weight_buf__impl_saved;
autograd/generated/VariableType_1.cpp:574:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableType_1.cpp:575:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:576:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableType_1.cpp:578:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_1.cpp:579:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:580:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_1.cpp:582:  c10::optional<Storage> reserve__storage_saved =
autograd/generated/VariableType_1.cpp:583:    reserve_.has_storage() ? c10::optional<Storage>(reserve_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:584:  c10::intrusive_ptr<TensorImpl> reserve__impl_saved;
autograd/generated/VariableType_1.cpp:630:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:631:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:632:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:634:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_1.cpp:635:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:636:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_1.cpp:638:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_1.cpp:639:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:640:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_1.cpp:672:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:673:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:674:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:676:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:677:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:678:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:709:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:710:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:711:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:742:  c10::optional<Storage> x__storage_saved =
autograd/generated/VariableType_1.cpp:743:    x_.has_storage() ? c10::optional<Storage>(x_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:744:  c10::intrusive_ptr<TensorImpl> x__impl_saved;
autograd/generated/VariableType_1.cpp:746:  c10::optional<Storage> alpha__storage_saved =
autograd/generated/VariableType_1.cpp:747:    alpha_.has_storage() ? c10::optional<Storage>(alpha_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:748:  c10::intrusive_ptr<TensorImpl> alpha__impl_saved;
autograd/generated/VariableType_1.cpp:750:  c10::optional<Storage> total__storage_saved =
autograd/generated/VariableType_1.cpp:751:    total_.has_storage() ? c10::optional<Storage>(total_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:752:  c10::intrusive_ptr<TensorImpl> total__impl_saved;
autograd/generated/VariableType_1.cpp:787:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:790:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:791:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:818:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:821:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:822:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:851:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:854:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:855:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:890:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableType_1.cpp:893:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:894:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableType_1.cpp:897:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableType_1.cpp:900:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:901:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableType_1.cpp:943:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:946:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:947:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:974:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:977:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:978:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1001:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:1004:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1005:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1008:  std::vector<c10::optional<Storage>> other__storage_saved(other_.size());
autograd/generated/VariableType_1.cpp:1011:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1012:  std::vector<c10::intrusive_ptr<TensorImpl>> other__impl_saved(other_.size());
autograd/generated/VariableType_1.cpp:1042:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:1045:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1046:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1075:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1078:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1079:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1106:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:1109:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1110:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1139:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1142:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1143:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1170:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:1173:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1174:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1203:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1206:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1207:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1234:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:1237:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1238:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1267:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1270:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1271:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1298:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:1301:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1302:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1331:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1334:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1335:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1362:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:1365:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1366:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1395:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1398:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1399:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:1426:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:1429:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1430:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1452:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_1.cpp:1455:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:1456:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_1.cpp:1475:std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/VariableType_1.cpp:1488:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1489:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1490:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1522:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1523:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1524:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1553:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1554:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1555:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1586:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1587:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1588:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1608:Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride) {
autograd/generated/VariableType_1.cpp:1625:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_1.cpp:1626:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1627:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_1.cpp:1629:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_1.cpp:1630:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1631:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_1.cpp:1669:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:1670:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1671:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:1673:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_1.cpp:1674:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1675:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_1.cpp:1677:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1678:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1679:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1716:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1717:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1718:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1751:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableType_1.cpp:1752:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1753:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableType_1.cpp:1755:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1756:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1757:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1789:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1790:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1791:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1810:Tensor _test_optional_floatlist(const Tensor & values, c10::optional<ArrayRef<double>> addends) {
autograd/generated/VariableType_1.cpp:1820:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_1.cpp:1821:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1822:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_1.cpp:1857:  c10::optional<Storage> grad_hy__storage_saved =
autograd/generated/VariableType_1.cpp:1858:    grad_hy_.has_storage() ? c10::optional<Storage>(grad_hy_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1859:  c10::intrusive_ptr<TensorImpl> grad_hy__impl_saved;
autograd/generated/VariableType_1.cpp:1861:  c10::optional<Storage> workspace__storage_saved =
autograd/generated/VariableType_1.cpp:1862:    workspace_.has_storage() ? c10::optional<Storage>(workspace_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1863:  c10::intrusive_ptr<TensorImpl> workspace__impl_saved;
autograd/generated/VariableType_1.cpp:1892:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1893:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1894:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1924:  c10::optional<Storage> grad_w__storage_saved =
autograd/generated/VariableType_1.cpp:1925:    grad_w_.has_storage() ? c10::optional<Storage>(grad_w_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1926:  c10::intrusive_ptr<TensorImpl> grad_w__impl_saved;
autograd/generated/VariableType_1.cpp:1928:  c10::optional<Storage> saved_v__storage_saved =
autograd/generated/VariableType_1.cpp:1929:    saved_v_.has_storage() ? c10::optional<Storage>(saved_v_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1930:  c10::intrusive_ptr<TensorImpl> saved_v__impl_saved;
autograd/generated/VariableType_1.cpp:1932:  c10::optional<Storage> saved_g__storage_saved =
autograd/generated/VariableType_1.cpp:1933:    saved_g_.has_storage() ? c10::optional<Storage>(saved_g_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1934:  c10::intrusive_ptr<TensorImpl> saved_g__impl_saved;
autograd/generated/VariableType_1.cpp:1936:  c10::optional<Storage> saved_norms__storage_saved =
autograd/generated/VariableType_1.cpp:1937:    saved_norms_.has_storage() ? c10::optional<Storage>(saved_norms_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1938:  c10::intrusive_ptr<TensorImpl> saved_norms__impl_saved;
autograd/generated/VariableType_1.cpp:1980:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:1981:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1982:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:1984:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:1985:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:1986:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:2018:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2019:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2020:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2049:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2050:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2051:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2082:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2083:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2084:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2086:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:2087:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2088:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:2124:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:2125:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2126:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:2128:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2129:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2130:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2132:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_1.cpp:2133:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2134:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_1.cpp:2173:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2174:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2175:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2177:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:2178:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2179:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:2181:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:2182:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2183:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:2227:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2228:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2229:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2231:  c10::optional<Storage> vec1__storage_saved =
autograd/generated/VariableType_1.cpp:2232:    vec1_.has_storage() ? c10::optional<Storage>(vec1_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2233:  c10::intrusive_ptr<TensorImpl> vec1__impl_saved;
autograd/generated/VariableType_1.cpp:2235:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableType_1.cpp:2236:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2237:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableType_1.cpp:2282:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2283:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2284:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2286:  c10::optional<Storage> vec1__storage_saved =
autograd/generated/VariableType_1.cpp:2287:    vec1_.has_storage() ? c10::optional<Storage>(vec1_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2288:  c10::intrusive_ptr<TensorImpl> vec1__impl_saved;
autograd/generated/VariableType_1.cpp:2290:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableType_1.cpp:2291:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2292:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableType_1.cpp:2328:  c10::optional<Storage> theta__storage_saved =
autograd/generated/VariableType_1.cpp:2329:    theta_.has_storage() ? c10::optional<Storage>(theta_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2330:  c10::intrusive_ptr<TensorImpl> theta__impl_saved;
autograd/generated/VariableType_1.cpp:2362:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2363:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2364:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2389:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:2390:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2391:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:2419:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2420:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2421:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2423:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:2424:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2425:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:2457:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2458:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2459:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2488:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2489:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2490:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2508:Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/VariableType_1.cpp:2526:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:2527:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2528:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:2530:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2531:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2532:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2554:Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/VariableType_1.cpp:2571:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2572:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2573:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2592:Tensor & avg_pool3d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/VariableType_1.cpp:2606:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:2607:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2608:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:2610:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2611:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2612:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2614:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_1.cpp:2615:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2616:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_1.cpp:2660:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2661:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2662:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2664:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableType_1.cpp:2665:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2666:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableType_1.cpp:2668:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableType_1.cpp:2669:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2670:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableType_1.cpp:2715:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2716:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2717:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2719:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableType_1.cpp:2720:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2721:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableType_1.cpp:2723:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableType_1.cpp:2724:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2725:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableType_1.cpp:2749:std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, bool input_g, bool weight_g, bool bias_g) {
autograd/generated/VariableType_1.cpp:2766:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableType_1.cpp:2767:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2768:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableType_1.cpp:2770:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_1.cpp:2771:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2772:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_1.cpp:2774:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_1.cpp:2775:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2776:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_1.cpp:2778:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableType_1.cpp:2779:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2780:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableType_1.cpp:2811:Tensor & bernoulli_out_out(const Tensor & self, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableType_1.cpp:2824:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2825:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2826:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2828:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:2829:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2830:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:2851:Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & pos_weight, int64_t reduction) {
autograd/generated/VariableType_1.cpp:2869:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2870:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2871:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2873:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:2874:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2875:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:2897:Tensor bincount(const Tensor & self, const c10::optional<Tensor> & weights, int64_t minlength) {
autograd/generated/VariableType_1.cpp:2907:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2908:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2909:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2945:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2946:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2947:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2949:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_1.cpp:2950:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2951:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_1.cpp:2976:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:2977:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2978:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:2980:  c10::optional<Storage> boundaries__storage_saved =
autograd/generated/VariableType_1.cpp:2981:    boundaries_.has_storage() ? c10::optional<Storage>(boundaries_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:2982:  c10::intrusive_ptr<TensorImpl> boundaries__impl_saved;
autograd/generated/VariableType_1.cpp:3003:  c10::optional<Storage> boundaries__storage_saved =
autograd/generated/VariableType_1.cpp:3004:    boundaries_.has_storage() ? c10::optional<Storage>(boundaries_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3005:  c10::intrusive_ptr<TensorImpl> boundaries__impl_saved;
autograd/generated/VariableType_1.cpp:3033:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:3036:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:3037:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_1.cpp:3040:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:3041:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3042:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:3079:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3080:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3081:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3114:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3115:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3116:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3148:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3149:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3150:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3178:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3179:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3180:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3212:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3213:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3214:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3216:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:3217:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3218:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:3255:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3256:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3257:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3259:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_1.cpp:3260:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3261:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_1.cpp:3263:  c10::optional<Storage> bias__storage_saved =
autograd/generated/VariableType_1.cpp:3264:    bias_.has_storage() ? c10::optional<Storage>(bias_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3265:  c10::intrusive_ptr<TensorImpl> bias__impl_saved;
autograd/generated/VariableType_1.cpp:3305:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3306:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3307:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3309:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:3310:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3311:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:3347:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3348:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3349:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3387:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3388:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3389:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3391:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:3392:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3393:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:3429:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3430:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3431:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3463:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:3464:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3465:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:3467:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3468:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3469:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3505:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3506:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3507:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3529:Tensor & cumprod_out_out(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableType_1.cpp:3542:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3543:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3544:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3546:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:3547:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3548:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:3569:Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_1.cpp:3581:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3582:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3583:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3602:Tensor & cumsum_(Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_1.cpp:3615:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3616:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3617:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3638:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3639:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3640:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3669:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3670:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3671:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3709:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3710:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3711:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3713:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:3714:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3715:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:3754:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3755:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3756:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3758:  c10::optional<Storage> tensor__storage_saved =
autograd/generated/VariableType_1.cpp:3759:    tensor_.has_storage() ? c10::optional<Storage>(tensor_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3760:  c10::intrusive_ptr<TensorImpl> tensor__impl_saved;
autograd/generated/VariableType_1.cpp:3762:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:3763:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3764:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:3802:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3803:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3804:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3837:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3838:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3839:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3872:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3873:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3874:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3876:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_1.cpp:3877:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3878:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_1.cpp:3903:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3904:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3905:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3907:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:3908:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3909:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:3940:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3941:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3942:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:3944:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:3945:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3946:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:3978:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:3979:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:3980:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4011:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4012:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4013:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4041:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4042:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4043:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4076:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4077:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4078:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4099:Tensor & exponential_(Tensor & self, double lambd, c10::optional<Generator> generator) {
autograd/generated/VariableType_1.cpp:4110:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4111:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4112:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4140:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4141:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4142:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4172:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4173:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4174:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4205:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4206:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4207:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4209:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:4210:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4211:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:4246:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4247:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4248:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4250:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4251:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4252:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4287:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4288:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4289:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4291:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:4292:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4293:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:4295:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4296:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4297:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4334:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4335:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4336:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4338:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4339:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4340:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4376:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4377:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4378:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4380:  c10::optional<Storage> random_samples__storage_saved =
autograd/generated/VariableType_1.cpp:4381:    random_samples_.has_storage() ? c10::optional<Storage>(random_samples_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4382:  c10::intrusive_ptr<TensorImpl> random_samples__impl_saved;
autograd/generated/VariableType_1.cpp:4384:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_1.cpp:4385:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4386:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_1.cpp:4388:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_1.cpp:4389:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4390:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_1.cpp:4432:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4433:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4434:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4436:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:4437:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4438:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:4440:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4441:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4442:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4479:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableType_1.cpp:4480:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4481:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableType_1.cpp:4483:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4484:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4485:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4520:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4521:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4522:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4524:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4525:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4526:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4560:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4561:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4562:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4564:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4565:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4566:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4587:Tensor index_Tensor(const Tensor & self, const c10::List<c10::optional<Tensor>> & indices) {
autograd/generated/VariableType_1.cpp:4601:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4602:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4603:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4605:  std::vector<c10::optional<Storage>> indices_storage_saved(indices.size());
autograd/generated/VariableType_1.cpp:4606:  for (const c10::optional<Tensor>& tensor : indices)
autograd/generated/VariableType_1.cpp:4608:      tensor.has_value() && tensor->has_storage() ? c10::optional<Storage>(tensor->storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:4609:  std::vector<c10::intrusive_ptr<TensorImpl>> indices_impl_saved(indices.size());
autograd/generated/VariableType_1.cpp:4611:    c10::optional<Tensor> t = indices[i];
autograd/generated/VariableType_1.cpp:4627:          static_cast<c10::optional<Tensor>>(indices[i])->storage()));
autograd/generated/VariableType_1.cpp:4631:      AT_ASSERT(indices_impl_saved[i] == static_cast<c10::optional<Tensor>>(indices[i])->getIntrusivePtr());
autograd/generated/VariableType_1.cpp:4640:Tensor & index_put_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) {
autograd/generated/VariableType_1.cpp:4656:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4657:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4658:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4660:  std::vector<c10::optional<Storage>> indices_storage_saved(indices.size());
autograd/generated/VariableType_1.cpp:4661:  for (const c10::optional<Tensor>& tensor : indices)
autograd/generated/VariableType_1.cpp:4663:      tensor.has_value() && tensor->has_storage() ? c10::optional<Storage>(tensor->storage()) : c10::nullopt);
autograd/generated/VariableType_1.cpp:4664:  std::vector<c10::intrusive_ptr<TensorImpl>> indices_impl_saved(indices.size());
autograd/generated/VariableType_1.cpp:4666:    c10::optional<Tensor> t = indices[i];
autograd/generated/VariableType_1.cpp:4669:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_1.cpp:4670:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4671:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_1.cpp:4685:          static_cast<c10::optional<Tensor>>(indices[i])->storage()));
autograd/generated/VariableType_1.cpp:4689:      AT_ASSERT(indices_impl_saved[i] == static_cast<c10::optional<Tensor>>(indices[i])->getIntrusivePtr());
autograd/generated/VariableType_1.cpp:4715:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4716:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4717:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4719:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_1.cpp:4720:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4721:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_1.cpp:4745:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4746:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4747:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4776:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4777:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4778:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4780:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:4781:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4782:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:4819:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:4820:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4821:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:4823:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4824:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4825:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4827:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:4828:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4829:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:4831:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_1.cpp:4832:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4833:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_1.cpp:4873:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4874:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4875:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4877:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4878:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4879:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4904:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4905:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4906:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4908:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4909:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4910:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4928:Tensor & linspace_out_out(Scalar start, Scalar end, c10::optional<int64_t> steps, Tensor & out) {
autograd/generated/VariableType_1.cpp:4931:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4932:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4933:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4961:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:4962:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4963:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:4965:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:4966:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:4967:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:4988:Tensor & log_normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/VariableType_1.cpp:4999:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5000:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5001:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5032:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5033:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5034:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5036:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:5037:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5038:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:5075:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:5076:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5077:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:5079:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5080:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5081:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5083:  c10::optional<Storage> buffer__storage_saved =
autograd/generated/VariableType_1.cpp:5084:    buffer_.has_storage() ? c10::optional<Storage>(buffer_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5085:  c10::intrusive_ptr<TensorImpl> buffer__impl_saved;
autograd/generated/VariableType_1.cpp:5124:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5125:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5126:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5128:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_1.cpp:5129:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5130:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_1.cpp:5132:  c10::optional<Storage> buffer__storage_saved =
autograd/generated/VariableType_1.cpp:5133:    buffer_.has_storage() ? c10::optional<Storage>(buffer_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5134:  c10::intrusive_ptr<TensorImpl> buffer__impl_saved;
autograd/generated/VariableType_1.cpp:5173:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5174:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5175:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5177:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:5178:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5179:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:5181:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:5182:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5183:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:5221:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5222:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5223:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5225:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:5226:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5227:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:5229:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:5230:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5231:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:5267:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5268:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5269:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5304:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5305:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5306:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5343:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5344:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5345:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5347:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableType_1.cpp:5348:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5349:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableType_1.cpp:5351:  c10::optional<Storage> X__storage_saved =
autograd/generated/VariableType_1.cpp:5352:    X_.has_storage() ? c10::optional<Storage>(X_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5353:  c10::intrusive_ptr<TensorImpl> X__impl_saved;
autograd/generated/VariableType_1.cpp:5355:  c10::optional<Storage> qr__storage_saved =
autograd/generated/VariableType_1.cpp:5356:    qr_.has_storage() ? c10::optional<Storage>(qr_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5357:  c10::intrusive_ptr<TensorImpl> qr__impl_saved;
autograd/generated/VariableType_1.cpp:5400:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5401:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5402:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5435:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5436:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5437:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5473:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5474:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5475:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5477:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:5478:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5479:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:5481:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_1.cpp:5482:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5483:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_1.cpp:5523:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:5524:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5525:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:5527:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5528:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5529:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5531:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_1.cpp:5532:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5533:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_1.cpp:5574:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5575:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5576:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5578:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_1.cpp:5579:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5580:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_1.cpp:5617:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:5618:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5619:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:5621:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5622:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5623:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5625:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_1.cpp:5626:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5627:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_1.cpp:5629:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_1.cpp:5630:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5631:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_1.cpp:5671:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5672:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5673:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5675:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:5676:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5677:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:5699:Tensor & mean_out_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableType_1.cpp:5712:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5713:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5714:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5716:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:5717:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5718:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:5753:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5754:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5755:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5757:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_1.cpp:5758:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5759:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_1.cpp:5761:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_1.cpp:5762:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5763:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_1.cpp:5788:std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) {
autograd/generated/VariableType_1.cpp:5810:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_1.cpp:5811:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5812:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_1.cpp:5814:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_1.cpp:5815:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5816:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_1.cpp:5867:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5868:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5869:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:5871:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:5872:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5873:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:5875:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_1.cpp:5876:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5877:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_1.cpp:5915:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:5916:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5917:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:5919:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_1.cpp:5920:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5921:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_1.cpp:5954:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:5955:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5956:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:5958:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:5959:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:5960:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6004:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6005:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6006:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6008:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:6009:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6010:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:6012:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_1.cpp:6013:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6014:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_1.cpp:6051:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6052:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6053:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6087:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6088:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6089:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6111:Tensor & multi_margin_loss_out_out(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/VariableType_1.cpp:6125:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6126:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6127:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6129:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:6130:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6131:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:6133:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:6134:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6135:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:6175:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6176:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6177:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6179:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:6180:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6181:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:6220:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6221:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6222:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6224:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableType_1.cpp:6225:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6226:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableType_1.cpp:6228:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:6229:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6230:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:6254:std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
autograd/generated/VariableType_1.cpp:6279:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableType_1.cpp:6280:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6281:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableType_1.cpp:6283:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_1.cpp:6284:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6285:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_1.cpp:6319:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6320:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6321:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6340:Tensor native_norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_1.cpp:6350:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6351:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6352:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6374:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6375:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6376:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6395:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6396:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6397:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6399:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:6400:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6401:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:6431:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6432:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6433:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6465:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6466:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6467:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6469:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:6470:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6471:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:6506:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6507:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6508:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6510:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:6511:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6512:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:6514:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:6515:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6516:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:6540:Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
autograd/generated/VariableType_1.cpp:6559:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:6560:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6561:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:6563:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6564:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6565:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6567:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:6568:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6569:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:6571:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableType_1.cpp:6572:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6573:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableType_1.cpp:6601:std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out_output(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/VariableType_1.cpp:6616:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6617:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6618:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6620:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:6621:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6622:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:6624:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_1.cpp:6625:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6626:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_1.cpp:6628:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableType_1.cpp:6629:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6630:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableType_1.cpp:6658:Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
autograd/generated/VariableType_1.cpp:6677:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:6678:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6679:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:6681:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6682:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6683:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6685:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:6686:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6687:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:6689:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableType_1.cpp:6690:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6691:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableType_1.cpp:6719:std::tuple<Tensor &,Tensor &> nll_loss_forward_out_output(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/VariableType_1.cpp:6734:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6735:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6736:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6738:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:6739:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6740:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:6742:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_1.cpp:6743:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6744:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_1.cpp:6746:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableType_1.cpp:6747:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6748:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableType_1.cpp:6788:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6789:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6790:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6792:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableType_1.cpp:6793:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6794:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableType_1.cpp:6796:  c10::optional<Storage> input3__storage_saved =
autograd/generated/VariableType_1.cpp:6797:    input3_.has_storage() ? c10::optional<Storage>(input3_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6798:  c10::intrusive_ptr<TensorImpl> input3__impl_saved;
autograd/generated/VariableType_1.cpp:6837:  c10::optional<Storage> abs__storage_saved =
autograd/generated/VariableType_1.cpp:6838:    abs_.has_storage() ? c10::optional<Storage>(abs_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6839:  c10::intrusive_ptr<TensorImpl> abs__impl_saved;
autograd/generated/VariableType_1.cpp:6841:  c10::optional<Storage> angle__storage_saved =
autograd/generated/VariableType_1.cpp:6842:    angle_.has_storage() ? c10::optional<Storage>(angle_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6843:  c10::intrusive_ptr<TensorImpl> angle__impl_saved;
autograd/generated/VariableType_1.cpp:6845:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:6846:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6847:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:6884:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6885:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6886:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6888:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:6889:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6890:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:6925:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:6926:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6927:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:6929:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableType_1.cpp:6930:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6931:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableType_1.cpp:6933:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:6934:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6935:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:6972:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableType_1.cpp:6973:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6974:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableType_1.cpp:6976:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:6977:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:6978:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:7012:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7013:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7014:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7016:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:7017:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7018:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:7039:Tensor & prod_out_int_out(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableType_1.cpp:7052:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7053:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7054:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7056:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:7057:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7058:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:7082:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7083:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7084:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7109:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7110:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7111:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7130:Tensor & random__from(Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator) {
autograd/generated/VariableType_1.cpp:7141:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7142:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7143:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7161:Tensor & random__to(Tensor & self, int64_t to, c10::optional<Generator> generator) {
autograd/generated/VariableType_1.cpp:7172:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7173:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7174:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7192:Tensor & random_(Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableType_1.cpp:7203:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7204:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7205:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7223:Tensor & randperm_out_generator_out(int64_t n, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableType_1.cpp:7226:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:7227:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7228:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:7246:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7247:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7248:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7274:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:7275:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7276:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:7278:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7279:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7280:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7313:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7314:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7315:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7347:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:7348:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7349:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:7351:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7352:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7353:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7355:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_1.cpp:7356:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7357:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_1.cpp:7391:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7392:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7393:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7424:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7425:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7426:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7428:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:7429:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7430:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:7463:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7464:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7465:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7496:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7497:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7498:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7500:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_1.cpp:7501:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7502:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_1.cpp:7535:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7536:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7537:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7567:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7568:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7569:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7601:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:7602:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7603:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:7605:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7606:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7607:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7609:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_1.cpp:7610:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7611:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_1.cpp:7648:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7649:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7650:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7652:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:7653:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7654:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:7687:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7688:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7689:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7719:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7720:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7721:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7752:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7753:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7754:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7756:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:7757:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7758:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:7797:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:7798:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7799:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:7801:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7802:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7803:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7805:  c10::optional<Storage> noise__storage_saved =
autograd/generated/VariableType_1.cpp:7806:    noise_.has_storage() ? c10::optional<Storage>(noise_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7807:  c10::intrusive_ptr<TensorImpl> noise__impl_saved;
autograd/generated/VariableType_1.cpp:7845:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7846:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7847:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7849:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:7850:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7851:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:7877:  c10::optional<Storage> sorted_sequence__storage_saved =
autograd/generated/VariableType_1.cpp:7878:    sorted_sequence_.has_storage() ? c10::optional<Storage>(sorted_sequence_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7879:  c10::intrusive_ptr<TensorImpl> sorted_sequence__impl_saved;
autograd/generated/VariableType_1.cpp:7881:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7882:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7883:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7885:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:7886:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7887:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:7921:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7922:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7923:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7925:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:7926:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7927:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:7959:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:7960:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7961:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:7963:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:7964:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:7965:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:7987:Tensor & slow_conv_transpose2d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/VariableType_1.cpp:8001:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8002:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8003:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8005:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_1.cpp:8006:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8007:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_1.cpp:8009:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:8010:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8011:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:8049:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8050:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8051:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8053:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:8054:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8055:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:8057:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:8058:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8059:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:8098:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8099:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8100:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8102:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:8103:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8104:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:8141:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:8142:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8143:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:8145:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8146:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8147:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8149:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_1.cpp:8150:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8151:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_1.cpp:8153:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_1.cpp:8154:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8155:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_1.cpp:8195:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8196:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8197:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8234:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:8235:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8236:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:8238:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8239:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8240:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8242:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_1.cpp:8243:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8244:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_1.cpp:8246:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_1.cpp:8247:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8248:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_1.cpp:8289:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8290:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8291:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8327:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8328:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8329:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8362:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8363:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8364:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8366:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableType_1.cpp:8367:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8368:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableType_1.cpp:8370:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_1.cpp:8371:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8372:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_1.cpp:8374:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:8375:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8376:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:8415:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8416:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8417:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8453:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8454:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8455:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8477:Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_1.cpp:8488:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8489:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8490:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8508:Tensor sum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_1.cpp:8521:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8522:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8523:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8551:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8552:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8553:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8588:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8589:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8590:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8621:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8622:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8623:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8625:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_1.cpp:8626:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8627:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_1.cpp:8661:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8662:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8663:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8665:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:8666:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8667:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:8704:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:8705:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8706:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:8708:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8709:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8710:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8712:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_1.cpp:8713:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8714:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_1.cpp:8716:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_1.cpp:8717:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8718:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_1.cpp:8720:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableType_1.cpp:8721:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8722:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableType_1.cpp:8753:Tensor to_mkldnn(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_1.cpp:8764:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8765:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8766:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8795:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8796:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8797:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8826:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8827:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8828:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8861:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8862:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8863:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8897:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8898:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8899:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8936:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8937:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8938:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8969:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:8970:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8971:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:8973:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:8974:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:8975:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:9006:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:9007:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9008:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:9038:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:9039:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9040:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:9058:Tensor & upsample_bicubic2d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableType_1.cpp:9071:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:9072:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9073:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:9075:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:9076:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9077:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:9098:Tensor upsample_linear1d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_1.cpp:9111:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:9112:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9113:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:9132:Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
autograd/generated/VariableType_1.cpp:9145:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:9146:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9147:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:9166:Tensor upsample_nearest2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_1.cpp:9178:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:9179:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9180:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:9199:Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_1.cpp:9212:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:9213:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9214:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:9233:Tensor upsample_nearest3d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_1.cpp:9246:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_1.cpp:9247:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9248:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_1.cpp:9267:Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_1.cpp:9282:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:9283:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9284:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:9303:Tensor & upsample_nearest3d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableType_1.cpp:9316:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_1.cpp:9317:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9318:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_1.cpp:9320:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_1.cpp:9321:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9322:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_1.cpp:9343:Tensor & upsample_trilinear3d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableType_1.cpp:9356:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:9357:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9358:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:9360:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_1.cpp:9361:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9362:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_1.cpp:9395:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:9396:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9397:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:9436:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:9437:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9438:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_1.cpp:9478:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_1.cpp:9479:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_1.cpp:9480:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/variable_factories.h:8:#include <c10/util/ArrayRef.h>
autograd/generated/variable_factories.h:9:#include <c10/core/MemoryFormat.h>
autograd/generated/variable_factories.h:46:    tensor_data_container.convert_to_tensor(options.requires_grad(c10::nullopt)),
autograd/generated/variable_factories.h:70:    return at::from_blob(data, sizes, strides, deleter, options.requires_grad(c10::nullopt));
autograd/generated/variable_factories.h:88:    return at::from_blob(data, sizes, strides, options.requires_grad(c10::nullopt));
autograd/generated/variable_factories.h:107:    return at::from_blob(data, sizes, deleter, options.requires_grad(c10::nullopt));
autograd/generated/variable_factories.h:123:    return at::from_blob(data, sizes, options.requires_grad(c10::nullopt));
autograd/generated/variable_factories.h:130:  return autograd::make_variable(at::_cudnn_init_dropout_state(dropout, train, dropout_seed, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:134:  return autograd::make_variable(at::arange(end, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:138:  return autograd::make_variable(at::arange(start, end, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:142:  return autograd::make_variable(at::arange(start, end, step, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:146:  return autograd::make_variable(at::bartlett_window(window_length, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:150:  return autograd::make_variable(at::bartlett_window(window_length, periodic, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:154:  return autograd::make_variable(at::blackman_window(window_length, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:158:  return autograd::make_variable(at::blackman_window(window_length, periodic, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:160:inline at::Tensor empty_meta(at::IntArrayRef size, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:162:  return autograd::make_variable(at::empty_meta(size, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:164:inline at::Tensor empty(at::IntArrayRef size, c10::optional<at::DimnameList> names, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:166:  return autograd::make_variable(at::empty(size, names, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:168:inline at::Tensor empty(at::IntArrayRef size, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:170:  return autograd::make_variable(at::empty(size, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:172:inline at::Tensor _empty_affine_quantized(at::IntArrayRef size, at::TensorOptions options = {}, double scale = 1, int64_t zero_point = 0, c10::optional<at::MemoryFormat> memory_format = MemoryFormat::Contiguous) {
autograd/generated/variable_factories.h:174:  return autograd::make_variable(at::_empty_affine_quantized(size, at::TensorOptions(options).requires_grad(c10::nullopt), scale, zero_point, memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:176:inline at::Tensor _empty_per_channel_affine_quantized(at::IntArrayRef size, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = MemoryFormat::Contiguous) {
autograd/generated/variable_factories.h:178:  return autograd::make_variable(at::_empty_per_channel_affine_quantized(size, scales, zero_points, axis, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:180:inline at::Tensor empty_like(const at::Tensor & self, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:182:  return autograd::make_variable(at::empty_like(self, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:186:  return autograd::make_variable(at::empty_strided(size, stride, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:190:  return autograd::make_variable(at::eye(n, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:194:  return autograd::make_variable(at::eye(n, m, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:196:inline at::Tensor full(at::IntArrayRef size, at::Scalar fill_value, c10::optional<at::DimnameList> names, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:198:  return autograd::make_variable(at::full(size, fill_value, names, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:202:  return autograd::make_variable(at::full(size, fill_value, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:204:inline at::Tensor full_like(const at::Tensor & self, at::Scalar fill_value, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:206:  return autograd::make_variable(at::full_like(self, fill_value, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:208:inline at::Tensor from_file(std::string filename, c10::optional<bool> shared = c10::nullopt, c10::optional<int64_t> size = 0, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:210:  return autograd::make_variable(at::from_file(filename, shared, size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:214:  return autograd::make_variable(at::hann_window(window_length, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:218:  return autograd::make_variable(at::hann_window(window_length, periodic, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:222:  return autograd::make_variable(at::hamming_window(window_length, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:226:  return autograd::make_variable(at::hamming_window(window_length, periodic, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:230:  return autograd::make_variable(at::hamming_window(window_length, periodic, alpha, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:234:  return autograd::make_variable(at::hamming_window(window_length, periodic, alpha, beta, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:238:  return autograd::make_variable(at::kaiser_window(window_length, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:242:  return autograd::make_variable(at::kaiser_window(window_length, periodic, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:246:  return autograd::make_variable(at::kaiser_window(window_length, periodic, beta, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:248:inline at::Tensor linspace(at::Scalar start, at::Scalar end, c10::optional<int64_t> steps = c10::nullopt, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:250:  return autograd::make_variable(at::linspace(start, end, steps, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:252:inline at::Tensor logspace(at::Scalar start, at::Scalar end, c10::optional<int64_t> steps = c10::nullopt, double base = 10.0, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:254:  return autograd::make_variable(at::logspace(start, end, steps, base, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:256:inline at::Tensor ones(at::IntArrayRef size, c10::optional<at::DimnameList> names, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:258:  return autograd::make_variable(at::ones(size, names, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:262:  return autograd::make_variable(at::ones(size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:264:inline at::Tensor ones_like(const at::Tensor & self, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:266:  return autograd::make_variable(at::ones_like(self, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:270:  return autograd::make_variable(at::scalar_tensor(s, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:272:inline at::Tensor rand(at::IntArrayRef size, c10::optional<at::DimnameList> names, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:274:  return autograd::make_variable(at::rand(size, names, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:276:inline at::Tensor rand(at::IntArrayRef size, c10::optional<at::Generator> generator, c10::optional<at::DimnameList> names, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:278:  return autograd::make_variable(at::rand(size, generator, names, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:282:  return autograd::make_variable(at::rand(size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:284:inline at::Tensor rand(at::IntArrayRef size, c10::optional<at::Generator> generator, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:286:  return autograd::make_variable(at::rand(size, generator, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:288:inline at::Tensor rand_like(const at::Tensor & self, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:290:  return autograd::make_variable(at::rand_like(self, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:294:  return autograd::make_variable(at::randint(high, size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:296:inline at::Tensor randint(int64_t high, at::IntArrayRef size, c10::optional<at::Generator> generator, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:298:  return autograd::make_variable(at::randint(high, size, generator, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:302:  return autograd::make_variable(at::randint(low, high, size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:304:inline at::Tensor randint(int64_t low, int64_t high, at::IntArrayRef size, c10::optional<at::Generator> generator, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:306:  return autograd::make_variable(at::randint(low, high, size, generator, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:308:inline at::Tensor randint_like(const at::Tensor & self, int64_t high, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:310:  return autograd::make_variable(at::randint_like(self, high, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:312:inline at::Tensor randint_like(const at::Tensor & self, int64_t low, int64_t high, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:314:  return autograd::make_variable(at::randint_like(self, low, high, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:318:  return autograd::make_variable(at::randn(size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:320:inline at::Tensor randn(at::IntArrayRef size, c10::optional<at::Generator> generator, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:322:  return autograd::make_variable(at::randn(size, generator, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:324:inline at::Tensor randn(at::IntArrayRef size, c10::optional<at::DimnameList> names, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:326:  return autograd::make_variable(at::randn(size, names, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:328:inline at::Tensor randn(at::IntArrayRef size, c10::optional<at::Generator> generator, c10::optional<at::DimnameList> names, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:330:  return autograd::make_variable(at::randn(size, generator, names, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:332:inline at::Tensor randn_like(const at::Tensor & self, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:334:  return autograd::make_variable(at::randn_like(self, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:338:  return autograd::make_variable(at::randperm(n, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:340:inline at::Tensor randperm(int64_t n, c10::optional<at::Generator> generator, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:342:  return autograd::make_variable(at::randperm(n, generator, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:346:  return autograd::make_variable(at::range(start, end, step, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:350:  return autograd::make_variable(at::range(start, end, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:352:inline at::Tensor zeros(at::IntArrayRef size, c10::optional<at::DimnameList> names, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:354:  return autograd::make_variable(at::zeros(size, names, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:358:  return autograd::make_variable(at::zeros(size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:360:inline at::Tensor zeros_like(const at::Tensor & self, at::TensorOptions options = {}, c10::optional<at::MemoryFormat> memory_format = c10::nullopt) {
autograd/generated/variable_factories.h:362:  return autograd::make_variable(at::zeros_like(self, at::TensorOptions(options).requires_grad(c10::nullopt), memory_format), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:366:  return autograd::make_variable(at::sparse_coo_tensor(size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:370:  return autograd::make_variable(at::sparse_coo_tensor(indices, values, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:374:  return autograd::make_variable(at::sparse_coo_tensor(indices, values, size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:378:  return autograd::make_variable(at::_sparse_coo_tensor_unsafe(indices, values, size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:382:  return autograd::make_variable(at::_sparse_coo_tensor_with_dims(sparse_dim, dense_dim, size, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:386:  return autograd::make_variable(at::_sparse_coo_tensor_with_dims_and_tensors(sparse_dim, dense_dim, size, indices, values, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:390:  return autograd::make_variable(at::tril_indices(row, col, offset, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:394:  return autograd::make_variable(at::triu_indices(row, col, offset, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:396:inline at::Tensor normal(double mean, double std, at::IntArrayRef size, c10::optional<at::Generator> generator = c10::nullopt, at::TensorOptions options = {}) {
autograd/generated/variable_factories.h:398:  return autograd::make_variable(at::normal(mean, std, size, generator, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:402:  return autograd::make_variable(at::fft_fftfreq(n, d, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/variable_factories.h:406:  return autograd::make_variable(at::fft_rfftfreq(n, d, at::TensorOptions(options).requires_grad(c10::nullopt)), /*requires_grad=*/options.requires_grad());
autograd/generated/TraceType_4.cpp:21:std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var_transform, bool train, double eps, std::array<bool,3> output_mask, const Tensor & reservedSpace) {
autograd/generated/TraceType_4.cpp:49:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:51:      .typed<std::tuple<Tensor,Tensor,Tensor> (int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, std::array<bool,3>, const Tensor &)>();
autograd/generated/TraceType_4.cpp:52:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:53:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, std::array<bool,3>, const Tensor &>(op, c10::DispatchKey::Tracer, impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace);
autograd/generated/TraceType_4.cpp:77:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:80:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:81:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceType_4.cpp:103:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:106:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:107:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceType_4.cpp:130:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:133:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:134:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, A, upper);
autograd/generated/TraceType_4.cpp:141:Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) {
autograd/generated/TraceType_4.cpp:162:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:164:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef)>();
autograd/generated/TraceType_4.cpp:165:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:166:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding);
autograd/generated/TraceType_4.cpp:189:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:192:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:193:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, dst, non_blocking);
autograd/generated/TraceType_4.cpp:222:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:225:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:226:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
autograd/generated/TraceType_4.cpp:255:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:258:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:259:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity);
autograd/generated/TraceType_4.cpp:268:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:271:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:272:      .redispatch<void, int64_t, int64_t>(op, c10::DispatchKey::Tracer, device_index, max_size);
autograd/generated/TraceType_4.cpp:275:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:278:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:279:      .redispatch<void, const Tensor &, Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, values, indices, dim);
autograd/generated/TraceType_4.cpp:296:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:299:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:300:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, x1, x2);
autograd/generated/TraceType_4.cpp:330:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:333:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:334:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, grad, self, scale, zero_point, quant_min, quant_max, grad_factor);
autograd/generated/TraceType_4.cpp:357:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:360:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:361:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_4.cpp:369:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:372:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:373:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:389:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:392:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:393:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_4.cpp:401:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:404:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:405:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:421:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:424:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:425:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_4.cpp:433:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:436:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:437:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:454:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:457:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:458:      .redispatch<std::vector<Tensor>, TensorList, TensorList>(op, c10::DispatchKey::Tracer, tensors1, tensors2);
autograd/generated/TraceType_4.cpp:479:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:482:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:483:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_4.cpp:491:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:494:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:495:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:519:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:522:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:523:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceType_4.cpp:544:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:547:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:548:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:571:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:574:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:575:      .redispatch<Tensor, const Tensor &, const Tensor &, double>(op, c10::DispatchKey::Tracer, self, mask, scale);
autograd/generated/TraceType_4.cpp:583:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:586:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:587:      .redispatch<bool>(op, c10::DispatchKey::Tracer);
autograd/generated/TraceType_4.cpp:607:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:610:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:611:      .redispatch<Tensor, const Tensor &, const Tensor &, double, const Tensor &>(op, c10::DispatchKey::Tracer, grad, self, p, pdist);
autograd/generated/TraceType_4.cpp:634:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:637:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:638:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceType_4.cpp:645:Tensor _sample_dirichlet(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:660:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:662:      .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:663:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:664:      .redispatch<Tensor, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceType_4.cpp:692:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:695:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:696:      .redispatch<Tensor &, Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, ltm, dimension);
autograd/generated/TraceType_4.cpp:721:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:724:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:725:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, sparse, dense, beta, alpha);
autograd/generated/TraceType_4.cpp:732:Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_4.cpp:752:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:754:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_4.cpp:755:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:756:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, indices, values, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_4.cpp:763:Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_4.cpp:785:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:787:      .typed<Tensor (int64_t, int64_t, IntArrayRef, const Tensor &, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_4.cpp:788:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:789:      .redispatch<Tensor, int64_t, int64_t, IntArrayRef, const Tensor &, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, sparse_dim, dense_dim, size, indices, values, dtype, layout, device, pin_memory);
autograd/generated/TraceType_4.cpp:796:Tensor _sparse_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_4.cpp:812:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:814:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceType_4.cpp:815:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:816:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_4.cpp:823:Tensor _sparse_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_4.cpp:839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:841:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceType_4.cpp:842:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:843:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_4.cpp:866:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:869:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:870:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, half_to_float);
autograd/generated/TraceType_4.cpp:892:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:895:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:896:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:918:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:921:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:922:      .redispatch<Tensor, TensorList, int64_t>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceType_4.cpp:929:Tensor _standard_gamma(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:944:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:946:      .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:947:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:948:      .redispatch<Tensor, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceType_4.cpp:973:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:976:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:977:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, eigenvectors, upper);
autograd/generated/TraceType_4.cpp:985:std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/TraceType_4.cpp:1006:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1008:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_4.cpp:1009:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1010:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input_gates, hidden_gates, cx, input_bias, hidden_bias);
autograd/generated/TraceType_4.cpp:1039:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1042:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1043:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, A, upper, transpose, unitriangular);
autograd/generated/TraceType_4.cpp:1068:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1071:  std::tie(primal, tangent) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1072:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, dual, level);
autograd/generated/TraceType_4.cpp:1095:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1098:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1099:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceType_4.cpp:1126:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1129:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1130:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:1154:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1157:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1158:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceType_4.cpp:1188:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1191:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1192:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices, grad_input);
autograd/generated/TraceType_4.cpp:1221:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1224:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1225:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, out, indices);
autograd/generated/TraceType_4.cpp:1250:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1253:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1254:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceType_4.cpp:1283:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1286:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1287:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceType_4.cpp:1317:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1320:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1321:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value, out);
autograd/generated/TraceType_4.cpp:1352:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1355:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1356:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha, out);
autograd/generated/TraceType_4.cpp:1381:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1384:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1385:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat, vec, beta, alpha);
autograd/generated/TraceType_4.cpp:1415:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1418:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1419:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat, vec, beta, alpha);
autograd/generated/TraceType_4.cpp:1442:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1445:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1446:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, input, p, train);
autograd/generated/TraceType_4.cpp:1474:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1477:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1478:      .redispatch<Tensor &, Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, p, train);
autograd/generated/TraceType_4.cpp:1499:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1502:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1503:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:1530:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1533:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1534:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:1555:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1558:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1559:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:1585:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1588:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1589:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:1616:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1619:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1620:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:1641:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1644:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1645:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:1671:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1674:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1675:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:1682:Tensor & argmax_out_out(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceType_4.cpp:1704:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1706:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceType_4.cpp:1707:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1708:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_4.cpp:1736:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1739:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1740:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_4.cpp:1767:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1770:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1771:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:1792:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1795:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1796:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:1822:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1825:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1826:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:1847:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1850:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1851:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:1872:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1875:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1876:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_4.cpp:1902:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1905:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1906:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad);
autograd/generated/TraceType_4.cpp:1913:Tensor & avg_pool2d_out_out(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/TraceType_4.cpp:1939:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1941:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceType_4.cpp:1942:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1943:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
autograd/generated/TraceType_4.cpp:1950:Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) {
autograd/generated/TraceType_4.cpp:1970:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1972:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const Tensor &)>();
autograd/generated/TraceType_4.cpp:1973:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:1974:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu);
autograd/generated/TraceType_4.cpp:1981:std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, const Tensor & counts) {
autograd/generated/TraceType_4.cpp:2004:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2006:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, double, const Tensor &)>();
autograd/generated/TraceType_4.cpp:2007:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2008:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, double, const Tensor &>(op, c10::DispatchKey::Tracer, input, mean, invstd, running_mean, running_var, momentum, eps, counts);
autograd/generated/TraceType_4.cpp:2016:Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/TraceType_4.cpp:2033:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2035:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceType_4.cpp:2036:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2037:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction);
autograd/generated/TraceType_4.cpp:2044:Tensor & binary_cross_entropy_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/TraceType_4.cpp:2068:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2070:      .typed<Tensor & (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, Tensor &)>();
autograd/generated/TraceType_4.cpp:2071:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2072:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, grad_input);
autograd/generated/TraceType_4.cpp:2094:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2097:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2098:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:2120:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2123:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2124:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:2151:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2154:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2155:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:2182:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2185:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2186:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:2208:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2211:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2212:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:2234:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2237:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2238:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:2265:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2268:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2269:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:2296:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2299:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2300:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:2307:Tensor blackman_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_4.cpp:2325:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2327:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_4.cpp:2328:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2329:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceType_4.cpp:2336:Tensor blackman_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_4.cpp:2355:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2357:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_4.cpp:2358:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2359:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceType_4.cpp:2380:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2383:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2384:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_4.cpp:2406:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2409:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2410:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, size);
autograd/generated/TraceType_4.cpp:2438:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2441:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2442:      .redispatch<Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, upper, out);
autograd/generated/TraceType_4.cpp:2465:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2468:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2469:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, input2, upper);
autograd/generated/TraceType_4.cpp:2496:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2499:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2500:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, double, int64_t>(op, c10::DispatchKey::Tracer, input, numel, n_bins, ratio, bit_width);
autograd/generated/TraceType_4.cpp:2523:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2526:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2527:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, min);
autograd/generated/TraceType_4.cpp:2554:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2557:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2558:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, min);
autograd/generated/TraceType_4.cpp:2565:Tensor & clamp_out_out(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max, Tensor & out) {
autograd/generated/TraceType_4.cpp:2587:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2589:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>, Tensor &)>();
autograd/generated/TraceType_4.cpp:2590:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2591:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>, Tensor &>(op, c10::DispatchKey::Tracer, self, min, max, out);
autograd/generated/TraceType_4.cpp:2598:Tensor clip(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/TraceType_4.cpp:2614:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2616:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
autograd/generated/TraceType_4.cpp:2617:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2618:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, min, max);
autograd/generated/TraceType_4.cpp:2625:Tensor & clip_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/TraceType_4.cpp:2646:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2648:      .typed<Tensor & (Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
autograd/generated/TraceType_4.cpp:2649:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2650:      .redispatch<Tensor &, Tensor &, c10::optional<Scalar>, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, min, max);
autograd/generated/TraceType_4.cpp:2657:Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_4.cpp:2672:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2674:      .typed<Tensor (const Tensor &, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_4.cpp:2675:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2676:      .redispatch<Tensor, const Tensor &, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, memory_format);
autograd/generated/TraceType_4.cpp:2704:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2707:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2708:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, real, imag, out);
autograd/generated/TraceType_4.cpp:2730:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2733:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2734:      .redispatch<Tensor, const Tensor &, MemoryFormat>(op, c10::DispatchKey::Tracer, self, memory_format);
autograd/generated/TraceType_4.cpp:2741:Tensor conv3d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
autograd/generated/TraceType_4.cpp:2742:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2744:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
autograd/generated/TraceType_4.cpp:2745:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2746:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, groups);
autograd/generated/TraceType_4.cpp:2749:Tensor conv_transpose2d_input(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
autograd/generated/TraceType_4.cpp:2750:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2752:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>();
autograd/generated/TraceType_4.cpp:2753:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2754:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, output_padding, groups, dilation);
autograd/generated/TraceType_4.cpp:2757:Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
autograd/generated/TraceType_4.cpp:2779:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2781:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t)>();
autograd/generated/TraceType_4.cpp:2782:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2783:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
autograd/generated/TraceType_4.cpp:2810:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2813:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2814:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:2835:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2838:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2839:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:2865:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2868:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2869:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:2876:Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
autograd/generated/TraceType_4.cpp:2892:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2894:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>();
autograd/generated/TraceType_4.cpp:2895:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2896:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, other, dim);
autograd/generated/TraceType_4.cpp:2903:std::tuple<Tensor,Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) {
autograd/generated/TraceType_4.cpp:2928:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2930:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double)>();
autograd/generated/TraceType_4.cpp:2931:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2932:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
autograd/generated/TraceType_4.cpp:2969:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2972:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:2973:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool, std::array<bool,2>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, allow_tf32, output_mask);
autograd/generated/TraceType_4.cpp:3003:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3006:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3007:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceType_4.cpp:3029:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3032:  auto output =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3033:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, grid);
autograd/generated/TraceType_4.cpp:3041:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3044:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3045:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:3065:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3068:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3069:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_4.cpp:3094:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3097:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3098:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_4.cpp:3126:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3129:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3130:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:3154:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3157:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3158:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, offset, dim1, dim2);
autograd/generated/TraceType_4.cpp:3186:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3189:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3190:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, diagonal, out);
autograd/generated/TraceType_4.cpp:3197:Tensor diff(const Tensor & self, int64_t n, int64_t dim, const c10::optional<Tensor> & prepend, const c10::optional<Tensor> & append) {
autograd/generated/TraceType_4.cpp:3215:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3217:      .typed<Tensor (const Tensor &, int64_t, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_4.cpp:3218:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3219:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, self, n, dim, prepend, append);
autograd/generated/TraceType_4.cpp:3246:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3249:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3250:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:3272:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3275:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3276:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:3298:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3301:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3302:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:3325:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3328:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3329:      .redispatch<Tensor, const Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceType_4.cpp:3352:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3355:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3356:      .redispatch<Tensor, const Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceType_4.cpp:3383:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3386:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3387:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:3414:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3417:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3418:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:3446:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3449:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3450:      .redispatch<Tensor &, Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceType_4.cpp:3478:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3481:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3482:      .redispatch<Tensor &, Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceType_4.cpp:3503:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3506:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3507:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_4.cpp:3531:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3534:  std::tie(eigenvalues, eigenvectors_return) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3535:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, eigenvectors);
autograd/generated/TraceType_4.cpp:3543:Tensor empty_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_4.cpp:3563:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3565:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_4.cpp:3566:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3567:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_4.cpp:3574:Tensor empty_memory_format(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_4.cpp:3593:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3595:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_4.cpp:3596:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3597:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_4.cpp:3619:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3622:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3623:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:3645:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3648:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3649:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:3676:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3679:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3680:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:3707:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3710:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3711:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:3738:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3741:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3742:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:3770:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3773:  std::tie(output, mask) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3774:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, axis, quant_min, quant_max);
autograd/generated/TraceType_4.cpp:3800:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3803:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3804:      .redispatch<Tensor, const Tensor &, double, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, quant_min, quant_max);
autograd/generated/TraceType_4.cpp:3825:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3828:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3829:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, input);
autograd/generated/TraceType_4.cpp:3852:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3855:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3856:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, input, K, N);
autograd/generated/TraceType_4.cpp:3879:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3882:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3883:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, input, p, train);
autograd/generated/TraceType_4.cpp:3911:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3914:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3915:      .redispatch<Tensor &, Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, p, train);
autograd/generated/TraceType_4.cpp:3922:Tensor & fft_fft2_out_out(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_4.cpp:3945:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3947:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_4.cpp:3948:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3949:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceType_4.cpp:3956:Tensor & fft_fft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_4.cpp:3979:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3981:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_4.cpp:3982:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:3983:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceType_4.cpp:4014:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4017:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4018:      .redispatch<Tensor &, int64_t, double, Tensor &>(op, c10::DispatchKey::Tracer, n, d, out);
autograd/generated/TraceType_4.cpp:4025:Tensor & fft_fftn_out_out(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_4.cpp:4048:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4050:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_4.cpp:4051:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4052:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceType_4.cpp:4059:Tensor fft_hfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_4.cpp:4076:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4078:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceType_4.cpp:4079:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4080:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceType_4.cpp:4087:Tensor & fft_ifft2_out_out(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_4.cpp:4110:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4112:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_4.cpp:4113:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4114:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceType_4.cpp:4121:Tensor & fft_ifft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_4.cpp:4144:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4146:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_4.cpp:4147:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4148:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceType_4.cpp:4155:Tensor & fft_ifftn_out_out(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_4.cpp:4178:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4180:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_4.cpp:4181:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4182:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceType_4.cpp:4189:Tensor fft_ihfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_4.cpp:4206:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4208:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceType_4.cpp:4209:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4210:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceType_4.cpp:4217:Tensor fft_irfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_4.cpp:4234:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4236:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceType_4.cpp:4237:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4238:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceType_4.cpp:4245:Tensor fft_irfft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_4.cpp:4262:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4264:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>)>();
autograd/generated/TraceType_4.cpp:4265:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4266:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceType_4.cpp:4273:Tensor fft_irfftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_4.cpp:4290:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4292:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>)>();
autograd/generated/TraceType_4.cpp:4293:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4294:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceType_4.cpp:4301:Tensor fft_rfft(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_4.cpp:4318:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4320:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>)>();
autograd/generated/TraceType_4.cpp:4321:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4322:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, n, dim, norm);
autograd/generated/TraceType_4.cpp:4329:Tensor fft_rfft2(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_4.cpp:4346:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4348:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>)>();
autograd/generated/TraceType_4.cpp:4349:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4350:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceType_4.cpp:4357:Tensor fft_rfftfreq(int64_t n, double d, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_4.cpp:4376:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4378:      .typed<Tensor (int64_t, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_4.cpp:4379:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4380:      .redispatch<Tensor, int64_t, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, d, dtype, layout, device, pin_memory);
autograd/generated/TraceType_4.cpp:4387:Tensor fft_rfftn(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) {
autograd/generated/TraceType_4.cpp:4404:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4406:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>)>();
autograd/generated/TraceType_4.cpp:4407:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4408:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>>(op, c10::DispatchKey::Tracer, self, s, dim, norm);
autograd/generated/TraceType_4.cpp:4436:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4439:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4440:      .redispatch<Tensor &, Tensor &, Scalar, bool>(op, c10::DispatchKey::Tracer, self, fill_value, wrap);
autograd/generated/TraceType_4.cpp:4461:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4464:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4465:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:4486:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4489:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4490:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:4518:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4521:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4522:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_4.cpp:4547:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4550:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4551:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, output_size, indices);
autograd/generated/TraceType_4.cpp:4582:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4585:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4586:      .redispatch<Tensor &, IntArrayRef, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, size, fill_value, out);
autograd/generated/TraceType_4.cpp:4616:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4619:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4620:      .redispatch<Tensor &, const Tensor &, int64_t, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, sparse_grad, out);
autograd/generated/TraceType_4.cpp:4650:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4653:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4654:      .redispatch<Tensor &, const Tensor &, Dimname, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, sparse_grad, out);
autograd/generated/TraceType_4.cpp:4676:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4679:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4680:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:4702:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4705:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4706:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:4733:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4736:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4737:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:4764:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4767:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4768:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:4789:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4792:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4793:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:4800:Tensor & geometric_(Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:4821:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4823:      .typed<Tensor & (Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:4824:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4825:      .redispatch<Tensor &, Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceType_4.cpp:4848:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4851:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4852:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, dim);
autograd/generated/TraceType_4.cpp:4880:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4883:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4884:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceType_4.cpp:4910:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4913:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4914:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceType_4.cpp:4945:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4948:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4949:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
autograd/generated/TraceType_4.cpp:4981:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4984:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:4985:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(op, c10::DispatchKey::Tracer, data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
autograd/generated/TraceType_4.cpp:5008:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5011:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5012:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:5034:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5037:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5038:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:5065:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5068:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5069:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:5096:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5099:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5100:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:5122:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5125:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5126:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceType_4.cpp:5148:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5151:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5152:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceType_4.cpp:5176:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5179:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5180:      .redispatch<Tensor, const Tensor &, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, self, target, margin, reduction);
autograd/generated/TraceType_4.cpp:5204:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5207:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5208:      .redispatch<Tensor, const Tensor &, int64_t, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, bins, min, max);
autograd/generated/TraceType_4.cpp:5230:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5233:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5234:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, mat1, mat2);
autograd/generated/TraceType_4.cpp:5256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5259:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5260:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:5287:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5290:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5291:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:5319:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5322:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5323:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_4.cpp:5345:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5348:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5349:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:5376:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5379:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5380:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:5401:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5404:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5405:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:5429:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5432:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5433:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceType_4.cpp:5457:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5460:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5461:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceType_4.cpp:5490:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5493:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5494:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceType_4.cpp:5523:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5526:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5527:      .redispatch<Tensor &, Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceType_4.cpp:5551:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5554:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5555:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_4.cpp:5579:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5582:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5583:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_4.cpp:5607:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5610:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5611:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_4.cpp:5635:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5638:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5639:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_4.cpp:5668:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5671:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5672:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_4.cpp:5701:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5704:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5705:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_4.cpp:5734:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5737:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5738:      .redispatch<Tensor &, Tensor &, Dimname, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_4.cpp:5767:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5770:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5771:      .redispatch<Tensor &, Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_4.cpp:5799:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5802:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5803:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_4.cpp:5824:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5827:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5828:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:5836:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5839:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5840:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:5844:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5847:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5848:      .redispatch<bool, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, tensor);
autograd/generated/TraceType_4.cpp:5852:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5855:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5856:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:5877:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5880:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5881:      .redispatch<Tensor, const Tensor &, const Tensor &, double, double, bool>(op, c10::DispatchKey::Tracer, self, other, rtol, atol, equal_nan);
autograd/generated/TraceType_4.cpp:5902:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5905:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5906:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:5933:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5936:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5937:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:5944:Tensor istft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool center, bool normalized, c10::optional<bool> onesided, c10::optional<int64_t> length, bool return_complex) {
autograd/generated/TraceType_4.cpp:5967:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5969:      .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const c10::optional<Tensor> &, bool, bool, c10::optional<bool>, c10::optional<int64_t>, bool)>();
autograd/generated/TraceType_4.cpp:5970:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5971:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const c10::optional<Tensor> &, bool, bool, c10::optional<bool>, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, n_fft, hop_length, win_length, window, center, normalized, onesided, length, return_complex);
autograd/generated/TraceType_4.cpp:5996:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:5999:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6000:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, log_target);
autograd/generated/TraceType_4.cpp:6022:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6025:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6026:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6048:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6051:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6052:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6079:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6082:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6083:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6110:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6113:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6114:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6136:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6139:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6140:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, negative_slope);
autograd/generated/TraceType_4.cpp:6167:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6170:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6171:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, negative_slope);
autograd/generated/TraceType_4.cpp:6200:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6203:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6204:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, end, weight, out);
autograd/generated/TraceType_4.cpp:6233:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6236:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6237:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, end, weight, out);
autograd/generated/TraceType_4.cpp:6259:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6262:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6263:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6285:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6288:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6289:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6316:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6319:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6320:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6347:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6350:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6351:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6379:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6382:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6383:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_4.cpp:6411:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6414:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6415:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_4.cpp:6439:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6442:  std::tie(eigenvalues, eigenvectors) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6443:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, UPLO);
autograd/generated/TraceType_4.cpp:6465:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6468:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6469:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:6476:Tensor & linalg_matrix_rank_out_out(const Tensor & self, c10::optional<double> tol, bool hermitian, Tensor & out) {
autograd/generated/TraceType_4.cpp:6498:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6500:      .typed<Tensor & (const Tensor &, c10::optional<double>, bool, Tensor &)>();
autograd/generated/TraceType_4.cpp:6501:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6502:      .redispatch<Tensor &, const Tensor &, c10::optional<double>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, tol, hermitian, out);
autograd/generated/TraceType_4.cpp:6509:Tensor & linalg_norm_out_out(const Tensor & self, c10::optional<Scalar> ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_4.cpp:6533:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6535:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_4.cpp:6536:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6537:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, ord, dim, keepdim, dtype, out);
autograd/generated/TraceType_4.cpp:6544:Tensor & linalg_norm_out_ord_str_out(const Tensor & self, std::string ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_4.cpp:6568:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6570:      .typed<Tensor & (const Tensor &, std::string, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_4.cpp:6571:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6572:      .redispatch<Tensor &, const Tensor &, std::string, c10::optional<IntArrayRef>, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, ord, dim, keepdim, dtype, out);
autograd/generated/TraceType_4.cpp:6600:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6603:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6604:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, sign, logabsdet);
autograd/generated/TraceType_4.cpp:6627:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6630:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6631:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input, other);
autograd/generated/TraceType_4.cpp:6657:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6660:  std::tie(U, S, V) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6661:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, full_matrices, compute_uv);
autograd/generated/TraceType_4.cpp:6684:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6687:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6688:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:6714:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6717:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6718:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:6745:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6748:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6749:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:6770:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6773:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6774:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:6781:Tensor logit_backward(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps) {
autograd/generated/TraceType_4.cpp:6797:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6799:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<double>)>();
autograd/generated/TraceType_4.cpp:6800:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6801:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, self, eps);
autograd/generated/TraceType_4.cpp:6808:std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) {
autograd/generated/TraceType_4.cpp:6811:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6813:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_4.cpp:6814:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6815:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, TensorList, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh);
autograd/generated/TraceType_4.cpp:6833:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6836:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6837:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6859:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6862:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6863:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6890:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6893:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6894:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6921:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6924:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6925:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:6947:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6950:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6951:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask);
autograd/generated/TraceType_4.cpp:6972:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6975:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:6976:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:6999:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7002:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7003:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, tol, symmetric);
autograd/generated/TraceType_4.cpp:7025:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7028:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7029:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, symmetric);
autograd/generated/TraceType_4.cpp:7055:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7058:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7059:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_4.cpp:7087:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7090:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7091:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
autograd/generated/TraceType_4.cpp:7120:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7123:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7124:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, indices, output_size, out);
autograd/generated/TraceType_4.cpp:7149:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7152:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7153:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_4.cpp:7179:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7182:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7183:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_4.cpp:7205:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7208:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7209:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:7231:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7234:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7235:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:7257:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7260:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7261:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:7268:Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceType_4.cpp:7290:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7292:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceType_4.cpp:7293:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7294:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_4.cpp:7323:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7326:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7327:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_4.cpp:7357:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7360:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7361:      .redispatch<std::tuple<Tensor,Tensor>, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);
autograd/generated/TraceType_4.cpp:7369:Tensor mkldnn_linear(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias) {
autograd/generated/TraceType_4.cpp:7385:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7387:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_4.cpp:7388:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7389:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, self, weight, bias);
autograd/generated/TraceType_4.cpp:7412:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7415:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7416:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceType_4.cpp:7446:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7449:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7450:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, grad_input);
autograd/generated/TraceType_4.cpp:7477:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7480:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7481:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:7503:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7506:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7507:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:7529:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7532:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7533:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:7560:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7563:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7564:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:7591:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7594:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7595:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_4.cpp:7618:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7621:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7622:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceType_4.cpp:7653:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7656:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7657:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, is_target, grad_input);
autograd/generated/TraceType_4.cpp:7664:Tensor & multinomial_out_out(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_4.cpp:7687:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7689:      .typed<Tensor & (const Tensor &, int64_t, bool, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_4.cpp:7690:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7691:      .redispatch<Tensor &, const Tensor &, int64_t, bool, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, self, num_samples, replacement, generator, out);
autograd/generated/TraceType_4.cpp:7698:Tensor & nan_to_num_out_out(const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf, Tensor & out) {
autograd/generated/TraceType_4.cpp:7721:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7723:      .typed<Tensor & (const Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_4.cpp:7724:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7725:      .redispatch<Tensor &, const Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, nan, posinf, neginf, out);
autograd/generated/TraceType_4.cpp:7746:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7749:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7750:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:7775:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7778:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7779:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_4.cpp:7805:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7808:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7809:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_4.cpp:7817:Tensor nanquantile_scalar(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceType_4.cpp:7834:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7836:      .typed<Tensor (const Tensor &, double, c10::optional<int64_t>, bool)>();
autograd/generated/TraceType_4.cpp:7837:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7838:      .redispatch<Tensor, const Tensor &, double, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim);
autograd/generated/TraceType_4.cpp:7845:Tensor nanquantile(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceType_4.cpp:7862:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7864:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceType_4.cpp:7865:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7866:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim);
autograd/generated/TraceType_4.cpp:7873:std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_out_out(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, Tensor & out, Tensor & save_mean, Tensor & save_invstd) {
autograd/generated/TraceType_4.cpp:7902:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7904:      .typed<std::tuple<Tensor &,Tensor &,Tensor &> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, Tensor &, Tensor &, Tensor &)>();
autograd/generated/TraceType_4.cpp:7905:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7906:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, momentum, eps, out, save_mean, save_invstd);
autograd/generated/TraceType_4.cpp:7915:std::tuple<Tensor,Tensor,Tensor> native_group_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, std::array<bool,3> output_mask) {
autograd/generated/TraceType_4.cpp:7941:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7943:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, std::array<bool,3>)>();
autograd/generated/TraceType_4.cpp:7944:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7945:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_out, input, mean, rstd, weight, N, C, HxW, group, output_mask);
autograd/generated/TraceType_4.cpp:7968:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7971:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:7972:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:7998:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8001:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8002:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:8009:Tensor new_empty(const Tensor & self, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_4.cpp:8028:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8030:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_4.cpp:8031:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8032:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_4.cpp:8039:Tensor & nll_loss2d_out_out(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & out) {
autograd/generated/TraceType_4.cpp:8063:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8065:      .typed<Tensor & (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &)>();
autograd/generated/TraceType_4.cpp:8066:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8067:      .redispatch<Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index, out);
autograd/generated/TraceType_4.cpp:8074:Tensor & nll_loss_out_out(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & out) {
autograd/generated/TraceType_4.cpp:8098:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8100:      .typed<Tensor & (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &)>();
autograd/generated/TraceType_4.cpp:8101:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8102:      .redispatch<Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index, out);
autograd/generated/TraceType_4.cpp:8123:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8126:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8127:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:8134:Tensor norm_ScalarOpt_dtype(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {
autograd/generated/TraceType_4.cpp:8150:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8152:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, ScalarType)>();
autograd/generated/TraceType_4.cpp:8153:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8154:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, ScalarType>(op, c10::DispatchKey::Tracer, self, p, dtype);
autograd/generated/TraceType_4.cpp:8176:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8179:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8180:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceType_4.cpp:8187:Tensor norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
autograd/generated/TraceType_4.cpp:8205:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8207:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType)>();
autograd/generated/TraceType_4.cpp:8208:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8209:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype);
autograd/generated/TraceType_4.cpp:8216:Tensor norm_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
autograd/generated/TraceType_4.cpp:8233:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8235:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool)>();
autograd/generated/TraceType_4.cpp:8236:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8237:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim);
autograd/generated/TraceType_4.cpp:8244:Tensor norm_names_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
autograd/generated/TraceType_4.cpp:8262:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8264:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType)>();
autograd/generated/TraceType_4.cpp:8265:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8266:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype);
autograd/generated/TraceType_4.cpp:8273:Tensor norm_names_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
autograd/generated/TraceType_4.cpp:8290:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8292:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool)>();
autograd/generated/TraceType_4.cpp:8293:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8294:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, DimnameList, bool>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim);
autograd/generated/TraceType_4.cpp:8301:Tensor normal_Tensor_float(const Tensor & mean, double std, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:8317:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8319:      .typed<Tensor (const Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:8320:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8321:      .redispatch<Tensor, const Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, mean, std, generator);
autograd/generated/TraceType_4.cpp:8328:Tensor normal_float_Tensor(double mean, const Tensor & std, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:8344:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8346:      .typed<Tensor (double, const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:8347:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8348:      .redispatch<Tensor, double, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, mean, std, generator);
autograd/generated/TraceType_4.cpp:8355:Tensor normal_Tensor_Tensor(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:8371:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8373:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:8374:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8375:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, mean, std, generator);
autograd/generated/TraceType_4.cpp:8382:Tensor normal_float_float(double mean, double std, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_4.cpp:8403:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8405:      .typed<Tensor (double, double, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_4.cpp:8406:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8407:      .redispatch<Tensor, double, double, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, mean, std, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceType_4.cpp:8414:Tensor & normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:8436:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8438:      .typed<Tensor & (Tensor &, double, double, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:8439:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8440:      .redispatch<Tensor &, Tensor &, double, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, mean, std, generator);
autograd/generated/TraceType_4.cpp:8468:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8471:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8472:      .redispatch<Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, keepdim, out);
autograd/generated/TraceType_4.cpp:8501:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8504:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8505:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_4.cpp:8533:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8536:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8537:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, input2, out);
autograd/generated/TraceType_4.cpp:8559:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8562:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8563:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, vec2);
autograd/generated/TraceType_4.cpp:8570:Tensor poisson(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:8585:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8587:      .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:8588:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8589:      .redispatch<Tensor, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceType_4.cpp:8615:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8618:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8619:      .redispatch<Tensor, const Tensor &, const Tensor &, bool, bool, double, int64_t>(op, c10::DispatchKey::Tracer, input, target, log_input, full, eps, reduction);
autograd/generated/TraceType_4.cpp:8627:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8630:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8631:      .redispatch<ScalarType, ScalarType, ScalarType>(op, c10::DispatchKey::Tracer, type1, type2);
autograd/generated/TraceType_4.cpp:8648:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8651:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8652:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:8659:Tensor quantized_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & var, double eps, double output_scale, int64_t output_zero_point) {
autograd/generated/TraceType_4.cpp:8680:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8682:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double, double, int64_t)>();
autograd/generated/TraceType_4.cpp:8683:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8684:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double, double, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, mean, var, eps, output_scale, output_zero_point);
autograd/generated/TraceType_4.cpp:8710:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8713:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8714:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_4.cpp:8741:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8744:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8745:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:8777:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8780:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8781:      .redispatch<Tensor &, Scalar, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, start, end, step, out);
autograd/generated/TraceType_4.cpp:8808:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8811:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8812:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:8840:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8843:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8844:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceType_4.cpp:8868:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8871:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8872:      .redispatch<Tensor, const Tensor &, Scalar, int64_t, Scalar>(op, c10::DispatchKey::Tracer, self, p, dim, maxnorm);
autograd/generated/TraceType_4.cpp:8901:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8904:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8905:      .redispatch<Tensor &, Tensor &, Scalar, int64_t, Scalar>(op, c10::DispatchKey::Tracer, self, p, dim, maxnorm);
autograd/generated/TraceType_4.cpp:8928:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8931:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8932:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceType_4.cpp:8954:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8957:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8958:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, shape);
autograd/generated/TraceType_4.cpp:8989:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8992:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:8993:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
autograd/generated/TraceType_4.cpp:9025:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9028:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9029:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(op, c10::DispatchKey::Tracer, data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
autograd/generated/TraceType_4.cpp:9037:Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:9055:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9057:      .typed<Tensor (const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:9058:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9059:      .redispatch<Tensor, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, lower, upper, training, generator);
autograd/generated/TraceType_4.cpp:9066:Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/TraceType_4.cpp:9089:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9091:      .typed<Tensor & (Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
autograd/generated/TraceType_4.cpp:9092:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9093:      .redispatch<Tensor &, Tensor &, Scalar, Scalar, bool, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, lower, upper, training, generator);
autograd/generated/TraceType_4.cpp:9100:Tensor & rrelu_with_noise_out_out(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_4.cpp:9125:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9127:      .typed<Tensor & (const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_4.cpp:9128:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9129:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, self, noise, lower, upper, training, generator, out);
autograd/generated/TraceType_4.cpp:9152:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9155:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9156:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_4.cpp:9179:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9182:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9183:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_4.cpp:9205:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9208:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9209:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output);
autograd/generated/TraceType_4.cpp:9236:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9239:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9240:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:9267:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9270:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9271:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_4.cpp:9292:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9295:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9296:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:9322:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9325:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9326:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:9347:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9350:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9351:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:9377:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9380:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9381:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:9407:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9410:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9411:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad, input_sizes, dim, start, end, step);
autograd/generated/TraceType_4.cpp:9434:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9437:  std::tie(sign, logabsdet) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9438:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_4.cpp:9446:std::tuple<Tensor,Tensor,Tensor> slow_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/TraceType_4.cpp:9468:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9470:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_4.cpp:9471:  std::tie(output, finput, fgrad_input) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9472:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding);
autograd/generated/TraceType_4.cpp:9505:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9508:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9509:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
autograd/generated/TraceType_4.cpp:9518:Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/TraceType_4.cpp:9538:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9540:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_4.cpp:9541:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9542:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation);
autograd/generated/TraceType_4.cpp:9576:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9579:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9580:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
autograd/generated/TraceType_4.cpp:9604:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9607:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9608:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, lambd);
autograd/generated/TraceType_4.cpp:9637:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9640:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9641:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, lambd, grad_input);
autograd/generated/TraceType_4.cpp:9663:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9666:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9667:      .redispatch<Tensor, TensorList, int64_t>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceType_4.cpp:9674:Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool normalized, c10::optional<bool> onesided, c10::optional<bool> return_complex) {
autograd/generated/TraceType_4.cpp:9695:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9697:      .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const c10::optional<Tensor> &, bool, c10::optional<bool>, c10::optional<bool>)>();
autograd/generated/TraceType_4.cpp:9698:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9699:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const c10::optional<Tensor> &, bool, c10::optional<bool>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, n_fft, hop_length, win_length, window, normalized, onesided, return_complex);
autograd/generated/TraceType_4.cpp:9728:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9731:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9732:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, alpha, out);
autograd/generated/TraceType_4.cpp:9757:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9760:  std::tie(eigenvalues, eigenvectors_return) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9761:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, eigenvectors, upper);
autograd/generated/TraceType_4.cpp:9786:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9789:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9790:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, other, dims_self, dims_other);
autograd/generated/TraceType_4.cpp:9822:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9825:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9826:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
autograd/generated/TraceType_4.cpp:9835:std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out_output(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/TraceType_4.cpp:9862:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9864:      .typed<std::tuple<Tensor &,Tensor &,Tensor &> (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &, Tensor &, Tensor &)>();
autograd/generated/TraceType_4.cpp:9865:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9866:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
autograd/generated/TraceType_4.cpp:9891:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9894:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9895:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, grad_output, self, threshold);
autograd/generated/TraceType_4.cpp:9902:Tensor to_dense(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_4.cpp:9917:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9919:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceType_4.cpp:9920:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9921:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceType_4.cpp:9948:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9951:  std::tie(solution, cloned_coefficient) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9952:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, A, upper, transpose, unitriangular);
autograd/generated/TraceType_4.cpp:9981:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9984:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:9985:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, double, double, double, bool, int64_t>(op, c10::DispatchKey::Tracer, anchor, positive, negative, margin, p, eps, swap, reduction);
autograd/generated/TraceType_4.cpp:10010:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10013:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10014:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad_in, input_sizes, dim, size, step);
autograd/generated/TraceType_4.cpp:10041:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10044:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10045:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, return_inverse, return_counts);
autograd/generated/TraceType_4.cpp:10070:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10073:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10074:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, chunks, dim);
autograd/generated/TraceType_4.cpp:10081:Tensor upsample_bilinear2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_4.cpp:10098:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10100:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_4.cpp:10101:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10102:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, align_corners, scale_factors);
autograd/generated/TraceType_4.cpp:10109:Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_4.cpp:10127:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10129:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_4.cpp:10130:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10131:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_h, scales_w);
autograd/generated/TraceType_4.cpp:10138:Tensor & upsample_bilinear2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceType_4.cpp:10163:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10165:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_4.cpp:10166:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10167:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
autograd/generated/TraceType_4.cpp:10174:Tensor & upsample_linear1d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales, Tensor & out) {
autograd/generated/TraceType_4.cpp:10197:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10199:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_4.cpp:10200:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10201:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales, out);
autograd/generated/TraceType_4.cpp:10208:Tensor upsample_nearest1d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_4.cpp:10224:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10226:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_4.cpp:10227:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10228:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, scale_factors);
autograd/generated/TraceType_4.cpp:10235:Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
autograd/generated/TraceType_4.cpp:10251:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10253:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<double>)>();
autograd/generated/TraceType_4.cpp:10254:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10255:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, scales);
autograd/generated/TraceType_4.cpp:10262:Tensor & upsample_nearest1d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/TraceType_4.cpp:10285:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10287:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_4.cpp:10288:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10289:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales, grad_input);
autograd/generated/TraceType_4.cpp:10296:Tensor & upsample_nearest2d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceType_4.cpp:10319:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10321:      .typed<Tensor & (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_4.cpp:10322:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10323:      .redispatch<Tensor &, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, scales_h, scales_w, out);
autograd/generated/TraceType_4.cpp:10345:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10348:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10349:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceType_4.cpp:10373:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10376:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10377:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceType_4.cpp:10401:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10404:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10405:      .redispatch<Tensor, const Tensor &, DimnameList, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceType_4.cpp:10433:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10436:  c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10437:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_4.cpp:10460:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10463:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10464:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceType_4.cpp:10487:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10490:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10491:      .redispatch<Tensor, const Tensor &, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceType_4.cpp:10514:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10517:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10518:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceType_4.cpp:10541:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10544:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10545:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, condition, self, other);
autograd/generated/TraceType_4.cpp:10566:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10569:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10570:      .redispatch<std::vector<Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, condition);
autograd/generated/TraceType_4.cpp:10577:Tensor zeros_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_4.cpp:10596:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10598:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_4.cpp:10599:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_4.cpp:10600:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/VariableType.h:7:#include <c10/util/intrusive_ptr.h>
autograd/generated/VariableType.h:42:using ConstQuantizerPtr = const c10::intrusive_ptr<Quantizer>&;
autograd/generated/VariableType.h:43:using c10::optional;
autograd/generated/python_torch_functions.cpp:105:      c10::optional<ScalarType> scalarType = r.scalartypeOptional(2);
autograd/generated/python_torch_functions.cpp:125:      c10::optional<ScalarType> scalarType = r.scalartypeOptional(4);
autograd/generated/python_torch_functions.cpp:204:    c10::optional<DimnameList> names,
autograd/generated/python_torch_functions.cpp:260:      return wrap(dispatch_full(size, fill_val, c10::nullopt, options).set_requires_grad(r.toBool(7)));
autograd/generated/python_torch_functions.cpp:263:    // Converts from c10::optional<std:vector...> to c10::optional<ArrayRef...>
autograd/generated/python_torch_functions.cpp:265:    c10::optional<DimnameList> names(*raw_names);
autograd/generated/python_torch_functions.cpp:273:inline Tensor dispatch_randint(int64_t high, IntArrayRef size, c10::optional<Generator> generator, Tensor result) {
autograd/generated/python_torch_functions.cpp:277:inline Tensor dispatch_randint(int64_t high, IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
autograd/generated/python_torch_functions.cpp:291:inline Tensor dispatch_randint(int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, Tensor result) {
autograd/generated/python_torch_functions.cpp:295:inline Tensor dispatch_randint(int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
autograd/generated/python_torch_functions.cpp:2438:  auto dispatch__batch_norm_impl_index = [](const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled) -> std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> {
autograd/generated/python_torch_functions.cpp:2808:      auto dispatch__convolution = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor {
autograd/generated/python_torch_functions.cpp:2817:      auto dispatch__convolution = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) -> Tensor {
autograd/generated/python_torch_functions.cpp:2843:  auto dispatch__convolution_nogroup = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) -> Tensor {
autograd/generated/python_torch_functions.cpp:2970:  auto dispatch__cudnn_rnn = [](const Tensor & input, TensorList weight, int64_t weight_stride0, const c10::optional<Tensor> & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) -> std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:3238:  auto dispatch__embedding_bag = [](const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) -> std::tuple<Tensor,Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:3262:  auto dispatch__embedding_bag_forward_only = [](const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) -> std::tuple<Tensor,Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:3293:  auto dispatch__empty_affine_quantized = [](IntArrayRef size, TensorOptions options, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:3324:  auto dispatch__empty_per_channel_affine_quantized = [](IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:5531:  auto dispatch__fused_dropout = [](const Tensor & self, double p, c10::optional<Generator> generator) -> std::tuple<Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:5617:    "_index_put_impl_(Tensor input, c10::List<c10::optional<Tensor>> indices, Tensor values, bool accumulate=False, bool unsafe=False)",
autograd/generated/python_torch_functions.cpp:5627:  auto dispatch__index_put_impl_ = [](Tensor self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate, bool unsafe) -> Tensor {
autograd/generated/python_torch_functions.cpp:6070:  auto dispatch__nnpack_spatial_convolution = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride) -> Tensor {
autograd/generated/python_torch_functions.cpp:6238:  auto dispatch__sample_dirichlet = [](const Tensor & self, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:6310:  auto dispatch__sobol_engine_draw = [](const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) -> std::tuple<Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:6483:      auto dispatch__sparse_log_softmax = [](const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:6492:      auto dispatch__sparse_log_softmax = [](const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:6604:      auto dispatch__sparse_softmax = [](const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:6613:      auto dispatch__sparse_softmax = [](const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:6789:  auto dispatch__standard_gamma = [](const Tensor & self, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:8657:    auto dispatch_argmax = [](const Tensor & self, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:8665:    auto dispatch_argmax_out = [](Tensor out, const Tensor & self, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:8691:    auto dispatch_argmin = [](const Tensor & self, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:8699:    auto dispatch_argmin_out = [](Tensor out, const Tensor & self, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:8763:  auto dispatch_as_strided = [](const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) -> Tensor {
autograd/generated/python_torch_functions.cpp:8787:  auto dispatch_as_strided_ = [](Tensor self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) -> Tensor {
autograd/generated/python_torch_functions.cpp:9350:  auto dispatch_batch_norm = [](const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled) -> Tensor {
autograd/generated/python_torch_functions.cpp:9374:  auto dispatch_batch_norm_backward_elemt = [](const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) -> Tensor {
autograd/generated/python_torch_functions.cpp:9398:  auto dispatch_batch_norm_backward_reduce = [](const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, bool input_g, bool weight_g, bool bias_g) -> std::tuple<Tensor,Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:9423:    auto dispatch_batch_norm_elemt = [](const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps) -> Tensor {
autograd/generated/python_torch_functions.cpp:9431:    auto dispatch_batch_norm_elemt_out = [](Tensor out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps) -> Tensor {
autograd/generated/python_torch_functions.cpp:9456:  auto dispatch_batch_norm_gather_stats = [](const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, int64_t count) -> std::tuple<Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:9480:  auto dispatch_batch_norm_gather_stats_with_counts = [](const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, const Tensor & counts) -> std::tuple<Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:9528:  auto dispatch_batch_norm_update_stats = [](const Tensor & input, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum) -> std::tuple<Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:9557:        auto dispatch_bernoulli = [](const Tensor & self, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:9565:        auto dispatch_bernoulli_out = [](Tensor out, const Tensor & self, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:9575:      auto dispatch_bernoulli = [](const Tensor & self, double p, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:9601:  auto dispatch_bilinear = [](const Tensor & input1, const Tensor & input2, const Tensor & weight, const c10::optional<Tensor> & bias) -> Tensor {
autograd/generated/python_torch_functions.cpp:9625:  auto dispatch_binary_cross_entropy_with_logits = [](const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & pos_weight, int64_t reduction) -> Tensor {
autograd/generated/python_torch_functions.cpp:9649:  auto dispatch_bincount = [](const Tensor & self, const c10::optional<Tensor> & weights, int64_t minlength) -> Tensor {
autograd/generated/python_torch_functions.cpp:9673:  auto dispatch_binomial = [](const Tensor & count, const Tensor & prob, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:10223:  auto dispatch_cdist = [](const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) -> Tensor {
autograd/generated/python_torch_functions.cpp:10552:    auto dispatch_clamp = [](const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_torch_functions.cpp:10560:    auto dispatch_clamp_out = [](Tensor out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_torch_functions.cpp:10585:  auto dispatch_clamp_ = [](Tensor self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_torch_functions.cpp:10726:    auto dispatch_clip = [](const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_torch_functions.cpp:10734:    auto dispatch_clip_out = [](Tensor out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_torch_functions.cpp:10759:  auto dispatch_clip_ = [](Tensor self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_torch_functions.cpp:10783:  auto dispatch_clone = [](const Tensor & self, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:10957:  auto dispatch_conv1d = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) -> Tensor {
autograd/generated/python_torch_functions.cpp:10981:  auto dispatch_conv2d = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) -> Tensor {
autograd/generated/python_torch_functions.cpp:11005:  auto dispatch_conv3d = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) -> Tensor {
autograd/generated/python_torch_functions.cpp:11053:  auto dispatch_conv_transpose1d = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) -> Tensor {
autograd/generated/python_torch_functions.cpp:11077:  auto dispatch_conv_transpose2d = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) -> Tensor {
autograd/generated/python_torch_functions.cpp:11101:  auto dispatch_conv_transpose3d = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) -> Tensor {
autograd/generated/python_torch_functions.cpp:11125:  auto dispatch_convolution = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) -> Tensor {
autograd/generated/python_torch_functions.cpp:11375:      auto dispatch_count_nonzero = [](const Tensor & self, c10::optional<int64_t> dim) -> Tensor {
autograd/generated/python_torch_functions.cpp:11402:    auto dispatch_cross = [](const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) -> Tensor {
autograd/generated/python_torch_functions.cpp:11410:    auto dispatch_cross_out = [](Tensor out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) -> Tensor {
autograd/generated/python_torch_functions.cpp:11498:  auto dispatch_cudnn_batch_norm = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) -> std::tuple<Tensor,Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:11545:      auto dispatch_cudnn_convolution = [](const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) -> Tensor {
autograd/generated/python_torch_functions.cpp:11594:      auto dispatch_cudnn_convolution_transpose = [](const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) -> Tensor {
autograd/generated/python_torch_functions.cpp:11825:        auto dispatch_cumprod = [](const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:11833:        auto dispatch_cumprod_out = [](Tensor out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:11844:        auto dispatch_cumprod = [](const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:11852:        auto dispatch_cumprod_out = [](Tensor out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:11884:        auto dispatch_cumsum = [](const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:11892:        auto dispatch_cumsum_out = [](Tensor out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:11903:        auto dispatch_cumsum = [](const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:11911:        auto dispatch_cumsum_out = [](Tensor out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:12229:    auto dispatch_diff = [](const Tensor & self, int64_t n, int64_t dim, const c10::optional<Tensor> & prepend, const c10::optional<Tensor> & append) -> Tensor {
autograd/generated/python_torch_functions.cpp:12237:    auto dispatch_diff_out = [](Tensor out, const Tensor & self, int64_t n, int64_t dim, const c10::optional<Tensor> & prepend, const c10::optional<Tensor> & append) -> Tensor {
autograd/generated/python_torch_functions.cpp:12683:  auto dispatch_embedding_bag = [](const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) -> std::tuple<Tensor,Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:12735:      c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_torch_functions.cpp:12744:      auto dispatch_empty = [](IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:12761:        auto dispatch_empty = [](IntArrayRef size, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:12772:        auto dispatch_empty_out = [](Tensor out, IntArrayRef size, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:12807:  auto dispatch_empty_like = [](const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:12838:  auto dispatch_empty_meta = [](IntArrayRef size, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:14385:  auto dispatch_from_file = [](std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:14417:  auto dispatch_full_like = [](const Tensor & self, Scalar fill_value, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:14892:  auto dispatch_group_norm = [](const Tensor & input, int64_t num_groups, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps, bool cudnn_enabled) -> Tensor {
autograd/generated/python_torch_functions.cpp:14955:  auto dispatch_gru_cell = [](const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) -> Tensor {
autograd/generated/python_torch_functions.cpp:15673:    "index_put(Tensor input, c10::List<c10::optional<Tensor>> indices, Tensor values, bool accumulate=False)",
autograd/generated/python_torch_functions.cpp:15683:  auto dispatch_index_put = [](const Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) -> Tensor {
autograd/generated/python_torch_functions.cpp:15697:    "index_put_(Tensor input, c10::List<c10::optional<Tensor>> indices, Tensor values, bool accumulate=False)",
autograd/generated/python_torch_functions.cpp:15707:  auto dispatch_index_put_ = [](Tensor self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) -> Tensor {
autograd/generated/python_torch_functions.cpp:15824:  auto dispatch_instance_norm = [](const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) -> Tensor {
autograd/generated/python_torch_functions.cpp:16253:  auto dispatch_istft = [](const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool center, bool normalized, c10::optional<bool> onesided, c10::optional<int64_t> length, bool return_complex) -> Tensor {
autograd/generated/python_torch_functions.cpp:16481:  auto dispatch_layer_norm = [](const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps, bool cudnn_enable) -> Tensor {
autograd/generated/python_torch_functions.cpp:16899:    auto dispatch_linspace = [](Scalar start, Scalar end, c10::optional<int64_t> steps, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:16910:    auto dispatch_linspace_out = [](Tensor out, Scalar start, Scalar end, c10::optional<int64_t> steps) -> Tensor {
autograd/generated/python_torch_functions.cpp:17171:      auto dispatch_log_softmax = [](const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:17180:      auto dispatch_log_softmax = [](const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:17494:    auto dispatch_logit = [](const Tensor & self, c10::optional<double> eps) -> Tensor {
autograd/generated/python_torch_functions.cpp:17502:    auto dispatch_logit_out = [](Tensor out, const Tensor & self, c10::optional<double> eps) -> Tensor {
autograd/generated/python_torch_functions.cpp:17527:  auto dispatch_logit_ = [](Tensor self, c10::optional<double> eps) -> Tensor {
autograd/generated/python_torch_functions.cpp:17559:    auto dispatch_logspace = [](Scalar start, Scalar end, c10::optional<int64_t> steps, double base, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:17570:    auto dispatch_logspace_out = [](Tensor out, Scalar start, Scalar end, c10::optional<int64_t> steps, double base) -> Tensor {
autograd/generated/python_torch_functions.cpp:17693:  auto dispatch_lstm_cell = [](const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) -> std::tuple<Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:18344:      auto dispatch_mean = [](const Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:18354:        auto dispatch_mean = [](const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:18362:        auto dispatch_mean_out = [](Tensor out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:18373:        auto dispatch_mean = [](const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:18381:        auto dispatch_mean_out = [](Tensor out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:18658:  auto dispatch_miopen_batch_norm = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) -> std::tuple<Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:18682:  auto dispatch_miopen_convolution = [](const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) -> Tensor {
autograd/generated/python_torch_functions.cpp:18706:  auto dispatch_miopen_convolution_transpose = [](const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) -> Tensor {
autograd/generated/python_torch_functions.cpp:18730:  auto dispatch_miopen_depthwise_convolution = [](const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) -> Tensor {
autograd/generated/python_torch_functions.cpp:18754:  auto dispatch_miopen_rnn = [](const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) -> std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:18802:  auto dispatch_mkldnn_convolution = [](const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) -> Tensor {
autograd/generated/python_torch_functions.cpp:19179:    auto dispatch_multinomial = [](const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:19187:    auto dispatch_multinomial_out = [](Tensor out, const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:19320:    auto dispatch_nan_to_num = [](const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) -> Tensor {
autograd/generated/python_torch_functions.cpp:19328:    auto dispatch_nan_to_num_out = [](Tensor out, const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) -> Tensor {
autograd/generated/python_torch_functions.cpp:19353:  auto dispatch_nan_to_num_ = [](Tensor self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) -> Tensor {
autograd/generated/python_torch_functions.cpp:19468:        auto dispatch_nanquantile = [](const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:19476:        auto dispatch_nanquantile_out = [](Tensor out, const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:19487:        auto dispatch_nanquantile = [](const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:19495:        auto dispatch_nanquantile_out = [](Tensor out, const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:19526:      auto dispatch_nansum = [](const Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:19536:        auto dispatch_nansum = [](const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:19544:        auto dispatch_nansum_out = [](Tensor out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:19645:    auto dispatch_native_batch_norm = [](const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps) -> std::tuple<Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:19653:    auto dispatch_native_batch_norm_out = [](Tensor & out, Tensor & save_mean, Tensor & save_invstd, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps) -> std::tuple<Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:19678:  auto dispatch_native_group_norm = [](const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps) -> std::tuple<Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:19702:  auto dispatch_native_layer_norm = [](const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps) -> std::tuple<Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:19739:      auto dispatch_native_norm = [](const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:19991:      auto dispatch_norm = [](const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:20001:        auto dispatch_norm = [](const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:20009:        auto dispatch_norm_out = [](Tensor out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:20020:        auto dispatch_norm = [](const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:20028:        auto dispatch_norm_out = [](Tensor out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:20039:        auto dispatch_norm = [](const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:20047:        auto dispatch_norm_out = [](Tensor out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:20058:        auto dispatch_norm = [](const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:20066:        auto dispatch_norm_out = [](Tensor out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:20124:        auto dispatch_normal = [](const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:20132:        auto dispatch_normal_out = [](Tensor out, const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:20143:        auto dispatch_normal = [](const Tensor & mean, double std, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:20151:        auto dispatch_normal_out = [](Tensor out, const Tensor & mean, double std, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:20162:        auto dispatch_normal = [](double mean, const Tensor & std, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:20170:        auto dispatch_normal_out = [](Tensor out, double mean, const Tensor & std, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:20188:        auto dispatch_normal = [](double mean, double std, IntArrayRef size, c10::optional<Generator> generator, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:20199:        auto dispatch_normal_out = [](Tensor out, double mean, double std, IntArrayRef size, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:20348:      c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_torch_functions.cpp:20357:      auto dispatch_ones = [](IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:20420:  auto dispatch_ones_like = [](const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:20666:  auto dispatch_poisson = [](const Tensor & self, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:20890:      auto dispatch_prod = [](const Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:20900:        auto dispatch_prod = [](const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:20908:        auto dispatch_prod_out = [](Tensor out, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:20919:        auto dispatch_prod = [](const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:20927:        auto dispatch_prod_out = [](Tensor out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:21154:        auto dispatch_quantile = [](const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:21162:        auto dispatch_quantile_out = [](Tensor out, const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:21173:        auto dispatch_quantile = [](const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:21181:        auto dispatch_quantile_out = [](Tensor out, const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_torch_functions.cpp:21271:  auto dispatch_quantized_batch_norm = [](const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & var, double eps, double output_scale, int64_t output_zero_point) -> Tensor {
autograd/generated/python_torch_functions.cpp:21503:      c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_torch_functions.cpp:21512:      auto dispatch_rand = [](IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:21521:      c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_torch_functions.cpp:21530:      auto dispatch_rand = [](IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:21547:        auto dispatch_rand = [](IntArrayRef size, c10::optional<Generator> generator, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:21558:        auto dispatch_rand_out = [](Tensor out, IntArrayRef size, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:21622:  auto dispatch_rand_like = [](const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:21658:      auto dispatch_randint_like = [](const Tensor & self, int64_t high, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:21675:      auto dispatch_randint_like = [](const Tensor & self, int64_t low, int64_t high, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:21707:      c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_torch_functions.cpp:21716:      auto dispatch_randn = [](IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:21725:      c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_torch_functions.cpp:21734:      auto dispatch_randn = [](IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:21751:        auto dispatch_randn = [](IntArrayRef size, c10::optional<Generator> generator, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:21762:        auto dispatch_randn_out = [](Tensor out, IntArrayRef size, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:21826:  auto dispatch_randn_like = [](const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:21862:        auto dispatch_randperm = [](int64_t n, c10::optional<Generator> generator, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:21873:        auto dispatch_randperm_out = [](Tensor out, int64_t n, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:22181:      auto dispatch_repeat_interleave = [](const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) -> Tensor {
autograd/generated/python_torch_functions.cpp:22190:      auto dispatch_repeat_interleave = [](const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) -> Tensor {
autograd/generated/python_torch_functions.cpp:22249:  auto dispatch_resize_as_ = [](Tensor self, const Tensor & the_template, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_torch_functions.cpp:22371:  auto dispatch_rnn_relu_cell = [](const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) -> Tensor {
autograd/generated/python_torch_functions.cpp:22434:  auto dispatch_rnn_tanh_cell = [](const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) -> Tensor {
autograd/generated/python_torch_functions.cpp:22598:  auto dispatch_rrelu = [](const Tensor & self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:22622:  auto dispatch_rrelu_ = [](Tensor self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_torch_functions.cpp:23403:      auto dispatch_softmax = [](const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:23412:      auto dispatch_softmax = [](const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:23979:  auto dispatch_stft = [](const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool normalized, c10::optional<bool> onesided, c10::optional<bool> return_complex) -> Tensor {
autograd/generated/python_torch_functions.cpp:24116:      auto dispatch_sum = [](const Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:24126:        auto dispatch_sum = [](const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:24134:        auto dispatch_sum_out = [](Tensor out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:24145:        auto dispatch_sum = [](const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:24153:        auto dispatch_sum_out = [](Tensor out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_torch_functions.cpp:25173:  auto dispatch_unique_consecutive = [](const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) -> std::tuple<Tensor,Tensor,Tensor> {
autograd/generated/python_torch_functions.cpp:25317:  auto dispatch_vander = [](const Tensor & x, c10::optional<int64_t> N, bool increasing) -> Tensor {
autograd/generated/python_torch_functions.cpp:25790:      c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_torch_functions.cpp:25799:      auto dispatch_zeros = [](IntArrayRef size, c10::optional<DimnameList> names, TensorOptions options) -> Tensor {
autograd/generated/python_torch_functions.cpp:25862:  auto dispatch_zeros_like = [](const Tensor & self, TensorOptions options, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/VariableType_3.cpp:59:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:60:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:61:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:63:  c10::optional<Storage> self2__storage_saved =
autograd/generated/VariableType_3.cpp:64:    self2_.has_storage() ? c10::optional<Storage>(self2_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:65:  c10::intrusive_ptr<TensorImpl> self2__impl_saved;
autograd/generated/VariableType_3.cpp:67:  c10::optional<Storage> mat__storage_saved =
autograd/generated/VariableType_3.cpp:68:    mat_.has_storage() ? c10::optional<Storage>(mat_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:69:  c10::intrusive_ptr<TensorImpl> mat__impl_saved;
autograd/generated/VariableType_3.cpp:71:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableType_3.cpp:72:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:73:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableType_3.cpp:120:  c10::optional<Storage> log_probs__storage_saved =
autograd/generated/VariableType_3.cpp:121:    log_probs_.has_storage() ? c10::optional<Storage>(log_probs_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:122:  c10::intrusive_ptr<TensorImpl> log_probs__impl_saved;
autograd/generated/VariableType_3.cpp:124:  c10::optional<Storage> targets__storage_saved =
autograd/generated/VariableType_3.cpp:125:    targets_.has_storage() ? c10::optional<Storage>(targets_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:126:  c10::intrusive_ptr<TensorImpl> targets__impl_saved;
autograd/generated/VariableType_3.cpp:152:Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableType_3.cpp:180:Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights) {
autograd/generated/VariableType_3.cpp:195:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableType_3.cpp:196:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:197:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableType_3.cpp:199:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_3.cpp:200:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:201:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_3.cpp:203:  c10::optional<Storage> offsets__storage_saved =
autograd/generated/VariableType_3.cpp:204:    offsets_.has_storage() ? c10::optional<Storage>(offsets_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:205:  c10::intrusive_ptr<TensorImpl> offsets__impl_saved;
autograd/generated/VariableType_3.cpp:207:  c10::optional<Storage> offset2bag__storage_saved =
autograd/generated/VariableType_3.cpp:208:    offset2bag_.has_storage() ? c10::optional<Storage>(offset2bag_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:209:  c10::intrusive_ptr<TensorImpl> offset2bag__impl_saved;
autograd/generated/VariableType_3.cpp:211:  c10::optional<Storage> bag_size__storage_saved =
autograd/generated/VariableType_3.cpp:212:    bag_size_.has_storage() ? c10::optional<Storage>(bag_size_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:213:  c10::intrusive_ptr<TensorImpl> bag_size__impl_saved;
autograd/generated/VariableType_3.cpp:215:  c10::optional<Storage> maximum_indices__storage_saved =
autograd/generated/VariableType_3.cpp:216:    maximum_indices_.has_storage() ? c10::optional<Storage>(maximum_indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:217:  c10::intrusive_ptr<TensorImpl> maximum_indices__impl_saved;
autograd/generated/VariableType_3.cpp:265:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableType_3.cpp:266:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:267:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableType_3.cpp:269:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:270:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:271:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:273:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_3.cpp:274:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:275:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_3.cpp:277:  c10::optional<Storage> offsets__storage_saved =
autograd/generated/VariableType_3.cpp:278:    offsets_.has_storage() ? c10::optional<Storage>(offsets_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:279:  c10::intrusive_ptr<TensorImpl> offsets__impl_saved;
autograd/generated/VariableType_3.cpp:281:  c10::optional<Storage> offset2bag__storage_saved =
autograd/generated/VariableType_3.cpp:282:    offset2bag_.has_storage() ? c10::optional<Storage>(offset2bag_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:283:  c10::intrusive_ptr<TensorImpl> offset2bag__impl_saved;
autograd/generated/VariableType_3.cpp:314:Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/VariableType_3.cpp:325:  c10::optional<Storage> scales__storage_saved =
autograd/generated/VariableType_3.cpp:326:    scales_.has_storage() ? c10::optional<Storage>(scales_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:327:  c10::intrusive_ptr<TensorImpl> scales__impl_saved;
autograd/generated/VariableType_3.cpp:329:  c10::optional<Storage> zero_points__storage_saved =
autograd/generated/VariableType_3.cpp:330:    zero_points_.has_storage() ? c10::optional<Storage>(zero_points_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:331:  c10::intrusive_ptr<TensorImpl> zero_points__impl_saved;
autograd/generated/VariableType_3.cpp:371:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:372:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:373:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:375:  c10::optional<Storage> scale__storage_saved =
autograd/generated/VariableType_3.cpp:376:    scale_.has_storage() ? c10::optional<Storage>(scale_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:377:  c10::intrusive_ptr<TensorImpl> scale__impl_saved;
autograd/generated/VariableType_3.cpp:379:  c10::optional<Storage> zero_point__storage_saved =
autograd/generated/VariableType_3.cpp:380:    zero_point_.has_storage() ? c10::optional<Storage>(zero_point_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:381:  c10::intrusive_ptr<TensorImpl> zero_point__impl_saved;
autograd/generated/VariableType_3.cpp:419:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:420:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:421:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:451:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:452:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:453:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:486:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:487:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:488:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:516:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:519:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:520:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:547:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:550:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:551:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:582:  std::vector<c10::optional<Storage>> input__storage_saved(input_.size());
autograd/generated/VariableType_3.cpp:585:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:586:  std::vector<c10::intrusive_ptr<TensorImpl>> input__impl_saved(input_.size());
autograd/generated/VariableType_3.cpp:589:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableType_3.cpp:592:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:593:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableType_3.cpp:596:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableType_3.cpp:599:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:600:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableType_3.cpp:652:  std::vector<c10::optional<Storage>> input__storage_saved(input_.size());
autograd/generated/VariableType_3.cpp:655:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:656:  std::vector<c10::intrusive_ptr<TensorImpl>> input__impl_saved(input_.size());
autograd/generated/VariableType_3.cpp:659:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableType_3.cpp:662:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:663:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableType_3.cpp:666:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableType_3.cpp:669:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:670:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableType_3.cpp:715:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:718:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:719:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:722:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableType_3.cpp:725:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:726:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableType_3.cpp:729:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableType_3.cpp:732:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:733:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableType_3.cpp:773:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:776:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:777:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:780:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableType_3.cpp:783:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:784:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableType_3.cpp:787:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableType_3.cpp:790:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:791:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableType_3.cpp:836:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:839:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:840:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:867:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:870:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:871:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:900:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:903:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:904:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:931:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:934:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:935:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:964:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:967:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:968:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:995:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:998:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:999:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:1028:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:1031:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1032:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:1059:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:1062:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1063:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:1092:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:1095:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1096:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:1131:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableType_3.cpp:1134:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1135:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableType_3.cpp:1138:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableType_3.cpp:1141:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1142:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableType_3.cpp:1184:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:1187:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1188:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:1215:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:1218:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1219:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:1242:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:1245:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1246:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:1249:  std::vector<c10::optional<Storage>> other__storage_saved(other_.size());
autograd/generated/VariableType_3.cpp:1252:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1253:  std::vector<c10::intrusive_ptr<TensorImpl>> other__impl_saved(other_.size());
autograd/generated/VariableType_3.cpp:1283:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_3.cpp:1286:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1287:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_3.cpp:1319:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1320:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1321:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1323:  c10::optional<Storage> infos_lu__storage_saved =
autograd/generated/VariableType_3.cpp:1324:    infos_lu_.has_storage() ? c10::optional<Storage>(infos_lu_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1325:  c10::intrusive_ptr<TensorImpl> infos_lu__impl_saved;
autograd/generated/VariableType_3.cpp:1327:  c10::optional<Storage> infos_getri__storage_saved =
autograd/generated/VariableType_3.cpp:1328:    infos_getri_.has_storage() ? c10::optional<Storage>(infos_getri_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1329:  c10::intrusive_ptr<TensorImpl> infos_getri__impl_saved;
autograd/generated/VariableType_3.cpp:1365:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1366:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1367:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1400:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1401:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1402:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1404:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:1405:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1406:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:1408:  c10::optional<Storage> infos__storage_saved =
autograd/generated/VariableType_3.cpp:1409:    infos_.has_storage() ? c10::optional<Storage>(infos_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1410:  c10::intrusive_ptr<TensorImpl> infos__impl_saved;
autograd/generated/VariableType_3.cpp:1450:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:1451:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1452:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:1454:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_3.cpp:1455:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1456:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_3.cpp:1458:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1459:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1460:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1497:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1498:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1499:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1501:  c10::optional<Storage> LU_data__storage_saved =
autograd/generated/VariableType_3.cpp:1502:    LU_data_.has_storage() ? c10::optional<Storage>(LU_data_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1503:  c10::intrusive_ptr<TensorImpl> LU_data__impl_saved;
autograd/generated/VariableType_3.cpp:1505:  c10::optional<Storage> LU_pivots__storage_saved =
autograd/generated/VariableType_3.cpp:1506:    LU_pivots_.has_storage() ? c10::optional<Storage>(LU_pivots_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1507:  c10::intrusive_ptr<TensorImpl> LU_pivots__impl_saved;
autograd/generated/VariableType_3.cpp:1544:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1545:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1546:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1548:  c10::optional<Storage> scale__storage_saved =
autograd/generated/VariableType_3.cpp:1549:    scale_.has_storage() ? c10::optional<Storage>(scale_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1550:  c10::intrusive_ptr<TensorImpl> scale__impl_saved;
autograd/generated/VariableType_3.cpp:1552:  c10::optional<Storage> zero_point__storage_saved =
autograd/generated/VariableType_3.cpp:1553:    zero_point_.has_storage() ? c10::optional<Storage>(zero_point_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1554:  c10::intrusive_ptr<TensorImpl> zero_point__impl_saved;
autograd/generated/VariableType_3.cpp:1589:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1590:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1591:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1623:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1624:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1625:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1627:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableType_3.cpp:1628:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1629:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableType_3.cpp:1663:  c10::optional<Storage> t__storage_saved =
autograd/generated/VariableType_3.cpp:1664:    t_.has_storage() ? c10::optional<Storage>(t_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1665:  c10::intrusive_ptr<TensorImpl> t__impl_saved;
autograd/generated/VariableType_3.cpp:1667:  c10::optional<Storage> mask_indices__storage_saved =
autograd/generated/VariableType_3.cpp:1668:    mask_indices_.has_storage() ? c10::optional<Storage>(mask_indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1669:  c10::intrusive_ptr<TensorImpl> mask_indices__impl_saved;
autograd/generated/VariableType_3.cpp:1704:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:1707:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:1708:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:1711:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:1712:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1713:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:1750:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1751:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1752:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1754:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_3.cpp:1755:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1756:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_3.cpp:1794:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1795:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1796:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1819:Tensor _test_optional_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
autograd/generated/VariableType_3.cpp:1829:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_3.cpp:1830:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1831:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_3.cpp:1862:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1863:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1864:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1896:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1897:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1898:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1930:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:1931:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1932:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:1934:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1935:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1936:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1972:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:1973:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1974:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:1976:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:1977:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1978:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:1980:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_3.cpp:1981:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:1982:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_3.cpp:2030:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2031:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2032:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2034:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableType_3.cpp:2035:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2036:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableType_3.cpp:2038:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableType_3.cpp:2039:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2040:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableType_3.cpp:2088:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2089:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2090:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2092:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableType_3.cpp:2093:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2094:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableType_3.cpp:2096:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableType_3.cpp:2097:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2098:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableType_3.cpp:2137:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2138:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2139:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2141:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableType_3.cpp:2142:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2143:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableType_3.cpp:2145:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableType_3.cpp:2146:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2147:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableType_3.cpp:2149:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2150:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2151:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:2193:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2194:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2195:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2197:  c10::optional<Storage> mat__storage_saved =
autograd/generated/VariableType_3.cpp:2198:    mat_.has_storage() ? c10::optional<Storage>(mat_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2199:  c10::intrusive_ptr<TensorImpl> mat__impl_saved;
autograd/generated/VariableType_3.cpp:2201:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableType_3.cpp:2202:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2203:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableType_3.cpp:2205:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2206:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2207:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:2244:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2245:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2246:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2275:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2276:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2277:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2309:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2310:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2311:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2346:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2347:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2348:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2350:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2351:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2352:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:2383:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2384:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2385:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2414:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2415:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2416:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2435:Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/VariableType_3.cpp:2438:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2439:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2440:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2455:Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/VariableType_3.cpp:2469:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2470:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2471:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2498:Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/VariableType_3.cpp:2513:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2514:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2515:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2546:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2547:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2548:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2550:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2551:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2552:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:2573:Tensor batch_norm_elemt(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps) {
autograd/generated/VariableType_3.cpp:2585:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_3.cpp:2586:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2587:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_3.cpp:2589:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_3.cpp:2590:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2591:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_3.cpp:2593:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableType_3.cpp:2594:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2595:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableType_3.cpp:2620:Tensor & binary_cross_entropy_out_out(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/VariableType_3.cpp:2634:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2635:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2636:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2638:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_3.cpp:2639:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2640:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_3.cpp:2642:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2643:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2644:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:2668:Tensor binomial(const Tensor & count, const Tensor & prob, c10::optional<Generator> generator) {
autograd/generated/VariableType_3.cpp:2679:  c10::optional<Storage> count__storage_saved =
autograd/generated/VariableType_3.cpp:2680:    count_.has_storage() ? c10::optional<Storage>(count_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2681:  c10::intrusive_ptr<TensorImpl> count__impl_saved;
autograd/generated/VariableType_3.cpp:2683:  c10::optional<Storage> prob__storage_saved =
autograd/generated/VariableType_3.cpp:2684:    prob_.has_storage() ? c10::optional<Storage>(prob_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2685:  c10::intrusive_ptr<TensorImpl> prob__impl_saved;
autograd/generated/VariableType_3.cpp:2721:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2722:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2723:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2725:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:2726:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2727:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:2729:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2730:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2731:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:2768:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2769:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2770:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2772:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2773:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2774:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:2809:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2810:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2811:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2813:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:2814:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2815:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:2817:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2818:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2819:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:2856:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2857:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2858:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2860:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2861:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2862:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:2893:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2894:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2895:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2925:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2926:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2927:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2955:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2956:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2957:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2990:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:2991:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2992:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:2994:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableType_3.cpp:2995:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:2996:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableType_3.cpp:2998:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:2999:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3000:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:3037:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3038:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3039:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3041:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:3042:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3043:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:3080:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:3081:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3082:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:3112:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3113:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3114:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3144:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3145:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3146:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3148:  c10::optional<Storage> src__storage_saved =
autograd/generated/VariableType_3.cpp:3149:    src_.has_storage() ? c10::optional<Storage>(src_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3150:  c10::intrusive_ptr<TensorImpl> src__impl_saved;
autograd/generated/VariableType_3.cpp:3184:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3185:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3186:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3188:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:3189:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3190:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:3211:Tensor & cross_out_out(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim, Tensor & out) {
autograd/generated/VariableType_3.cpp:3225:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3226:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3227:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3229:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:3230:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3231:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:3233:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:3234:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3235:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:3269:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableType_3.cpp:3270:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3271:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableType_3.cpp:3314:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3315:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3316:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3318:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:3319:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3320:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:3322:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:3323:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3324:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:3361:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:3362:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3363:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:3365:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:3366:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3367:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:3389:Tensor cudnn_convolution_transpose_deprecated(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableType_3.cpp:3400:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3401:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3402:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3404:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:3405:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3406:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:3439:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3440:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3441:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3443:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:3444:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3445:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:3488:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3489:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3490:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3492:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:3493:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3494:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:3530:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3531:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3532:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3534:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_3.cpp:3535:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3536:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_3.cpp:3538:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_3.cpp:3539:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3540:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_3.cpp:3581:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3582:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3583:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3585:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:3586:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3587:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:3625:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3626:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3627:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3629:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:3630:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3631:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:3664:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3665:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3666:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3697:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3698:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3699:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3734:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3735:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3736:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3738:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:3739:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3740:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:3779:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3780:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3781:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3783:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:3784:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3785:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:3819:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3820:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3821:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3853:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3854:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3855:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3887:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3888:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3889:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3891:  c10::optional<Storage> e__storage_saved =
autograd/generated/VariableType_3.cpp:3892:    e_.has_storage() ? c10::optional<Storage>(e_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3893:  c10::intrusive_ptr<TensorImpl> e__impl_saved;
autograd/generated/VariableType_3.cpp:3895:  c10::optional<Storage> v__storage_saved =
autograd/generated/VariableType_3.cpp:3896:    v_.has_storage() ? c10::optional<Storage>(v_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3897:  c10::intrusive_ptr<TensorImpl> v__impl_saved;
autograd/generated/VariableType_3.cpp:3926:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3927:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3928:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3930:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:3931:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3932:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:3955:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3956:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3957:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:3959:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:3960:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3961:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:3963:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:3964:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3965:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:3996:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:3997:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:3998:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4029:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4030:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4031:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4064:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4065:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4066:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4098:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4099:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4100:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4132:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4133:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4134:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4164:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4165:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4166:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4168:  c10::optional<Storage> value__storage_saved =
autograd/generated/VariableType_3.cpp:4169:    value_.has_storage() ? c10::optional<Storage>(value_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4170:  c10::intrusive_ptr<TensorImpl> value__impl_saved;
autograd/generated/VariableType_3.cpp:4204:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4205:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4206:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4208:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:4209:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4210:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:4247:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:4248:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4249:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:4251:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4252:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4253:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4255:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_3.cpp:4256:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4257:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_3.cpp:4299:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4300:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4301:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4303:  c10::optional<Storage> random_samples__storage_saved =
autograd/generated/VariableType_3.cpp:4304:    random_samples_.has_storage() ? c10::optional<Storage>(random_samples_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4305:  c10::intrusive_ptr<TensorImpl> random_samples__impl_saved;
autograd/generated/VariableType_3.cpp:4345:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:4346:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4347:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:4349:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4350:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4351:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4353:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_3.cpp:4354:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4355:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_3.cpp:4357:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_3.cpp:4358:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4359:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_3.cpp:4390:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4391:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4392:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4394:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:4395:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4396:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:4419:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4420:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4421:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4423:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:4424:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4425:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:4427:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:4428:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4429:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:4462:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4463:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4464:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4501:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4502:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4503:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4505:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableType_3.cpp:4506:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4507:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableType_3.cpp:4540:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4541:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4542:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4575:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:4576:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4577:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:4579:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4580:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4581:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4583:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_3.cpp:4584:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4585:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_3.cpp:4625:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_3.cpp:4626:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4627:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_3.cpp:4629:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableType_3.cpp:4630:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4631:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableType_3.cpp:4657:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4658:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4659:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4661:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:4662:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4663:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:4686:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4687:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4688:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4690:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:4691:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4692:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:4694:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:4695:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4696:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:4728:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4729:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4730:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4761:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4762:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4763:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4792:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4793:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4794:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4825:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4826:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4827:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4859:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:4860:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4861:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:4863:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4864:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4865:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4900:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4901:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4902:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4904:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:4905:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4906:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:4941:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableType_3.cpp:4942:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4943:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableType_3.cpp:4945:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_3.cpp:4946:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4947:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_3.cpp:4949:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:4950:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4951:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:4989:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:4990:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4991:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:4993:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:4994:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4995:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:4997:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:4998:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:4999:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5033:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5034:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5035:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5065:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5066:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5067:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5099:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5100:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5101:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5103:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:5104:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5105:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:5107:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5108:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5109:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5147:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:5148:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5149:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:5188:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5189:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5190:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5192:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_3.cpp:5193:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5194:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_3.cpp:5196:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableType_3.cpp:5197:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5198:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableType_3.cpp:5235:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5236:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5237:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5239:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5240:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5241:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5277:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5278:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5279:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5281:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_3.cpp:5282:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5283:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_3.cpp:5320:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5321:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5322:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5348:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5349:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5350:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5352:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5353:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5354:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5377:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5378:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5379:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5381:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:5382:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5383:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:5385:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5386:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5387:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5421:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5422:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5423:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5425:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5426:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5427:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5459:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5460:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5461:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5492:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5493:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5494:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5526:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5527:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5528:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5530:  c10::optional<Storage> eigvals__storage_saved =
autograd/generated/VariableType_3.cpp:5531:    eigvals_.has_storage() ? c10::optional<Storage>(eigvals_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5532:  c10::intrusive_ptr<TensorImpl> eigvals__impl_saved;
autograd/generated/VariableType_3.cpp:5534:  c10::optional<Storage> eigvecs__storage_saved =
autograd/generated/VariableType_3.cpp:5535:    eigvecs_.has_storage() ? c10::optional<Storage>(eigvecs_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5536:  c10::intrusive_ptr<TensorImpl> eigvecs__impl_saved;
autograd/generated/VariableType_3.cpp:5574:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5575:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5576:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5578:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5579:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5580:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5615:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5616:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5617:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5653:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_3.cpp:5654:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5655:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_3.cpp:5657:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:5658:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5659:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:5661:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5662:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5663:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5700:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5701:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5702:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5704:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5705:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5706:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5738:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5739:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5740:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5770:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5771:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5772:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5790:Tensor logit(const Tensor & self, c10::optional<double> eps) {
autograd/generated/VariableType_3.cpp:5802:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5803:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5804:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5823:Tensor & logit_(Tensor & self, c10::optional<double> eps) {
autograd/generated/VariableType_3.cpp:5836:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5837:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5838:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5856:Tensor & logit_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps, Tensor & grad_input) {
autograd/generated/VariableType_3.cpp:5870:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:5871:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5872:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:5874:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5875:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5876:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5878:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_3.cpp:5879:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5880:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_3.cpp:5908:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5909:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5910:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5912:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5913:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5914:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5937:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5938:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5939:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5941:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:5942:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5943:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:5945:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:5946:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5947:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:5982:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:5983:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5984:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:5986:  c10::optional<Storage> LU_data__storage_saved =
autograd/generated/VariableType_3.cpp:5987:    LU_data_.has_storage() ? c10::optional<Storage>(LU_data_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5988:  c10::intrusive_ptr<TensorImpl> LU_data__impl_saved;
autograd/generated/VariableType_3.cpp:5990:  c10::optional<Storage> LU_pivots__storage_saved =
autograd/generated/VariableType_3.cpp:5991:    LU_pivots_.has_storage() ? c10::optional<Storage>(LU_pivots_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:5992:  c10::intrusive_ptr<TensorImpl> LU_pivots__impl_saved;
autograd/generated/VariableType_3.cpp:6031:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6032:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6033:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6035:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableType_3.cpp:6036:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6037:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableType_3.cpp:6039:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:6040:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6041:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:6079:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:6080:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6081:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:6083:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6084:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6085:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6087:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_3.cpp:6088:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6089:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_3.cpp:6132:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6133:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6134:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6171:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:6172:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6173:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:6175:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6176:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6177:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6179:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_3.cpp:6180:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6181:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_3.cpp:6183:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_3.cpp:6184:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6185:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_3.cpp:6226:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6227:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6228:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6230:  c10::optional<Storage> min__storage_saved =
autograd/generated/VariableType_3.cpp:6231:    min_.has_storage() ? c10::optional<Storage>(min_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6232:  c10::intrusive_ptr<TensorImpl> min__impl_saved;
autograd/generated/VariableType_3.cpp:6234:  c10::optional<Storage> min_indices__storage_saved =
autograd/generated/VariableType_3.cpp:6235:    min_indices_.has_storage() ? c10::optional<Storage>(min_indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6236:  c10::intrusive_ptr<TensorImpl> min_indices__impl_saved;
autograd/generated/VariableType_3.cpp:6275:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6276:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6277:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6279:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:6280:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6281:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:6283:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:6284:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6285:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:6320:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:6321:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6322:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:6324:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6325:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6326:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6372:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6373:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6374:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6376:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:6377:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6378:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:6380:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:6381:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6382:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:6420:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:6421:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6422:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:6424:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:6425:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6426:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:6448:std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
autograd/generated/VariableType_3.cpp:6467:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_3.cpp:6468:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6469:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_3.cpp:6471:  std::vector<c10::optional<Storage>> weight__storage_saved(weight_.size());
autograd/generated/VariableType_3.cpp:6474:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:6475:  std::vector<c10::intrusive_ptr<TensorImpl>> weight__impl_saved(weight_.size());
autograd/generated/VariableType_3.cpp:6478:  c10::optional<Storage> weight_buf__storage_saved =
autograd/generated/VariableType_3.cpp:6479:    weight_buf_.has_storage() ? c10::optional<Storage>(weight_buf_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6480:  c10::intrusive_ptr<TensorImpl> weight_buf__impl_saved;
autograd/generated/VariableType_3.cpp:6482:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableType_3.cpp:6483:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6484:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableType_3.cpp:6486:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_3.cpp:6487:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6488:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_3.cpp:6490:  c10::optional<Storage> reserve__storage_saved =
autograd/generated/VariableType_3.cpp:6491:    reserve_.has_storage() ? c10::optional<Storage>(reserve_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6492:  c10::intrusive_ptr<TensorImpl> reserve__impl_saved;
autograd/generated/VariableType_3.cpp:6547:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:6548:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6549:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:6551:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_3.cpp:6552:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6553:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_3.cpp:6555:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:6556:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6557:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:6593:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6594:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6595:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6635:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6636:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6637:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6639:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_3.cpp:6640:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6641:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_3.cpp:6676:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6677:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6678:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6680:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_3.cpp:6681:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6682:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_3.cpp:6684:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:6685:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6686:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:6724:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6725:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6726:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6728:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:6729:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6730:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:6732:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:6733:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6734:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:6758:Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/VariableType_3.cpp:6770:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:6771:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6772:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:6774:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6775:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6776:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6778:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_3.cpp:6779:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6780:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_3.cpp:6819:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6820:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6821:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6823:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_3.cpp:6824:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6825:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_3.cpp:6827:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_3.cpp:6828:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6829:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_3.cpp:6854:Tensor nansum(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_3.cpp:6867:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6868:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6869:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6888:Tensor nansum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_3.cpp:6902:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6903:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6904:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6933:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:6934:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6935:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:6954:std::tuple<Tensor,Tensor,Tensor> native_group_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps) {
autograd/generated/VariableType_3.cpp:6974:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_3.cpp:6975:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:6976:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_3.cpp:7001:std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, IntArrayRef normalized_shape, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, std::array<bool,3> output_mask) {
autograd/generated/VariableType_3.cpp:7017:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableType_3.cpp:7018:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7019:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableType_3.cpp:7021:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_3.cpp:7022:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7023:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_3.cpp:7025:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_3.cpp:7026:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7027:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_3.cpp:7029:  c10::optional<Storage> rstd__storage_saved =
autograd/generated/VariableType_3.cpp:7030:    rstd_.has_storage() ? c10::optional<Storage>(rstd_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7031:  c10::intrusive_ptr<TensorImpl> rstd__impl_saved;
autograd/generated/VariableType_3.cpp:7074:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7075:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7076:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7078:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:7079:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7080:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:7105:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7106:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7107:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7109:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:7110:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7111:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:7129:Tensor & norm_out_dtype_out(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype, Tensor & out) {
autograd/generated/VariableType_3.cpp:7142:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7143:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7144:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7146:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:7147:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7148:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:7169:Tensor & norm_out_out(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/VariableType_3.cpp:7182:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7183:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7184:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7186:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:7187:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7188:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:7209:Tensor & normal_out_Tensor_float_out(const Tensor & mean, double std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableType_3.cpp:7222:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_3.cpp:7223:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7224:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_3.cpp:7226:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:7227:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7228:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:7249:Tensor & normal_out_float_Tensor_out(double mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableType_3.cpp:7262:  c10::optional<Storage> std__storage_saved =
autograd/generated/VariableType_3.cpp:7263:    std_.has_storage() ? c10::optional<Storage>(std_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7264:  c10::intrusive_ptr<TensorImpl> std__impl_saved;
autograd/generated/VariableType_3.cpp:7266:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:7267:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7268:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:7289:Tensor & normal_out_Tensor_Tensor_out(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableType_3.cpp:7303:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_3.cpp:7304:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7305:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_3.cpp:7307:  c10::optional<Storage> std__storage_saved =
autograd/generated/VariableType_3.cpp:7308:    std_.has_storage() ? c10::optional<Storage>(std_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7309:  c10::intrusive_ptr<TensorImpl> std__impl_saved;
autograd/generated/VariableType_3.cpp:7311:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:7312:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7313:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:7354:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:7355:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7356:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:7358:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7359:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7360:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7362:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:7363:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7364:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:7393:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7394:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7395:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7420:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7421:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7422:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7454:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7455:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7456:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7458:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:7459:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7460:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:7494:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:7495:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7496:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:7498:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7499:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7500:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7533:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7534:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7535:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7567:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:7568:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7569:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:7571:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7572:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7573:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7575:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_3.cpp:7576:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7577:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_3.cpp:7616:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7617:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7618:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7620:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_3.cpp:7621:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7622:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_3.cpp:7624:  c10::optional<Storage> src__storage_saved =
autograd/generated/VariableType_3.cpp:7625:    src_.has_storage() ? c10::optional<Storage>(src_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7626:  c10::intrusive_ptr<TensorImpl> src__impl_saved;
autograd/generated/VariableType_3.cpp:7664:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7665:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7666:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7668:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_3.cpp:7669:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7670:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_3.cpp:7704:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7705:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7706:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7708:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_3.cpp:7709:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7710:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_3.cpp:7712:  c10::optional<Storage> src__storage_saved =
autograd/generated/VariableType_3.cpp:7713:    src_.has_storage() ? c10::optional<Storage>(src_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7714:  c10::intrusive_ptr<TensorImpl> src__impl_saved;
autograd/generated/VariableType_3.cpp:7750:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7751:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7752:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7754:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_3.cpp:7755:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7756:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_3.cpp:7788:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7789:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7790:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7823:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7824:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7825:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7856:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7857:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7858:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7891:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7892:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7893:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:7928:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:7929:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7930:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:7932:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_3.cpp:7933:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7934:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_3.cpp:7936:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_3.cpp:7937:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7938:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_3.cpp:7972:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:7973:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:7974:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8004:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8005:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8006:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8037:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8038:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8039:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8041:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:8042:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8043:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:8077:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8078:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8079:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8081:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:8082:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8083:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:8104:Tensor slice_Tensor(const Tensor & self, int64_t dim, c10::optional<int64_t> start, c10::optional<int64_t> end, int64_t step) {
autograd/generated/VariableType_3.cpp:8119:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8120:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8121:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8171:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:8172:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8173:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:8175:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8176:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8177:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8179:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:8180:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8181:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:8183:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableType_3.cpp:8184:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8185:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableType_3.cpp:8187:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableType_3.cpp:8188:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8189:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableType_3.cpp:8222:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out_output(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/VariableType_3.cpp:8238:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8239:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8240:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8242:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:8243:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8244:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:8246:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_3.cpp:8247:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8248:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_3.cpp:8250:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableType_3.cpp:8251:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8252:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableType_3.cpp:8254:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableType_3.cpp:8255:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8256:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableType_3.cpp:8288:Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/VariableType_3.cpp:8305:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8306:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8307:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8309:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:8310:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8311:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:8359:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:8360:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8361:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:8363:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8364:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8365:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8367:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:8368:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8369:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:8371:  c10::optional<Storage> columns__storage_saved =
autograd/generated/VariableType_3.cpp:8372:    columns_.has_storage() ? c10::optional<Storage>(columns_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8373:  c10::intrusive_ptr<TensorImpl> columns__impl_saved;
autograd/generated/VariableType_3.cpp:8375:  c10::optional<Storage> ones__storage_saved =
autograd/generated/VariableType_3.cpp:8376:    ones_.has_storage() ? c10::optional<Storage>(ones_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8377:  c10::intrusive_ptr<TensorImpl> ones__impl_saved;
autograd/generated/VariableType_3.cpp:8410:Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
autograd/generated/VariableType_3.cpp:8428:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8429:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8430:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8432:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:8433:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8434:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:8475:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:8476:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8477:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:8479:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8480:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8481:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8483:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:8484:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8485:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:8487:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableType_3.cpp:8488:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8489:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableType_3.cpp:8491:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableType_3.cpp:8492:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8493:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableType_3.cpp:8495:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_3.cpp:8496:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8497:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_3.cpp:8499:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableType_3.cpp:8500:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8501:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableType_3.cpp:8503:  c10::optional<Storage> grad_bias__storage_saved =
autograd/generated/VariableType_3.cpp:8504:    grad_bias_.has_storage() ? c10::optional<Storage>(grad_bias_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8505:  c10::intrusive_ptr<TensorImpl> grad_bias__impl_saved;
autograd/generated/VariableType_3.cpp:8563:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:8564:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8565:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:8567:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8568:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8569:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8571:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_3.cpp:8572:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8573:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_3.cpp:8611:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8612:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8613:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8615:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:8616:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8617:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:8653:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8654:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8655:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8657:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableType_3.cpp:8658:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8659:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableType_3.cpp:8686:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8687:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8688:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8714:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8715:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8716:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8748:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8749:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8750:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8778:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8779:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8780:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8812:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8813:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8814:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8848:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:8851:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_3.cpp:8852:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_3.cpp:8855:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:8856:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8857:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:8897:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8898:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8899:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8939:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8940:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8941:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8979:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:8980:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8981:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:8983:  c10::optional<Storage> e__storage_saved =
autograd/generated/VariableType_3.cpp:8984:    e_.has_storage() ? c10::optional<Storage>(e_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8985:  c10::intrusive_ptr<TensorImpl> e__impl_saved;
autograd/generated/VariableType_3.cpp:8987:  c10::optional<Storage> V__storage_saved =
autograd/generated/VariableType_3.cpp:8988:    V_.has_storage() ? c10::optional<Storage>(V_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:8989:  c10::intrusive_ptr<TensorImpl> V__impl_saved;
autograd/generated/VariableType_3.cpp:9024:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9025:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9026:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9058:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9059:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9060:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9094:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:9095:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9096:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:9098:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_3.cpp:9099:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9100:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_3.cpp:9135:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9136:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9137:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9139:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:9140:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9141:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:9143:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:9144:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9145:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:9188:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:9189:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9190:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:9192:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9193:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9194:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9196:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:9197:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9198:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:9200:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableType_3.cpp:9201:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9202:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableType_3.cpp:9204:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableType_3.cpp:9205:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9206:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableType_3.cpp:9208:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_3.cpp:9209:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9210:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_3.cpp:9212:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableType_3.cpp:9213:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9214:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableType_3.cpp:9216:  c10::optional<Storage> grad_bias__storage_saved =
autograd/generated/VariableType_3.cpp:9217:    grad_bias_.has_storage() ? c10::optional<Storage>(grad_bias_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9218:  c10::intrusive_ptr<TensorImpl> grad_bias__impl_saved;
autograd/generated/VariableType_3.cpp:9259:Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/VariableType_3.cpp:9276:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9277:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9278:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9280:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_3.cpp:9281:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9282:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_3.cpp:9316:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9317:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9318:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9349:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9350:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9351:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9387:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9388:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9389:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9391:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableType_3.cpp:9392:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9393:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableType_3.cpp:9395:  c10::optional<Storage> X__storage_saved =
autograd/generated/VariableType_3.cpp:9396:    X_.has_storage() ? c10::optional<Storage>(X_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9397:  c10::intrusive_ptr<TensorImpl> X__impl_saved;
autograd/generated/VariableType_3.cpp:9399:  c10::optional<Storage> M__storage_saved =
autograd/generated/VariableType_3.cpp:9400:    M_.has_storage() ? c10::optional<Storage>(M_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9401:  c10::intrusive_ptr<TensorImpl> M__impl_saved;
autograd/generated/VariableType_3.cpp:9440:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9441:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9442:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9472:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9473:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9474:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9492:Tensor tril_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableType_3.cpp:9514:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9515:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9516:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9541:Tensor & uniform_(Tensor & self, double from, double to, c10::optional<Generator> generator) {
autograd/generated/VariableType_3.cpp:9552:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9553:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9554:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9586:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9587:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9588:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9606:Tensor upsample_bicubic2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_3.cpp:9619:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:9620:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9621:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:9640:Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_3.cpp:9654:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:9655:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9656:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:9675:Tensor & upsample_bilinear2d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableType_3.cpp:9688:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9689:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9690:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9692:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:9693:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9694:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:9715:Tensor & upsample_nearest1d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales, Tensor & out) {
autograd/generated/VariableType_3.cpp:9728:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9729:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9730:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9732:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:9733:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9734:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:9755:Tensor upsample_trilinear3d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_3.cpp:9768:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:9769:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9770:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:9789:Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_3.cpp:9804:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_3.cpp:9805:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9806:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_3.cpp:9838:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9839:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9840:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9842:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_3.cpp:9843:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9844:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_3.cpp:9876:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9877:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9878:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9906:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9907:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9908:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9936:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:9937:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9938:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:9940:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:9941:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9942:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:9976:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:9977:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:9978:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:10009:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:10010:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:10011:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:10044:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:10045:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:10046:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:10048:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_3.cpp:10049:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:10050:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_3.cpp:10084:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:10085:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:10086:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_3.cpp:10115:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_3.cpp:10116:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_3.cpp:10117:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/TraceType_3.cpp:45:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:48:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:49:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, self2, mat, vec, beta, alpha);
autograd/generated/TraceType_3.cpp:56:std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
autograd/generated/TraceType_3.cpp:83:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:85:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool)>();
autograd/generated/TraceType_3.cpp:86:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:87:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
autograd/generated/TraceType_3.cpp:119:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:122:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:123:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
autograd/generated/TraceType_3.cpp:131:Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:151:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:153:      .typed<Tensor (double, bool, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:154:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:155:      .redispatch<Tensor, double, bool, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, dropout, train, dropout_seed, dtype, layout, device, pin_memory);
autograd/generated/TraceType_3.cpp:184:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:187:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:188:      .redispatch<Tensor, TensorList, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight_arr, weight_stride0, input_size, mode, hidden_size, proj_size, num_layers, batch_first, bidirectional);
autograd/generated/TraceType_3.cpp:195:Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights) {
autograd/generated/TraceType_3.cpp:218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:220:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_3.cpp:221:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:222:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);
autograd/generated/TraceType_3.cpp:248:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:251:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:252:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad, weight, indices, offsets, offset2bag, mode);
autograd/generated/TraceType_3.cpp:259:Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_3.cpp:281:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:283:      .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_3.cpp:284:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:285:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, scales, zero_points, axis, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_3.cpp:311:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:314:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:315:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, self, scale, zero_point, quant_min, quant_max, grad_factor);
autograd/generated/TraceType_3.cpp:339:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:342:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:343:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, normalization, forward);
autograd/generated/TraceType_3.cpp:367:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:370:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:371:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim, normalization, last_dim_size);
autograd/generated/TraceType_3.cpp:395:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:398:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:399:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, normalization, onesided);
autograd/generated/TraceType_3.cpp:420:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:423:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:424:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_3.cpp:432:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:435:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:436:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:455:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:458:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:459:      .redispatch<std::vector<Tensor>, TensorList, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, input, tensor1, tensor2, value);
autograd/generated/TraceType_3.cpp:483:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:486:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:487:      .redispatch<std::vector<Tensor>, TensorList, TensorList, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, input, tensor1, tensor2, scalars);
autograd/generated/TraceType_3.cpp:495:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:498:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:499:      .redispatch<void, TensorList, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceType_3.cpp:502:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:505:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:506:      .redispatch<void, TensorList, TensorList, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, scalars);
autograd/generated/TraceType_3.cpp:522:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:525:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:526:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_3.cpp:534:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:537:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:538:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:554:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:557:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:558:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_3.cpp:566:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:569:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:570:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:586:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:589:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:590:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_3.cpp:598:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:601:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:602:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:618:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:621:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:622:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_3.cpp:630:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:633:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:634:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:651:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:654:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:655:      .redispatch<std::vector<Tensor>, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors, scalar);
autograd/generated/TraceType_3.cpp:678:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:681:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:682:      .redispatch<std::vector<Tensor>, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors1, tensors2, alpha);
autograd/generated/TraceType_3.cpp:704:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:707:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:708:      .redispatch<std::vector<Tensor>, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, tensors, scalars);
autograd/generated/TraceType_3.cpp:716:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:719:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:720:      .redispatch<void, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, scalar);
autograd/generated/TraceType_3.cpp:723:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:726:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:727:      .redispatch<void, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_3.cpp:730:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:733:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:734:      .redispatch<void, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, scalars);
autograd/generated/TraceType_3.cpp:757:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:760:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:761:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceType_3.cpp:790:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:793:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:794:      .redispatch<Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, infos_lu, infos_getri);
autograd/generated/TraceType_3.cpp:818:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:821:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:822:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, mode);
autograd/generated/TraceType_3.cpp:851:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:854:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:855:      .redispatch<Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, infos);
autograd/generated/TraceType_3.cpp:879:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:882:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:883:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, dim, self);
autograd/generated/TraceType_3.cpp:906:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:909:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:910:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, LU_data, LU_pivots);
autograd/generated/TraceType_3.cpp:934:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:937:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:938:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, axis);
autograd/generated/TraceType_3.cpp:960:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:963:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:964:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, shape);
autograd/generated/TraceType_3.cpp:988:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:991:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:992:      .redispatch<Tensor, const Tensor &, IntArrayRef, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad, input_size, batch_sizes, batch_first);
autograd/generated/TraceType_3.cpp:1017:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1020:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1021:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, ScalarType>(op, c10::DispatchKey::Tracer, weight, mask, compressed_indices_dtype);
autograd/generated/TraceType_3.cpp:1043:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1046:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1047:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:1054:std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_3.cpp:1075:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1077:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceType_3.cpp:1078:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1079:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, quasi, n, sobolstate, dimension, num_generated, dtype);
autograd/generated/TraceType_3.cpp:1104:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1107:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1108:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, A);
autograd/generated/TraceType_3.cpp:1131:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1134:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1135:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, t, mask_indices);
autograd/generated/TraceType_3.cpp:1163:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1166:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1167:      .redispatch<Tensor &, TensorList, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceType_3.cpp:1189:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1192:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1193:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, output);
autograd/generated/TraceType_3.cpp:1219:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1222:  std::tie(U, S, V) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1223:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, some, compute_uv);
autograd/generated/TraceType_3.cpp:1232:Tensor _test_optional_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
autograd/generated/TraceType_3.cpp:1247:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1249:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceType_3.cpp:1250:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1251:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, values, addends);
autograd/generated/TraceType_3.cpp:1276:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1279:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1280:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, sorted, return_inverse);
autograd/generated/TraceType_3.cpp:1308:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1311:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1312:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, sorted, return_inverse, return_counts);
autograd/generated/TraceType_3.cpp:1322:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1325:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1326:      .redispatch<void, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, indices, values, size);
autograd/generated/TraceType_3.cpp:1348:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1351:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1352:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_w, saved_v, saved_g, saved_norms, dim);
autograd/generated/TraceType_3.cpp:1374:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1377:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1378:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:1404:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1407:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1408:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:1430:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1433:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1434:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceType_3.cpp:1458:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1461:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1462:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceType_3.cpp:1492:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1495:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1496:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, out, indices);
autograd/generated/TraceType_3.cpp:1522:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1525:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1526:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceType_3.cpp:1556:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1559:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1560:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceType_3.cpp:1590:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1593:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1594:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value, out);
autograd/generated/TraceType_3.cpp:1625:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1628:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1629:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, mat, vec, beta, alpha, out);
autograd/generated/TraceType_3.cpp:1652:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1655:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1656:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_3.cpp:1679:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1682:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1683:      .redispatch<Tensor, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_3.cpp:1704:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1707:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1708:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:1731:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1734:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1735:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_3.cpp:1762:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1765:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1766:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:1789:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1792:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1793:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_3.cpp:1816:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1819:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1820:      .redispatch<Tensor, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_3.cpp:1841:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1844:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1845:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:1872:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1875:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1876:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:1903:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1906:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1907:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:1928:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1931:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1932:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:1958:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1961:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1962:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:1969:Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceType_3.cpp:1985:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1987:      .typed<Tensor (const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceType_3.cpp:1988:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:1989:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_3.cpp:1996:Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/TraceType_3.cpp:2013:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2015:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>)>();
autograd/generated/TraceType_3.cpp:2016:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2017:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, size, stride, storage_offset);
autograd/generated/TraceType_3.cpp:2024:Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/TraceType_3.cpp:2046:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2048:      .typed<Tensor & (Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>)>();
autograd/generated/TraceType_3.cpp:2049:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2050:      .redispatch<Tensor &, Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, size, stride, storage_offset);
autograd/generated/TraceType_3.cpp:2077:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2080:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2081:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:2088:Tensor batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
autograd/generated/TraceType_3.cpp:2110:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2112:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool)>();
autograd/generated/TraceType_3.cpp:2113:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2114:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
autograd/generated/TraceType_3.cpp:2121:Tensor batch_norm_elemt(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps) {
autograd/generated/TraceType_3.cpp:2140:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2142:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double)>();
autograd/generated/TraceType_3.cpp:2143:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2144:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double>(op, c10::DispatchKey::Tracer, input, weight, bias, mean, invstd, eps);
autograd/generated/TraceType_3.cpp:2151:Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const c10::optional<Tensor> & bias) {
autograd/generated/TraceType_3.cpp:2168:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2170:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_3.cpp:2171:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2172:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input1, input2, weight, bias);
autograd/generated/TraceType_3.cpp:2179:Tensor & binary_cross_entropy_out_out(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/TraceType_3.cpp:2202:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2204:      .typed<Tensor & (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, Tensor &)>();
autograd/generated/TraceType_3.cpp:2205:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2206:      .redispatch<Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, out);
autograd/generated/TraceType_3.cpp:2213:Tensor binomial(const Tensor & count, const Tensor & prob, c10::optional<Generator> generator) {
autograd/generated/TraceType_3.cpp:2229:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2231:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceType_3.cpp:2232:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2233:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, count, prob, generator);
autograd/generated/TraceType_3.cpp:2261:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2264:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2265:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:2293:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2296:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2297:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:2325:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2328:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2329:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:2357:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2360:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2361:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:2382:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2385:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2386:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_3.cpp:2394:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2397:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2398:      .redispatch<bool, ScalarType, ScalarType>(op, c10::DispatchKey::Tracer, from, to);
autograd/generated/TraceType_3.cpp:2415:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2418:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2419:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:2445:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2448:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2449:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:2471:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2474:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2475:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, groups);
autograd/generated/TraceType_3.cpp:2504:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2507:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2508:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, input2, upper, out);
autograd/generated/TraceType_3.cpp:2536:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2539:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2540:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, min, out);
autograd/generated/TraceType_3.cpp:2547:Tensor & clip_out_out(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max, Tensor & out) {
autograd/generated/TraceType_3.cpp:2569:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2571:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>, Tensor &)>();
autograd/generated/TraceType_3.cpp:2572:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2573:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>, Tensor &>(op, c10::DispatchKey::Tracer, self, min, max, out);
autograd/generated/TraceType_3.cpp:2598:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2601:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2602:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, kernel_size, dilation, padding, stride);
autograd/generated/TraceType_3.cpp:2623:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2626:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2627:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_3.cpp:2650:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2653:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2654:      .redispatch<Tensor, const Tensor &, IntArrayRef, Scalar>(op, c10::DispatchKey::Tracer, self, pad, value);
autograd/generated/TraceType_3.cpp:2661:Tensor conv2d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
autograd/generated/TraceType_3.cpp:2662:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2664:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
autograd/generated/TraceType_3.cpp:2665:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2666:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, groups);
autograd/generated/TraceType_3.cpp:2669:Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
autograd/generated/TraceType_3.cpp:2670:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2672:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>();
autograd/generated/TraceType_3.cpp:2673:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2674:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, output_padding, groups, dilation);
autograd/generated/TraceType_3.cpp:2698:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2701:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2702:      .redispatch<Tensor &, Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, src, non_blocking);
autograd/generated/TraceType_3.cpp:2729:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2732:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2733:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:2740:Tensor & cross_out_out(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim, Tensor & out) {
autograd/generated/TraceType_3.cpp:2762:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2764:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceType_3.cpp:2765:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2766:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, self, other, dim, out);
autograd/generated/TraceType_3.cpp:2793:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2796:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2797:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
autograd/generated/TraceType_3.cpp:2824:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2827:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2828:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
autograd/generated/TraceType_3.cpp:2853:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2856:  auto grad_theta =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2857:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad, N, C, H, W);
autograd/generated/TraceType_3.cpp:2890:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2893:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2894:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool, std::array<bool,2>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32, output_mask);
autograd/generated/TraceType_3.cpp:2925:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2928:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2929:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceType_3.cpp:2936:Tensor cudnn_convolution_transpose_deprecated(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceType_3.cpp:2959:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2961:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceType_3.cpp:2962:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2963:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_3.cpp:2992:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2995:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:2996:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_3.cpp:3026:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3029:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3030:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceType_3.cpp:3059:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3062:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3063:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, values, indices);
autograd/generated/TraceType_3.cpp:3093:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3096:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3097:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, values, indices);
autograd/generated/TraceType_3.cpp:3121:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3124:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3125:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad, input, dim);
autograd/generated/TraceType_3.cpp:3147:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3150:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3151:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, offset);
autograd/generated/TraceType_3.cpp:3158:Tensor & diff_out_out(const Tensor & self, int64_t n, int64_t dim, const c10::optional<Tensor> & prepend, const c10::optional<Tensor> & append, Tensor & out) {
autograd/generated/TraceType_3.cpp:3182:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3184:      .typed<Tensor & (const Tensor &, int64_t, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &, Tensor &)>();
autograd/generated/TraceType_3.cpp:3185:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3186:      .redispatch<Tensor &, const Tensor &, int64_t, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, prepend, append, out);
autograd/generated/TraceType_3.cpp:3208:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3211:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3212:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:3235:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3238:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3239:      .redispatch<Tensor, const Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceType_3.cpp:3261:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3264:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3265:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:3288:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3291:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3292:      .redispatch<Tensor, const Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceType_3.cpp:3319:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3322:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3323:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:3351:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3354:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3355:      .redispatch<Tensor &, Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceType_3.cpp:3382:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3385:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3386:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:3414:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3417:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3418:      .redispatch<Tensor &, Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, other, rounding_mode);
autograd/generated/TraceType_3.cpp:3446:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3449:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3450:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:3479:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3482:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3483:      .redispatch<Tensor &, const Tensor &, const Tensor &, std::string, Tensor &>(op, c10::DispatchKey::Tracer, self, other, rounding_mode, out);
autograd/generated/TraceType_3.cpp:3510:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3513:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3514:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/generated/TraceType_3.cpp:3543:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3546:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3547:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, eigenvectors, e, v);
autograd/generated/TraceType_3.cpp:3574:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3577:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3578:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
autograd/generated/TraceType_3.cpp:3585:Tensor & empty_out_out(IntArrayRef size, c10::optional<MemoryFormat> memory_format, Tensor & out) {
autograd/generated/TraceType_3.cpp:3609:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3611:      .typed<Tensor & (IntArrayRef, c10::optional<MemoryFormat>, Tensor &)>();
autograd/generated/TraceType_3.cpp:3612:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3613:      .redispatch<Tensor &, IntArrayRef, c10::optional<MemoryFormat>, Tensor &>(op, c10::DispatchKey::Tracer, size, memory_format, out);
autograd/generated/TraceType_3.cpp:3641:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3644:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3645:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:3673:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3676:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3677:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:3698:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3701:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3702:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:3723:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3726:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3727:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:3753:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3756:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3757:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:3783:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3786:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3787:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:3794:Tensor eye(int64_t n, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:3812:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3814:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:3815:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3816:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, dtype, layout, device, pin_memory);
autograd/generated/TraceType_3.cpp:3823:Tensor eye_m(int64_t n, int64_t m, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:3842:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3844:      .typed<Tensor (int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:3845:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3846:      .redispatch<Tensor, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, m, dtype, layout, device, pin_memory);
autograd/generated/TraceType_3.cpp:3868:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3871:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3872:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, mask);
autograd/generated/TraceType_3.cpp:3879:Tensor & fft_hfft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_3.cpp:3902:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3904:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_3.cpp:3905:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3906:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceType_3.cpp:3913:Tensor & fft_ihfft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_3.cpp:3936:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3938:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_3.cpp:3939:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3940:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceType_3.cpp:3947:Tensor & fft_irfft2_out_out(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_3.cpp:3970:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3972:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_3.cpp:3973:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:3974:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceType_3.cpp:3981:Tensor & fft_irfft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_3.cpp:4004:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4006:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_3.cpp:4007:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4008:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceType_3.cpp:4015:Tensor & fft_irfftn_out_out(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_3.cpp:4038:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4040:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_3.cpp:4041:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4042:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceType_3.cpp:4049:Tensor & fft_rfft2_out_out(const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_3.cpp:4072:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4074:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_3.cpp:4075:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4076:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceType_3.cpp:4083:Tensor & fft_rfft_out_out(const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_3.cpp:4106:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4108:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_3.cpp:4109:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4110:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, int64_t, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, n, dim, norm, out);
autograd/generated/TraceType_3.cpp:4141:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4144:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4145:      .redispatch<Tensor &, int64_t, double, Tensor &>(op, c10::DispatchKey::Tracer, n, d, out);
autograd/generated/TraceType_3.cpp:4152:Tensor & fft_rfftn_out_out(const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm, Tensor & out) {
autograd/generated/TraceType_3.cpp:4175:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4177:      .typed<Tensor & (const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &)>();
autograd/generated/TraceType_3.cpp:4178:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4179:      .redispatch<Tensor &, const Tensor &, c10::optional<IntArrayRef>, c10::optional<IntArrayRef>, c10::optional<std::string>, Tensor &>(op, c10::DispatchKey::Tracer, self, s, dim, norm, out);
autograd/generated/TraceType_3.cpp:4203:          jit::tracer::addInputs(node, "options", c10::optional<ScalarType>());
autograd/generated/TraceType_3.cpp:4204:          jit::tracer::addInputs(node, "options", layout_or_default(c10::nullopt));
autograd/generated/TraceType_3.cpp:4205:          jit::tracer::addInputs(node, "options", device_or_default(c10::nullopt));
autograd/generated/TraceType_3.cpp:4206:          jit::tracer::addInputs(node, "options", pinned_memory_or_default(c10::nullopt));
autograd/generated/TraceType_3.cpp:4207:          c10::optional<MemoryFormat> memory_format = c10::MemoryFormat::Preserve;
autograd/generated/TraceType_3.cpp:4216:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4219:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4220:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, value);
autograd/generated/TraceType_3.cpp:4244:          jit::tracer::addInputs(node, "options", c10::optional<ScalarType>());
autograd/generated/TraceType_3.cpp:4245:          jit::tracer::addInputs(node, "options", layout_or_default(c10::nullopt));
autograd/generated/TraceType_3.cpp:4246:          jit::tracer::addInputs(node, "options", device_or_default(c10::nullopt));
autograd/generated/TraceType_3.cpp:4247:          jit::tracer::addInputs(node, "options", pinned_memory_or_default(c10::nullopt));
autograd/generated/TraceType_3.cpp:4248:          c10::optional<MemoryFormat> memory_format = c10::MemoryFormat::Preserve;
autograd/generated/TraceType_3.cpp:4257:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4260:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4261:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, value);
autograd/generated/TraceType_3.cpp:4283:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4286:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4287:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:4312:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4315:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4316:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, output_size, indices);
autograd/generated/TraceType_3.cpp:4342:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4345:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4346:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, output_size, random_samples);
autograd/generated/TraceType_3.cpp:4378:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4381:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4382:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, output_size, indices, grad_input);
autograd/generated/TraceType_3.cpp:4410:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4413:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4414:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:4442:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4445:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4446:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:4469:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4472:  std::tie(a, tau) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4473:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:4496:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4499:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4500:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, vec2);
autograd/generated/TraceType_3.cpp:4522:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4525:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4526:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_3.cpp:4555:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4558:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4559:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, dim, grad_input);
autograd/generated/TraceType_3.cpp:4584:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4587:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4588:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceType_3.cpp:4613:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4616:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4617:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceType_3.cpp:4645:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4648:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4649:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:4677:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4680:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4681:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:4702:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4705:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4706:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:4732:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4735:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4736:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:4757:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4760:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4761:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:4787:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4790:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4791:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:4815:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4818:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4819:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, grad_output, self, min_val, max_val);
autograd/generated/TraceType_3.cpp:4849:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4852:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4853:      .redispatch<Tensor &, const Tensor &, int64_t, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, bins, min, max, out);
autograd/generated/TraceType_3.cpp:4881:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4884:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4885:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, mat1, mat2, out);
autograd/generated/TraceType_3.cpp:4906:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4909:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4910:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_3.cpp:4938:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4941:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4942:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:4963:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4966:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4967:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:4993:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4996:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:4997:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:5025:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5028:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5029:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:5055:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5058:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5059:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, input_size, kernel_size, dilation, padding, stride);
autograd/generated/TraceType_3.cpp:5083:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5086:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5087:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceType_3.cpp:5111:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5114:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5115:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceType_3.cpp:5144:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5147:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5148:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, source);
autograd/generated/TraceType_3.cpp:5170:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5173:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5174:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, self);
autograd/generated/TraceType_3.cpp:5201:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5204:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5205:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:5213:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5216:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5217:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:5220:Tensor kaiser_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:5238:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5240:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:5241:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5242:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceType_3.cpp:5249:Tensor kaiser_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:5268:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5270:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:5271:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5272:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceType_3.cpp:5279:Tensor kaiser_window_beta(int64_t window_length, bool periodic, double beta, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:5299:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5301:      .typed<Tensor (int64_t, bool, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:5302:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5303:      .redispatch<Tensor, int64_t, bool, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, beta, dtype, layout, device, pin_memory);
autograd/generated/TraceType_3.cpp:5327:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5330:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5331:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, target, reduction, log_target);
autograd/generated/TraceType_3.cpp:5357:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5360:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5361:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, self, k, dim, keepdim);
autograd/generated/TraceType_3.cpp:5388:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5391:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5392:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, Dimname, bool>(op, c10::DispatchKey::Tracer, self, k, dim, keepdim);
autograd/generated/TraceType_3.cpp:5421:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5424:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5425:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:5453:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5456:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5457:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:5485:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5488:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5489:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, negative_slope, out);
autograd/generated/TraceType_3.cpp:5517:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5520:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5521:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:5549:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5552:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5553:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:5574:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5577:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5578:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:5604:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5607:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5608:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:5629:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5632:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5633:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:5662:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5665:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5666:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, std::string, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, UPLO, eigvals, eigvecs);
autograd/generated/TraceType_3.cpp:5694:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5697:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5698:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:5722:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5725:  std::tie(Q, R) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5726:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, mode);
autograd/generated/TraceType_3.cpp:5755:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5758:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5759:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, input, other, out);
autograd/generated/TraceType_3.cpp:5790:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5793:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5794:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, bool, bool, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, full_matrices, compute_uv, U, S, V);
autograd/generated/TraceType_3.cpp:5823:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5826:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5827:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:5848:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5851:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5852:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:5878:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5881:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5882:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:5904:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5907:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5908:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:5935:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5938:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5939:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:5960:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5963:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5964:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:5990:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5993:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:5994:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:6001:Tensor logit(const Tensor & self, c10::optional<double> eps) {
autograd/generated/TraceType_3.cpp:6016:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6018:      .typed<Tensor (const Tensor &, c10::optional<double>)>();
autograd/generated/TraceType_3.cpp:6019:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6020:      .redispatch<Tensor, const Tensor &, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, eps);
autograd/generated/TraceType_3.cpp:6027:Tensor & logit_(Tensor & self, c10::optional<double> eps) {
autograd/generated/TraceType_3.cpp:6047:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6049:      .typed<Tensor & (Tensor &, c10::optional<double>)>();
autograd/generated/TraceType_3.cpp:6050:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6051:      .redispatch<Tensor &, Tensor &, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, eps);
autograd/generated/TraceType_3.cpp:6058:Tensor & logit_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps, Tensor & grad_input) {
autograd/generated/TraceType_3.cpp:6080:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6082:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_3.cpp:6083:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6084:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, eps, grad_input);
autograd/generated/TraceType_3.cpp:6116:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6119:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6120:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
autograd/generated/TraceType_3.cpp:6154:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6157:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6158:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool>(op, c10::DispatchKey::Tracer, data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
autograd/generated/TraceType_3.cpp:6188:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6191:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6192:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:6220:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6223:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6224:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:6247:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6250:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6251:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, LU_data, LU_pivots);
autograd/generated/TraceType_3.cpp:6276:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6279:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6280:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, input1, input2, target, margin, reduction);
autograd/generated/TraceType_3.cpp:6308:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6311:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6312:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, mask, out);
autograd/generated/TraceType_3.cpp:6334:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6337:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6338:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, n);
autograd/generated/TraceType_3.cpp:6364:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6367:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6368:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_3.cpp:6396:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6399:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6400:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
autograd/generated/TraceType_3.cpp:6428:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6431:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6432:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_3.cpp:6467:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6470:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6471:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
autograd/generated/TraceType_3.cpp:6501:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6504:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6505:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, min, min_indices);
autograd/generated/TraceType_3.cpp:6536:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6539:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6540:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, min, min_indices);
autograd/generated/TraceType_3.cpp:6569:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6572:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6573:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:6601:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6604:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6605:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:6634:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6637:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6638:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_3.cpp:6671:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6674:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6675:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
autograd/generated/TraceType_3.cpp:6706:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6709:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6710:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_3.cpp:6717:std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
autograd/generated/TraceType_3.cpp:6755:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6757:      .typed<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &, const Tensor &, std::array<bool,4>)>();
autograd/generated/TraceType_3.cpp:6758:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6759:      .redispatch<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>>, const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &, const Tensor &, std::array<bool,4>>(op, c10::DispatchKey::Tracer, input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
autograd/generated/TraceType_3.cpp:6788:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6791:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6792:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad_output, input, weight, bias_defined);
autograd/generated/TraceType_3.cpp:6819:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6822:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6823:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_3.cpp:6845:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6848:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6849:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mat2);
autograd/generated/TraceType_3.cpp:6872:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6875:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6876:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, source, destination);
autograd/generated/TraceType_3.cpp:6899:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6902:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6903:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, source, destination);
autograd/generated/TraceType_3.cpp:6932:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6935:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6936:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, out);
autograd/generated/TraceType_3.cpp:6964:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6967:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6968:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_3.cpp:6975:Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/TraceType_3.cpp:6995:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6997:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceType_3.cpp:6998:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:6999:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, p, margin, weight, reduction);
autograd/generated/TraceType_3.cpp:7028:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7031:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7032:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, out);
autograd/generated/TraceType_3.cpp:7062:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7065:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7066:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceType_3.cpp:7097:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7100:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7101:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceType_3.cpp:7109:Tensor & nanquantile_out_scalar_out(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceType_3.cpp:7132:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7134:      .typed<Tensor & (const Tensor &, double, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceType_3.cpp:7135:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7136:      .redispatch<Tensor &, const Tensor &, double, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim, out);
autograd/generated/TraceType_3.cpp:7143:Tensor & nanquantile_out_out(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceType_3.cpp:7166:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7168:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceType_3.cpp:7169:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7170:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim, out);
autograd/generated/TraceType_3.cpp:7177:Tensor nansum(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_3.cpp:7192:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7194:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceType_3.cpp:7195:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7196:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceType_3.cpp:7203:Tensor nansum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_3.cpp:7220:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7222:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_3.cpp:7223:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7224:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceType_3.cpp:7248:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7251:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7252:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim, start, length);
autograd/generated/TraceType_3.cpp:7259:std::tuple<Tensor,Tensor,Tensor> native_group_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps) {
autograd/generated/TraceType_3.cpp:7283:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7285:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, double)>();
autograd/generated/TraceType_3.cpp:7286:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7287:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, input, weight, bias, N, C, HxW, group, eps);
autograd/generated/TraceType_3.cpp:7296:std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, IntArrayRef normalized_shape, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, std::array<bool,3> output_mask) {
autograd/generated/TraceType_3.cpp:7320:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7322:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, std::array<bool,3>)>();
autograd/generated/TraceType_3.cpp:7323:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7324:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_out, input, normalized_shape, mean, rstd, weight, bias, output_mask);
autograd/generated/TraceType_3.cpp:7353:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7356:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7357:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:7364:Tensor new_zeros(const Tensor & self, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:7383:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7385:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:7386:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7387:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, self, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_3.cpp:7408:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7411:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7412:      .redispatch<std::vector<Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:7439:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7442:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7443:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:7450:Tensor & norm_out_dtype_out(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype, Tensor & out) {
autograd/generated/TraceType_3.cpp:7474:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7476:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType, Tensor &)>();
autograd/generated/TraceType_3.cpp:7477:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7478:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype, out);
autograd/generated/TraceType_3.cpp:7485:Tensor & norm_out_out(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/TraceType_3.cpp:7508:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7510:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, Tensor &)>();
autograd/generated/TraceType_3.cpp:7511:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7512:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, out);
autograd/generated/TraceType_3.cpp:7519:Tensor & norm_out_names_dtype_out(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype, Tensor & out) {
autograd/generated/TraceType_3.cpp:7543:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7545:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType, Tensor &)>();
autograd/generated/TraceType_3.cpp:7546:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7547:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype, out);
autograd/generated/TraceType_3.cpp:7554:Tensor & norm_out_names_out(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, Tensor & out) {
autograd/generated/TraceType_3.cpp:7577:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7579:      .typed<Tensor & (const Tensor &, c10::optional<Scalar>, DimnameList, bool, Tensor &)>();
autograd/generated/TraceType_3.cpp:7580:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7581:      .redispatch<Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, out);
autograd/generated/TraceType_3.cpp:7588:Tensor & normal_out_Tensor_float_out(const Tensor & mean, double std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_3.cpp:7613:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7615:      .typed<Tensor & (const Tensor &, double, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_3.cpp:7616:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7617:      .redispatch<Tensor &, const Tensor &, double, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, mean, std, generator, out);
autograd/generated/TraceType_3.cpp:7624:Tensor & normal_out_float_Tensor_out(double mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_3.cpp:7649:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7651:      .typed<Tensor & (double, const Tensor &, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_3.cpp:7652:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7653:      .redispatch<Tensor &, double, const Tensor &, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, mean, std, generator, out);
autograd/generated/TraceType_3.cpp:7660:Tensor & normal_out_Tensor_Tensor_out(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_3.cpp:7685:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7687:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_3.cpp:7688:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7689:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, mean, std, generator, out);
autograd/generated/TraceType_3.cpp:7696:Tensor & normal_out_float_float_out(double mean, double std, IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_3.cpp:7722:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7724:      .typed<Tensor & (double, double, IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_3.cpp:7725:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7726:      .redispatch<Tensor &, double, double, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, mean, std, size, generator, out);
autograd/generated/TraceType_3.cpp:7748:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7751:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7752:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:7774:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7777:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7778:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:7805:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7808:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7809:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:7836:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7839:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7840:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:7861:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7864:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7865:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:7887:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7890:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7891:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, num_classes);
autograd/generated/TraceType_3.cpp:7898:Tensor ones_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_3.cpp:7917:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7919:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_3.cpp:7920:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7921:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_3.cpp:7949:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7952:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7953:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, vec2, out);
autograd/generated/TraceType_3.cpp:7975:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7978:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:7979:      .redispatch<Tensor, const Tensor &, double>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceType_3.cpp:8004:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8007:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8008:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight);
autograd/generated/TraceType_3.cpp:8017:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8020:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8021:      .redispatch<double, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:8043:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8046:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8047:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_3.cpp:8081:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8084:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8085:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
autograd/generated/TraceType_3.cpp:8092:Tensor randint_like(const Tensor & self, int64_t high, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_3.cpp:8112:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8114:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_3.cpp:8115:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8116:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, high, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_3.cpp:8123:Tensor randint_like_low_dtype(const Tensor & self, int64_t low, int64_t high, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_3.cpp:8144:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8146:      .typed<Tensor (const Tensor &, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_3.cpp:8147:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8148:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, low, high, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_3.cpp:8169:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8172:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8173:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:8203:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8206:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8207:      .redispatch<Tensor &, const Tensor &, Scalar, int64_t, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, p, dim, maxnorm, out);
autograd/generated/TraceType_3.cpp:8230:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8233:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8234:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceType_3.cpp:8256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8259:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8260:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceType_3.cpp:8289:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8292:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8293:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceType_3.cpp:8314:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8317:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8318:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_3.cpp:8342:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8345:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8346:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceType_3.cpp:8370:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8373:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8374:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_3.cpp:8398:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8401:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8402:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceType_3.cpp:8426:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8429:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8430:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_3.cpp:8459:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8462:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8463:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index, src);
autograd/generated/TraceType_3.cpp:8492:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8495:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8496:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, dim, index, value);
autograd/generated/TraceType_3.cpp:8526:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8529:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8530:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, dim, index, src, reduce);
autograd/generated/TraceType_3.cpp:8560:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8563:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8564:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, Scalar, std::string>(op, c10::DispatchKey::Tracer, self, dim, index, value, reduce);
autograd/generated/TraceType_3.cpp:8585:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8588:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8589:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:8615:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8618:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8619:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:8640:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8643:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8644:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:8670:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8673:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8674:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:8702:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8705:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8706:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, grad_input);
autograd/generated/TraceType_3.cpp:8727:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8730:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8731:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:8757:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8760:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8761:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:8788:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8791:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8792:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:8819:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8822:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8823:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_3.cpp:8831:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8834:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8835:      .redispatch<int64_t, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_3.cpp:8839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8842:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8843:      .redispatch<int64_t, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_3.cpp:8846:Tensor slice_Tensor(const Tensor & self, int64_t dim, c10::optional<int64_t> start, c10::optional<int64_t> end, int64_t step) {
autograd/generated/TraceType_3.cpp:8864:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8866:      .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, int64_t)>();
autograd/generated/TraceType_3.cpp:8867:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8868:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, int64_t>(op, c10::DispatchKey::Tracer, self, dim, start, end, step);
autograd/generated/TraceType_3.cpp:8900:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8903:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8904:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
autograd/generated/TraceType_3.cpp:8913:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out_output(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/TraceType_3.cpp:8940:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8942:      .typed<std::tuple<Tensor &,Tensor &,Tensor &> (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &, Tensor &, Tensor &)>();
autograd/generated/TraceType_3.cpp:8943:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8944:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
autograd/generated/TraceType_3.cpp:8953:Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/TraceType_3.cpp:8973:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8975:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_3.cpp:8976:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:8977:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation);
autograd/generated/TraceType_3.cpp:9011:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9014:  std::tie(grad_input, grad_weight, grad_bias) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9015:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
autograd/generated/TraceType_3.cpp:9024:Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
autograd/generated/TraceType_3.cpp:9045:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9047:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_3.cpp:9048:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9049:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
autograd/generated/TraceType_3.cpp:9087:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9090:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9091:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/TraceType_3.cpp:9115:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9118:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9119:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mat2);
autograd/generated/TraceType_3.cpp:9144:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9147:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9148:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, double>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, beta);
autograd/generated/TraceType_3.cpp:9176:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9179:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9180:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, lambd, out);
autograd/generated/TraceType_3.cpp:9204:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9207:  std::tie(solution, LU) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9208:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, A);
autograd/generated/TraceType_3.cpp:9217:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9220:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9221:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:9246:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9249:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9250:      .redispatch<Tensor &, Tensor &, IntArrayRef, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, size, sparse_dim, dense_dim);
autograd/generated/TraceType_3.cpp:9273:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9276:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9277:      .redispatch<std::vector<Tensor>, const Tensor &, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, split_sizes, dim);
autograd/generated/TraceType_3.cpp:9298:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9301:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9302:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:9328:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9331:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9332:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:9360:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9363:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9364:      .redispatch<Tensor &, TensorList, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceType_3.cpp:9388:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9391:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9392:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceType_3.cpp:9419:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9422:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9423:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceType_3.cpp:9450:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9453:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9454:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, DimnameList, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceType_3.cpp:9481:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9484:  std::tie(U, S, V) =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9485:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, some, compute_uv);
autograd/generated/TraceType_3.cpp:9517:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9520:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9521:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, bool, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, eigenvectors, upper, e, V);
autograd/generated/TraceType_3.cpp:9543:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9546:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9547:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:9573:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9576:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9577:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:9599:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9602:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9603:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output);
autograd/generated/TraceType_3.cpp:9626:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9629:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9630:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, sections, dim);
autograd/generated/TraceType_3.cpp:9653:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9656:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9657:      .redispatch<std::vector<Tensor>, const Tensor &, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, indices, dim);
autograd/generated/TraceType_3.cpp:9680:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9683:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9684:      .redispatch<std::vector<Tensor>, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, tensor_indices_or_sections, dim);
autograd/generated/TraceType_3.cpp:9714:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9717:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9718:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, other, dims_self, dims_other, out);
autograd/generated/TraceType_3.cpp:9725:Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/TraceType_3.cpp:9744:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9746:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_3.cpp:9747:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9748:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding);
autograd/generated/TraceType_3.cpp:9784:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9787:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9788:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/TraceType_3.cpp:9797:Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/TraceType_3.cpp:9817:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9819:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_3.cpp:9820:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9821:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation);
autograd/generated/TraceType_3.cpp:9844:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9847:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9848:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, threshold, value);
autograd/generated/TraceType_3.cpp:9876:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9879:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9880:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, threshold, value);
autograd/generated/TraceType_3.cpp:9902:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9905:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9906:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad, sizes);
autograd/generated/TraceType_3.cpp:9938:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9941:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9942:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, bool, bool, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, A, upper, transpose, unitriangular, X, M);
autograd/generated/TraceType_3.cpp:9965:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9968:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9969:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceType_3.cpp:9996:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:9999:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10000:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceType_3.cpp:10007:Tensor tril_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:10027:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10029:      .typed<Tensor (int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:10030:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10031:      .redispatch<Tensor, int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, row, col, offset, dtype, layout, device, pin_memory);
autograd/generated/TraceType_3.cpp:10055:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10058:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10059:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dimension, size, step);
autograd/generated/TraceType_3.cpp:10066:Tensor & uniform_(Tensor & self, double from, double to, c10::optional<Generator> generator) {
autograd/generated/TraceType_3.cpp:10088:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10090:      .typed<Tensor & (Tensor &, double, double, c10::optional<Generator>)>();
autograd/generated/TraceType_3.cpp:10091:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10092:      .redispatch<Tensor &, Tensor &, double, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, from, to, generator);
autograd/generated/TraceType_3.cpp:10115:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10118:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10119:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, split_size, dim);
autograd/generated/TraceType_3.cpp:10126:Tensor upsample_bicubic2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_3.cpp:10144:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10146:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_3.cpp:10147:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10148:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scale_factors);
autograd/generated/TraceType_3.cpp:10155:Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_3.cpp:10174:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10176:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_3.cpp:10177:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10178:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
autograd/generated/TraceType_3.cpp:10185:Tensor & upsample_bilinear2d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceType_3.cpp:10209:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10211:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_3.cpp:10212:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10213:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_h, scales_w, out);
autograd/generated/TraceType_3.cpp:10220:Tensor & upsample_nearest1d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales, Tensor & out) {
autograd/generated/TraceType_3.cpp:10242:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10244:      .typed<Tensor & (const Tensor &, IntArrayRef, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_3.cpp:10245:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10246:      .redispatch<Tensor &, const Tensor &, IntArrayRef, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, scales, out);
autograd/generated/TraceType_3.cpp:10253:Tensor upsample_trilinear3d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_3.cpp:10271:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10273:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_3.cpp:10274:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10275:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scale_factors);
autograd/generated/TraceType_3.cpp:10282:Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_3.cpp:10302:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10304:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_3.cpp:10305:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10306:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
autograd/generated/TraceType_3.cpp:10331:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10334:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10335:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, grad, dim, indices, sizes, keepdim);
autograd/generated/TraceType_3.cpp:10365:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10368:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10369:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim, out);
autograd/generated/TraceType_3.cpp:10399:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10402:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10403:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim, out);
autograd/generated/TraceType_3.cpp:10425:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10428:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10429:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, size);
autograd/generated/TraceType_3.cpp:10451:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10454:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10455:      .redispatch<Tensor, const Tensor &, ScalarType>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceType_3.cpp:10477:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10480:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10481:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:10503:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10506:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10507:      .redispatch<Tensor, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:10529:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10532:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10533:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:10560:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10563:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10564:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:10591:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10594:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10595:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_3.cpp:10618:          jit::tracer::addInputs(node, "options", c10::optional<ScalarType>());
autograd/generated/TraceType_3.cpp:10619:          jit::tracer::addInputs(node, "options", layout_or_default(c10::nullopt));
autograd/generated/TraceType_3.cpp:10620:          jit::tracer::addInputs(node, "options", device_or_default(c10::nullopt));
autograd/generated/TraceType_3.cpp:10621:          jit::tracer::addInputs(node, "options", pinned_memory_or_default(c10::nullopt));
autograd/generated/TraceType_3.cpp:10622:          c10::optional<MemoryFormat> memory_format = c10::MemoryFormat::Preserve;
autograd/generated/TraceType_3.cpp:10631:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10634:  c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10635:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_3.cpp:10642:Tensor zeros_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:10661:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10663:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:10664:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10665:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory);
autograd/generated/TraceType_3.cpp:10672:Tensor zeros(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_3.cpp:10690:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10692:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_3.cpp:10693:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_3.cpp:10694:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/VariableTypeEverything.cpp:48:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:49:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:50:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:69:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:70:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:71:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:73:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:74:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:75:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:96:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:97:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:98:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:117:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:118:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:119:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:121:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:122:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:123:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:144:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:145:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:146:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:165:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:166:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:167:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:169:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:170:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:171:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:192:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:193:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:194:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:213:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:214:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:215:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:217:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:218:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:219:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:248:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:249:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:250:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:282:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:283:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:284:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:286:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:287:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:288:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:321:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:322:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:323:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:325:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:326:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:327:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:361:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:362:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:363:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:365:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:366:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:367:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:402:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:403:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:404:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:406:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:407:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:408:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:410:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:411:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:412:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:450:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:451:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:452:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:454:  c10::optional<Storage> self2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:455:    self2_.has_storage() ? c10::optional<Storage>(self2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:456:  c10::intrusive_ptr<TensorImpl> self2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:458:  c10::optional<Storage> mat__storage_saved =
autograd/generated/VariableTypeEverything.cpp:459:    mat_.has_storage() ? c10::optional<Storage>(mat_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:460:  c10::intrusive_ptr<TensorImpl> mat__impl_saved;
autograd/generated/VariableTypeEverything.cpp:462:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableTypeEverything.cpp:463:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:464:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableTypeEverything.cpp:503:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:504:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:505:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:537:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:538:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:539:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:564:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:567:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:568:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:571:  c10::optional<Storage> found_inf__storage_saved =
autograd/generated/VariableTypeEverything.cpp:572:    found_inf_.has_storage() ? c10::optional<Storage>(found_inf_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:573:  c10::intrusive_ptr<TensorImpl> found_inf__impl_saved;
autograd/generated/VariableTypeEverything.cpp:575:  c10::optional<Storage> inv_scale__storage_saved =
autograd/generated/VariableTypeEverything.cpp:576:    inv_scale_.has_storage() ? c10::optional<Storage>(inv_scale_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:577:  c10::intrusive_ptr<TensorImpl> inv_scale__impl_saved;
autograd/generated/VariableTypeEverything.cpp:613:  c10::optional<Storage> growth_tracker__storage_saved =
autograd/generated/VariableTypeEverything.cpp:614:    growth_tracker_.has_storage() ? c10::optional<Storage>(growth_tracker_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:615:  c10::intrusive_ptr<TensorImpl> growth_tracker__impl_saved;
autograd/generated/VariableTypeEverything.cpp:617:  c10::optional<Storage> current_scale__storage_saved =
autograd/generated/VariableTypeEverything.cpp:618:    current_scale_.has_storage() ? c10::optional<Storage>(current_scale_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:619:  c10::intrusive_ptr<TensorImpl> current_scale__impl_saved;
autograd/generated/VariableTypeEverything.cpp:621:  c10::optional<Storage> found_inf__storage_saved =
autograd/generated/VariableTypeEverything.cpp:622:    found_inf_.has_storage() ? c10::optional<Storage>(found_inf_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:623:  c10::intrusive_ptr<TensorImpl> found_inf__impl_saved;
autograd/generated/VariableTypeEverything.cpp:666:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:667:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:668:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:670:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:671:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:672:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:708:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:709:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:710:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:712:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:713:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:714:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:716:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:717:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:718:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:752:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:755:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:756:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:794:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:797:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:798:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:801:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:802:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:803:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:842:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableTypeEverything.cpp:843:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:844:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableTypeEverything.cpp:846:  c10::optional<Storage> x1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:847:    x1_.has_storage() ? c10::optional<Storage>(x1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:848:  c10::intrusive_ptr<TensorImpl> x1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:850:  c10::optional<Storage> x2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:851:    x2_.has_storage() ? c10::optional<Storage>(x2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:852:  c10::intrusive_ptr<TensorImpl> x2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:854:  c10::optional<Storage> cdist__storage_saved =
autograd/generated/VariableTypeEverything.cpp:855:    cdist_.has_storage() ? c10::optional<Storage>(cdist_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:856:  c10::intrusive_ptr<TensorImpl> cdist__impl_saved;
autograd/generated/VariableTypeEverything.cpp:884:Tensor _cdist_forward(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
autograd/generated/VariableTypeEverything.cpp:898:  c10::optional<Storage> x1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:899:    x1_.has_storage() ? c10::optional<Storage>(x1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:900:  c10::intrusive_ptr<TensorImpl> x1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:902:  c10::optional<Storage> x2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:903:    x2_.has_storage() ? c10::optional<Storage>(x2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:904:  c10::intrusive_ptr<TensorImpl> x2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:939:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:940:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:941:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:971:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:972:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:973:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:975:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableTypeEverything.cpp:976:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:977:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1002:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1003:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1004:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1030:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1031:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1032:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1034:  c10::optional<Storage> coefficients__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1035:    coefficients_.has_storage() ? c10::optional<Storage>(coefficients_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1036:  c10::intrusive_ptr<TensorImpl> coefficients__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1072:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1073:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1074:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1076:  c10::optional<Storage> coefficients__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1077:    coefficients_.has_storage() ? c10::optional<Storage>(coefficients_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1078:  c10::intrusive_ptr<TensorImpl> coefficients__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1080:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1081:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1082:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1116:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1117:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1118:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1147:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1148:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1149:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1151:  c10::optional<Storage> dst__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1152:    dst_.has_storage() ? c10::optional<Storage>(dst_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1153:  c10::intrusive_ptr<TensorImpl> dst__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1195:  c10::optional<Storage> log_probs__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1196:    log_probs_.has_storage() ? c10::optional<Storage>(log_probs_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1197:  c10::intrusive_ptr<TensorImpl> log_probs__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1199:  c10::optional<Storage> targets__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1200:    targets_.has_storage() ? c10::optional<Storage>(targets_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1201:  c10::intrusive_ptr<TensorImpl> targets__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1241:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1242:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1243:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1245:  c10::optional<Storage> log_probs__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1246:    log_probs_.has_storage() ? c10::optional<Storage>(log_probs_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1247:  c10::intrusive_ptr<TensorImpl> log_probs__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1249:  c10::optional<Storage> targets__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1250:    targets_.has_storage() ? c10::optional<Storage>(targets_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1251:  c10::intrusive_ptr<TensorImpl> targets__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1253:  c10::optional<Storage> neg_log_likelihood__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1254:    neg_log_likelihood_.has_storage() ? c10::optional<Storage>(neg_log_likelihood_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1255:  c10::intrusive_ptr<TensorImpl> neg_log_likelihood__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1257:  c10::optional<Storage> log_alpha__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1258:    log_alpha_.has_storage() ? c10::optional<Storage>(log_alpha_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1259:  c10::intrusive_ptr<TensorImpl> log_alpha__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1305:  c10::optional<Storage> log_probs__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1306:    log_probs_.has_storage() ? c10::optional<Storage>(log_probs_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1307:  c10::intrusive_ptr<TensorImpl> log_probs__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1309:  c10::optional<Storage> targets__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1310:    targets_.has_storage() ? c10::optional<Storage>(targets_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1311:  c10::intrusive_ptr<TensorImpl> targets__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1337:Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableTypeEverything.cpp:1345:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const c10::optional<Tensor> & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) {
autograd/generated/VariableTypeEverything.cpp:1379:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1380:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1381:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1383:  std::vector<c10::optional<Storage>> weight__storage_saved(weight_.size());
autograd/generated/VariableTypeEverything.cpp:1386:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:1387:  std::vector<c10::intrusive_ptr<TensorImpl>> weight__impl_saved(weight_.size());
autograd/generated/VariableTypeEverything.cpp:1390:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1391:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1392:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1429:std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
autograd/generated/VariableTypeEverything.cpp:1451:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1452:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1453:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1455:  std::vector<c10::optional<Storage>> weight__storage_saved(weight_.size());
autograd/generated/VariableTypeEverything.cpp:1458:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:1459:  std::vector<c10::intrusive_ptr<TensorImpl>> weight__impl_saved(weight_.size());
autograd/generated/VariableTypeEverything.cpp:1462:  c10::optional<Storage> weight_buf__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1463:    weight_buf_.has_storage() ? c10::optional<Storage>(weight_buf_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1464:  c10::intrusive_ptr<TensorImpl> weight_buf__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1466:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1467:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1468:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1470:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1471:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1472:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1474:  c10::optional<Storage> reserve__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1475:    reserve_.has_storage() ? c10::optional<Storage>(reserve_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1476:  c10::intrusive_ptr<TensorImpl> reserve__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1542:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1543:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1544:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1546:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1547:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1548:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1550:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1551:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1552:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1576:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1577:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1578:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1580:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1581:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1582:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1584:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1585:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1586:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1615:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1616:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1617:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1649:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1650:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1651:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1653:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1654:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1655:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1686:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1687:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1688:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1720:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1721:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1722:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1724:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1725:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1726:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1750:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1751:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1752:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1770:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1771:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1772:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1799:  c10::optional<Storage> x__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1800:    x_.has_storage() ? c10::optional<Storage>(x_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1801:  c10::intrusive_ptr<TensorImpl> x__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1803:  c10::optional<Storage> alpha__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1804:    alpha_.has_storage() ? c10::optional<Storage>(alpha_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1805:  c10::intrusive_ptr<TensorImpl> alpha__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1807:  c10::optional<Storage> total__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1808:    total_.has_storage() ? c10::optional<Storage>(total_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1809:  c10::intrusive_ptr<TensorImpl> total__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1834:std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/VariableTypeEverything.cpp:1860:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1861:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1862:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1864:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1865:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1866:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1868:  c10::optional<Storage> offsets__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1869:    offsets_.has_storage() ? c10::optional<Storage>(offsets_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1870:  c10::intrusive_ptr<TensorImpl> offsets__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1900:Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<Tensor> & per_sample_weights) {
autograd/generated/VariableTypeEverything.cpp:1915:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1916:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1917:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1919:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1920:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1921:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1923:  c10::optional<Storage> offsets__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1924:    offsets_.has_storage() ? c10::optional<Storage>(offsets_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1925:  c10::intrusive_ptr<TensorImpl> offsets__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1927:  c10::optional<Storage> offset2bag__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1928:    offset2bag_.has_storage() ? c10::optional<Storage>(offset2bag_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1929:  c10::intrusive_ptr<TensorImpl> offset2bag__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1931:  c10::optional<Storage> bag_size__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1932:    bag_size_.has_storage() ? c10::optional<Storage>(bag_size_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1933:  c10::intrusive_ptr<TensorImpl> bag_size__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1935:  c10::optional<Storage> maximum_indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1936:    maximum_indices_.has_storage() ? c10::optional<Storage>(maximum_indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1937:  c10::intrusive_ptr<TensorImpl> maximum_indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1971:std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_forward_only(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/VariableTypeEverything.cpp:1987:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1988:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1989:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1991:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1992:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1993:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:1995:  c10::optional<Storage> offsets__storage_saved =
autograd/generated/VariableTypeEverything.cpp:1996:    offsets_.has_storage() ? c10::optional<Storage>(offsets_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:1997:  c10::intrusive_ptr<TensorImpl> offsets__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2039:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2040:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2041:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2043:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2044:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2045:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2047:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2048:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2049:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2051:  c10::optional<Storage> offsets__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2052:    offsets_.has_storage() ? c10::optional<Storage>(offsets_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2053:  c10::intrusive_ptr<TensorImpl> offsets__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2055:  c10::optional<Storage> offset2bag__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2056:    offset2bag_.has_storage() ? c10::optional<Storage>(offset2bag_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2057:  c10::intrusive_ptr<TensorImpl> offset2bag__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2088:Tensor _empty_affine_quantized(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) {
autograd/generated/VariableTypeEverything.cpp:2096:Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/VariableTypeEverything.cpp:2107:  c10::optional<Storage> scales__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2108:    scales_.has_storage() ? c10::optional<Storage>(scales_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2109:  c10::intrusive_ptr<TensorImpl> scales__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2111:  c10::optional<Storage> zero_points__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2112:    zero_points_.has_storage() ? c10::optional<Storage>(zero_points_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2113:  c10::intrusive_ptr<TensorImpl> zero_points__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2148:  c10::optional<Storage> x1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2149:    x1_.has_storage() ? c10::optional<Storage>(x1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2150:  c10::intrusive_ptr<TensorImpl> x1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2152:  c10::optional<Storage> x2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2153:    x2_.has_storage() ? c10::optional<Storage>(x2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2154:  c10::intrusive_ptr<TensorImpl> x2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2198:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2199:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2200:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2202:  c10::optional<Storage> scale__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2203:    scale_.has_storage() ? c10::optional<Storage>(scale_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2204:  c10::intrusive_ptr<TensorImpl> scale__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2206:  c10::optional<Storage> zero_point__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2207:    zero_point_.has_storage() ? c10::optional<Storage>(zero_point_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2208:  c10::intrusive_ptr<TensorImpl> zero_point__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2251:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2252:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2253:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2255:  c10::optional<Storage> scale__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2256:    scale_.has_storage() ? c10::optional<Storage>(scale_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2257:  c10::intrusive_ptr<TensorImpl> scale__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2259:  c10::optional<Storage> zero_point__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2260:    zero_point_.has_storage() ? c10::optional<Storage>(zero_point_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2261:  c10::intrusive_ptr<TensorImpl> zero_point__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2299:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2300:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2301:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2332:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2333:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2334:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2336:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2337:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2338:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2371:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2372:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2373:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2405:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2406:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2407:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2409:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2410:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2411:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2446:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2447:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2448:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2479:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2480:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2481:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2483:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:2484:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:2485:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:2516:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:2519:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2520:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:2547:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2550:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2551:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2580:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:2583:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2584:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:2611:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2614:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2615:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2644:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:2647:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2648:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:2683:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:2686:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2687:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:2690:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:2693:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2694:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:2736:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:2739:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2740:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:2767:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2770:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2771:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2794:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2797:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2798:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2801:  std::vector<c10::optional<Storage>> other__storage_saved(other_.size());
autograd/generated/VariableTypeEverything.cpp:2804:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2805:  std::vector<c10::intrusive_ptr<TensorImpl>> other__impl_saved(other_.size());
autograd/generated/VariableTypeEverything.cpp:2835:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2838:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2839:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:2870:  std::vector<c10::optional<Storage>> input__storage_saved(input_.size());
autograd/generated/VariableTypeEverything.cpp:2873:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2874:  std::vector<c10::intrusive_ptr<TensorImpl>> input__impl_saved(input_.size());
autograd/generated/VariableTypeEverything.cpp:2877:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:2880:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2881:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:2884:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:2887:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2888:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:2940:  std::vector<c10::optional<Storage>> input__storage_saved(input_.size());
autograd/generated/VariableTypeEverything.cpp:2943:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2944:  std::vector<c10::intrusive_ptr<TensorImpl>> input__impl_saved(input_.size());
autograd/generated/VariableTypeEverything.cpp:2947:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:2950:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2951:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:2954:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:2957:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:2958:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3003:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3006:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3007:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3010:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3013:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3014:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3017:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3020:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3021:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3061:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3064:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3065:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3068:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3071:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3072:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3075:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3078:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3079:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3126:  std::vector<c10::optional<Storage>> input__storage_saved(input_.size());
autograd/generated/VariableTypeEverything.cpp:3129:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3130:  std::vector<c10::intrusive_ptr<TensorImpl>> input__impl_saved(input_.size());
autograd/generated/VariableTypeEverything.cpp:3133:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3136:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3137:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3140:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3143:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3144:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3196:  std::vector<c10::optional<Storage>> input__storage_saved(input_.size());
autograd/generated/VariableTypeEverything.cpp:3199:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3200:  std::vector<c10::intrusive_ptr<TensorImpl>> input__impl_saved(input_.size());
autograd/generated/VariableTypeEverything.cpp:3203:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3206:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3207:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3210:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3213:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3214:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3259:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3262:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3263:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3266:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3269:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3270:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3273:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3276:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3277:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3317:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3320:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3321:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3324:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3327:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3328:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableTypeEverything.cpp:3331:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3334:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3335:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableTypeEverything.cpp:3380:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3383:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3384:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3411:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3414:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3415:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3444:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3447:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3448:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3475:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3478:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3479:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3508:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3511:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3512:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3539:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3542:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3543:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3572:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3575:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3576:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3603:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3606:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3607:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3636:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3639:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3640:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3667:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3670:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3671:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3700:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3703:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3704:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3739:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:3742:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3743:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:3746:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:3749:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3750:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:3792:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3795:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3796:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3823:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3826:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3827:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3850:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3853:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3854:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3857:  std::vector<c10::optional<Storage>> other__storage_saved(other_.size());
autograd/generated/VariableTypeEverything.cpp:3860:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3861:  std::vector<c10::intrusive_ptr<TensorImpl>> other__impl_saved(other_.size());
autograd/generated/VariableTypeEverything.cpp:3891:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3894:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3895:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3924:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3927:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3928:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3955:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3958:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3959:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:3988:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:3991:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:3992:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4019:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4022:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4023:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4052:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4055:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4056:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4083:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4086:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4087:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4116:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4119:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4120:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4147:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4150:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4151:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4180:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4183:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4184:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4211:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4214:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4215:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4244:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4247:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4248:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4275:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4278:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4279:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4308:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4311:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4312:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4339:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4342:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4343:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4372:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4375:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4376:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4410:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4413:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4414:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4441:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4444:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4445:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4474:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4477:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4478:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4505:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4508:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4509:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4538:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4541:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4542:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4569:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4572:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4573:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4595:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4598:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4599:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4629:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:4632:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4633:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:4636:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:4639:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4640:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:4683:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:4686:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4687:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:4690:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:4693:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4694:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:4736:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4739:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4740:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4775:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:4778:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4779:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:4782:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:4785:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4786:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:4828:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4831:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4832:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4859:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4862:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4863:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4886:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4889:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4890:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4893:  std::vector<c10::optional<Storage>> other__storage_saved(other_.size());
autograd/generated/VariableTypeEverything.cpp:4896:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4897:  std::vector<c10::intrusive_ptr<TensorImpl>> other__impl_saved(other_.size());
autograd/generated/VariableTypeEverything.cpp:4927:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4930:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4931:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4960:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4963:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4964:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:4991:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:4994:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:4995:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5024:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5027:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5028:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5055:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5058:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5059:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5088:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5091:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5092:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5119:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5122:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5123:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5152:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5155:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5156:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5183:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5186:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5187:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5216:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5219:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5220:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5247:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5250:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5251:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5280:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5283:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5284:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5311:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5314:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5315:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5344:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5347:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5348:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5375:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5378:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5379:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5408:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5411:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5412:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5447:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:5450:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5451:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableTypeEverything.cpp:5454:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:5457:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5458:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableTypeEverything.cpp:5500:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5503:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5504:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5531:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5534:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5535:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5558:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5561:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5562:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5565:  std::vector<c10::optional<Storage>> other__storage_saved(other_.size());
autograd/generated/VariableTypeEverything.cpp:5568:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5569:  std::vector<c10::intrusive_ptr<TensorImpl>> other__impl_saved(other_.size());
autograd/generated/VariableTypeEverything.cpp:5599:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5602:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5603:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5632:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5635:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5636:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5663:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5666:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5667:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5696:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5699:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5700:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5727:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5730:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5731:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5760:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5763:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5764:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:5791:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5794:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5795:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5817:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5820:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5821:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableTypeEverything.cpp:5840:std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:5853:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:5854:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:5855:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:5893:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:5894:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:5895:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:5897:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableTypeEverything.cpp:5898:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:5899:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableTypeEverything.cpp:5934:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:5935:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:5936:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:5938:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:5939:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:5940:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:5942:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableTypeEverything.cpp:5943:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:5944:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableTypeEverything.cpp:5968:Tensor & _index_put_impl_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate, bool unsafe) {
autograd/generated/VariableTypeEverything.cpp:5984:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:5985:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:5986:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:5988:  std::vector<c10::optional<Storage>> indices_storage_saved(indices.size());
autograd/generated/VariableTypeEverything.cpp:5989:  for (const c10::optional<Tensor>& tensor : indices)
autograd/generated/VariableTypeEverything.cpp:5991:      tensor.has_value() && tensor->has_storage() ? c10::optional<Storage>(tensor->storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:5992:  std::vector<c10::intrusive_ptr<TensorImpl>> indices_impl_saved(indices.size());
autograd/generated/VariableTypeEverything.cpp:5994:    c10::optional<Tensor> t = indices[i];
autograd/generated/VariableTypeEverything.cpp:5997:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:5998:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:5999:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6013:          static_cast<c10::optional<Tensor>>(indices[i])->storage()));
autograd/generated/VariableTypeEverything.cpp:6017:      AT_ASSERT(indices_impl_saved[i] == static_cast<c10::optional<Tensor>>(indices[i])->getIntrusivePtr());
autograd/generated/VariableTypeEverything.cpp:6032:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6033:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6034:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6059:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6060:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6061:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6093:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6094:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6095:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6097:  c10::optional<Storage> infos_lu__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6098:    infos_lu_.has_storage() ? c10::optional<Storage>(infos_lu_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6099:  c10::intrusive_ptr<TensorImpl> infos_lu__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6101:  c10::optional<Storage> infos_getri__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6102:    infos_getri_.has_storage() ? c10::optional<Storage>(infos_getri_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6103:  c10::intrusive_ptr<TensorImpl> infos_getri__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6139:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6140:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6141:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6174:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6175:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6176:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6178:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6179:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6180:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6182:  c10::optional<Storage> infos__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6183:    infos_.has_storage() ? c10::optional<Storage>(infos_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6184:  c10::intrusive_ptr<TensorImpl> infos__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6211:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6212:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6213:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6240:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6241:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6242:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6280:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6281:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6282:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6284:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6285:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6286:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6288:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6289:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6290:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6325:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6326:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6327:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6359:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6360:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6361:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6363:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6364:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6365:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6398:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6399:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6400:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6402:  c10::optional<Storage> LU_data__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6403:    LU_data_.has_storage() ? c10::optional<Storage>(LU_data_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6404:  c10::intrusive_ptr<TensorImpl> LU_data__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6406:  c10::optional<Storage> LU_pivots__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6407:    LU_pivots_.has_storage() ? c10::optional<Storage>(LU_pivots_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6408:  c10::intrusive_ptr<TensorImpl> LU_pivots__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6446:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6447:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6448:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6481:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6482:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6483:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6485:  c10::optional<Storage> scale__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6486:    scale_.has_storage() ? c10::optional<Storage>(scale_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6487:  c10::intrusive_ptr<TensorImpl> scale__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6489:  c10::optional<Storage> zero_point__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6490:    zero_point_.has_storage() ? c10::optional<Storage>(zero_point_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6491:  c10::intrusive_ptr<TensorImpl> zero_point__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6526:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6527:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6528:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6558:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6559:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6560:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6562:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6563:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6564:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6596:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6597:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6598:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6627:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6628:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6629:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6659:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6660:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6661:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6691:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6692:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6693:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6727:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6728:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6729:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6731:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6732:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6733:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6735:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6736:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6737:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6762:Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride) {
autograd/generated/VariableTypeEverything.cpp:6779:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6780:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6781:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6783:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6784:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6785:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6810:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6811:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6812:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6843:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6844:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6845:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6847:  c10::optional<Storage> lengths__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6848:    lengths_.has_storage() ? c10::optional<Storage>(lengths_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6849:  c10::intrusive_ptr<TensorImpl> lengths__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6886:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6887:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6888:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6890:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6891:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6892:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6894:  c10::optional<Storage> pdist__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6895:    pdist_.has_storage() ? c10::optional<Storage>(pdist_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6896:  c10::intrusive_ptr<TensorImpl> pdist__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6933:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6934:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6935:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6970:  c10::optional<Storage> condition__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6971:    condition_.has_storage() ? c10::optional<Storage>(condition_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6972:  c10::intrusive_ptr<TensorImpl> condition__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6974:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6975:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6976:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:6978:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:6979:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:6980:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7004:Tensor _sample_dirichlet(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:7014:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7015:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7016:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7047:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7048:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7049:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7087:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7088:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7089:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7091:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7092:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7093:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7095:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7096:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7097:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7135:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7136:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7137:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7139:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7140:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7141:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7184:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7185:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7186:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7188:  c10::optional<Storage> sparse__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7189:    sparse_.has_storage() ? c10::optional<Storage>(sparse_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7190:  c10::intrusive_ptr<TensorImpl> sparse__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7192:  c10::optional<Storage> dense__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7193:    dense_.has_storage() ? c10::optional<Storage>(dense_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7194:  c10::intrusive_ptr<TensorImpl> dense__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7219:Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableTypeEverything.cpp:7227:Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableTypeEverything.cpp:7241:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7242:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7243:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7245:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7246:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7247:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7281:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7282:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7283:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7317:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7318:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7319:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7321:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7322:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7323:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7325:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7326:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7327:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7363:  c10::optional<Storage> t__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7364:    t_.has_storage() ? c10::optional<Storage>(t_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7365:  c10::intrusive_ptr<TensorImpl> t__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7367:  c10::optional<Storage> mask_indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7368:    mask_indices_.has_storage() ? c10::optional<Storage>(mask_indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7369:  c10::intrusive_ptr<TensorImpl> mask_indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7403:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7404:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7405:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7439:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7440:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7441:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7443:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7444:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7445:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7447:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7448:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7449:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7487:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7488:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7489:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7491:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7492:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7493:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7527:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7528:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7529:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7559:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7560:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7561:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7563:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7564:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7565:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7597:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:7600:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:7601:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:7639:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:7642:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:7643:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:7646:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7647:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7648:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7674:Tensor _standard_gamma(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:7685:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7686:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7687:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7720:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7721:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7722:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7724:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7725:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7726:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7758:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7759:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7760:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7795:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7796:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7797:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7832:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7833:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7834:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7866:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7867:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7868:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7888:Tensor _test_optional_filled_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
autograd/generated/VariableTypeEverything.cpp:7898:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7899:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7900:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7919:Tensor _test_optional_floatlist(const Tensor & values, c10::optional<ArrayRef<double>> addends) {
autograd/generated/VariableTypeEverything.cpp:7929:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7930:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7931:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7950:Tensor _test_optional_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
autograd/generated/VariableTypeEverything.cpp:7960:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:7961:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:7962:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:7981:std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/VariableTypeEverything.cpp:8000:  c10::optional<Storage> input_gates__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8001:    input_gates_.has_storage() ? c10::optional<Storage>(input_gates_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8002:  c10::intrusive_ptr<TensorImpl> input_gates__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8004:  c10::optional<Storage> hidden_gates__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8005:    hidden_gates_.has_storage() ? c10::optional<Storage>(hidden_gates_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8006:  c10::intrusive_ptr<TensorImpl> hidden_gates__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8008:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8009:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8010:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8054:  c10::optional<Storage> grad_hy__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8055:    grad_hy_.has_storage() ? c10::optional<Storage>(grad_hy_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8056:  c10::intrusive_ptr<TensorImpl> grad_hy__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8058:  c10::optional<Storage> workspace__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8059:    workspace_.has_storage() ? c10::optional<Storage>(workspace_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8060:  c10::intrusive_ptr<TensorImpl> workspace__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8086:std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/VariableTypeEverything.cpp:8106:  c10::optional<Storage> input_gates__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8107:    input_gates_.has_storage() ? c10::optional<Storage>(input_gates_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8108:  c10::intrusive_ptr<TensorImpl> input_gates__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8110:  c10::optional<Storage> hidden_gates__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8111:    hidden_gates_.has_storage() ? c10::optional<Storage>(hidden_gates_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8112:  c10::intrusive_ptr<TensorImpl> hidden_gates__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8114:  c10::optional<Storage> cx__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8115:    cx_.has_storage() ? c10::optional<Storage>(cx_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8116:  c10::intrusive_ptr<TensorImpl> cx__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8146:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) {
autograd/generated/VariableTypeEverything.cpp:8163:  c10::optional<Storage> cx__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8164:    cx_.has_storage() ? c10::optional<Storage>(cx_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8165:  c10::intrusive_ptr<TensorImpl> cx__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8167:  c10::optional<Storage> cy__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8168:    cy_.has_storage() ? c10::optional<Storage>(cy_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8169:  c10::intrusive_ptr<TensorImpl> cy__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8171:  c10::optional<Storage> workspace__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8172:    workspace_.has_storage() ? c10::optional<Storage>(workspace_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8173:  c10::intrusive_ptr<TensorImpl> workspace__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8215:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8216:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8217:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8219:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8220:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8221:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8264:  c10::optional<Storage> i1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8265:    i1_.has_storage() ? c10::optional<Storage>(i1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8266:  c10::intrusive_ptr<TensorImpl> i1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8268:  c10::optional<Storage> i2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8269:    i2_.has_storage() ? c10::optional<Storage>(i2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8270:  c10::intrusive_ptr<TensorImpl> i2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8272:  c10::optional<Storage> i3__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8273:    i3_.has_storage() ? c10::optional<Storage>(i3_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8274:  c10::intrusive_ptr<TensorImpl> i3__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8311:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8312:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8313:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8345:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8346:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8347:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8377:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8378:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8379:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8401:  c10::optional<Storage> log_probs__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8402:    log_probs_.has_storage() ? c10::optional<Storage>(log_probs_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8403:  c10::intrusive_ptr<TensorImpl> log_probs__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8405:  c10::optional<Storage> targets__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8406:    targets_.has_storage() ? c10::optional<Storage>(targets_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8407:  c10::intrusive_ptr<TensorImpl> targets__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8428:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8429:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8430:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8455:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8456:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8457:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8492:  c10::optional<Storage> v__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8493:    v_.has_storage() ? c10::optional<Storage>(v_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8494:  c10::intrusive_ptr<TensorImpl> v__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8496:  c10::optional<Storage> g__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8497:    g_.has_storage() ? c10::optional<Storage>(g_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8498:  c10::intrusive_ptr<TensorImpl> g__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8538:  c10::optional<Storage> grad_w__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8539:    grad_w_.has_storage() ? c10::optional<Storage>(grad_w_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8540:  c10::intrusive_ptr<TensorImpl> grad_w__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8542:  c10::optional<Storage> saved_v__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8543:    saved_v_.has_storage() ? c10::optional<Storage>(saved_v_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8544:  c10::intrusive_ptr<TensorImpl> saved_v__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8546:  c10::optional<Storage> saved_g__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8547:    saved_g_.has_storage() ? c10::optional<Storage>(saved_g_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8548:  c10::intrusive_ptr<TensorImpl> saved_g__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8550:  c10::optional<Storage> saved_norms__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8551:    saved_norms_.has_storage() ? c10::optional<Storage>(saved_norms_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8552:  c10::intrusive_ptr<TensorImpl> saved_norms__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8592:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8593:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8594:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8625:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8626:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8627:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8658:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8659:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8660:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8662:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8663:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8664:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8696:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8697:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8698:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8728:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8729:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8730:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8761:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8762:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8763:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8765:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8766:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8767:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8799:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8800:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8801:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8830:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8831:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8832:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8863:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8864:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8865:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8867:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8868:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8869:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8903:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8904:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8905:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8907:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8908:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8909:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8941:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8942:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8943:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8975:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8976:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8977:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:8979:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:8980:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:8981:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9017:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9018:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9019:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9021:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9022:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9023:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9025:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9026:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9027:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9064:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9065:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9066:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9068:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9069:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9070:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9104:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9105:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9106:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9143:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9144:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9145:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9147:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9148:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9149:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9151:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9152:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9153:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9193:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9194:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9195:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9197:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9198:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9199:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9201:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9202:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9203:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9205:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9206:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9207:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9248:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9249:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9250:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9252:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9253:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9254:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9256:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9257:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9258:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9296:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9297:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9298:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9335:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9336:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9337:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9339:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9340:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9341:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9343:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9344:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9345:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9385:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9386:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9387:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9389:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9390:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9391:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9393:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9394:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9395:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9397:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9398:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9399:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9440:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9441:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9442:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9444:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9445:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9446:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9448:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9449:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9450:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9489:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9490:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9491:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9493:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9494:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9495:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9527:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9528:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9529:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9562:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9563:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9564:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9566:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9567:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9568:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9601:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9602:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9603:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9635:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9636:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9637:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9639:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9640:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9641:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9643:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9644:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9645:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9692:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9693:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9694:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9696:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9697:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9698:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9700:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9701:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9702:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9750:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9751:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9752:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9754:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9755:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9756:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9758:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9759:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9760:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9799:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9800:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9801:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9803:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9804:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9805:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9807:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9808:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9809:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9811:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9812:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9813:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9860:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9861:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9862:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9864:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9865:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9866:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9868:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9869:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9870:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9915:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9916:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9917:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9919:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9920:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9921:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9923:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9924:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9925:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9964:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9965:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9966:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9968:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9969:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9970:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9972:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9973:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9974:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:9976:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:9977:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:9978:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10027:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10028:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10029:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10031:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10032:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10033:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10035:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10036:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10037:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10084:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10085:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10086:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10088:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10089:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10090:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10092:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10093:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10094:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10133:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10134:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10135:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10137:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10138:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10139:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10141:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10142:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10143:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10145:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10146:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10147:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10198:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10199:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10200:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10202:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10203:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10204:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10206:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10207:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10208:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10257:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10258:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10259:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10261:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10262:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10263:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10265:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10266:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10267:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10306:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10307:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10308:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10310:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10311:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10312:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10314:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10315:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10316:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10318:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10319:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10320:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10367:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10368:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10369:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10371:  c10::optional<Storage> mat__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10372:    mat_.has_storage() ? c10::optional<Storage>(mat_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10373:  c10::intrusive_ptr<TensorImpl> mat__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10375:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10376:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10377:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10422:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10423:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10424:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10426:  c10::optional<Storage> mat__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10427:    mat_.has_storage() ? c10::optional<Storage>(mat_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10428:  c10::intrusive_ptr<TensorImpl> mat__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10430:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10431:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10432:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10471:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10472:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10473:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10475:  c10::optional<Storage> mat__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10476:    mat_.has_storage() ? c10::optional<Storage>(mat_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10477:  c10::intrusive_ptr<TensorImpl> mat__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10479:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10480:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10481:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10483:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10484:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10485:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10532:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10533:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10534:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10536:  c10::optional<Storage> vec1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10537:    vec1_.has_storage() ? c10::optional<Storage>(vec1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10538:  c10::intrusive_ptr<TensorImpl> vec1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10540:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10541:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10542:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10587:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10588:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10589:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10591:  c10::optional<Storage> vec1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10592:    vec1_.has_storage() ? c10::optional<Storage>(vec1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10593:  c10::intrusive_ptr<TensorImpl> vec1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10595:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10596:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10597:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10636:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10637:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10638:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10640:  c10::optional<Storage> vec1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10641:    vec1_.has_storage() ? c10::optional<Storage>(vec1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10642:  c10::intrusive_ptr<TensorImpl> vec1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10644:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10645:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10646:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10648:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10649:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10650:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10689:  c10::optional<Storage> theta__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10690:    theta_.has_storage() ? c10::optional<Storage>(theta_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10691:  c10::intrusive_ptr<TensorImpl> theta__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10720:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10721:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10722:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10756:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10757:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10758:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10787:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10788:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10789:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10821:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10822:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10823:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10825:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10826:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10827:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10861:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10862:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10863:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10898:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10899:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10900:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10902:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10903:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10904:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10938:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10939:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10940:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10975:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10976:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10977:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:10979:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:10980:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:10981:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11013:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11014:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11015:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11047:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11048:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11049:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11051:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11052:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11053:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11084:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11085:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11086:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11115:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11116:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11117:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11149:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11150:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11151:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11153:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11154:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11155:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11179:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11180:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11181:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11196:Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/VariableTypeEverything.cpp:11199:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11200:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11201:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11216:Tensor & argmax_out_out(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:11220:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11221:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11222:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11224:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11225:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11226:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11244:Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/VariableTypeEverything.cpp:11247:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11248:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11249:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11264:Tensor & argmin_out_out(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:11268:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11269:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11270:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11272:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11273:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11274:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11292:Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/VariableTypeEverything.cpp:11306:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11307:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11308:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11335:Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
autograd/generated/VariableTypeEverything.cpp:11350:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11351:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11352:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11381:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11382:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11383:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11413:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11414:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11415:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11446:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11447:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11448:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11450:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11451:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11452:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11484:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11485:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11486:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11515:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11516:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11517:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11548:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11549:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11550:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11552:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11553:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11554:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11586:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11587:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11588:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11619:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11620:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11621:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11623:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11624:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11625:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11661:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11662:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11663:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11665:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11666:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11667:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11702:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11703:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11704:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11706:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11707:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11708:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11710:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11711:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11712:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11748:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11749:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11750:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11781:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11782:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11783:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11785:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11786:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11787:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11819:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11820:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11821:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11850:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11851:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11852:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11883:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11884:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11885:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11887:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11888:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11889:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11910:Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/VariableTypeEverything.cpp:11927:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11928:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11929:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11948:Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/VariableTypeEverything.cpp:11966:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11967:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11968:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11970:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:11971:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:11972:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:11994:Tensor & avg_pool2d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:12008:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12009:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12010:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12012:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12013:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12014:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12016:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12017:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12018:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12042:Tensor & avg_pool2d_out_out(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:12055:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12056:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12057:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12059:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12060:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12061:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12082:Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/VariableTypeEverything.cpp:12099:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12100:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12101:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12120:Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/VariableTypeEverything.cpp:12138:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12139:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12140:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12142:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12143:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12144:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12166:Tensor & avg_pool3d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:12180:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12181:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12182:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12184:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12185:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12186:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12188:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12189:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12190:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12214:Tensor & avg_pool3d_out_out(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:12227:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12228:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12229:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12231:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12232:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12233:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12274:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12275:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12276:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12278:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12279:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12280:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12282:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12283:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12284:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12329:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12330:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12331:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12333:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12334:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12335:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12337:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12338:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12339:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12378:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12379:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12380:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12382:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12383:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12384:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12386:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12387:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12388:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12390:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12391:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12392:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12419:Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) {
autograd/generated/VariableTypeEverything.cpp:12434:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12435:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12436:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12438:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12439:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12440:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12442:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12443:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12444:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12446:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12447:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12448:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12450:  c10::optional<Storage> mean_dy__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12451:    mean_dy_.has_storage() ? c10::optional<Storage>(mean_dy_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12452:  c10::intrusive_ptr<TensorImpl> mean_dy__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12454:  c10::optional<Storage> mean_dy_xmu__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12455:    mean_dy_xmu_.has_storage() ? c10::optional<Storage>(mean_dy_xmu_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12456:  c10::intrusive_ptr<TensorImpl> mean_dy_xmu__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12490:std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, bool input_g, bool weight_g, bool bias_g) {
autograd/generated/VariableTypeEverything.cpp:12507:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12508:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12509:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12511:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12512:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12513:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12515:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12516:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12517:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12519:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12520:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12521:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12552:Tensor batch_norm_elemt(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps) {
autograd/generated/VariableTypeEverything.cpp:12564:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12565:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12566:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12568:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12569:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12570:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12572:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12573:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12574:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12599:Tensor & batch_norm_elemt_out_out(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:12614:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12615:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12616:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12618:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12619:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12620:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12622:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12623:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12624:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12626:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12627:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12628:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12655:std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, int64_t count) {
autograd/generated/VariableTypeEverything.cpp:12669:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12670:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12671:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12673:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12674:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12675:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12677:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12678:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12679:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12705:std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, const Tensor & counts) {
autograd/generated/VariableTypeEverything.cpp:12720:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12721:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12722:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12724:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12725:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12726:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12728:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12729:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12730:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12732:  c10::optional<Storage> counts__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12733:    counts_.has_storage() ? c10::optional<Storage>(counts_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12734:  c10::intrusive_ptr<TensorImpl> counts__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12775:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12776:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12777:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12797:std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum) {
autograd/generated/VariableTypeEverything.cpp:12809:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12810:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12811:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12831:Tensor bernoulli(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:12841:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12842:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12843:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12862:Tensor & bernoulli__Tensor(Tensor & self, const Tensor & p, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:12875:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12876:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12877:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12879:  c10::optional<Storage> p__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12880:    p_.has_storage() ? c10::optional<Storage>(p_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12881:  c10::intrusive_ptr<TensorImpl> p__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12902:Tensor & bernoulli__float(Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:12913:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12914:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12915:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12933:Tensor & bernoulli_out_out(const Tensor & self, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:12946:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12947:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12948:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12950:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12951:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12952:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12973:Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/VariableTypeEverything.cpp:12990:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12991:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12992:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:12994:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:12995:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:12996:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13018:Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/VariableTypeEverything.cpp:13037:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13038:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13039:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13041:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13042:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13043:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13045:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13046:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13047:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13072:Tensor & binary_cross_entropy_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:13087:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13088:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13089:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13091:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13092:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13093:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13095:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13096:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13097:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13099:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13100:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13101:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13128:Tensor & binary_cross_entropy_out_out(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:13142:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13143:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13144:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13146:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13147:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13148:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13150:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13151:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13152:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13176:Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & pos_weight, int64_t reduction) {
autograd/generated/VariableTypeEverything.cpp:13194:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13195:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13196:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13198:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13199:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13200:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13222:Tensor bincount(const Tensor & self, const c10::optional<Tensor> & weights, int64_t minlength) {
autograd/generated/VariableTypeEverything.cpp:13232:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13233:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13234:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13253:Tensor binomial(const Tensor & count, const Tensor & prob, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:13264:  c10::optional<Storage> count__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13265:    count_.has_storage() ? c10::optional<Storage>(count_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13266:  c10::intrusive_ptr<TensorImpl> count__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13268:  c10::optional<Storage> prob__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13269:    prob_.has_storage() ? c10::optional<Storage>(prob_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13270:  c10::intrusive_ptr<TensorImpl> prob__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13306:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13307:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13308:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13310:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13311:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13312:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13314:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13315:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13316:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13353:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13354:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13355:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13357:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13358:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13359:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13393:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13394:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13395:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13397:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13398:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13399:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13434:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13435:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13436:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13438:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13439:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13440:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13442:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13443:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13444:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13481:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13482:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13483:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13485:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13486:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13487:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13522:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13523:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13524:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13526:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13527:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13528:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13530:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13531:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13532:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13569:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13570:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13571:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13573:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13574:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13575:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13613:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13614:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13615:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13617:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13618:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13619:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13654:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13655:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13656:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13658:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13659:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13660:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13662:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13663:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13664:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13692:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13693:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13694:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13696:  c10::optional<Storage> boundaries__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13697:    boundaries_.has_storage() ? c10::optional<Storage>(boundaries_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13698:  c10::intrusive_ptr<TensorImpl> boundaries__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13719:  c10::optional<Storage> boundaries__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13720:    boundaries_.has_storage() ? c10::optional<Storage>(boundaries_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13721:  c10::intrusive_ptr<TensorImpl> boundaries__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13741:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13742:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13743:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13745:  c10::optional<Storage> boundaries__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13746:    boundaries_.has_storage() ? c10::optional<Storage>(boundaries_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13747:  c10::intrusive_ptr<TensorImpl> boundaries__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13749:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13750:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13751:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13786:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:13789:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:13790:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:13827:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:13830:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:13831:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:13834:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13835:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13836:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13862:Tensor & cauchy_(Tensor & self, double median, double sigma, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:13873:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13874:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13875:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13903:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13904:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13905:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13935:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13936:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13937:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13968:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13969:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13970:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:13972:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:13973:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:13974:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14007:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14008:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14009:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14040:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14041:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14042:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14073:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14074:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14075:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14105:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14106:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14107:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14140:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14141:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14142:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14177:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14178:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14179:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14181:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14182:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14183:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14217:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14218:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14219:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14221:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14222:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14223:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14258:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14259:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14260:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14262:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14263:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14264:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14302:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14303:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14304:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14306:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14307:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14308:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14310:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14311:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14312:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14336:Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/VariableTypeEverything.cpp:14349:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14350:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14351:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14370:Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/VariableTypeEverything.cpp:14384:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14385:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14386:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14416:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14417:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14418:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14450:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14451:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14452:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14483:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14484:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14485:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14487:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14488:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14489:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14522:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14523:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14524:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14556:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14557:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14558:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14589:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14590:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14591:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14593:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14594:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14595:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14616:Tensor & clamp_out_out(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:14629:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14630:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14631:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14633:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14634:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14635:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14656:Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format) {
autograd/generated/VariableTypeEverything.cpp:14666:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14667:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14668:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14696:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14697:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14698:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14731:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14732:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14733:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14768:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14769:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14770:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14802:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14803:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14804:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14806:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14807:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14808:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14842:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14843:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14844:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14846:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14847:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14848:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14886:  c10::optional<Storage> real__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14887:    real_.has_storage() ? c10::optional<Storage>(real_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14888:  c10::intrusive_ptr<TensorImpl> real__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14890:  c10::optional<Storage> imag__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14891:    imag_.has_storage() ? c10::optional<Storage>(imag_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14892:  c10::intrusive_ptr<TensorImpl> imag__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14927:  c10::optional<Storage> real__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14928:    real_.has_storage() ? c10::optional<Storage>(real_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14929:  c10::intrusive_ptr<TensorImpl> real__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14931:  c10::optional<Storage> imag__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14932:    imag_.has_storage() ? c10::optional<Storage>(imag_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14933:  c10::intrusive_ptr<TensorImpl> imag__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14935:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14936:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14937:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14974:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14975:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14976:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:14978:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:14979:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:14980:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15012:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15013:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15014:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15048:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15049:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15050:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15052:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15053:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15054:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15056:  c10::optional<Storage> bias__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15057:    bias_.has_storage() ? c10::optional<Storage>(bias_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15058:  c10::intrusive_ptr<TensorImpl> bias__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15106:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15107:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15108:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15110:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15111:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15112:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15114:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15115:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15116:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15143:Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
autograd/generated/VariableTypeEverything.cpp:15162:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15163:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15164:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15166:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15167:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15168:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15202:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15203:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15204:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15206:  c10::optional<Storage> src__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15207:    src_.has_storage() ? c10::optional<Storage>(src_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15208:  c10::intrusive_ptr<TensorImpl> src__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15244:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15245:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15246:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15248:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15249:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15250:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15286:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15287:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15288:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15326:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15327:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15328:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15330:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15331:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15332:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15368:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15369:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15370:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15405:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15406:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15407:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15409:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15410:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15411:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15413:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15414:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15415:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15450:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15451:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15452:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15482:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15483:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15484:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15515:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15516:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15517:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15519:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15520:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15521:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15553:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15554:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15555:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15585:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15586:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15587:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15618:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15619:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15620:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15622:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15623:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15624:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15648:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15649:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15650:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15665:Tensor count_nonzero(const Tensor & self, c10::optional<int64_t> dim) {
autograd/generated/VariableTypeEverything.cpp:15668:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15669:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15670:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15685:Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
autograd/generated/VariableTypeEverything.cpp:15703:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15704:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15705:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15707:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15708:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15709:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15731:Tensor & cross_out_out(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:15745:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15746:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15747:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15749:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15750:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15751:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15753:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15754:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15755:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15793:  c10::optional<Storage> theta__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15794:    theta_.has_storage() ? c10::optional<Storage>(theta_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15795:  c10::intrusive_ptr<TensorImpl> theta__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15824:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15825:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15826:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15845:std::tuple<Tensor,Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) {
autograd/generated/VariableTypeEverything.cpp:15868:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15869:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15870:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15872:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15873:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15874:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15901:std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon, const Tensor & reserveSpace) {
autograd/generated/VariableTypeEverything.cpp:15928:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15929:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15930:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15932:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15933:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15934:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15936:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15937:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15938:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15940:  c10::optional<Storage> reserveSpace__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15941:    reserveSpace_.has_storage() ? c10::optional<Storage>(reserveSpace_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15942:  c10::intrusive_ptr<TensorImpl> reserveSpace__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15972:Tensor cudnn_convolution_deprecated(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableTypeEverything.cpp:15983:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15984:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15985:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:15987:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:15988:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:15989:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16022:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16023:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16024:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16026:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16027:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16028:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16070:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16071:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16072:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16074:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16075:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16076:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16122:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16123:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16124:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16126:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16127:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16128:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16130:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16131:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16132:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16169:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16170:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16171:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16173:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16174:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16175:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16208:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16209:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16210:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16212:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16213:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16214:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16236:Tensor cudnn_convolution_transpose_deprecated(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableTypeEverything.cpp:16247:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16248:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16249:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16251:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16252:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16253:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16286:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16287:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16288:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16290:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16291:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16292:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16335:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16336:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16337:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16339:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16340:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16341:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16388:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16389:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16390:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16392:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16393:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16394:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16396:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16397:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16398:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16435:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16436:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16437:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16439:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16440:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16441:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16474:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16475:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16476:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16478:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16479:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16480:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16515:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16516:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16517:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16519:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16520:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16521:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16557:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16558:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16559:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16561:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16562:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16563:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16565:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16566:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16567:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16607:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16608:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16609:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16645:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16646:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16647:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16649:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16650:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16651:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16653:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16654:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16655:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16694:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16695:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16696:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16732:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16733:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16734:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16736:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16737:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16738:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16740:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16741:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16742:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16767:Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:16780:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16781:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16782:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16801:Tensor & cumprod_(Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:16815:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16816:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16817:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16835:Tensor & cumprod_out_out(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:16848:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16849:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16850:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16852:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16853:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16854:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16875:Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:16887:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16888:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16889:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16908:Tensor & cumsum_(Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:16921:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16922:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16923:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16941:Tensor & cumsum_out_out(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:16954:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16955:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16956:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16958:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16959:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16960:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:16991:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:16992:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:16993:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17023:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17024:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17025:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17056:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17057:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17058:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17060:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17061:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17062:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17086:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17087:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17088:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17113:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17114:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17115:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17144:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:17147:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:17148:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:17183:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17184:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17185:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17219:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17220:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17221:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17252:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17253:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17254:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17256:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17257:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17258:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17293:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17294:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17295:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17330:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17331:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17332:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17363:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17364:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17365:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17396:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17397:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17398:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17400:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17401:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17402:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17437:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17438:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17439:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17441:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17442:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17443:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17484:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17485:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17486:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17488:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17489:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17490:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17528:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17529:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17530:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17532:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17533:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17534:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17567:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17568:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17569:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17600:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17601:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17602:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17637:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17638:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17639:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17641:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17642:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17643:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17682:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17683:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17684:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17686:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17687:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17688:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17722:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17723:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17724:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17756:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17757:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17758:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17790:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17791:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17792:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17794:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17795:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17796:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17798:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17799:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17800:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17838:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17839:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17840:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17842:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17843:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17844:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17846:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17847:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17848:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17891:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17892:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17893:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17895:  c10::optional<Storage> tensor__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17896:    tensor_.has_storage() ? c10::optional<Storage>(tensor_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17897:  c10::intrusive_ptr<TensorImpl> tensor__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17932:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17933:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17934:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17936:  c10::optional<Storage> tensor__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17937:    tensor_.has_storage() ? c10::optional<Storage>(tensor_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17938:  c10::intrusive_ptr<TensorImpl> tensor__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17940:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17941:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17942:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:17980:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:17981:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:17982:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18020:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18021:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18022:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18024:  c10::optional<Storage> e__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18025:    e_.has_storage() ? c10::optional<Storage>(e_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18026:  c10::intrusive_ptr<TensorImpl> e__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18028:  c10::optional<Storage> v__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18029:    v_.has_storage() ? c10::optional<Storage>(v_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18030:  c10::intrusive_ptr<TensorImpl> v__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18069:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18070:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18071:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18104:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18105:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18106:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18144:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18145:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18146:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18148:  c10::optional<Storage> self_or_result__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18149:    self_or_result_.has_storage() ? c10::optional<Storage>(self_or_result_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18150:  c10::intrusive_ptr<TensorImpl> self_or_result__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18185:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18186:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18187:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18189:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18190:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18191:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18228:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18229:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18230:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18232:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18233:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18234:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18269:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18270:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18271:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18273:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18274:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18275:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18309:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18310:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18311:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18313:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18314:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18315:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18336:Tensor empty_memory_format(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/VariableTypeEverything.cpp:18354:  c10::optional<Storage> qtensor__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18355:    qtensor_.has_storage() ? c10::optional<Storage>(qtensor_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18356:  c10::intrusive_ptr<TensorImpl> qtensor__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18375:Tensor empty_strided(IntArrayRef size, IntArrayRef stride, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableTypeEverything.cpp:18386:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18387:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18388:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18407:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18408:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18409:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18411:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18412:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18413:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18443:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18444:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18445:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18477:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18478:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18479:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18481:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18482:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18483:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18508:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18509:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18510:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18512:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18513:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18514:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18537:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18538:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18539:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18541:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18542:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18543:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18545:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18546:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18547:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18572:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18573:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18574:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18576:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18577:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18578:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18607:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18608:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18609:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18640:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18641:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18642:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18673:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18674:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18675:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18677:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18678:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18679:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18711:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18712:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18713:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18744:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18745:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18746:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18777:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18778:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18779:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18781:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18782:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18783:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18815:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18816:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18817:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18848:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18849:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18850:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18881:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18882:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18883:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18885:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18886:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18887:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18918:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18919:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18920:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18951:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18952:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18953:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:18986:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:18987:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:18988:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19022:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19023:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19024:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19026:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19027:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19028:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19060:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19061:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19062:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19096:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19097:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19098:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19100:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19101:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19102:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19134:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19135:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19136:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19171:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19172:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19173:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19206:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19207:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19208:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19242:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19243:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19244:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19246:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19247:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19248:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19269:Tensor & exponential_(Tensor & self, double lambd, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:19280:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19281:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19282:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19303:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19304:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19305:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19323:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19324:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19325:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19356:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19357:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19358:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19360:  c10::optional<Storage> scale__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19361:    scale_.has_storage() ? c10::optional<Storage>(scale_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19362:  c10::intrusive_ptr<TensorImpl> scale__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19364:  c10::optional<Storage> zero_point__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19365:    zero_point_.has_storage() ? c10::optional<Storage>(zero_point_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19366:  c10::intrusive_ptr<TensorImpl> zero_point__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19406:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19407:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19408:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19441:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19442:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19443:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19473:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19474:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19475:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19477:  c10::optional<Storage> value__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19478:    value_.has_storage() ? c10::optional<Storage>(value_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19479:  c10::intrusive_ptr<TensorImpl> value__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19511:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19512:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19513:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19541:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19542:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19543:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19573:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19574:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19575:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19604:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19605:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19606:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19608:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19609:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19610:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19644:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19645:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19646:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19648:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19649:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19650:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19685:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19686:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19687:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19689:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19690:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19691:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19693:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19694:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19695:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19732:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19733:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19734:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19736:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19737:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19738:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19772:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19773:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19774:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19776:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19777:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19778:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19814:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19815:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19816:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19818:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19819:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19820:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19822:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19823:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19824:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19861:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19862:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19863:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19865:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19866:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19867:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19903:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19904:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19905:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19907:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19908:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19909:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19911:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19912:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19913:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19947:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19948:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19949:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19982:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19983:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19984:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:19986:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:19987:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:19988:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20021:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20022:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20023:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20056:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20057:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20058:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20060:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20061:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20062:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20096:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20097:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20098:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20100:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20101:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20102:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20137:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20138:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20139:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20141:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20142:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20143:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20145:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20146:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20147:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20181:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20182:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20183:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20213:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20214:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20215:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20246:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20247:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20248:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20250:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20251:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20252:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20290:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20291:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20292:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20294:  c10::optional<Storage> random_samples__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20295:    random_samples_.has_storage() ? c10::optional<Storage>(random_samples_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20296:  c10::intrusive_ptr<TensorImpl> random_samples__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20336:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20337:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20338:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20340:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20341:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20342:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20344:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20345:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20346:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20386:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20387:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20388:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20390:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20391:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20392:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20394:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20395:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20396:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20398:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20399:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20400:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20442:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20443:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20444:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20446:  c10::optional<Storage> random_samples__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20447:    random_samples_.has_storage() ? c10::optional<Storage>(random_samples_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20448:  c10::intrusive_ptr<TensorImpl> random_samples__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20450:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20451:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20452:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20454:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20455:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20456:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20501:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20502:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20503:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20505:  c10::optional<Storage> random_samples__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20506:    random_samples_.has_storage() ? c10::optional<Storage>(random_samples_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20507:  c10::intrusive_ptr<TensorImpl> random_samples__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20547:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20548:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20549:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20551:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20552:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20553:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20555:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20556:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20557:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20597:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20598:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20599:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20601:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20602:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20603:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20605:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20606:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20607:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20609:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20610:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20611:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20653:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20654:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20655:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20657:  c10::optional<Storage> random_samples__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20658:    random_samples_.has_storage() ? c10::optional<Storage>(random_samples_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20659:  c10::intrusive_ptr<TensorImpl> random_samples__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20661:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20662:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20663:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20665:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20666:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20667:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20695:Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableTypeEverything.cpp:20718:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20719:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20720:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20722:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20723:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20724:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20759:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20760:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20761:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20763:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20764:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20765:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20767:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20768:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20769:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20807:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20808:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20809:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20811:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20812:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20813:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20815:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20816:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20817:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20844:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20845:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20846:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20865:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20866:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20867:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20869:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20870:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20871:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20901:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20902:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20903:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20935:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20936:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20937:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20939:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20940:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20941:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20966:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20967:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20968:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20970:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20971:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20972:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20995:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:20996:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:20997:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:20999:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21000:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21001:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21003:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21004:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21005:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21037:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21038:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21039:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21069:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21070:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21071:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21073:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21074:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21075:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21097:Tensor & geometric_(Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:21108:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21109:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21110:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21140:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21141:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21142:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21176:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21177:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21178:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21180:  c10::optional<Storage> a__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21181:    a_.has_storage() ? c10::optional<Storage>(a_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21182:  c10::intrusive_ptr<TensorImpl> a__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21184:  c10::optional<Storage> tau__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21185:    tau_.has_storage() ? c10::optional<Storage>(tau_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21186:  c10::intrusive_ptr<TensorImpl> tau__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21228:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21229:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21230:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21232:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21233:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21234:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21269:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21270:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21271:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21273:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21274:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21275:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21277:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21278:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21279:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21315:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21316:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21317:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21350:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21351:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21352:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21354:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21355:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21356:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21392:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21393:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21394:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21396:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21397:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21398:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21400:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21401:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21402:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21439:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21440:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21441:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21443:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21444:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21445:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21482:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21483:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21484:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21486:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21487:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21488:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21524:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21525:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21526:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21528:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21529:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21530:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21532:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21533:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21534:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21576:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21577:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21578:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21580:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21581:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21582:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21618:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21619:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21620:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21622:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21623:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21624:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21626:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21627:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21628:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21657:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21658:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21659:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21678:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21679:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21680:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21682:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21683:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21684:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21714:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21715:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21716:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21748:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21749:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21750:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21752:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21753:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21754:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21779:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21780:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21781:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21783:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21784:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21785:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21808:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21809:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21810:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21812:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21813:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21814:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21816:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21817:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21818:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21851:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21852:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21853:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21885:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21886:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21887:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21889:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21890:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21891:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21924:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21925:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21926:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21957:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21958:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21959:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21988:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21989:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21990:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:21992:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:21993:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:21994:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22029:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22030:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22031:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22033:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22034:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22035:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22067:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22068:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22069:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22100:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22101:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22102:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22131:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22132:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22133:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22135:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22136:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22137:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22172:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22173:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22174:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22176:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22177:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22178:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22212:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22213:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22214:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22246:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22247:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22248:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22283:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22284:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22285:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22287:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22288:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22289:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22325:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22326:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22327:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22329:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22330:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22331:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22333:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22334:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22335:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22372:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22373:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22374:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22376:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22377:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22378:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22413:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22414:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22415:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22417:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22418:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22419:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22421:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22422:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22423:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22457:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22458:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22459:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22491:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22492:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22493:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22495:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22496:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22497:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22529:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22530:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22531:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22533:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22534:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22535:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22571:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22572:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22573:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22575:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22576:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22577:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22579:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22580:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22581:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22622:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22623:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22624:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22626:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22627:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22628:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22671:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22672:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22673:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22675:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22676:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22677:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22715:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22716:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22717:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22719:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22720:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22721:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22723:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22724:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22725:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22759:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22760:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22761:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22791:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22792:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22793:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22824:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22825:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22826:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22828:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22829:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22830:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22868:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22869:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22870:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22872:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22873:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22874:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22914:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22915:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22916:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22918:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22919:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22920:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22955:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22956:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22957:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22959:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22960:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22961:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:22963:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:22964:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:22965:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23006:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23007:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23008:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23010:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23011:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23012:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23052:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23053:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23054:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23056:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23057:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23058:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23093:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23094:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23095:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23097:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23098:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23099:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23101:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23102:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23103:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23143:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23144:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23145:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23178:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23179:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23180:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23212:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23213:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23214:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23216:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23217:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23218:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23252:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23253:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23254:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23256:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23257:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23258:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23279:Tensor index_Tensor(const Tensor & self, const c10::List<c10::optional<Tensor>> & indices) {
autograd/generated/VariableTypeEverything.cpp:23293:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23294:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23295:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23297:  std::vector<c10::optional<Storage>> indices_storage_saved(indices.size());
autograd/generated/VariableTypeEverything.cpp:23298:  for (const c10::optional<Tensor>& tensor : indices)
autograd/generated/VariableTypeEverything.cpp:23300:      tensor.has_value() && tensor->has_storage() ? c10::optional<Storage>(tensor->storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:23301:  std::vector<c10::intrusive_ptr<TensorImpl>> indices_impl_saved(indices.size());
autograd/generated/VariableTypeEverything.cpp:23303:    c10::optional<Tensor> t = indices[i];
autograd/generated/VariableTypeEverything.cpp:23319:          static_cast<c10::optional<Tensor>>(indices[i])->storage()));
autograd/generated/VariableTypeEverything.cpp:23323:      AT_ASSERT(indices_impl_saved[i] == static_cast<c10::optional<Tensor>>(indices[i])->getIntrusivePtr());
autograd/generated/VariableTypeEverything.cpp:23352:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23353:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23354:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23356:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23357:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23358:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23360:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23361:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23362:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23404:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23405:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23406:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23408:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23409:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23410:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23412:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23413:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23414:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23452:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23453:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23454:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23456:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23457:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23458:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23494:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23495:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23496:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23498:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23499:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23500:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23502:  c10::optional<Storage> value__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23503:    value_.has_storage() ? c10::optional<Storage>(value_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23504:  c10::intrusive_ptr<TensorImpl> value__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23528:Tensor & index_put_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) {
autograd/generated/VariableTypeEverything.cpp:23544:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23545:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23546:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23548:  std::vector<c10::optional<Storage>> indices_storage_saved(indices.size());
autograd/generated/VariableTypeEverything.cpp:23549:  for (const c10::optional<Tensor>& tensor : indices)
autograd/generated/VariableTypeEverything.cpp:23551:      tensor.has_value() && tensor->has_storage() ? c10::optional<Storage>(tensor->storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:23552:  std::vector<c10::intrusive_ptr<TensorImpl>> indices_impl_saved(indices.size());
autograd/generated/VariableTypeEverything.cpp:23554:    c10::optional<Tensor> t = indices[i];
autograd/generated/VariableTypeEverything.cpp:23557:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23558:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23559:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23573:          static_cast<c10::optional<Tensor>>(indices[i])->storage()));
autograd/generated/VariableTypeEverything.cpp:23577:      AT_ASSERT(indices_impl_saved[i] == static_cast<c10::optional<Tensor>>(indices[i])->getIntrusivePtr());
autograd/generated/VariableTypeEverything.cpp:23603:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23604:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23605:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23607:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23608:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23609:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23644:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23645:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23646:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23648:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23649:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23650:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23652:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23653:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23654:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23681:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23682:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23683:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23708:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23709:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23710:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23739:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23740:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23741:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23775:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23776:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23777:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23779:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23780:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23781:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23805:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23806:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23807:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23826:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23827:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23828:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23830:  c10::optional<Storage> tensor__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23831:    tensor_.has_storage() ? c10::optional<Storage>(tensor_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23832:  c10::intrusive_ptr<TensorImpl> tensor__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23853:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23854:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23855:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23874:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23875:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23876:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23878:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23879:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23880:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23902:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23903:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23904:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23906:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23907:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23908:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23941:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23942:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23943:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23945:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23946:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23947:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23985:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23986:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23987:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23989:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23990:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23991:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:23993:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:23994:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:23995:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24035:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24036:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24037:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24073:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24074:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24075:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24077:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24078:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24079:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24081:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24082:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24083:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24122:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24123:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24124:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24126:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24127:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24128:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24166:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24167:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24168:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24170:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24171:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24172:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24174:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24175:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24176:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24215:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24216:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24217:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24219:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24220:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24221:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24223:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24224:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24225:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24227:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24228:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24229:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24270:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24271:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24272:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24274:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24275:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24276:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24278:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24279:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24280:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24318:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24319:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24320:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24322:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24323:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24324:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24326:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24327:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24328:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24355:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24356:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24357:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24376:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24377:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24378:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24380:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24381:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24382:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24412:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24413:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24414:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24446:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24447:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24448:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24450:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24451:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24452:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24477:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24478:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24479:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24481:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24482:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24483:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24506:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24507:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24508:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24510:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24511:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24512:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24514:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24515:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24516:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24549:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24550:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24551:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24582:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24583:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24584:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24618:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24619:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24620:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24622:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24623:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24624:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24659:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24660:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24661:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24663:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24664:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24665:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24698:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24699:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24700:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24702:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24703:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24704:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24745:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24746:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24747:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24749:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24750:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24751:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24753:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24754:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24755:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24793:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24794:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24795:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24797:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24798:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24799:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24840:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24841:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24842:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24844:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24845:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24846:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24848:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24849:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24850:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24888:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24889:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24890:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24892:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24893:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24894:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24896:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24897:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24898:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24937:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24938:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24939:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24941:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24942:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24943:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24945:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24946:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24947:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24949:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24950:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24951:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:24989:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:24990:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:24991:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25022:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25023:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25024:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25055:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25056:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25057:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25059:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25060:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25061:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25092:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25093:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25094:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25128:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25129:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25130:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25132:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25133:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25134:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25168:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25169:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25170:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25206:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25207:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25208:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25210:  c10::optional<Storage> eigvals__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25211:    eigvals_.has_storage() ? c10::optional<Storage>(eigvals_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25212:  c10::intrusive_ptr<TensorImpl> eigvals__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25214:  c10::optional<Storage> eigvecs__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25215:    eigvecs_.has_storage() ? c10::optional<Storage>(eigvecs_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25216:  c10::intrusive_ptr<TensorImpl> eigvecs__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25244:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25245:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25246:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25265:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25266:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25267:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25269:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25270:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25271:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25299:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25300:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25301:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25335:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25336:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25337:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25339:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25340:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25341:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25376:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25377:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25378:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25414:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25415:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25416:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25418:  c10::optional<Storage> Q__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25419:    Q_.has_storage() ? c10::optional<Storage>(Q_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25420:  c10::intrusive_ptr<TensorImpl> Q__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25422:  c10::optional<Storage> R__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25423:    R_.has_storage() ? c10::optional<Storage>(R_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25424:  c10::intrusive_ptr<TensorImpl> R__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25462:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25463:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25464:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25501:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25502:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25503:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25505:  c10::optional<Storage> sign__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25506:    sign_.has_storage() ? c10::optional<Storage>(sign_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25507:  c10::intrusive_ptr<TensorImpl> sign__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25509:  c10::optional<Storage> logabsdet__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25510:    logabsdet_.has_storage() ? c10::optional<Storage>(logabsdet_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25511:  c10::intrusive_ptr<TensorImpl> logabsdet__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25549:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25550:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25551:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25553:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25554:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25555:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25593:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25594:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25595:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25597:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25598:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25599:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25601:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25602:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25603:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25627:Tensor & linspace_out_out(Scalar start, Scalar end, c10::optional<int64_t> steps, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:25630:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25631:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25632:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25658:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25659:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25660:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25689:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25690:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25691:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25721:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25722:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25723:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25754:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25755:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25756:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25758:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25759:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25760:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25792:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25793:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25794:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25824:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25825:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25826:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25857:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25858:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25859:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25861:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25862:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25863:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25895:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25896:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25897:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25927:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25928:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25929:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25960:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25961:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25962:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25964:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:25965:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:25966:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:25999:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26000:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26001:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26019:Tensor & log_normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:26030:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26031:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26032:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26063:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26064:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26065:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26067:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26068:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26069:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26106:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26107:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26108:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26110:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26111:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26112:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26114:  c10::optional<Storage> buffer__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26115:    buffer_.has_storage() ? c10::optional<Storage>(buffer_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26116:  c10::intrusive_ptr<TensorImpl> buffer__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26156:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26157:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26158:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26160:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26161:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26162:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26164:  c10::optional<Storage> buffer__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26165:    buffer_.has_storage() ? c10::optional<Storage>(buffer_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26166:  c10::intrusive_ptr<TensorImpl> buffer__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26168:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26169:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26170:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26210:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26211:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26212:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26248:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26249:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26250:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26252:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26253:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26254:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26256:  c10::optional<Storage> buffer__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26257:    buffer_.has_storage() ? c10::optional<Storage>(buffer_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26258:  c10::intrusive_ptr<TensorImpl> buffer__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26296:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26297:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26298:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26300:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26301:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26302:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26337:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26338:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26339:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26341:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26342:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26343:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26379:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26380:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26381:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26383:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26384:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26385:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26387:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26388:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26389:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26427:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26428:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26429:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26431:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26432:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26433:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26435:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26436:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26437:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26473:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26474:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26475:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26510:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26511:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26512:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26514:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26515:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26516:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26548:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26549:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26550:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26586:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26587:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26588:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26590:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26591:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26592:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26594:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26595:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26596:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26633:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26634:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26635:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26637:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26638:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26639:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26674:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26675:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26676:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26678:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26679:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26680:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26682:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26683:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26684:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26722:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26723:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26724:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26726:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26727:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26728:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26730:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26731:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26732:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26756:Tensor logit(const Tensor & self, c10::optional<double> eps) {
autograd/generated/VariableTypeEverything.cpp:26768:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26769:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26770:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26789:Tensor & logit_(Tensor & self, c10::optional<double> eps) {
autograd/generated/VariableTypeEverything.cpp:26802:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26803:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26804:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26822:Tensor logit_backward(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps) {
autograd/generated/VariableTypeEverything.cpp:26833:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26834:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26835:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26837:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26838:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26839:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26861:Tensor & logit_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, c10::optional<double> eps, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:26875:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26876:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26877:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26879:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26880:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26881:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26883:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26884:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26885:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26909:Tensor & logit_out_out(const Tensor & self, c10::optional<double> eps, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:26922:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26923:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26924:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26926:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26927:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26928:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26949:Tensor & logspace_out_out(Scalar start, Scalar end, c10::optional<int64_t> steps, double base, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:26952:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26953:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26954:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:26982:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:26983:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:26984:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27019:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27020:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27021:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27023:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27024:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27025:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27059:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27060:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27061:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27063:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27064:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27065:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27103:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27104:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27105:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27107:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27108:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27109:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27111:  c10::optional<Storage> X__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27112:    X_.has_storage() ? c10::optional<Storage>(X_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27113:  c10::intrusive_ptr<TensorImpl> X__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27115:  c10::optional<Storage> qr__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27116:    qr_.has_storage() ? c10::optional<Storage>(qr_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27117:  c10::intrusive_ptr<TensorImpl> qr__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27148:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27149:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27150:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27169:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27170:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27171:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27173:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27174:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27175:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27205:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27206:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27207:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27239:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27240:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27241:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27243:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27244:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27245:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27270:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27271:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27272:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27274:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27275:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27276:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27299:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27300:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27301:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27303:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27304:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27305:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27307:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27308:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27309:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27344:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27345:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27346:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27348:  c10::optional<Storage> LU_data__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27349:    LU_data_.has_storage() ? c10::optional<Storage>(LU_data_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27350:  c10::intrusive_ptr<TensorImpl> LU_data__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27352:  c10::optional<Storage> LU_pivots__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27353:    LU_pivots_.has_storage() ? c10::optional<Storage>(LU_pivots_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27354:  c10::intrusive_ptr<TensorImpl> LU_pivots__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27394:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27395:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27396:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27398:  c10::optional<Storage> LU_data__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27399:    LU_data_.has_storage() ? c10::optional<Storage>(LU_data_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27400:  c10::intrusive_ptr<TensorImpl> LU_data__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27402:  c10::optional<Storage> LU_pivots__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27403:    LU_pivots_.has_storage() ? c10::optional<Storage>(LU_pivots_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27404:  c10::intrusive_ptr<TensorImpl> LU_pivots__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27406:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27407:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27408:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27448:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27449:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27450:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27452:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27453:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27454:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27489:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27490:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27491:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27493:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27494:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27495:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27497:  c10::optional<Storage> value__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27498:    value_.has_storage() ? c10::optional<Storage>(value_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27499:  c10::intrusive_ptr<TensorImpl> value__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27538:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27539:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27540:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27542:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27543:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27544:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27546:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27547:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27548:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27585:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27586:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27587:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27589:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27590:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27591:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27626:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27627:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27628:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27630:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27631:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27632:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27634:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27635:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27636:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27671:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27672:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27673:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27706:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27707:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27708:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27741:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27742:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27743:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27779:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27780:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27781:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27783:  c10::optional<Storage> max__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27784:    max_.has_storage() ? c10::optional<Storage>(max_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27785:  c10::intrusive_ptr<TensorImpl> max__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27787:  c10::optional<Storage> max_values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27788:    max_values_.has_storage() ? c10::optional<Storage>(max_values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27789:  c10::intrusive_ptr<TensorImpl> max_values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27832:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27833:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27834:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27870:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27871:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27872:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27874:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27875:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27876:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27878:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27879:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27880:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27920:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27921:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27922:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27924:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27925:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27926:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27928:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27929:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27930:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27932:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27933:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27934:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27975:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27976:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27977:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27979:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27980:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27981:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:27983:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:27984:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:27985:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28028:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28029:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28030:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28066:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28067:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28068:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28070:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28071:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28072:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28074:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28075:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28076:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28116:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28117:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28118:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28120:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28121:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28122:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28124:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28125:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28126:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28128:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28129:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28130:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28171:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28172:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28173:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28175:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28176:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28177:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28179:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28180:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28181:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28220:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28221:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28222:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28224:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28225:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28226:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28263:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28264:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28265:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28267:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28268:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28269:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28271:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28272:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28273:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28313:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28314:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28315:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28317:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28318:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28319:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28321:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28322:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28323:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28325:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28326:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28327:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28368:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28369:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28370:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28372:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28373:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28374:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28376:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28377:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28378:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28418:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28419:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28420:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28422:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28423:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28424:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28458:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28459:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28460:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28462:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28463:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28464:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28466:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28467:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28468:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28508:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28509:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28510:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28512:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28513:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28514:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28516:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28517:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28518:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28520:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28521:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28522:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28563:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28564:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28565:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28567:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28568:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28569:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28571:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28572:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28573:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28610:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28611:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28612:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28614:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28615:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28616:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28652:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28653:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28654:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28656:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28657:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28658:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28660:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28661:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28662:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28686:Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:28699:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28700:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28701:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28719:Tensor mean_dim(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:28733:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28734:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28735:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28753:Tensor & mean_out_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:28766:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28767:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28768:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28770:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28771:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28772:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28804:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28805:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28806:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28843:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28844:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28845:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28881:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28882:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28883:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28885:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28886:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28887:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28889:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28890:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28891:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28931:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28932:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28933:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:28966:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:28967:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:28968:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29004:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29005:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29006:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29008:  c10::optional<Storage> min__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29009:    min_.has_storage() ? c10::optional<Storage>(min_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29010:  c10::intrusive_ptr<TensorImpl> min__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29012:  c10::optional<Storage> min_indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29013:    min_indices_.has_storage() ? c10::optional<Storage>(min_indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29014:  c10::intrusive_ptr<TensorImpl> min_indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29052:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29053:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29054:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29056:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29057:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29058:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29094:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29095:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29096:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29098:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29099:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29100:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29102:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29103:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29104:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29128:std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) {
autograd/generated/VariableTypeEverything.cpp:29150:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29151:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29152:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29154:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29155:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29156:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29182:std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon) {
autograd/generated/VariableTypeEverything.cpp:29207:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29208:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29209:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29211:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29212:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29213:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29215:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29216:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29217:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29244:Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableTypeEverything.cpp:29263:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29264:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29265:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29267:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29268:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29269:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29315:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29316:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29317:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29319:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29320:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29321:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29323:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29324:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29325:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29362:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29363:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29364:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29394:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29395:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29396:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29398:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29399:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29400:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29433:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29434:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29435:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29437:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29438:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29439:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29461:Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableTypeEverything.cpp:29481:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29482:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29483:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29485:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29486:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29487:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29534:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29535:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29536:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29538:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29539:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29540:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29542:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29543:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29544:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29582:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29583:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29584:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29586:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29587:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29588:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29621:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29622:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29623:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29625:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29626:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29627:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29649:Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableTypeEverything.cpp:29668:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29669:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29670:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29672:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29673:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29674:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29720:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29721:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29722:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29724:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29725:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29726:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29728:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29729:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29730:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29768:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29769:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29770:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29772:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29773:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29774:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29807:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29808:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29809:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29811:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29812:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29813:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29835:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) {
autograd/generated/VariableTypeEverything.cpp:29867:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29868:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29869:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29871:  std::vector<c10::optional<Storage>> weight__storage_saved(weight_.size());
autograd/generated/VariableTypeEverything.cpp:29874:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:29875:  std::vector<c10::intrusive_ptr<TensorImpl>> weight__impl_saved(weight_.size());
autograd/generated/VariableTypeEverything.cpp:29878:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29879:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29880:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29917:std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
autograd/generated/VariableTypeEverything.cpp:29936:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29937:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29938:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29940:  std::vector<c10::optional<Storage>> weight__storage_saved(weight_.size());
autograd/generated/VariableTypeEverything.cpp:29943:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:29944:  std::vector<c10::intrusive_ptr<TensorImpl>> weight__impl_saved(weight_.size());
autograd/generated/VariableTypeEverything.cpp:29947:  c10::optional<Storage> weight_buf__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29948:    weight_buf_.has_storage() ? c10::optional<Storage>(weight_buf_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29949:  c10::intrusive_ptr<TensorImpl> weight_buf__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29951:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29952:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29953:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29955:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29956:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29957:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:29959:  c10::optional<Storage> reserve__storage_saved =
autograd/generated/VariableTypeEverything.cpp:29960:    reserve_.has_storage() ? c10::optional<Storage>(reserve_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:29961:  c10::intrusive_ptr<TensorImpl> reserve__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30012:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30013:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30014:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30033:Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
autograd/generated/VariableTypeEverything.cpp:30050:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30051:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30052:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30054:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30055:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30056:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30100:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30101:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30102:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30104:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30105:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30106:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30108:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30109:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30110:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30137:Tensor mkldnn_linear(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias) {
autograd/generated/VariableTypeEverything.cpp:30150:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30151:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30152:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30154:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30155:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30156:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30193:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30194:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30195:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30197:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30198:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30199:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30201:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30202:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30203:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30241:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30242:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30243:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30245:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30246:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30247:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30283:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30284:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30285:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30287:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30288:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30289:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30291:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30292:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30293:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30329:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30330:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30331:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30360:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30361:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30362:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30391:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30392:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30393:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30422:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30423:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30424:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30464:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30465:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30466:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30468:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30469:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30470:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30505:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30506:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30507:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30509:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30510:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30511:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30513:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30514:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30515:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30554:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30555:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30556:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30592:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30593:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30594:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30596:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30597:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30598:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30600:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30601:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30602:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30641:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30642:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30643:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30645:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30646:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30647:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30685:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30686:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30687:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30689:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30690:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30691:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30693:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30694:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30695:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30735:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30736:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30737:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30739:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30740:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30741:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30743:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30744:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30745:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30747:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30748:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30749:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30790:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30791:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30792:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30794:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30795:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30796:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30798:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30799:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30800:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30843:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30844:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30845:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30847:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30848:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30849:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30882:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30883:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30884:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30922:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30923:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30924:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30926:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30927:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30928:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30962:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30963:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30964:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:30996:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:30997:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:30998:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31000:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31001:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31002:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31004:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31005:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31006:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31030:Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/VariableTypeEverything.cpp:31048:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31049:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31050:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31052:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31053:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31054:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31076:Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/VariableTypeEverything.cpp:31088:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31089:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31090:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31092:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31093:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31094:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31096:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31097:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31098:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31123:Tensor & multi_margin_loss_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:31138:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31139:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31140:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31142:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31143:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31144:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31146:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31147:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31148:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31150:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31151:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31152:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31179:Tensor & multi_margin_loss_out_out(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:31193:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31194:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31195:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31197:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31198:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31199:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31201:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31202:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31203:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31240:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31241:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31242:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31244:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31245:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31246:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31248:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31249:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31250:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31252:  c10::optional<Storage> is_target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31253:    is_target_.has_storage() ? c10::optional<Storage>(is_target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31254:  c10::intrusive_ptr<TensorImpl> is_target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31298:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31299:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31300:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31302:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31303:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31304:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31306:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31307:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31308:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31310:  c10::optional<Storage> is_target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31311:    is_target_.has_storage() ? c10::optional<Storage>(is_target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31312:  c10::intrusive_ptr<TensorImpl> is_target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31314:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31315:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31316:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31362:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31363:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31364:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31366:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31367:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31368:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31408:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31409:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31410:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31412:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31413:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31414:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31416:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31417:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31418:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31420:  c10::optional<Storage> is_target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31421:    is_target_.has_storage() ? c10::optional<Storage>(is_target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31422:  c10::intrusive_ptr<TensorImpl> is_target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31450:Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:31453:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31454:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31455:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31470:Tensor & multinomial_out_out(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:31474:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31475:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31476:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31478:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31479:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31480:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31515:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31516:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31517:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31519:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31520:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31521:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31556:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31557:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31558:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31560:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31561:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31562:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31564:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31565:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31566:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31602:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31603:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31604:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31636:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31637:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31638:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31656:Tensor nan_to_num(const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/VariableTypeEverything.cpp:31667:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31668:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31669:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31688:Tensor & nan_to_num_(Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/VariableTypeEverything.cpp:31700:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31701:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31702:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31720:Tensor & nan_to_num_out_out(const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:31733:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31734:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31735:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31737:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31738:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31739:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31771:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31772:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31773:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31810:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31811:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31812:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31848:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31849:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31850:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31852:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31853:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31854:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31856:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31857:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31858:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31883:Tensor nansum(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:31896:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31897:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31898:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31917:Tensor nansum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:31931:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31932:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31933:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31952:Tensor & nansum_out_IntList_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:31965:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31966:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31967:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:31969:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:31970:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:31971:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32002:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32003:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32004:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32036:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32037:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32038:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32040:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32041:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32042:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32063:std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps) {
autograd/generated/VariableTypeEverything.cpp:32084:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32085:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32086:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32109:std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
autograd/generated/VariableTypeEverything.cpp:32134:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32135:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32136:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32138:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32139:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32140:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32164:std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_out_out(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps, Tensor & out, Tensor & save_mean, Tensor & save_invstd) {
autograd/generated/VariableTypeEverything.cpp:32179:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32180:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32181:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32183:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32184:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32185:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32187:  c10::optional<Storage> save_mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32188:    save_mean_.has_storage() ? c10::optional<Storage>(save_mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32189:  c10::intrusive_ptr<TensorImpl> save_mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32191:  c10::optional<Storage> save_invstd__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32192:    save_invstd_.has_storage() ? c10::optional<Storage>(save_invstd_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32193:  c10::intrusive_ptr<TensorImpl> save_invstd__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32222:std::tuple<Tensor,Tensor,Tensor> native_group_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps) {
autograd/generated/VariableTypeEverything.cpp:32242:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32243:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32244:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32269:std::tuple<Tensor,Tensor,Tensor> native_group_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, std::array<bool,3> output_mask) {
autograd/generated/VariableTypeEverything.cpp:32285:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32286:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32287:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32289:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32290:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32291:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32293:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32294:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32295:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32297:  c10::optional<Storage> rstd__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32298:    rstd_.has_storage() ? c10::optional<Storage>(rstd_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32299:  c10::intrusive_ptr<TensorImpl> rstd__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32329:std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps) {
autograd/generated/VariableTypeEverything.cpp:32347:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32348:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32349:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32374:std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, IntArrayRef normalized_shape, const Tensor & mean, const Tensor & rstd, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, std::array<bool,3> output_mask) {
autograd/generated/VariableTypeEverything.cpp:32390:  c10::optional<Storage> grad_out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32391:    grad_out_.has_storage() ? c10::optional<Storage>(grad_out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32392:  c10::intrusive_ptr<TensorImpl> grad_out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32394:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32395:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32396:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32398:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32399:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32400:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32402:  c10::optional<Storage> rstd__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32403:    rstd_.has_storage() ? c10::optional<Storage>(rstd_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32404:  c10::intrusive_ptr<TensorImpl> rstd__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32444:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32445:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32446:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32465:Tensor native_norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:32475:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32476:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32477:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32499:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32500:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32501:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32520:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32521:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32522:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32524:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32525:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32526:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32556:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32557:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32558:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32590:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32591:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32592:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32594:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32595:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32596:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32621:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32622:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32623:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32625:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32626:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32627:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32650:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32651:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32652:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32654:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32655:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32656:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32658:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32659:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32660:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32691:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32692:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32693:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32722:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32723:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32724:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32755:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32756:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32757:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32759:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32760:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32761:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32793:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32794:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32795:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32797:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32798:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32799:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32833:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32834:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32835:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32837:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32838:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32839:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32874:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32875:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32876:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32878:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32879:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32880:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32882:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32883:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32884:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32908:Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
autograd/generated/VariableTypeEverything.cpp:32927:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32928:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32929:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32931:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32932:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32933:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32935:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32936:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32937:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32939:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32940:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32941:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32969:Tensor & nll_loss2d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:32985:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32986:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32987:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32989:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32990:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32991:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32993:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32994:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32995:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:32997:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:32998:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:32999:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33001:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33002:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33003:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33033:std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/VariableTypeEverything.cpp:33052:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33053:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33054:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33056:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33057:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33058:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33083:std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out_output(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/VariableTypeEverything.cpp:33098:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33099:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33100:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33102:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33103:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33104:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33106:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33107:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33108:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33110:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33111:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33112:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33140:Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
autograd/generated/VariableTypeEverything.cpp:33159:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33160:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33161:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33163:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33164:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33165:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33167:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33168:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33169:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33171:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33172:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33173:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33201:Tensor & nll_loss_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:33217:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33218:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33219:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33221:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33222:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33223:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33225:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33226:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33227:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33229:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33230:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33231:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33233:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33234:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33235:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33265:std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/VariableTypeEverything.cpp:33284:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33285:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33286:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33288:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33289:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33290:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33315:std::tuple<Tensor &,Tensor &> nll_loss_forward_out_output(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/VariableTypeEverything.cpp:33330:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33331:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33332:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33334:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33335:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33336:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33338:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33339:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33340:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33342:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33343:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33344:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33375:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33376:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33377:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33396:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33397:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33398:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33400:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33401:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33402:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33420:Tensor norm_ScalarOpt_dtype(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {
autograd/generated/VariableTypeEverything.cpp:33432:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33433:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33434:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33468:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33469:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33470:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33492:Tensor norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
autograd/generated/VariableTypeEverything.cpp:33506:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33507:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33508:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33530:Tensor norm_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
autograd/generated/VariableTypeEverything.cpp:33544:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33545:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33546:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33568:Tensor & norm_out_dtype_out(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:33581:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33582:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33583:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33585:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33586:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33587:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33608:Tensor & norm_out_out(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:33621:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33622:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33623:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33625:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33626:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33627:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33648:Tensor normal_Tensor_float(const Tensor & mean, double std, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:33659:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33660:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33661:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33680:Tensor normal_float_Tensor(double mean, const Tensor & std, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:33691:  c10::optional<Storage> std__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33692:    std_.has_storage() ? c10::optional<Storage>(std_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33693:  c10::intrusive_ptr<TensorImpl> std__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33712:Tensor normal_Tensor_Tensor(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:33725:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33726:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33727:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33729:  c10::optional<Storage> std__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33730:    std_.has_storage() ? c10::optional<Storage>(std_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33731:  c10::intrusive_ptr<TensorImpl> std__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33753:Tensor & normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:33764:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33765:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33766:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33784:Tensor & normal_out_Tensor_float_out(const Tensor & mean, double std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:33797:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33798:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33799:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33801:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33802:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33803:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33824:Tensor & normal_out_float_Tensor_out(double mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:33837:  c10::optional<Storage> std__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33838:    std_.has_storage() ? c10::optional<Storage>(std_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33839:  c10::intrusive_ptr<TensorImpl> std__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33841:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33842:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33843:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33864:Tensor & normal_out_Tensor_Tensor_out(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:33878:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33879:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33880:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33882:  c10::optional<Storage> std__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33883:    std_.has_storage() ? c10::optional<Storage>(std_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33884:  c10::intrusive_ptr<TensorImpl> std__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33886:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33887:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33888:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33923:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33924:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33925:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33927:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33928:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33929:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33965:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33966:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33967:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33969:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33970:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33971:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:33973:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:33974:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:33975:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34011:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34012:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34013:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34015:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34016:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34017:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34019:  c10::optional<Storage> input3__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34020:    input3_.has_storage() ? c10::optional<Storage>(input3_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34021:  c10::intrusive_ptr<TensorImpl> input3__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34061:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34062:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34063:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34065:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34066:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34067:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34069:  c10::optional<Storage> input3__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34070:    input3_.has_storage() ? c10::optional<Storage>(input3_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34071:  c10::intrusive_ptr<TensorImpl> input3__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34073:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34074:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34075:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34113:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34114:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34115:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34140:Tensor poisson(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:34151:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34152:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34153:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34189:  c10::optional<Storage> abs__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34190:    abs_.has_storage() ? c10::optional<Storage>(abs_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34191:  c10::intrusive_ptr<TensorImpl> abs__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34193:  c10::optional<Storage> angle__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34194:    angle_.has_storage() ? c10::optional<Storage>(angle_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34195:  c10::intrusive_ptr<TensorImpl> angle__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34231:  c10::optional<Storage> abs__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34232:    abs_.has_storage() ? c10::optional<Storage>(abs_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34233:  c10::intrusive_ptr<TensorImpl> abs__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34235:  c10::optional<Storage> angle__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34236:    angle_.has_storage() ? c10::optional<Storage>(angle_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34237:  c10::intrusive_ptr<TensorImpl> angle__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34239:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34240:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34241:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34277:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34278:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34279:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34311:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34312:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34313:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34315:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34316:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34317:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34351:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34352:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34353:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34355:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34356:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34357:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34393:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34394:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34395:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34428:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34429:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34430:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34461:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34462:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34463:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34495:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34496:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34497:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34499:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34500:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34501:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34539:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34540:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34541:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34543:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34544:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34545:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34547:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34548:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34549:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34586:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34587:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34588:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34590:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34591:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34592:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34626:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34627:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34628:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34630:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34631:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34632:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34666:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34667:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34668:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34670:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34671:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34672:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34711:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34712:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34713:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34715:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34716:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34717:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34719:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34720:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34721:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34747:Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:34758:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34759:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34760:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34782:Tensor prod_dim_int(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:34795:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34796:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34797:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34819:Tensor & prod_out_int_out(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:34832:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34833:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34834:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34836:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34837:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34838:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34875:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34876:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34877:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34879:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34880:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34881:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34883:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34884:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34885:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34912:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34913:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34914:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34939:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34940:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34941:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34970:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34971:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34972:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:34994:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:34995:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:34996:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35014:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35015:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35016:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35034:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35035:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35036:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35056:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35057:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35058:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35060:  c10::optional<Storage> scales__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35061:    scales_.has_storage() ? c10::optional<Storage>(scales_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35062:  c10::intrusive_ptr<TensorImpl> scales__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35064:  c10::optional<Storage> zero_points__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35065:    zero_points_.has_storage() ? c10::optional<Storage>(zero_points_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35066:  c10::intrusive_ptr<TensorImpl> zero_points__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35090:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35091:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35092:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35112:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:35115:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:35116:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:35119:  c10::optional<Storage> scales__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35120:    scales_.has_storage() ? c10::optional<Storage>(scales_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35121:  c10::intrusive_ptr<TensorImpl> scales__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35123:  c10::optional<Storage> zero_points__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35124:    zero_points_.has_storage() ? c10::optional<Storage>(zero_points_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35125:  c10::intrusive_ptr<TensorImpl> zero_points__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35151:Tensor quantized_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & var, double eps, double output_scale, int64_t output_zero_point) {
autograd/generated/VariableTypeEverything.cpp:35163:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35164:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35165:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35167:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35168:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35169:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35171:  c10::optional<Storage> var__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35172:    var_.has_storage() ? c10::optional<Storage>(var_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35173:  c10::intrusive_ptr<TensorImpl> var__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35208:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35209:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35210:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35239:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35240:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35241:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35270:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35271:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35272:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35302:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35303:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35304:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35335:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35336:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35337:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35339:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35340:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35341:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35362:Tensor & random__from(Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:35373:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35374:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35375:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35393:Tensor & random__to(Tensor & self, int64_t to, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:35404:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35405:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35406:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35424:Tensor & random_(Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:35435:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35436:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35437:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35455:Tensor & randperm_out_generator_out(int64_t n, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:35458:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35459:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35460:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35478:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35479:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35480:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35505:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35506:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35507:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35539:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35540:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35541:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35575:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35576:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35577:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35579:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35580:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35581:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35605:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35606:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35607:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35632:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35633:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35634:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35665:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35666:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35667:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35669:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35670:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35671:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35706:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35707:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35708:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35710:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35711:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35712:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35714:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35715:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35716:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35753:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35754:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35755:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35757:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35758:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35759:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35792:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35793:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35794:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35825:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35826:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35827:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35829:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35830:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35831:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35866:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35867:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35868:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35870:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35871:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35872:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35874:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35875:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35876:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35913:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35914:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35915:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35917:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35918:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35919:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35951:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35952:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35953:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:35983:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:35984:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:35985:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36016:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36017:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36018:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36049:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36050:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36051:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36053:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36054:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36055:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36088:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36089:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36090:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36121:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36122:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36123:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36125:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36126:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36127:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36161:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36162:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36163:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36165:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36166:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36167:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36202:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36203:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36204:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36206:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36207:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36208:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36210:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36211:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36212:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36250:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36251:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36252:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36286:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36287:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36288:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36319:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36320:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36321:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36323:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36324:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36325:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36358:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36359:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36360:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36388:  c10::optional<Storage> repeats__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36389:    repeats_.has_storage() ? c10::optional<Storage>(repeats_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36390:  c10::intrusive_ptr<TensorImpl> repeats__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36421:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36422:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36423:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36454:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36455:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36456:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36458:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36459:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36460:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36495:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36496:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36497:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36499:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36500:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36501:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36503:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36504:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36505:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36542:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36543:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36544:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36546:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36547:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36548:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36581:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36582:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36583:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36614:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36615:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36616:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36618:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36619:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36620:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36655:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36656:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36657:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36659:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36660:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36661:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36663:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36664:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36665:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36702:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36703:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36704:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36706:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36707:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36708:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36741:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36742:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36743:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36774:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36775:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36776:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36778:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36779:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36780:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36815:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36816:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36817:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36819:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36820:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36821:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36823:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36824:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36825:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36862:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36863:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36864:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36866:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36867:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36868:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36901:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36902:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36903:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36933:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36934:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36935:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36963:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36964:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36965:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:36995:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:36996:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:36997:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37028:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37029:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37030:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37032:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37033:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37034:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37055:Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:37072:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37073:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37074:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37076:  c10::optional<Storage> noise__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37077:    noise_.has_storage() ? c10::optional<Storage>(noise_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37078:  c10::intrusive_ptr<TensorImpl> noise__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37100:Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:37117:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37118:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37119:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37121:  c10::optional<Storage> noise__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37122:    noise_.has_storage() ? c10::optional<Storage>(noise_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37123:  c10::intrusive_ptr<TensorImpl> noise__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37165:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37166:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37167:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37169:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37170:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37171:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37173:  c10::optional<Storage> noise__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37174:    noise_.has_storage() ? c10::optional<Storage>(noise_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37175:  c10::intrusive_ptr<TensorImpl> noise__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37200:Tensor & rrelu_with_noise_out_out(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:37214:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37215:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37216:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37218:  c10::optional<Storage> noise__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37219:    noise_.has_storage() ? c10::optional<Storage>(noise_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37220:  c10::intrusive_ptr<TensorImpl> noise__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37222:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37223:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37224:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37258:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37259:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37260:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37292:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37293:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37294:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37328:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37329:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37330:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37332:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37333:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37334:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37367:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37368:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37369:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37371:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37372:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37373:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37406:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37407:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37408:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37442:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37443:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37444:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37446:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37447:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37448:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37450:  c10::optional<Storage> src__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37451:    src_.has_storage() ? c10::optional<Storage>(src_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37452:  c10::intrusive_ptr<TensorImpl> src__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37490:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37491:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37492:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37494:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37495:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37496:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37530:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37531:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37532:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37534:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37535:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37536:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37538:  c10::optional<Storage> src__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37539:    src_.has_storage() ? c10::optional<Storage>(src_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37540:  c10::intrusive_ptr<TensorImpl> src__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37576:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37577:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37578:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37580:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37581:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37582:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37620:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37621:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37622:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37624:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37625:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37626:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37628:  c10::optional<Storage> src__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37629:    src_.has_storage() ? c10::optional<Storage>(src_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37630:  c10::intrusive_ptr<TensorImpl> src__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37658:  c10::optional<Storage> sorted_sequence__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37659:    sorted_sequence_.has_storage() ? c10::optional<Storage>(sorted_sequence_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37660:  c10::intrusive_ptr<TensorImpl> sorted_sequence__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37662:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37663:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37664:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37685:  c10::optional<Storage> sorted_sequence__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37686:    sorted_sequence_.has_storage() ? c10::optional<Storage>(sorted_sequence_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37687:  c10::intrusive_ptr<TensorImpl> sorted_sequence__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37707:  c10::optional<Storage> sorted_sequence__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37708:    sorted_sequence_.has_storage() ? c10::optional<Storage>(sorted_sequence_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37709:  c10::intrusive_ptr<TensorImpl> sorted_sequence__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37711:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37712:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37713:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37715:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37716:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37717:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37751:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37752:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37753:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37873:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37874:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37875:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37908:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37909:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37910:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37944:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37945:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37946:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37948:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37949:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37950:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:37981:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:37982:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:37983:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38016:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38017:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38018:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38052:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38053:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38054:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38056:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38057:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38058:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38094:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38095:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38096:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38098:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38099:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38100:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38102:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38103:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38104:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38141:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38142:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38143:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38145:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38146:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38147:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38178:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38179:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38180:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38210:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38211:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38212:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38243:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38244:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38245:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38247:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38248:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38249:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38283:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38284:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38285:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38287:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38288:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38289:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38321:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38322:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38323:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38354:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38355:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38356:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38385:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38386:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38387:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38389:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38390:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38391:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38426:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38427:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38428:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38430:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38431:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38432:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38464:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38465:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38466:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38496:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38497:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38498:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38529:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38530:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38531:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38533:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38534:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38535:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38567:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38568:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38569:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38599:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38600:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38601:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38632:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38633:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38634:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38636:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38637:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38638:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38670:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38671:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38672:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38702:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38703:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38704:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38735:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38736:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38737:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38739:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38740:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38741:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38762:Tensor slice_Tensor(const Tensor & self, int64_t dim, c10::optional<int64_t> start, c10::optional<int64_t> end, int64_t step) {
autograd/generated/VariableTypeEverything.cpp:38777:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38778:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38779:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38818:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38819:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38820:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38867:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38868:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38869:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38871:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38872:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38873:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38875:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38876:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38877:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38879:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38880:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38881:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38883:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38884:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38885:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38937:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38938:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38939:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38941:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38942:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38943:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38945:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38946:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38947:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38949:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38950:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38951:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38953:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38954:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38955:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38957:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38958:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38959:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38961:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38962:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38963:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:38965:  c10::optional<Storage> grad_bias__storage_saved =
autograd/generated/VariableTypeEverything.cpp:38966:    grad_bias_.has_storage() ? c10::optional<Storage>(grad_bias_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:38967:  c10::intrusive_ptr<TensorImpl> grad_bias__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39008:std::tuple<Tensor,Tensor,Tensor> slow_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/VariableTypeEverything.cpp:39027:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39028:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39029:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39031:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39032:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39033:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39059:std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out_output(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/VariableTypeEverything.cpp:39075:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39076:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39077:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39079:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39080:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39081:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39083:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39084:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39085:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39087:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39088:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39089:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39091:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39092:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39093:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39125:Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/VariableTypeEverything.cpp:39142:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39143:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39144:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39146:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39147:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39148:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39191:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39192:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39193:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39195:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39196:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39197:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39199:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39200:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39201:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39228:Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/VariableTypeEverything.cpp:39245:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39246:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39247:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39249:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39250:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39251:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39294:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39295:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39296:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39298:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39299:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39300:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39302:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39303:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39304:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39331:Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
autograd/generated/VariableTypeEverything.cpp:39349:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39350:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39351:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39353:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39354:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39355:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39403:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39404:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39405:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39407:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39408:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39409:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39411:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39412:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39413:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39415:  c10::optional<Storage> columns__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39416:    columns_.has_storage() ? c10::optional<Storage>(columns_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39417:  c10::intrusive_ptr<TensorImpl> columns__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39419:  c10::optional<Storage> ones__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39420:    ones_.has_storage() ? c10::optional<Storage>(ones_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39421:  c10::intrusive_ptr<TensorImpl> ones__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39473:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39474:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39475:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39477:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39478:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39479:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39481:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39482:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39483:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39485:  c10::optional<Storage> columns__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39486:    columns_.has_storage() ? c10::optional<Storage>(columns_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39487:  c10::intrusive_ptr<TensorImpl> columns__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39489:  c10::optional<Storage> ones__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39490:    ones_.has_storage() ? c10::optional<Storage>(ones_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39491:  c10::intrusive_ptr<TensorImpl> ones__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39493:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39494:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39495:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39497:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39498:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39499:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39501:  c10::optional<Storage> grad_bias__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39502:    grad_bias_.has_storage() ? c10::optional<Storage>(grad_bias_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39503:  c10::intrusive_ptr<TensorImpl> grad_bias__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39544:Tensor & slow_conv_transpose2d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:39558:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39559:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39560:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39562:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39563:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39564:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39566:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39567:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39568:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39592:Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
autograd/generated/VariableTypeEverything.cpp:39610:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39611:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39612:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39614:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39615:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39616:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39664:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39665:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39666:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39668:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39669:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39670:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39672:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39673:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39674:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39676:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39677:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39678:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39680:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39681:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39682:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39734:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39735:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39736:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39738:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39739:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39740:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39742:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39743:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39744:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39746:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39747:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39748:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39750:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39751:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39752:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39754:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39755:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39756:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39758:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39759:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39760:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39762:  c10::optional<Storage> grad_bias__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39763:    grad_bias_.has_storage() ? c10::optional<Storage>(grad_bias_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39764:  c10::intrusive_ptr<TensorImpl> grad_bias__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39805:Tensor & slow_conv_transpose3d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:39819:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39820:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39821:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39823:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39824:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39825:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39827:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39828:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39829:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39868:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39869:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39870:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39872:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39873:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39874:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39913:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39914:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39915:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39917:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39918:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39919:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39921:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39922:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39923:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39963:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39964:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39965:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39967:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39968:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39969:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39971:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39972:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39973:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:39975:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:39976:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:39977:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40018:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40019:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40020:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40022:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40023:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40024:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40026:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40027:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40028:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40067:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40068:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40069:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40071:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40072:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40073:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40112:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40113:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40114:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40116:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40117:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40118:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40120:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40121:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40122:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40162:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40163:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40164:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40166:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40167:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40168:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40170:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40171:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40172:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40174:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40175:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40176:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40217:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40218:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40219:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40221:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40222:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40223:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40225:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40226:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40227:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40264:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40265:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40266:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40305:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40306:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40307:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40309:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40310:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40311:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40313:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40314:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40315:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40355:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40356:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40357:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40359:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40360:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40361:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40363:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40364:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40365:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40367:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40368:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40369:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40409:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40410:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40411:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40413:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40414:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40415:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40448:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40449:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40450:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40482:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40483:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40484:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40486:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40487:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40488:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40524:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40525:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40526:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40528:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40529:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40530:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40532:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40533:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40534:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40571:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40572:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40573:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40575:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40576:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40577:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40613:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40614:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40615:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40617:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40618:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40619:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40658:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40659:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40660:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40662:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40663:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40664:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40666:  c10::optional<Storage> solution__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40667:    solution_.has_storage() ? c10::optional<Storage>(solution_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40668:  c10::intrusive_ptr<TensorImpl> solution__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40670:  c10::optional<Storage> lu__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40671:    lu_.has_storage() ? c10::optional<Storage>(lu_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40672:  c10::intrusive_ptr<TensorImpl> lu__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40714:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40715:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40716:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40752:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40753:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40754:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40756:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40757:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40758:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40760:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40761:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40762:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40790:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40791:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40792:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40819:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40820:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40821:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40823:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40824:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40825:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40858:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40859:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40860:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40889:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40890:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40891:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40923:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40924:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40925:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40957:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40958:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40959:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:40987:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:40988:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:40989:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41021:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41022:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41023:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41057:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41058:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41059:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41061:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41062:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41063:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41095:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41096:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41097:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41133:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41134:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41135:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41171:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41172:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41173:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41204:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41205:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41206:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41239:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41240:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41241:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41243:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41244:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41245:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41247:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41248:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41249:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41251:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41252:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41253:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41293:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:41296:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:41297:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:41334:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:41337:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableTypeEverything.cpp:41338:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableTypeEverything.cpp:41341:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41342:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41343:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41381:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41382:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41383:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41419:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41420:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41421:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41457:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41458:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41459:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41499:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41500:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41501:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41538:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41539:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41540:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41542:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41543:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41544:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41579:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41580:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41581:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41583:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41584:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41585:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41617:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41618:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41619:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41652:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41653:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41654:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41656:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41657:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41658:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41691:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41692:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41693:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41725:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41726:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41727:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41729:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41730:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41731:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41733:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41734:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41735:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41759:Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:41770:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41771:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41772:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41790:Tensor sum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:41803:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41804:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41805:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41823:Tensor & sum_out_IntList_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:41836:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41837:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41838:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41840:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41841:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41842:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41878:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41879:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41880:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41918:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41919:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41920:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41922:  c10::optional<Storage> e__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41923:    e_.has_storage() ? c10::optional<Storage>(e_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41924:  c10::intrusive_ptr<TensorImpl> e__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41926:  c10::optional<Storage> V__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41927:    V_.has_storage() ? c10::optional<Storage>(V_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41928:  c10::intrusive_ptr<TensorImpl> V__impl_saved;
autograd/generated/VariableTypeEverything.cpp:41963:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:41964:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:41965:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42000:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42001:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42002:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42033:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42034:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42035:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42037:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42038:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42039:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42074:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42075:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42076:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42078:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42079:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42080:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42082:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42083:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42084:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42118:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42119:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42120:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42152:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42153:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42154:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42188:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42189:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42190:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42192:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42193:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42194:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42225:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42226:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42227:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42259:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42260:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42261:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42295:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42296:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42297:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42299:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42300:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42301:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42336:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42337:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42338:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42340:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42341:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42342:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42344:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42345:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42346:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42383:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42384:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42385:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42387:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42388:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42389:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42424:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42425:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42426:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42428:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42429:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42430:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42432:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42433:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42434:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42482:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42483:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42484:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42486:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42487:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42488:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42490:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42491:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42492:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42494:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42495:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42496:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42498:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42499:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42500:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42552:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42553:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42554:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42556:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42557:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42558:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42560:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42561:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42562:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42564:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42565:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42566:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42568:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42569:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42570:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42572:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42573:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42574:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42576:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42577:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42578:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42580:  c10::optional<Storage> grad_bias__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42581:    grad_bias_.has_storage() ? c10::optional<Storage>(grad_bias_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42582:  c10::intrusive_ptr<TensorImpl> grad_bias__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42623:std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/VariableTypeEverything.cpp:42642:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42643:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42644:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42646:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42647:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42648:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42674:std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out_output(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & output, Tensor & finput, Tensor & fgrad_input) {
autograd/generated/VariableTypeEverything.cpp:42690:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42691:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42692:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42694:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42695:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42696:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42698:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42699:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42700:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42702:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42703:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42704:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42706:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42707:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42708:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42761:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42762:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42763:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42765:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42766:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42767:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42769:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42770:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42771:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42813:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42814:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42815:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42817:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42818:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42819:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42821:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42822:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42823:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42825:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42826:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42827:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42829:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42830:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42831:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42862:Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/VariableTypeEverything.cpp:42879:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42880:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42881:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42883:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42884:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42885:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42907:Tensor & thnn_conv_depthwise2d_forward_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:42921:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42922:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42923:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42925:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42926:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42927:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42929:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42930:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42931:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:42967:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:42968:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:42969:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43000:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43001:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43002:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43036:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43037:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43038:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43040:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43041:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43042:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43077:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43078:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43079:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43081:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43082:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43083:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43104:Tensor to_dense(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:43115:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43116:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43117:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43136:Tensor to_mkldnn(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableTypeEverything.cpp:43147:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43148:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43149:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43178:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43179:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43180:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43209:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43210:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43211:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43244:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43245:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43246:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43282:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43283:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43284:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43286:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43287:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43288:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43290:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43291:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43292:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43328:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43329:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43330:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43360:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43361:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43362:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43399:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43400:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43401:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43437:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43438:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43439:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43441:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43442:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43443:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43482:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43483:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43484:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43486:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43487:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43488:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43490:  c10::optional<Storage> X__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43491:    X_.has_storage() ? c10::optional<Storage>(X_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43492:  c10::intrusive_ptr<TensorImpl> X__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43494:  c10::optional<Storage> M__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43495:    M_.has_storage() ? c10::optional<Storage>(M_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43496:  c10::intrusive_ptr<TensorImpl> M__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43535:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43536:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43537:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43567:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43568:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43569:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43587:Tensor tril_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableTypeEverything.cpp:43608:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43609:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43610:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43612:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43613:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43614:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43646:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43647:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43648:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43678:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43679:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43680:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43698:Tensor triu_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableTypeEverything.cpp:43719:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43720:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43721:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43723:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43724:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43725:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43756:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43757:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43758:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43788:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43789:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43790:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43821:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43822:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43823:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43825:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43826:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43827:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43859:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43860:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43861:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43893:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43894:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43895:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43933:  c10::optional<Storage> grad_in__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43934:    grad_in_.has_storage() ? c10::optional<Storage>(grad_in_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43935:  c10::intrusive_ptr<TensorImpl> grad_in__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43954:Tensor & uniform_(Tensor & self, double from, double to, c10::optional<Generator> generator) {
autograd/generated/VariableTypeEverything.cpp:43965:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43966:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:43967:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:43985:std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
autograd/generated/VariableTypeEverything.cpp:43998:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:43999:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44000:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44032:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44033:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44034:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44066:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44067:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44068:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44101:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44102:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44103:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44135:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44136:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44137:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44166:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44167:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44168:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44204:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44205:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44206:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44224:Tensor upsample_bicubic2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:44238:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44239:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44240:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44259:Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:44274:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44275:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44276:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44295:Tensor upsample_bicubic2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:44308:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44309:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44310:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44329:Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:44343:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44344:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44345:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44364:Tensor & upsample_bicubic2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:44377:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44378:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44379:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44381:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44382:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44383:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44404:Tensor & upsample_bicubic2d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:44417:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44418:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44419:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44421:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44422:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44423:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44444:Tensor upsample_bilinear2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:44458:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44459:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44460:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44479:Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:44494:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44495:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44496:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44515:Tensor upsample_bilinear2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:44528:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44529:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44530:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44549:Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:44563:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44564:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44565:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44584:Tensor & upsample_bilinear2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:44597:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44598:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44599:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44601:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44602:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44603:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44624:Tensor & upsample_bilinear2d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:44637:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44638:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44639:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44641:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44642:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44643:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44664:Tensor upsample_linear1d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:44678:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44679:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44680:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44699:Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
autograd/generated/VariableTypeEverything.cpp:44713:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44714:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44715:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44734:Tensor upsample_linear1d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:44747:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44748:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44749:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44768:Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
autograd/generated/VariableTypeEverything.cpp:44781:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44782:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44783:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44802:Tensor & upsample_linear1d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:44815:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44816:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44817:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44819:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44820:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44821:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44842:Tensor & upsample_linear1d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:44855:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44856:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44857:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44859:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44860:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44861:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44882:Tensor upsample_nearest1d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:44895:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44896:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44897:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44916:Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
autograd/generated/VariableTypeEverything.cpp:44929:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44930:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44931:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44950:Tensor upsample_nearest1d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:44962:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44963:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44964:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:44983:Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
autograd/generated/VariableTypeEverything.cpp:44995:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:44996:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:44997:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45016:Tensor & upsample_nearest1d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:45029:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45030:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45031:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45033:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45034:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45035:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45056:Tensor & upsample_nearest1d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:45069:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45070:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45071:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45073:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45074:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45075:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45096:Tensor upsample_nearest2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:45109:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45110:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45111:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45130:Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:45144:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45145:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45146:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45165:Tensor upsample_nearest2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:45177:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45178:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45179:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45198:Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:45211:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45212:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45213:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45232:Tensor & upsample_nearest2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:45245:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45246:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45247:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45249:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45250:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45251:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45272:Tensor & upsample_nearest2d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:45285:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45286:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45287:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45289:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45290:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45291:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45312:Tensor upsample_nearest3d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:45325:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45326:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45327:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45346:Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:45361:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45362:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45363:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45382:Tensor upsample_nearest3d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:45394:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45395:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45396:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45415:Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:45429:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45430:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45431:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45450:Tensor & upsample_nearest3d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:45463:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45464:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45465:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45467:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45468:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45469:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45490:Tensor & upsample_nearest3d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:45503:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45504:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45505:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45507:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45508:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45509:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45530:Tensor upsample_trilinear3d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:45544:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45545:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45546:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45565:Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:45581:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45582:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45583:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45602:Tensor upsample_trilinear3d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableTypeEverything.cpp:45615:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45616:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45617:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45636:Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableTypeEverything.cpp:45651:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45652:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45653:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45672:Tensor & upsample_trilinear3d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableTypeEverything.cpp:45685:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45686:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45687:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45689:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45690:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45691:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45712:Tensor & upsample_trilinear3d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableTypeEverything.cpp:45725:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45726:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45727:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45729:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45730:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45731:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45764:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45765:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45766:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45803:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45804:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45805:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45838:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45839:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45840:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45873:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45874:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45875:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45915:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45916:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45917:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45954:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45955:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45956:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:45958:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:45959:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:45960:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46000:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46001:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46002:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46004:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46005:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46006:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46041:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46042:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46043:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46045:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46046:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46047:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46049:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46050:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46051:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46086:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46087:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46088:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46116:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46117:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46118:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46143:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46144:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46145:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46179:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46180:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46181:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46219:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46220:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46221:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46223:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46224:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46225:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46259:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46260:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46261:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46292:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46293:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46294:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46327:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46328:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46329:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46331:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46332:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46333:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46367:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46368:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46369:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46401:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46402:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46403:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46405:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46406:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46407:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46409:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46410:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46411:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46448:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46449:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46450:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46452:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46453:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46454:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46488:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46489:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46490:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46492:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46493:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46494:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableTypeEverything.cpp:46526:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableTypeEverything.cpp:46527:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableTypeEverything.cpp:46528:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:58:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:59:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:60:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:62:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:63:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:64:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:97:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:98:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:99:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:101:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:102:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:103:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:137:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:138:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:139:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:141:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:142:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:143:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:176:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:177:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:178:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:210:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:211:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:212:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:242:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:245:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:246:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:271:Tensor _cdist_forward(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
autograd/generated/VariableType_2.cpp:285:  c10::optional<Storage> x1__storage_saved =
autograd/generated/VariableType_2.cpp:286:    x1_.has_storage() ? c10::optional<Storage>(x1_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:287:  c10::intrusive_ptr<TensorImpl> x1__impl_saved;
autograd/generated/VariableType_2.cpp:289:  c10::optional<Storage> x2__storage_saved =
autograd/generated/VariableType_2.cpp:290:    x2_.has_storage() ? c10::optional<Storage>(x2_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:291:  c10::intrusive_ptr<TensorImpl> x2__impl_saved;
autograd/generated/VariableType_2.cpp:326:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:327:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:328:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:350:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:351:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:352:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:367:std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_forward_only(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/VariableType_2.cpp:383:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:384:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:385:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:387:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_2.cpp:388:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:389:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_2.cpp:391:  c10::optional<Storage> offsets__storage_saved =
autograd/generated/VariableType_2.cpp:392:    offsets_.has_storage() ? c10::optional<Storage>(offsets_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:393:  c10::intrusive_ptr<TensorImpl> offsets__impl_saved;
autograd/generated/VariableType_2.cpp:421:Tensor _empty_affine_quantized(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) {
autograd/generated/VariableType_2.cpp:442:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:443:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:444:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:446:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:447:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:448:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:482:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:483:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:484:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:486:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:487:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:488:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:522:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:523:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:524:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:526:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:527:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:528:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:561:  std::vector<c10::optional<Storage>> input__storage_saved(input_.size());
autograd/generated/VariableType_2.cpp:564:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:565:  std::vector<c10::intrusive_ptr<TensorImpl>> input__impl_saved(input_.size());
autograd/generated/VariableType_2.cpp:568:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableType_2.cpp:571:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:572:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableType_2.cpp:575:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableType_2.cpp:578:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:579:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableType_2.cpp:631:  std::vector<c10::optional<Storage>> input__storage_saved(input_.size());
autograd/generated/VariableType_2.cpp:634:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:635:  std::vector<c10::intrusive_ptr<TensorImpl>> input__impl_saved(input_.size());
autograd/generated/VariableType_2.cpp:638:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableType_2.cpp:641:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:642:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableType_2.cpp:645:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableType_2.cpp:648:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:649:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableType_2.cpp:694:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_2.cpp:697:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:698:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_2.cpp:701:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableType_2.cpp:704:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:705:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableType_2.cpp:708:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableType_2.cpp:711:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:712:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableType_2.cpp:752:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_2.cpp:755:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:756:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_2.cpp:759:  std::vector<c10::optional<Storage>> tensor1__storage_saved(tensor1_.size());
autograd/generated/VariableType_2.cpp:762:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:763:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor1__impl_saved(tensor1_.size());
autograd/generated/VariableType_2.cpp:766:  std::vector<c10::optional<Storage>> tensor2__storage_saved(tensor2_.size());
autograd/generated/VariableType_2.cpp:769:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:770:  std::vector<c10::intrusive_ptr<TensorImpl>> tensor2__impl_saved(tensor2_.size());
autograd/generated/VariableType_2.cpp:815:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:818:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:819:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:846:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_2.cpp:849:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:850:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_2.cpp:879:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:882:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:883:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:910:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_2.cpp:913:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:914:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_2.cpp:944:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableType_2.cpp:947:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:948:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableType_2.cpp:951:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableType_2.cpp:954:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:955:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableType_2.cpp:997:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:1000:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1001:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:1036:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableType_2.cpp:1039:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1040:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableType_2.cpp:1043:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableType_2.cpp:1046:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1047:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableType_2.cpp:1089:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:1092:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1093:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:1120:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_2.cpp:1123:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1124:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_2.cpp:1147:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_2.cpp:1150:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1151:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_2.cpp:1154:  std::vector<c10::optional<Storage>> other__storage_saved(other_.size());
autograd/generated/VariableType_2.cpp:1157:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1158:  std::vector<c10::intrusive_ptr<TensorImpl>> other__impl_saved(other_.size());
autograd/generated/VariableType_2.cpp:1188:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_2.cpp:1191:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1192:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_2.cpp:1221:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:1224:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1225:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:1252:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_2.cpp:1255:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1256:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_2.cpp:1285:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:1288:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1289:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:1316:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_2.cpp:1319:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:1320:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_2.cpp:1355:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:1356:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1357:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:1359:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableType_2.cpp:1360:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1361:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableType_2.cpp:1395:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1396:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1397:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1432:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1433:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1434:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1458:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1459:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1460:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1491:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:1492:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1493:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:1495:  c10::optional<Storage> lengths__storage_saved =
autograd/generated/VariableType_2.cpp:1496:    lengths_.has_storage() ? c10::optional<Storage>(lengths_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1497:  c10::intrusive_ptr<TensorImpl> lengths__impl_saved;
autograd/generated/VariableType_2.cpp:1534:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:1535:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1536:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:1538:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_2.cpp:1539:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1540:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_2.cpp:1542:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1543:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1544:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1569:Tensor _test_optional_filled_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
autograd/generated/VariableType_2.cpp:1579:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_2.cpp:1580:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1581:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_2.cpp:1604:  c10::optional<Storage> log_probs__storage_saved =
autograd/generated/VariableType_2.cpp:1605:    log_probs_.has_storage() ? c10::optional<Storage>(log_probs_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1606:  c10::intrusive_ptr<TensorImpl> log_probs__impl_saved;
autograd/generated/VariableType_2.cpp:1608:  c10::optional<Storage> targets__storage_saved =
autograd/generated/VariableType_2.cpp:1609:    targets_.has_storage() ? c10::optional<Storage>(targets_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1610:  c10::intrusive_ptr<TensorImpl> targets__impl_saved;
autograd/generated/VariableType_2.cpp:1639:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1640:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1641:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1671:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1672:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1673:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1702:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1703:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1704:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1737:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:1738:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1739:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:1741:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1742:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1743:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1745:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:1746:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1747:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:1785:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1786:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1787:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1789:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:1790:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1791:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:1823:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1824:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1825:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1858:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1859:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1860:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1862:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:1863:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1864:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:1897:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1898:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1899:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1932:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1933:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1934:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:1936:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableType_2.cpp:1937:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1938:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableType_2.cpp:1940:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableType_2.cpp:1941:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1942:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableType_2.cpp:1944:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:1945:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1946:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:1983:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:1984:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:1985:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2022:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2023:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2024:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2026:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:2027:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2028:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:2062:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2063:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2064:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2066:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:2067:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2068:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:2102:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2103:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2104:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2106:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:2107:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2108:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:2129:Tensor & argmin_out_out(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/VariableType_2.cpp:2133:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2134:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2135:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2137:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:2138:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2139:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:2168:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2169:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2170:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2200:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2201:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2202:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2220:Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/VariableType_2.cpp:2238:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:2239:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2240:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:2242:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2243:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2244:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2266:Tensor & batch_norm_elemt_out_out(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps, Tensor & out) {
autograd/generated/VariableType_2.cpp:2281:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:2282:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2283:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:2285:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_2.cpp:2286:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2287:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_2.cpp:2289:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableType_2.cpp:2290:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2291:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableType_2.cpp:2293:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:2294:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2295:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:2322:std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, int64_t count) {
autograd/generated/VariableType_2.cpp:2336:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:2337:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2338:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:2340:  c10::optional<Storage> mean__storage_saved =
autograd/generated/VariableType_2.cpp:2341:    mean_.has_storage() ? c10::optional<Storage>(mean_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2342:  c10::intrusive_ptr<TensorImpl> mean__impl_saved;
autograd/generated/VariableType_2.cpp:2344:  c10::optional<Storage> invstd__storage_saved =
autograd/generated/VariableType_2.cpp:2345:    invstd_.has_storage() ? c10::optional<Storage>(invstd_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2346:  c10::intrusive_ptr<TensorImpl> invstd__impl_saved;
autograd/generated/VariableType_2.cpp:2384:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:2385:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2386:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:2406:Tensor bernoulli(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/VariableType_2.cpp:2416:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2417:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2418:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2437:Tensor & bernoulli__Tensor(Tensor & self, const Tensor & p, c10::optional<Generator> generator) {
autograd/generated/VariableType_2.cpp:2450:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2451:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2452:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2454:  c10::optional<Storage> p__storage_saved =
autograd/generated/VariableType_2.cpp:2455:    p_.has_storage() ? c10::optional<Storage>(p_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2456:  c10::intrusive_ptr<TensorImpl> p__impl_saved;
autograd/generated/VariableType_2.cpp:2477:Tensor & bernoulli__float(Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/VariableType_2.cpp:2488:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2489:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2490:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2522:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:2525:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:2526:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:2550:Tensor & cauchy_(Tensor & self, double median, double sigma, c10::optional<Generator> generator) {
autograd/generated/VariableType_2.cpp:2561:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2562:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2563:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2594:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2595:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2596:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2598:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:2599:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2600:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:2635:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2636:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2637:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2669:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:2670:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2671:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:2673:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:2674:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2675:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:2699:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2700:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2701:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2716:Tensor count_nonzero(const Tensor & self, c10::optional<int64_t> dim) {
autograd/generated/VariableType_2.cpp:2719:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2720:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2721:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2750:  c10::optional<Storage> theta__storage_saved =
autograd/generated/VariableType_2.cpp:2751:    theta_.has_storage() ? c10::optional<Storage>(theta_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2752:  c10::intrusive_ptr<TensorImpl> theta__impl_saved;
autograd/generated/VariableType_2.cpp:2771:Tensor cudnn_convolution_deprecated(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableType_2.cpp:2782:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2783:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2784:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2786:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:2787:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2788:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:2821:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2822:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2823:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2825:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:2826:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2827:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:2869:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2870:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2871:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2873:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:2874:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2875:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:2908:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:2909:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2910:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:2912:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2913:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2914:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2936:Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_2.cpp:2949:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2950:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2951:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:2970:Tensor & cumprod_(Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_2.cpp:2984:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:2985:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:2986:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3014:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3015:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3016:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3045:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:3048:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:3049:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_2.cpp:3084:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3085:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3086:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3122:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3123:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3124:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3126:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:3127:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3128:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:3130:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:3131:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3132:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:3170:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3171:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3172:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3174:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:3175:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3176:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:3178:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:3179:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3180:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:3223:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3224:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3225:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3227:  c10::optional<Storage> tensor__storage_saved =
autograd/generated/VariableType_2.cpp:3228:    tensor_.has_storage() ? c10::optional<Storage>(tensor_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3229:  c10::intrusive_ptr<TensorImpl> tensor__impl_saved;
autograd/generated/VariableType_2.cpp:3267:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:3268:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3269:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:3271:  c10::optional<Storage> self_or_result__storage_saved =
autograd/generated/VariableType_2.cpp:3272:    self_or_result_.has_storage() ? c10::optional<Storage>(self_or_result_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3273:  c10::intrusive_ptr<TensorImpl> self_or_result__impl_saved;
autograd/generated/VariableType_2.cpp:3311:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:3312:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3313:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:3315:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_2.cpp:3316:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3317:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_2.cpp:3350:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3351:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3352:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3383:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3384:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3385:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3416:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3417:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3418:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3420:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:3421:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3422:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:3456:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3457:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3458:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3460:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:3461:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3462:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:3486:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:3487:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3488:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:3506:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:3507:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3508:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:3535:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3536:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3537:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3570:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3571:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3572:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3604:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3605:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3606:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3608:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:3609:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3610:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:3612:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:3613:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3614:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:3648:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3649:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3650:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3683:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3684:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3685:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3687:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:3688:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3689:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:3722:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3723:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3724:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3757:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3758:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3759:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3761:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:3762:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3763:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:3794:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3795:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3796:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3826:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3827:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3828:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3863:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3864:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3865:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3867:  c10::optional<Storage> random_samples__storage_saved =
autograd/generated/VariableType_2.cpp:3868:    random_samples_.has_storage() ? c10::optional<Storage>(random_samples_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3869:  c10::intrusive_ptr<TensorImpl> random_samples__impl_saved;
autograd/generated/VariableType_2.cpp:3909:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:3910:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3911:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:3913:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3914:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3915:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3917:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_2.cpp:3918:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3919:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_2.cpp:3921:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:3922:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3923:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:3965:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:3966:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3967:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:3969:  c10::optional<Storage> random_samples__storage_saved =
autograd/generated/VariableType_2.cpp:3970:    random_samples_.has_storage() ? c10::optional<Storage>(random_samples_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3971:  c10::intrusive_ptr<TensorImpl> random_samples__impl_saved;
autograd/generated/VariableType_2.cpp:3973:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_2.cpp:3974:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3975:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_2.cpp:3977:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_2.cpp:3978:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:3979:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_2.cpp:4007:Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableType_2.cpp:4029:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4030:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4031:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4033:  c10::optional<Storage> a__storage_saved =
autograd/generated/VariableType_2.cpp:4034:    a_.has_storage() ? c10::optional<Storage>(a_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4035:  c10::intrusive_ptr<TensorImpl> a__impl_saved;
autograd/generated/VariableType_2.cpp:4037:  c10::optional<Storage> tau__storage_saved =
autograd/generated/VariableType_2.cpp:4038:    tau_.has_storage() ? c10::optional<Storage>(tau_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4039:  c10::intrusive_ptr<TensorImpl> tau__impl_saved;
autograd/generated/VariableType_2.cpp:4078:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4079:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4080:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4082:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableType_2.cpp:4083:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4084:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableType_2.cpp:4086:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:4087:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4088:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:4125:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4126:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4127:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4129:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:4130:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4131:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:4165:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4166:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4167:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4169:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:4170:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4171:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:4205:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4206:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4207:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4209:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:4210:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4211:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:4245:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4246:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4247:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4279:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4280:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4281:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4316:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:4317:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4318:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:4320:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4321:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4322:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4324:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:4325:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4326:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:4363:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4364:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4365:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4367:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:4368:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4369:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:4406:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4407:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4408:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4440:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:4441:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4442:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:4444:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:4445:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4446:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:4477:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4478:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4479:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4501:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4502:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4503:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4532:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4533:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4534:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4536:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_2.cpp:4537:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4538:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_2.cpp:4540:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_2.cpp:4541:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4542:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_2.cpp:4583:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:4584:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4585:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:4587:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4588:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4589:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4591:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_2.cpp:4592:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4593:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_2.cpp:4630:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4631:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4632:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4634:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:4635:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4636:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:4667:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4668:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4669:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4693:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4694:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4695:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4724:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4725:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4726:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4728:  c10::optional<Storage> Q__storage_saved =
autograd/generated/VariableType_2.cpp:4729:    Q_.has_storage() ? c10::optional<Storage>(Q_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4730:  c10::intrusive_ptr<TensorImpl> Q__impl_saved;
autograd/generated/VariableType_2.cpp:4732:  c10::optional<Storage> R__storage_saved =
autograd/generated/VariableType_2.cpp:4733:    R_.has_storage() ? c10::optional<Storage>(R_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4734:  c10::intrusive_ptr<TensorImpl> R__impl_saved;
autograd/generated/VariableType_2.cpp:4770:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4771:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4772:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4803:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4804:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4805:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4807:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:4808:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4809:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:4841:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4842:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4843:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4873:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4874:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4875:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4905:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4906:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4907:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4938:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4939:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4940:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4975:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:4976:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4977:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:4979:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:4980:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:4981:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:5016:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5017:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5018:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5020:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:5021:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5022:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:5058:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5059:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5060:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5062:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:5063:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5064:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:5066:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:5067:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5068:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:5105:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5106:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5107:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5109:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:5110:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5111:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:5132:Tensor & logit_out_out(const Tensor & self, c10::optional<double> eps, Tensor & out) {
autograd/generated/VariableType_2.cpp:5145:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5146:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5147:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5149:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:5150:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5151:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:5185:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5186:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5187:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5189:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableType_2.cpp:5190:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5191:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableType_2.cpp:5229:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5230:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5231:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5233:  c10::optional<Storage> LU_data__storage_saved =
autograd/generated/VariableType_2.cpp:5234:    LU_data_.has_storage() ? c10::optional<Storage>(LU_data_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5235:  c10::intrusive_ptr<TensorImpl> LU_data__impl_saved;
autograd/generated/VariableType_2.cpp:5237:  c10::optional<Storage> LU_pivots__storage_saved =
autograd/generated/VariableType_2.cpp:5238:    LU_pivots_.has_storage() ? c10::optional<Storage>(LU_pivots_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5239:  c10::intrusive_ptr<TensorImpl> LU_pivots__impl_saved;
autograd/generated/VariableType_2.cpp:5241:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:5242:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5243:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:5283:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5284:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5285:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5287:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableType_2.cpp:5288:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5289:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableType_2.cpp:5324:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5325:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5326:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5328:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableType_2.cpp:5329:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5330:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableType_2.cpp:5332:  c10::optional<Storage> value__storage_saved =
autograd/generated/VariableType_2.cpp:5333:    value_.has_storage() ? c10::optional<Storage>(value_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5334:  c10::intrusive_ptr<TensorImpl> value__impl_saved;
autograd/generated/VariableType_2.cpp:5373:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5374:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5375:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5377:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableType_2.cpp:5378:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5379:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableType_2.cpp:5381:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableType_2.cpp:5382:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5383:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableType_2.cpp:5425:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5426:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5427:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5464:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:5465:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5466:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:5468:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5469:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5470:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5472:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_2.cpp:5473:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5474:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_2.cpp:5476:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:5477:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5478:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:5519:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5520:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5521:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5523:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:5524:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5525:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:5527:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_2.cpp:5528:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5529:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_2.cpp:5566:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:5567:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5568:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:5570:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5571:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5572:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5574:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_2.cpp:5575:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5576:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_2.cpp:5601:Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_2.cpp:5614:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5615:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5616:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5634:Tensor mean_dim(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_2.cpp:5648:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5649:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5650:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5679:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5680:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5681:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5718:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5719:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5720:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5742:std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon) {
autograd/generated/VariableType_2.cpp:5767:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:5768:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5769:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:5771:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:5772:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5773:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:5775:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:5776:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5777:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:5804:Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableType_2.cpp:5823:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5824:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5825:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5827:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:5828:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5829:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:5851:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) {
autograd/generated/VariableType_2.cpp:5883:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:5884:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5885:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:5887:  std::vector<c10::optional<Storage>> weight__storage_saved(weight_.size());
autograd/generated/VariableType_2.cpp:5890:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_2.cpp:5891:  std::vector<c10::intrusive_ptr<TensorImpl>> weight__impl_saved(weight_.size());
autograd/generated/VariableType_2.cpp:5894:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableType_2.cpp:5895:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5896:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableType_2.cpp:5943:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5944:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5945:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5978:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:5979:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5980:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:5982:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_2.cpp:5983:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5984:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_2.cpp:5986:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:5987:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:5988:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:6012:Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/VariableType_2.cpp:6030:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6031:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6032:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6034:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_2.cpp:6035:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6036:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_2.cpp:6058:Tensor & multi_margin_loss_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/VariableType_2.cpp:6073:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:6074:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6075:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:6077:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6078:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6079:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6081:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_2.cpp:6082:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6083:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_2.cpp:6085:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:6086:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6087:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:6131:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6132:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6133:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6135:  c10::optional<Storage> vec__storage_saved =
autograd/generated/VariableType_2.cpp:6136:    vec_.has_storage() ? c10::optional<Storage>(vec_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6137:  c10::intrusive_ptr<TensorImpl> vec__impl_saved;
autograd/generated/VariableType_2.cpp:6158:Tensor & nansum_out_IntList_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableType_2.cpp:6171:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6172:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6173:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6175:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:6176:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6177:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:6211:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6212:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6213:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6215:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:6216:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6217:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:6238:std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps) {
autograd/generated/VariableType_2.cpp:6256:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:6257:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6258:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:6294:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6295:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6296:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6298:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:6299:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6300:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:6334:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6335:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6336:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6338:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:6339:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6340:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:6361:std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/VariableType_2.cpp:6380:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6381:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6382:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6384:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_2.cpp:6385:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6386:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_2.cpp:6411:std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/VariableType_2.cpp:6430:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6431:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6432:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6434:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_2.cpp:6435:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6436:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_2.cpp:6478:  c10::optional<Storage> abs__storage_saved =
autograd/generated/VariableType_2.cpp:6479:    abs_.has_storage() ? c10::optional<Storage>(abs_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6480:  c10::intrusive_ptr<TensorImpl> abs__impl_saved;
autograd/generated/VariableType_2.cpp:6482:  c10::optional<Storage> angle__storage_saved =
autograd/generated/VariableType_2.cpp:6483:    angle_.has_storage() ? c10::optional<Storage>(angle_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6484:  c10::intrusive_ptr<TensorImpl> angle__impl_saved;
autograd/generated/VariableType_2.cpp:6518:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6519:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6520:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6552:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6553:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6554:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6556:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableType_2.cpp:6557:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6558:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableType_2.cpp:6594:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableType_2.cpp:6595:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6596:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableType_2.cpp:6629:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6630:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6631:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6662:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6663:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6664:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6696:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6697:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6698:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6700:  c10::optional<Storage> exponent__storage_saved =
autograd/generated/VariableType_2.cpp:6701:    exponent_.has_storage() ? c10::optional<Storage>(exponent_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6702:  c10::intrusive_ptr<TensorImpl> exponent__impl_saved;
autograd/generated/VariableType_2.cpp:6739:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6740:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6741:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6743:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:6744:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6745:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:6767:Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_2.cpp:6778:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6779:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6780:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6802:Tensor prod_dim_int(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/VariableType_2.cpp:6815:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6816:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6817:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6842:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6843:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6844:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6864:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6865:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6866:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6868:  c10::optional<Storage> scales__storage_saved =
autograd/generated/VariableType_2.cpp:6869:    scales_.has_storage() ? c10::optional<Storage>(scales_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6870:  c10::intrusive_ptr<TensorImpl> scales__impl_saved;
autograd/generated/VariableType_2.cpp:6872:  c10::optional<Storage> zero_points__storage_saved =
autograd/generated/VariableType_2.cpp:6873:    zero_points_.has_storage() ? c10::optional<Storage>(zero_points_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6874:  c10::intrusive_ptr<TensorImpl> zero_points__impl_saved;
autograd/generated/VariableType_2.cpp:6908:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:6909:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6910:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:6912:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6913:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6914:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:6945:  c10::optional<Storage> repeats__storage_saved =
autograd/generated/VariableType_2.cpp:6946:    repeats_.has_storage() ? c10::optional<Storage>(repeats_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6947:  c10::intrusive_ptr<TensorImpl> repeats__impl_saved;
autograd/generated/VariableType_2.cpp:6979:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:6980:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6981:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:6983:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:6984:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:6985:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7018:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7019:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7020:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7052:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:7053:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7054:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:7056:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7057:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7058:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7060:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:7061:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7062:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:7099:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7100:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7101:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7103:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:7104:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7105:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:7136:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7137:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7138:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7168:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7169:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7170:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7198:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7199:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7200:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7232:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7233:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7234:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7259:  c10::optional<Storage> sorted_sequence__storage_saved =
autograd/generated/VariableType_2.cpp:7260:    sorted_sequence_.has_storage() ? c10::optional<Storage>(sorted_sequence_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7261:  c10::intrusive_ptr<TensorImpl> sorted_sequence__impl_saved;
autograd/generated/VariableType_2.cpp:7263:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7264:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7265:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7286:  c10::optional<Storage> sorted_sequence__storage_saved =
autograd/generated/VariableType_2.cpp:7287:    sorted_sequence_.has_storage() ? c10::optional<Storage>(sorted_sequence_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7288:  c10::intrusive_ptr<TensorImpl> sorted_sequence__impl_saved;
autograd/generated/VariableType_2.cpp:7401:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7402:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7403:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7405:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:7406:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7407:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:7441:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7442:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7443:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7445:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:7446:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7447:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:7481:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7482:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7483:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7485:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:7486:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7487:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:7527:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:7528:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7529:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:7531:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7532:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7533:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7535:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:7536:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7537:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:7539:  c10::optional<Storage> finput__storage_saved =
autograd/generated/VariableType_2.cpp:7540:    finput_.has_storage() ? c10::optional<Storage>(finput_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7541:  c10::intrusive_ptr<TensorImpl> finput__impl_saved;
autograd/generated/VariableType_2.cpp:7543:  c10::optional<Storage> fgrad_input__storage_saved =
autograd/generated/VariableType_2.cpp:7544:    fgrad_input_.has_storage() ? c10::optional<Storage>(fgrad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7545:  c10::intrusive_ptr<TensorImpl> fgrad_input__impl_saved;
autograd/generated/VariableType_2.cpp:7547:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:7548:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7549:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:7551:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableType_2.cpp:7552:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7553:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableType_2.cpp:7555:  c10::optional<Storage> grad_bias__storage_saved =
autograd/generated/VariableType_2.cpp:7556:    grad_bias_.has_storage() ? c10::optional<Storage>(grad_bias_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7557:  c10::intrusive_ptr<TensorImpl> grad_bias__impl_saved;
autograd/generated/VariableType_2.cpp:7598:Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
autograd/generated/VariableType_2.cpp:7616:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7617:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7618:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7620:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:7621:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7622:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:7663:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:7664:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7665:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:7667:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7668:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7669:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7671:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:7672:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7673:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:7675:  c10::optional<Storage> columns__storage_saved =
autograd/generated/VariableType_2.cpp:7676:    columns_.has_storage() ? c10::optional<Storage>(columns_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7677:  c10::intrusive_ptr<TensorImpl> columns__impl_saved;
autograd/generated/VariableType_2.cpp:7679:  c10::optional<Storage> ones__storage_saved =
autograd/generated/VariableType_2.cpp:7680:    ones_.has_storage() ? c10::optional<Storage>(ones_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7681:  c10::intrusive_ptr<TensorImpl> ones__impl_saved;
autograd/generated/VariableType_2.cpp:7683:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:7684:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7685:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:7687:  c10::optional<Storage> grad_weight__storage_saved =
autograd/generated/VariableType_2.cpp:7688:    grad_weight_.has_storage() ? c10::optional<Storage>(grad_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7689:  c10::intrusive_ptr<TensorImpl> grad_weight__impl_saved;
autograd/generated/VariableType_2.cpp:7691:  c10::optional<Storage> grad_bias__storage_saved =
autograd/generated/VariableType_2.cpp:7692:    grad_bias_.has_storage() ? c10::optional<Storage>(grad_bias_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7693:  c10::intrusive_ptr<TensorImpl> grad_bias__impl_saved;
autograd/generated/VariableType_2.cpp:7734:Tensor & slow_conv_transpose3d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/VariableType_2.cpp:7748:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7749:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7750:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7752:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:7753:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7754:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:7756:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:7757:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7758:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:7797:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7798:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7799:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7801:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_2.cpp:7802:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7803:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_2.cpp:7840:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:7841:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7842:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:7844:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7845:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7846:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7848:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_2.cpp:7849:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7850:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_2.cpp:7852:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:7853:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7854:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:7898:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:7899:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7900:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:7902:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7903:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7904:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7906:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_2.cpp:7907:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7908:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_2.cpp:7950:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:7951:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7952:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:7954:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:7955:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7956:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:7958:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_2.cpp:7959:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:7960:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_2.cpp:8000:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8001:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8002:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8004:  c10::optional<Storage> A__storage_saved =
autograd/generated/VariableType_2.cpp:8005:    A_.has_storage() ? c10::optional<Storage>(A_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8006:  c10::intrusive_ptr<TensorImpl> A__impl_saved;
autograd/generated/VariableType_2.cpp:8008:  c10::optional<Storage> solution__storage_saved =
autograd/generated/VariableType_2.cpp:8009:    solution_.has_storage() ? c10::optional<Storage>(solution_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8010:  c10::intrusive_ptr<TensorImpl> solution__impl_saved;
autograd/generated/VariableType_2.cpp:8012:  c10::optional<Storage> lu__storage_saved =
autograd/generated/VariableType_2.cpp:8013:    lu_.has_storage() ? c10::optional<Storage>(lu_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8014:  c10::intrusive_ptr<TensorImpl> lu__impl_saved;
autograd/generated/VariableType_2.cpp:8054:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8055:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8056:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8058:  c10::optional<Storage> mask__storage_saved =
autograd/generated/VariableType_2.cpp:8059:    mask_.has_storage() ? c10::optional<Storage>(mask_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8060:  c10::intrusive_ptr<TensorImpl> mask__impl_saved;
autograd/generated/VariableType_2.cpp:8093:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8094:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8095:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8126:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8127:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8128:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8130:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:8131:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8132:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:8166:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8167:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8168:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8170:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:8171:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8172:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:8203:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8204:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8205:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8237:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8238:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8239:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8274:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:8275:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8276:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:8278:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_2.cpp:8279:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8280:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_2.cpp:8282:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:8283:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8284:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:8329:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:8330:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8331:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:8333:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8334:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8335:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8337:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:8338:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8339:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:8365:Tensor & thnn_conv_depthwise2d_forward_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/VariableType_2.cpp:8379:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8380:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8381:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8383:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_2.cpp:8384:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8385:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_2.cpp:8387:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:8388:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8389:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:8426:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8427:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8428:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8430:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:8431:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8432:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:8464:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8465:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8466:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8497:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8498:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8499:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8501:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:8502:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8503:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:8535:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8536:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8537:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8567:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8568:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8569:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8587:Tensor triu_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableType_2.cpp:8608:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8609:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8610:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8640:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8641:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8642:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8678:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8679:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8680:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8698:Tensor upsample_bicubic2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_2.cpp:8712:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:8713:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8714:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:8733:Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_2.cpp:8748:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8749:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8750:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8769:Tensor & upsample_bicubic2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableType_2.cpp:8782:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:8783:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8784:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:8786:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:8787:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8788:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:8809:Tensor upsample_nearest3d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_2.cpp:8821:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:8822:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8823:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:8842:Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_2.cpp:8856:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:8857:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8858:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:8877:Tensor upsample_trilinear3d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_2.cpp:8891:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_2.cpp:8892:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8893:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_2.cpp:8912:Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_2.cpp:8928:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:8929:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8930:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:8949:Tensor & upsample_trilinear3d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableType_2.cpp:8962:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_2.cpp:8963:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8964:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_2.cpp:8966:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_2.cpp:8967:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:8968:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_2.cpp:9003:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:9004:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:9005:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:9007:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:9008:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:9009:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:9011:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:9012:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:9013:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:9050:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_2.cpp:9051:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:9052:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_2.cpp:9054:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:9055:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:9056:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_2.cpp:9090:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_2.cpp:9091:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:9092:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_2.cpp:9094:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_2.cpp:9095:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_2.cpp:9096:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/TraceType_2.cpp:36:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:39:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:40:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:62:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:65:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:66:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:88:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:91:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:92:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:114:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:117:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:118:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:140:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:143:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:144:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceType_2.cpp:167:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:170:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:171:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:199:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:202:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:203:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:226:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:229:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:230:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:259:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:260:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_2.cpp:283:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:286:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:287:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceType_2.cpp:309:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:312:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:313:      .redispatch<Tensor, TensorList, int64_t>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceType_2.cpp:320:Tensor _cdist_forward(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
autograd/generated/TraceType_2.cpp:337:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:339:      .typed<Tensor (const Tensor &, const Tensor &, double, c10::optional<int64_t>)>();
autograd/generated/TraceType_2.cpp:340:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:341:      .redispatch<Tensor, const Tensor &, const Tensor &, double, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, x1, x2, p, compute_mode);
autograd/generated/TraceType_2.cpp:351:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:354:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:355:      .redispatch<std::tuple<double,int64_t>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, reduce_range);
autograd/generated/TraceType_2.cpp:358:std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const c10::optional<Tensor> & ggI, const c10::optional<Tensor> & ggW, const c10::optional<Tensor> & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32, std::array<bool,3> output_mask) {
autograd/generated/TraceType_2.cpp:391:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:393:      .typed<std::tuple<Tensor,Tensor,Tensor> (const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, bool, std::array<bool,3>)>();
autograd/generated/TraceType_2.cpp:394:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:395:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, bool, std::array<bool,3>>(op, c10::DispatchKey::Tracer, ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, allow_tf32, output_mask);
autograd/generated/TraceType_2.cpp:405:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:408:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:409:      .redispatch<void, int64_t>(op, c10::DispatchKey::Tracer, device_index);
autograd/generated/TraceType_2.cpp:412:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:415:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:416:      .redispatch<int64_t, int64_t>(op, c10::DispatchKey::Tracer, device_index);
autograd/generated/TraceType_2.cpp:434:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:437:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:438:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_2.cpp:446:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:449:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:450:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:454:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:457:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:458:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:461:std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_forward_only(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/TraceType_2.cpp:486:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:488:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool)>();
autograd/generated/TraceType_2.cpp:489:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:490:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const c10::optional<Tensor> &, bool>(op, c10::DispatchKey::Tracer, weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
autograd/generated/TraceType_2.cpp:500:Tensor _empty_affine_quantized(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_2.cpp:521:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:523:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, double, int64_t, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_2.cpp:524:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:525:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, double, int64_t, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory, scale, zero_point, memory_format);
autograd/generated/TraceType_2.cpp:555:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:558:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:559:      .redispatch<Tensor &, const Tensor &, IntArrayRef, int64_t, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, normalization, forward, out);
autograd/generated/TraceType_2.cpp:589:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:592:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:593:      .redispatch<Tensor &, const Tensor &, IntArrayRef, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, normalization, last_dim_size, out);
autograd/generated/TraceType_2.cpp:623:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:626:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:627:      .redispatch<Tensor &, const Tensor &, IntArrayRef, int64_t, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, normalization, onesided, out);
autograd/generated/TraceType_2.cpp:651:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:654:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:655:      .redispatch<std::vector<Tensor>, TensorList, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, input, tensor1, tensor2, value);
autograd/generated/TraceType_2.cpp:679:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:682:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:683:      .redispatch<std::vector<Tensor>, TensorList, TensorList, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, input, tensor1, tensor2, scalars);
autograd/generated/TraceType_2.cpp:691:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:694:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:695:      .redispatch<void, TensorList, TensorList, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, value);
autograd/generated/TraceType_2.cpp:698:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:701:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:702:      .redispatch<void, TensorList, TensorList, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, tensor1, tensor2, scalars);
autograd/generated/TraceType_2.cpp:718:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:721:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:722:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_2.cpp:730:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:733:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:734:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:750:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:753:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:754:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_2.cpp:762:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:765:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:766:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:783:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:786:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:787:      .redispatch<std::vector<Tensor>, TensorList, TensorList>(op, c10::DispatchKey::Tracer, tensors1, tensors2);
autograd/generated/TraceType_2.cpp:809:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:812:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:813:      .redispatch<std::vector<Tensor>, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors, scalar);
autograd/generated/TraceType_2.cpp:835:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:838:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:839:      .redispatch<std::vector<Tensor>, TensorList, TensorList>(op, c10::DispatchKey::Tracer, tensors1, tensors2);
autograd/generated/TraceType_2.cpp:861:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:864:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:865:      .redispatch<std::vector<Tensor>, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, tensors, scalars);
autograd/generated/TraceType_2.cpp:873:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:876:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:877:      .redispatch<void, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, scalar);
autograd/generated/TraceType_2.cpp:880:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:883:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:884:      .redispatch<void, TensorList, TensorList>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:887:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:890:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:891:      .redispatch<void, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, scalars);
autograd/generated/TraceType_2.cpp:907:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:910:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:911:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_2.cpp:919:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:922:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:923:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:939:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:942:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:943:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_2.cpp:951:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:954:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:955:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:975:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:978:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:979:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, input, grid, interpolation_mode, padding_mode, align_corners);
autograd/generated/TraceType_2.cpp:987:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:990:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:991:      .redispatch<bool, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, from);
autograd/generated/TraceType_2.cpp:1010:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1013:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1014:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, half_to_float);
autograd/generated/TraceType_2.cpp:1040:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1043:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1044:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, pivot, check_errors);
autograd/generated/TraceType_2.cpp:1074:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1077:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1078:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, std::array<bool,3>>(op, c10::DispatchKey::Tracer, input, grad_output, weight, padding, output_mask);
autograd/generated/TraceType_2.cpp:1104:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1107:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1108:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, input, grad_output, weight, padding);
autograd/generated/TraceType_2.cpp:1116:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1119:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1120:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:1141:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1144:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1145:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, input, lengths, batch_first);
autograd/generated/TraceType_2.cpp:1173:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1176:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1177:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, bool, Scalar, int64_t>(op, c10::DispatchKey::Tracer, data, batch_sizes, batch_first, padding_value, total_length);
autograd/generated/TraceType_2.cpp:1202:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1205:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1206:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, level, batch_size, out_dim);
autograd/generated/TraceType_2.cpp:1228:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1231:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1232:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, shape);
autograd/generated/TraceType_2.cpp:1262:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1265:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1266:      .redispatch<Tensor &, Tensor &, int64_t, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, n, sobolstate, dimension, num_generated);
autograd/generated/TraceType_2.cpp:1293:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1296:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1297:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dimension);
autograd/generated/TraceType_2.cpp:1321:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1324:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1325:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, dim, self);
autograd/generated/TraceType_2.cpp:1347:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1350:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1351:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, sparse, dense);
autograd/generated/TraceType_2.cpp:1358:Tensor _test_optional_filled_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
autograd/generated/TraceType_2.cpp:1373:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1375:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceType_2.cpp:1376:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1377:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, values, addends);
autograd/generated/TraceType_2.cpp:1400:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1403:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1404:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:1427:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1430:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1431:      .redispatch<Tensor, const Tensor &, std::string, std::string>(op, c10::DispatchKey::Tracer, dummy, a, b);
autograd/generated/TraceType_2.cpp:1439:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1442:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1443:      .redispatch<bool, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, log_probs, targets, input_lengths, target_lengths, blank);
autograd/generated/TraceType_2.cpp:1462:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1465:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1466:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, v, g, dim);
autograd/generated/TraceType_2.cpp:1493:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1496:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1497:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:1518:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1521:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1522:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:1548:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1551:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1552:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:1574:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1577:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1578:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceType_2.cpp:1606:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1609:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1610:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, grad_input);
autograd/generated/TraceType_2.cpp:1633:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1636:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1637:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:1660:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1663:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1664:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:1692:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1695:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1696:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:1724:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1727:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1728:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:1759:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1762:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1763:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha, out);
autograd/generated/TraceType_2.cpp:1786:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1789:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1790:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, grad, size, align_corners);
autograd/generated/TraceType_2.cpp:1811:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1814:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1815:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:1844:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1847:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1848:      .redispatch<Tensor &, const Tensor &, int64_t, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_2.cpp:1877:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1880:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1881:      .redispatch<Tensor &, const Tensor &, Dimname, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_2.cpp:1889:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1892:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1893:      .redispatch<bool, const Tensor &, const Tensor &, double, double, bool>(op, c10::DispatchKey::Tracer, self, other, rtol, atol, equal_nan);
autograd/generated/TraceType_2.cpp:1918:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1921:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1922:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_2.cpp:1951:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1954:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1955:      .redispatch<Tensor &, const Tensor &, int64_t, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_2.cpp:1984:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1987:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:1988:      .redispatch<Tensor &, const Tensor &, Dimname, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_2.cpp:1995:Tensor arange(Scalar end, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:2013:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2015:      .typed<Tensor (Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:2016:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2017:      .redispatch<Tensor, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, end, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:2024:Tensor arange_start(Scalar start, Scalar end, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:2043:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2045:      .typed<Tensor (Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:2046:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2047:      .redispatch<Tensor, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:2054:Tensor arange_start_step(Scalar start, Scalar end, Scalar step, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:2074:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2076:      .typed<Tensor (Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:2077:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2078:      .redispatch<Tensor, Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, step, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:2105:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2108:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2109:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:2130:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2133:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2134:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:2160:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2163:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2164:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:2171:Tensor & argmin_out_out(const Tensor & self, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceType_2.cpp:2193:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2195:      .typed<Tensor & (const Tensor &, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceType_2.cpp:2196:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2197:      .redispatch<Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_2.cpp:2218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2221:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2222:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:2248:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2251:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2252:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:2259:Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/TraceType_2.cpp:2280:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2282:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceType_2.cpp:2283:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2284:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
autograd/generated/TraceType_2.cpp:2291:Tensor & batch_norm_elemt_out_out(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const Tensor & mean, const Tensor & invstd, double eps, Tensor & out) {
autograd/generated/TraceType_2.cpp:2316:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2318:      .typed<Tensor & (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double, Tensor &)>();
autograd/generated/TraceType_2.cpp:2319:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2320:      .redispatch<Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const Tensor &, const Tensor &, double, Tensor &>(op, c10::DispatchKey::Tracer, input, weight, bias, mean, invstd, eps, out);
autograd/generated/TraceType_2.cpp:2327:std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum, double eps, int64_t count) {
autograd/generated/TraceType_2.cpp:2350:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2352:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, double, int64_t)>();
autograd/generated/TraceType_2.cpp:2353:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2354:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, double, int64_t>(op, c10::DispatchKey::Tracer, input, mean, invstd, running_mean, running_var, momentum, eps, count);
autograd/generated/TraceType_2.cpp:2379:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2382:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2383:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, double>(op, c10::DispatchKey::Tracer, input, eps);
autograd/generated/TraceType_2.cpp:2391:Tensor bernoulli(const Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceType_2.cpp:2406:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2408:      .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceType_2.cpp:2409:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2410:      .redispatch<Tensor, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceType_2.cpp:2417:Tensor bernoulli_p(const Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/TraceType_2.cpp:2433:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2435:      .typed<Tensor (const Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceType_2.cpp:2436:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2437:      .redispatch<Tensor, const Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceType_2.cpp:2444:Tensor & bernoulli__Tensor(Tensor & self, const Tensor & p, c10::optional<Generator> generator) {
autograd/generated/TraceType_2.cpp:2465:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2467:      .typed<Tensor & (Tensor &, const Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceType_2.cpp:2468:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2469:      .redispatch<Tensor &, Tensor &, const Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceType_2.cpp:2476:Tensor & bernoulli__float(Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/TraceType_2.cpp:2497:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2499:      .typed<Tensor & (Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceType_2.cpp:2500:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2501:      .redispatch<Tensor &, Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceType_2.cpp:2508:Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & pos_weight, int64_t reduction) {
autograd/generated/TraceType_2.cpp:2527:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2529:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceType_2.cpp:2530:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2531:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, pos_weight, reduction);
autograd/generated/TraceType_2.cpp:2553:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2556:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2557:      .redispatch<Tensor, TensorList, int64_t>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceType_2.cpp:2579:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2582:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2583:      .redispatch<Tensor, TensorList, Dimname>(op, c10::DispatchKey::Tracer, tensors, dim);
autograd/generated/TraceType_2.cpp:2590:Tensor & cauchy_(Tensor & self, double median, double sigma, c10::optional<Generator> generator) {
autograd/generated/TraceType_2.cpp:2612:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2614:      .typed<Tensor & (Tensor &, double, double, c10::optional<Generator>)>();
autograd/generated/TraceType_2.cpp:2615:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2616:      .redispatch<Tensor &, Tensor &, double, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, median, sigma, generator);
autograd/generated/TraceType_2.cpp:2643:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2646:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2647:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:2670:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2673:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2674:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, chunks, dim);
autograd/generated/TraceType_2.cpp:2700:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2703:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2704:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size, kernel_size, dilation, padding, stride);
autograd/generated/TraceType_2.cpp:2735:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2738:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2739:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, kernel_size, dilation, padding, stride, grad_input);
autograd/generated/TraceType_2.cpp:2766:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2769:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2770:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/generated/TraceType_2.cpp:2777:Tensor conv1d(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
autograd/generated/TraceType_2.cpp:2778:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2780:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
autograd/generated/TraceType_2.cpp:2781:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2782:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, groups);
autograd/generated/TraceType_2.cpp:2806:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2809:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2810:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, input, weight, bias, pad);
autograd/generated/TraceType_2.cpp:2837:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2840:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2841:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, input1, input2, target, margin, reduction);
autograd/generated/TraceType_2.cpp:2863:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2866:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2867:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_2.cpp:2874:Tensor count_nonzero(const Tensor & self, c10::optional<int64_t> dim) {
autograd/generated/TraceType_2.cpp:2889:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2891:      .typed<Tensor (const Tensor &, c10::optional<int64_t>)>();
autograd/generated/TraceType_2.cpp:2892:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2893:      .redispatch<Tensor, const Tensor &, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_2.cpp:2918:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2921:  auto grid =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2922:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, theta, N, C, H, W);
autograd/generated/TraceType_2.cpp:2929:Tensor cudnn_convolution_deprecated(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceType_2.cpp:2951:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2953:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceType_2.cpp:2954:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2955:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_2.cpp:2983:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2986:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:2987:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_2.cpp:3016:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3019:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3020:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceType_2.cpp:3050:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3053:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3054:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceType_2.cpp:3061:Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:3077:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3079:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:3080:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3081:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_2.cpp:3088:Tensor cumprod_dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:3104:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3106:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:3107:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3108:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_2.cpp:3115:Tensor & cumprod_(Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:3136:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3138:      .typed<Tensor & (Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:3139:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3140:      .redispatch<Tensor &, Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_2.cpp:3147:Tensor & cumprod__dimname(Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:3168:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3170:      .typed<Tensor & (Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:3171:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3172:      .redispatch<Tensor &, Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_2.cpp:3193:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3196:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3197:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:3218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3221:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3222:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_2.cpp:3243:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3246:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3247:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:3272:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3275:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3276:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad, input_sizes, offset, dim1, dim2);
autograd/generated/TraceType_2.cpp:3304:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3307:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3308:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_2.cpp:3337:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3340:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3341:      .redispatch<Tensor &, const Tensor &, const Tensor &, std::string, Tensor &>(op, c10::DispatchKey::Tracer, self, other, rounding_mode, out);
autograd/generated/TraceType_2.cpp:3363:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3366:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3367:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, tensor);
autograd/generated/TraceType_2.cpp:3389:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3392:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3393:      .redispatch<Tensor, std::string, TensorList>(op, c10::DispatchKey::Tracer, equation, tensors);
autograd/generated/TraceType_2.cpp:3419:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3422:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3423:      .redispatch<Tensor, const Tensor &, Scalar, Scalar, Scalar, bool, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, alpha, scale, input_scale, is_result, self_or_result);
autograd/generated/TraceType_2.cpp:3448:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3451:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3452:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight, indices, padding_idx, scale_grad_by_freq, sparse);
autograd/generated/TraceType_2.cpp:3477:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3480:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3481:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, int64_t, bool>(op, c10::DispatchKey::Tracer, grad, indices, num_weights, padding_idx, scale_grad_by_freq);
autograd/generated/TraceType_2.cpp:3488:Tensor empty_meta(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_2.cpp:3507:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3509:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_2.cpp:3510:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3511:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_2.cpp:3532:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3535:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3536:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:3562:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3565:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3566:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:3593:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3596:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3597:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:3624:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3627:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3628:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:3650:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3653:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3654:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:3684:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3687:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3688:      .redispatch<Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, n, out);
autograd/generated/TraceType_2.cpp:3719:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3722:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3723:      .redispatch<Tensor &, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, n, m, out);
autograd/generated/TraceType_2.cpp:3750:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3753:  std::tie(output, mask) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3754:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, double, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, quant_min, quant_max);
autograd/generated/TraceType_2.cpp:3778:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3781:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3782:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input, packed_weight, bias);
autograd/generated/TraceType_2.cpp:3809:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3812:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3813:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
autograd/generated/TraceType_2.cpp:3834:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3837:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3838:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, input);
autograd/generated/TraceType_2.cpp:3861:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3864:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3865:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, input, p, train);
autograd/generated/TraceType_2.cpp:3893:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3896:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3897:      .redispatch<Tensor &, Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, p, train);
autograd/generated/TraceType_2.cpp:3904:Tensor fft_fftshift(const Tensor & self, c10::optional<IntArrayRef> dim) {
autograd/generated/TraceType_2.cpp:3919:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3921:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceType_2.cpp:3922:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3923:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_2.cpp:3930:Tensor fft_ifftshift(const Tensor & self, c10::optional<IntArrayRef> dim) {
autograd/generated/TraceType_2.cpp:3945:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3947:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceType_2.cpp:3948:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3949:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_2.cpp:3970:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3973:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:3974:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:4000:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4003:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4004:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:4026:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4029:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4030:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, dims);
autograd/generated/TraceType_2.cpp:4058:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4061:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4062:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_2.cpp:4084:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4087:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4088:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4110:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4113:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4114:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4141:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4144:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4145:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4172:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4175:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4176:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4197:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4200:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4201:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:4227:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4230:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4231:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:4257:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4260:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4261:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, output_size, random_samples);
autograd/generated/TraceType_2.cpp:4293:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4296:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4297:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, output_size, indices, grad_input);
autograd/generated/TraceType_2.cpp:4328:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4331:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4332:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, output_size, random_samples, output, indices);
autograd/generated/TraceType_2.cpp:4354:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4357:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4358:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:4381:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4384:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4385:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_2.cpp:4392:Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:4412:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4414:      .typed<Tensor (std::string, c10::optional<bool>, c10::optional<int64_t>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:4415:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4416:      .redispatch<Tensor, std::string, c10::optional<bool>, c10::optional<int64_t>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, filename, shared, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:4438:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4441:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4442:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4469:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4472:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4473:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4501:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4504:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4505:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, a, tau);
autograd/generated/TraceType_2.cpp:4534:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4537:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4538:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, vec2, out);
autograd/generated/TraceType_2.cpp:4566:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4569:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4570:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceType_2.cpp:4592:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4595:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4596:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4618:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4621:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4622:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4649:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4652:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4653:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4680:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4683:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4684:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:4711:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4714:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4715:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:4742:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4745:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4746:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:4769:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4772:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4773:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, min_val, max_val);
autograd/generated/TraceType_2.cpp:4801:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4804:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4805:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, min_val, max_val);
autograd/generated/TraceType_2.cpp:4835:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4838:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4839:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, min_val, max_val, grad_input);
autograd/generated/TraceType_2.cpp:4866:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4869:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4870:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/generated/TraceType_2.cpp:4897:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4900:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4901:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:4926:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4929:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4930:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, kernel_size, dilation, padding, stride);
autograd/generated/TraceType_2.cpp:4962:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4965:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4966:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, input_size, kernel_size, dilation, padding, stride, grad_input);
autograd/generated/TraceType_2.cpp:4990:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4993:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:4994:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad, self_sizes, dim, index);
autograd/generated/TraceType_2.cpp:5001:Tensor instance_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
autograd/generated/TraceType_2.cpp:5023:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5025:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool)>();
autograd/generated/TraceType_2.cpp:5026:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5027:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);
autograd/generated/TraceType_2.cpp:5048:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5051:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5052:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5060:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5063:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5064:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5081:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5084:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5085:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5106:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5109:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5110:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5132:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5135:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5136:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:5167:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5170:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5171:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, k, dim, keepdim, values, indices);
autograd/generated/TraceType_2.cpp:5203:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5206:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5207:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, k, dim, keepdim, values, indices);
autograd/generated/TraceType_2.cpp:5232:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5235:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5236:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction);
autograd/generated/TraceType_2.cpp:5263:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5266:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5267:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:5288:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5291:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5292:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5314:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5317:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5318:      .redispatch<Tensor, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, UPLO);
autograd/generated/TraceType_2.cpp:5347:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5350:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5351:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, std::string, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, mode, Q, R);
autograd/generated/TraceType_2.cpp:5359:Tensor linspace(Scalar start, Scalar end, c10::optional<int64_t> steps, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:5379:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5381:      .typed<Tensor (Scalar, Scalar, c10::optional<int64_t>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:5382:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5383:      .redispatch<Tensor, Scalar, Scalar, c10::optional<int64_t>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, steps, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:5404:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5407:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5408:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5435:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5438:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5439:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:5460:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5463:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5464:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5490:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5493:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5494:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5520:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5523:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5524:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5547:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5550:  std::tie(output, buffer) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5551:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:5559:Tensor log_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:5575:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5577:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:5578:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5579:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_2.cpp:5586:Tensor log_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:5602:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5604:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:5605:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5606:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_2.cpp:5628:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5631:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5632:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:5654:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5657:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5658:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:5686:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5689:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5690:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_2.cpp:5717:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5720:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5721:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:5728:Tensor & logit_out_out(const Tensor & self, c10::optional<double> eps, Tensor & out) {
autograd/generated/TraceType_2.cpp:5749:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5751:      .typed<Tensor & (const Tensor &, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_2.cpp:5752:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5753:      .redispatch<Tensor &, const Tensor &, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, eps, out);
autograd/generated/TraceType_2.cpp:5777:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5780:  std::tie(solution, QR) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5781:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, A);
autograd/generated/TraceType_2.cpp:5811:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5814:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5815:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, LU_data, LU_pivots, out);
autograd/generated/TraceType_2.cpp:5838:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5841:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5842:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, mask, value);
autograd/generated/TraceType_2.cpp:5865:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5868:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5869:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask, value);
autograd/generated/TraceType_2.cpp:5897:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5900:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5901:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, mask, value);
autograd/generated/TraceType_2.cpp:5929:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5932:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5933:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask, value);
autograd/generated/TraceType_2.cpp:5956:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5959:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5960:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask, source);
autograd/generated/TraceType_2.cpp:5988:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5991:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:5992:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask, source);
autograd/generated/TraceType_2.cpp:6018:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6021:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6022:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_2.cpp:6050:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6053:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6054:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_2.cpp:6089:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6092:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6093:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
autograd/generated/TraceType_2.cpp:6126:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6129:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6130:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
autograd/generated/TraceType_2.cpp:6157:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6160:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6161:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, indices, output_size, stride, padding);
autograd/generated/TraceType_2.cpp:6168:Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:6183:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6185:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:6186:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6187:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceType_2.cpp:6194:Tensor mean_dim(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:6211:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6213:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:6214:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6215:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceType_2.cpp:6222:Tensor mean_names_dim(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:6239:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6241:      .typed<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:6242:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6243:      .redispatch<Tensor, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceType_2.cpp:6264:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6267:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6268:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:6293:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6296:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6297:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_2.cpp:6323:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6326:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6327:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_2.cpp:6335:std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon) {
autograd/generated/TraceType_2.cpp:6359:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6361:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double)>();
autograd/generated/TraceType_2.cpp:6362:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6363:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double>(op, c10::DispatchKey::Tracer, input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon);
autograd/generated/TraceType_2.cpp:6372:Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/TraceType_2.cpp:6394:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6396:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
autograd/generated/TraceType_2.cpp:6397:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6398:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_2.cpp:6405:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) {
autograd/generated/TraceType_2.cpp:6437:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6439:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, TensorList, int64_t, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_2.cpp:6440:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6441:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, TensorList, int64_t, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, weight, weight_stride0, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);
autograd/generated/TraceType_2.cpp:6471:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6474:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6475:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_2.cpp:6503:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6506:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6507:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, mat2, out);
autograd/generated/TraceType_2.cpp:6514:Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/TraceType_2.cpp:6533:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6535:      .typed<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceType_2.cpp:6536:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6537:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, self, target, p, margin, weight, reduction);
autograd/generated/TraceType_2.cpp:6544:Tensor & multi_margin_loss_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & grad_input) {
autograd/generated/TraceType_2.cpp:6570:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6572:      .typed<Tensor & (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t, Tensor &)>();
autograd/generated/TraceType_2.cpp:6573:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6574:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, p, margin, weight, reduction, grad_input);
autograd/generated/TraceType_2.cpp:6596:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6599:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6600:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, vec);
autograd/generated/TraceType_2.cpp:6607:Tensor & nansum_out_IntList_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_2.cpp:6630:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6632:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_2.cpp:6633:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6634:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceType_2.cpp:6664:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6667:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6668:      .redispatch<Tensor &, const Tensor &, int64_t, int64_t, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, start, length, out);
autograd/generated/TraceType_2.cpp:6675:std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, IntArrayRef normalized_shape, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps) {
autograd/generated/TraceType_2.cpp:6696:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6698:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, IntArrayRef, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double)>();
autograd/generated/TraceType_2.cpp:6699:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6700:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double>(op, c10::DispatchKey::Tracer, input, normalized_shape, weight, bias, eps);
autograd/generated/TraceType_2.cpp:6724:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6727:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6728:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:6755:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6758:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6759:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:6766:std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/TraceType_2.cpp:6786:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6788:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t)>();
autograd/generated/TraceType_2.cpp:6789:  std::tie(output, total_weight) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6790:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index);
autograd/generated/TraceType_2.cpp:6798:std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) {
autograd/generated/TraceType_2.cpp:6818:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6820:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t)>();
autograd/generated/TraceType_2.cpp:6821:  std::tie(output, total_weight) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6822:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index);
autograd/generated/TraceType_2.cpp:6846:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6849:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6850:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, v, pow, dim);
autograd/generated/TraceType_2.cpp:6878:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6881:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6882:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_2.cpp:6910:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6913:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6914:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_2.cpp:6921:Tensor ones_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:6940:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6942:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:6943:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6944:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:6951:Tensor ones(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:6969:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6971:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:6972:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6973:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:6994:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6997:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:6998:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:7020:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7023:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7024:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, downscale_factor);
autograd/generated/TraceType_2.cpp:7046:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7049:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7050:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, abs, angle);
autograd/generated/TraceType_2.cpp:7072:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7075:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7076:      .redispatch<Tensor, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, n, self);
autograd/generated/TraceType_2.cpp:7103:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7106:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7107:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, n);
autograd/generated/TraceType_2.cpp:7129:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7132:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7133:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_2.cpp:7155:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7158:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7159:      .redispatch<Tensor, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_2.cpp:7181:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7184:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7185:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_2.cpp:7212:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7215:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7216:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_2.cpp:7243:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7246:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7247:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_2.cpp:7269:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7272:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7273:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, weight);
autograd/generated/TraceType_2.cpp:7280:Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:7295:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7297:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:7298:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7299:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceType_2.cpp:7306:Tensor prod_dim_int(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:7323:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7325:      .typed<Tensor (const Tensor &, int64_t, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:7326:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7327:      .redispatch<Tensor, const Tensor &, int64_t, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceType_2.cpp:7334:Tensor prod_dim_Dimname(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_2.cpp:7351:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7353:      .typed<Tensor (const Tensor &, Dimname, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_2.cpp:7354:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7355:      .redispatch<Tensor, const Tensor &, Dimname, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceType_2.cpp:7379:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7382:  std::tie(Q, R) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7383:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, some);
autograd/generated/TraceType_2.cpp:7392:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7395:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7396:      .redispatch<QScheme, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:7399:Tensor quantile_scalar(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceType_2.cpp:7416:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7418:      .typed<Tensor (const Tensor &, double, c10::optional<int64_t>, bool)>();
autograd/generated/TraceType_2.cpp:7419:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7420:      .redispatch<Tensor, const Tensor &, double, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim);
autograd/generated/TraceType_2.cpp:7427:Tensor quantile(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/TraceType_2.cpp:7444:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7446:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>, bool)>();
autograd/generated/TraceType_2.cpp:7447:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7448:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>, bool>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim);
autograd/generated/TraceType_2.cpp:7473:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7476:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7477:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, ScalarType>(op, c10::DispatchKey::Tracer, self, scales, zero_points, axis, dtype);
autograd/generated/TraceType_2.cpp:7484:Tensor rand_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_2.cpp:7503:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7505:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_2.cpp:7506:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7507:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_2.cpp:7514:Tensor randint(int64_t high, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:7533:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7535:      .typed<Tensor (int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:7536:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7537:      .redispatch<Tensor, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, high, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:7544:Tensor randint_generator(int64_t high, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:7564:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7566:      .typed<Tensor (int64_t, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:7567:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7568:      .redispatch<Tensor, int64_t, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, high, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:7575:Tensor randint_low(int64_t low, int64_t high, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:7595:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7597:      .typed<Tensor (int64_t, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:7598:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7599:      .redispatch<Tensor, int64_t, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, low, high, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:7606:Tensor randint_low_generator(int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:7627:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7629:      .typed<Tensor (int64_t, int64_t, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:7630:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7631:      .redispatch<Tensor, int64_t, int64_t, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, low, high, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:7638:Tensor randn_like(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_2.cpp:7657:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7659:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_2.cpp:7660:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7661:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_2.cpp:7668:Tensor randperm(int64_t n, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:7686:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7688:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:7689:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7690:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:7697:Tensor randperm_generator(int64_t n, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:7716:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7718:      .typed<Tensor (int64_t, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:7719:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7720:      .redispatch<Tensor, int64_t, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, n, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:7743:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7746:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7747:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceType_2.cpp:7754:Tensor rename(const Tensor & self, c10::optional<DimnameList> names) {
autograd/generated/TraceType_2.cpp:7769:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7771:      .typed<Tensor (const Tensor &, c10::optional<DimnameList>)>();
autograd/generated/TraceType_2.cpp:7772:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7773:      .redispatch<Tensor, const Tensor &, c10::optional<DimnameList>>(op, c10::DispatchKey::Tracer, self, names);
autograd/generated/TraceType_2.cpp:7780:Tensor & rename_(Tensor & self, c10::optional<DimnameList> names) {
autograd/generated/TraceType_2.cpp:7800:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7802:      .typed<Tensor & (Tensor &, c10::optional<DimnameList>)>();
autograd/generated/TraceType_2.cpp:7803:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7804:      .redispatch<Tensor &, Tensor &, c10::optional<DimnameList>>(op, c10::DispatchKey::Tracer, self, names);
autograd/generated/TraceType_2.cpp:7825:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7828:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7829:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, repeats);
autograd/generated/TraceType_2.cpp:7836:Tensor repeat_interleave_self_Tensor(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) {
autograd/generated/TraceType_2.cpp:7852:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7854:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>();
autograd/generated/TraceType_2.cpp:7855:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7856:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, repeats, dim);
autograd/generated/TraceType_2.cpp:7863:Tensor repeat_interleave_self_int(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {
autograd/generated/TraceType_2.cpp:7879:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7881:      .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>)>();
autograd/generated/TraceType_2.cpp:7882:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7883:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, repeats, dim);
autograd/generated/TraceType_2.cpp:7906:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7909:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7910:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceType_2.cpp:7932:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7935:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7936:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceType_2.cpp:7965:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7968:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:7969:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceType_2.cpp:7997:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8000:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8001:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceType_2.cpp:8008:Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const c10::optional<Tensor> & b_ih, const c10::optional<Tensor> & b_hh) {
autograd/generated/TraceType_2.cpp:8009:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8011:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_2.cpp:8012:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8013:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh);
autograd/generated/TraceType_2.cpp:8030:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8033:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8034:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:8060:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8063:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8064:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:8091:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8094:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8095:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/generated/TraceType_2.cpp:8116:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8119:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8120:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:8146:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8149:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8150:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:8157:Tensor scalar_tensor(Scalar s, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:8175:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8177:      .typed<Tensor (Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:8178:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8179:      .redispatch<Tensor, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, s, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:8203:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8206:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8207:      .redispatch<Tensor, const Tensor &, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, sorted_sequence, self, out_int32, right);
autograd/generated/TraceType_2.cpp:8231:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8234:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8235:      .redispatch<Tensor, const Tensor &, Scalar, bool, bool>(op, c10::DispatchKey::Tracer, sorted_sequence, self, out_int32, right);
autograd/generated/TraceType_2.cpp:8243:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8246:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8247:      .redispatch<Tensor &, Tensor &, Storage>(op, c10::DispatchKey::Tracer, self, source);
autograd/generated/TraceType_2.cpp:8251:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8254:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8255:      .redispatch<Tensor &, Tensor &, Storage, int64_t, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, source, storage_offset, size, stride);
autograd/generated/TraceType_2.cpp:8278:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8281:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8282:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, source);
autograd/generated/TraceType_2.cpp:8308:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8311:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8312:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:8339:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8342:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8343:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:8370:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8373:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8374:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:8401:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8404:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8405:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:8426:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8429:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8430:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:8437:Tensor slow_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/TraceType_2.cpp:8456:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8458:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_2.cpp:8459:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8460:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding);
autograd/generated/TraceType_2.cpp:8496:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8499:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8500:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
autograd/generated/TraceType_2.cpp:8509:Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
autograd/generated/TraceType_2.cpp:8530:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8532:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_2.cpp:8533:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8534:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
autograd/generated/TraceType_2.cpp:8572:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8575:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8576:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, grad_input, grad_weight, grad_bias);
autograd/generated/TraceType_2.cpp:8585:Tensor & slow_conv_transpose3d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/TraceType_2.cpp:8612:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8614:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceType_2.cpp:8615:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8616:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
autograd/generated/TraceType_2.cpp:8640:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8643:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8644:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, double>(op, c10::DispatchKey::Tracer, self, target, reduction, beta);
autograd/generated/TraceType_2.cpp:8675:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8678:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8679:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, double, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, beta, grad_input);
autograd/generated/TraceType_2.cpp:8703:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8706:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8707:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction);
autograd/generated/TraceType_2.cpp:8732:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8735:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8736:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, beta, threshold, output);
autograd/generated/TraceType_2.cpp:8765:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8768:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8769:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, A, solution, lu);
autograd/generated/TraceType_2.cpp:8777:Tensor sparse_coo_tensor_size(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:8795:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8797:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:8798:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8799:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:8806:Tensor sparse_coo_tensor_indices(const Tensor & indices, const Tensor & values, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:8825:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8827:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:8828:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8829:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, indices, values, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:8836:Tensor sparse_coo_tensor_indices_size(const Tensor & indices, const Tensor & values, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:8856:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8858:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:8859:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8860:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, indices, values, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:8882:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8885:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8886:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mask);
autograd/generated/TraceType_2.cpp:8915:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8918:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8919:      .redispatch<Tensor &, Tensor &, IntArrayRef, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, size, sparse_dim, dense_dim);
autograd/generated/TraceType_2.cpp:8946:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8949:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8950:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:8971:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8974:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:8975:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:9001:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9004:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9005:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:9030:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9033:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9034:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha);
autograd/generated/TraceType_2.cpp:9057:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9060:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9061:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:9084:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9087:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9088:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:9116:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9119:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9120:      .redispatch<Tensor &, Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:9148:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9151:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9152:      .redispatch<Tensor &, Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, other, alpha);
autograd/generated/TraceType_2.cpp:9183:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9186:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9187:      .redispatch<std::tuple<Tensor &,Tensor &,Tensor &>, const Tensor &, bool, bool, Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, some, compute_uv, U, S, V);
autograd/generated/TraceType_2.cpp:9212:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9215:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9216:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceType_2.cpp:9244:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9247:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9248:      .redispatch<Tensor &, Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceType_2.cpp:9271:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9274:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9275:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, input, index);
autograd/generated/TraceType_2.cpp:9302:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9305:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9306:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_2.cpp:9327:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9330:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9331:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:9357:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9360:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9361:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:9389:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9392:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9393:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, grad_input);
autograd/generated/TraceType_2.cpp:9400:Tensor & thnn_conv2d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & out) {
autograd/generated/TraceType_2.cpp:9425:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9427:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceType_2.cpp:9428:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9429:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, out);
autograd/generated/TraceType_2.cpp:9459:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9462:  std::tie(grad_input, grad_weight) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9463:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,2>>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
autograd/generated/TraceType_2.cpp:9471:Tensor & thnn_conv_depthwise2d_forward_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/TraceType_2.cpp:9497:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9499:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceType_2.cpp:9500:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9501:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation, out);
autograd/generated/TraceType_2.cpp:9530:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9533:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9534:      .redispatch<Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, threshold, value, out);
autograd/generated/TraceType_2.cpp:9541:Tensor to_dtype_layout(const Tensor & self, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_2.cpp:9562:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9564:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, bool, bool, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_2.cpp:9565:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9566:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, bool, bool, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, layout, device, pin_memory, non_blocking, copy, memory_format);
autograd/generated/TraceType_2.cpp:9573:Tensor to_device(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_2.cpp:9592:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9594:      .typed<Tensor (const Tensor &, Device, ScalarType, bool, bool, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_2.cpp:9595:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9596:      .redispatch<Tensor, const Tensor &, Device, ScalarType, bool, bool, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, device, dtype, non_blocking, copy, memory_format);
autograd/generated/TraceType_2.cpp:9603:Tensor to_dtype(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_2.cpp:9621:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9623:      .typed<Tensor (const Tensor &, ScalarType, bool, bool, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_2.cpp:9624:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9625:      .redispatch<Tensor, const Tensor &, ScalarType, bool, bool, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, dtype, non_blocking, copy, memory_format);
autograd/generated/TraceType_2.cpp:9632:Tensor to_other(const Tensor & self, const Tensor & other, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_2.cpp:9650:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9652:      .typed<Tensor (const Tensor &, const Tensor &, bool, bool, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_2.cpp:9653:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9654:      .redispatch<Tensor, const Tensor &, const Tensor &, bool, bool, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, other, non_blocking, copy, memory_format);
autograd/generated/TraceType_2.cpp:9676:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9679:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9680:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad, input);
autograd/generated/TraceType_2.cpp:9701:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9704:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9705:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_2.cpp:9733:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9736:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9737:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, diagonal, out);
autograd/generated/TraceType_2.cpp:9759:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9762:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9763:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceType_2.cpp:9790:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9793:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9794:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, diagonal);
autograd/generated/TraceType_2.cpp:9801:Tensor triu_indices(int64_t row, int64_t col, int64_t offset, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_2.cpp:9821:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9823:      .typed<Tensor (int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_2.cpp:9824:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9825:      .redispatch<Tensor, int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, row, col, offset, dtype, layout, device, pin_memory);
autograd/generated/TraceType_2.cpp:9847:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9850:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9851:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:9873:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9876:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9877:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:9904:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9907:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9908:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:9935:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9938:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9939:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:9961:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9964:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9965:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_2.cpp:9972:Tensor unflatten_int(const Tensor & self, int64_t dim, IntArrayRef sizes, c10::optional<DimnameList> names) {
autograd/generated/TraceType_2.cpp:9989:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9991:      .typed<Tensor (const Tensor &, int64_t, IntArrayRef, c10::optional<DimnameList>)>();
autograd/generated/TraceType_2.cpp:9992:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:9993:      .redispatch<Tensor, const Tensor &, int64_t, IntArrayRef, c10::optional<DimnameList>>(op, c10::DispatchKey::Tracer, self, dim, sizes, names);
autograd/generated/TraceType_2.cpp:10017:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10020:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10021:      .redispatch<Tensor, const Tensor &, Dimname, IntArrayRef, DimnameList>(op, c10::DispatchKey::Tracer, self, dim, sizes, names);
autograd/generated/TraceType_2.cpp:10049:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10052:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10053:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, sorted, return_inverse, return_counts);
autograd/generated/TraceType_2.cpp:10077:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10080:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10081:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_2.cpp:10108:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10111:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10112:      .redispatch<Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_2.cpp:10119:Tensor upsample_bicubic2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_2.cpp:10136:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10138:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_2.cpp:10139:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10140:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, align_corners, scale_factors);
autograd/generated/TraceType_2.cpp:10147:Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_2.cpp:10165:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10167:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_2.cpp:10168:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10169:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_h, scales_w);
autograd/generated/TraceType_2.cpp:10176:Tensor & upsample_bicubic2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceType_2.cpp:10201:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10203:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_2.cpp:10204:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10205:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
autograd/generated/TraceType_2.cpp:10212:Tensor upsample_nearest3d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_2.cpp:10229:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10231:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_2.cpp:10232:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10233:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scale_factors);
autograd/generated/TraceType_2.cpp:10240:Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_2.cpp:10259:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10261:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_2.cpp:10262:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10263:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales_d, scales_h, scales_w);
autograd/generated/TraceType_2.cpp:10270:Tensor upsample_trilinear3d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_2.cpp:10287:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10289:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_2.cpp:10290:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10291:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, align_corners, scale_factors);
autograd/generated/TraceType_2.cpp:10298:Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_2.cpp:10317:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10319:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_2.cpp:10320:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10321:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_d, scales_h, scales_w);
autograd/generated/TraceType_2.cpp:10328:Tensor & upsample_trilinear3d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceType_2.cpp:10354:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10356:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_2.cpp:10357:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10358:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, grad_input);
autograd/generated/TraceType_2.cpp:10379:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10382:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10383:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_2.cpp:10411:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10414:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10415:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_2.cpp:10443:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10446:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10447:      .redispatch<Tensor &, Scalar, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_2.cpp:10475:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10478:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10479:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_2.cpp:10509:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10512:  c10::Dispatcher::singleton()
autograd/generated/TraceType_2.cpp:10513:      .redispatch<Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, size, out);
autograd/generated/python_variable_methods.cpp:38:#include "c10/util/Optional.h"
autograd/generated/python_variable_methods.cpp:39:#include "c10/core/Stream.h"
autograd/generated/python_variable_methods.cpp:50:using c10::Stream;
autograd/generated/python_variable_methods.cpp:306:static c10::complex<double> dispatch_to_CComplexDouble(const Tensor & self) {
autograd/generated/python_variable_methods.cpp:312:  return self.item<c10::complex<double>>();
autograd/generated/python_variable_methods.cpp:408:static Tensor dispatch_to(const Tensor & self, Device device, bool non_blocking, bool copy, c10::optional<c10::MemoryFormat> optional_memory_format) {
autograd/generated/python_variable_methods.cpp:418:static Tensor dispatch_to(const Tensor & self, bool non_blocking, bool copy, c10::optional<c10::MemoryFormat> optional_memory_format) {
autograd/generated/python_variable_methods.cpp:423:static Tensor dispatch_to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy, c10::optional<c10::MemoryFormat> optional_memory_format) {
autograd/generated/python_variable_methods.cpp:429:static Tensor dispatch_to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy, c10::optional<c10::MemoryFormat> optional_memory_format) {
autograd/generated/python_variable_methods.cpp:534:static PyObject * THPVariable_to_type(PyObject* self, ScalarType scalarType, c10::optional<c10::MemoryFormat> optional_memory_format) {
autograd/generated/python_variable_methods.cpp:2818:  auto dispatch_argmax = [](Tensor & self, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_variable_methods.cpp:2843:  auto dispatch_argmin = [](Tensor & self, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_variable_methods.cpp:2908:  auto dispatch_as_strided = [](Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) -> Tensor {
autograd/generated/python_variable_methods.cpp:2933:  auto dispatch_as_strided_ = [](Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) -> Tensor {
autograd/generated/python_variable_methods.cpp:3256:      auto dispatch_bernoulli = [](Tensor & self, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:3265:      auto dispatch_bernoulli = [](Tensor & self, double p, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:3296:      auto dispatch_bernoulli_ = [](Tensor & self, const Tensor & p, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:3305:      auto dispatch_bernoulli_ = [](Tensor & self, double p, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:3332:  auto dispatch_bincount = [](Tensor & self, const c10::optional<Tensor> & weights, int64_t minlength) -> Tensor {
autograd/generated/python_variable_methods.cpp:3683:  auto dispatch_cauchy_ = [](Tensor & self, double median, double sigma, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:3844:  auto dispatch_clamp = [](Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_variable_methods.cpp:3869:  auto dispatch_clamp_ = [](Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_variable_methods.cpp:3994:  auto dispatch_clip = [](Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_variable_methods.cpp:4019:  auto dispatch_clip_ = [](Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) -> Tensor {
autograd/generated/python_variable_methods.cpp:4044:  auto dispatch_clone = [](Tensor & self, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_variable_methods.cpp:4270:      auto dispatch_count_nonzero = [](Tensor & self, c10::optional<int64_t> dim) -> Tensor {
autograd/generated/python_variable_methods.cpp:4297:  auto dispatch_cross = [](Tensor & self, const Tensor & other, c10::optional<int64_t> dim) -> Tensor {
autograd/generated/python_variable_methods.cpp:4424:      auto dispatch_cumprod = [](Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:4433:      auto dispatch_cumprod = [](Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:4464:      auto dispatch_cumprod_ = [](Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:4473:      auto dispatch_cumprod_ = [](Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:4504:      auto dispatch_cumsum = [](Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:4513:      auto dispatch_cumsum = [](Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:4544:      auto dispatch_cumsum_ = [](Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:4553:      auto dispatch_cumsum_ = [](Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:4821:  auto dispatch_diff = [](Tensor & self, int64_t n, int64_t dim, const c10::optional<Tensor> & prepend, const c10::optional<Tensor> & append) -> Tensor {
autograd/generated/python_variable_methods.cpp:5557:  auto dispatch_exponential_ = [](Tensor & self, double lambd, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:6336:  auto dispatch_geometric_ = [](Tensor & self, double p, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:7194:    "index_put(c10::List<c10::optional<Tensor>> indices, Tensor values, bool accumulate=False)",
autograd/generated/python_variable_methods.cpp:7204:  auto dispatch_index_put = [](Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) -> Tensor {
autograd/generated/python_variable_methods.cpp:7219:    "index_put_(c10::List<c10::optional<Tensor>> indices, Tensor values, bool accumulate=False)",
autograd/generated/python_variable_methods.cpp:7229:  auto dispatch_index_put_ = [](Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) -> Tensor {
autograd/generated/python_variable_methods.cpp:7682:  auto dispatch_istft = [](Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool center, bool normalized, c10::optional<bool> onesided, c10::optional<int64_t> length, bool return_complex) -> Tensor {
autograd/generated/python_variable_methods.cpp:8381:  auto dispatch_log_normal_ = [](Tensor & self, double mean, double std, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:8410:      auto dispatch_log_softmax = [](Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:8419:      auto dispatch_log_softmax = [](Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:8740:  auto dispatch_logit = [](Tensor & self, c10::optional<double> eps) -> Tensor {
autograd/generated/python_variable_methods.cpp:8765:  auto dispatch_logit_ = [](Tensor & self, c10::optional<double> eps) -> Tensor {
autograd/generated/python_variable_methods.cpp:9291:      auto dispatch_mean = [](Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:9300:      auto dispatch_mean = [](Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:9309:      auto dispatch_mean = [](Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:9711:  auto dispatch_multinomial = [](Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:9891:  auto dispatch_nan_to_num = [](Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) -> Tensor {
autograd/generated/python_variable_methods.cpp:9916:  auto dispatch_nan_to_num_ = [](Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) -> Tensor {
autograd/generated/python_variable_methods.cpp:10004:      auto dispatch_nanquantile = [](Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_variable_methods.cpp:10013:      auto dispatch_nanquantile = [](Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_variable_methods.cpp:10044:      auto dispatch_nansum = [](Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:10053:      auto dispatch_nansum = [](Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:10492:      auto dispatch_norm = [](Tensor & self, c10::optional<Scalar> p, ScalarType dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:10501:      auto dispatch_norm = [](Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:10510:      auto dispatch_norm = [](Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) -> Tensor {
autograd/generated/python_variable_methods.cpp:10519:      auto dispatch_norm = [](Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:10528:      auto dispatch_norm = [](Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) -> Tensor {
autograd/generated/python_variable_methods.cpp:10555:  auto dispatch_normal_ = [](Tensor & self, double mean, double std, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:10963:      auto dispatch_prod = [](Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:10972:      auto dispatch_prod = [](Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:10981:      auto dispatch_prod = [](Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:11179:      auto dispatch_quantile = [](Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_variable_methods.cpp:11188:      auto dispatch_quantile = [](Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim) -> Tensor {
autograd/generated/python_variable_methods.cpp:11256:      auto dispatch_random_ = [](Tensor & self, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:11265:      auto dispatch_random_ = [](Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:11274:      auto dispatch_random_ = [](Tensor & self, int64_t to, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:11522:  c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_variable_methods.cpp:11523:  auto dispatch_rename = [](Tensor & self, c10::optional<DimnameList> names) -> Tensor {
autograd/generated/python_variable_methods.cpp:11548:  c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_variable_methods.cpp:11549:  auto dispatch_rename_ = [](Tensor & self, c10::optional<DimnameList> names) -> Tensor {
autograd/generated/python_variable_methods.cpp:11653:      auto dispatch_repeat_interleave = [](Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) -> Tensor {
autograd/generated/python_variable_methods.cpp:11662:      auto dispatch_repeat_interleave = [](Tensor & self, int64_t repeats, c10::optional<int64_t> dim) -> Tensor {
autograd/generated/python_variable_methods.cpp:11739:  auto dispatch_resize_ = [](Tensor & self, IntArrayRef size, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_variable_methods.cpp:11764:  auto dispatch_resize_as_ = [](Tensor & self, const Tensor & the_template, c10::optional<MemoryFormat> memory_format) -> Tensor {
autograd/generated/python_variable_methods.cpp:12426:      auto dispatch_softmax = [](Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:12435:      auto dispatch_softmax = [](Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:12960:  auto dispatch_stft = [](Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const c10::optional<Tensor> & window, bool normalized, c10::optional<bool> onesided, c10::optional<bool> return_complex) -> Tensor {
autograd/generated/python_variable_methods.cpp:13150:      auto dispatch_sum = [](Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:13159:      auto dispatch_sum = [](Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:13168:      auto dispatch_sum = [](Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:13596:  auto dispatch_to_dense = [](Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:13621:  auto dispatch_to_mkldnn = [](Tensor & self, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_variable_methods.cpp:14131:      c10::optional<DimnameList> names = __names ? c10::make_optional(DimnameList(__names.value())) : c10::nullopt;
autograd/generated/python_variable_methods.cpp:14132:      auto dispatch_unflatten = [](Tensor & self, int64_t dim, IntArrayRef sizes, c10::optional<DimnameList> names) -> Tensor {
autograd/generated/python_variable_methods.cpp:14184:  auto dispatch_uniform_ = [](Tensor & self, double from, double to, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_variable_methods.cpp:14623:// set_ has to be defined in the template because the c10::Storage object
autograd/generated/python_nn_functions.cpp:296:  auto dispatch__test_optional_filled_intlist = [](const Tensor & values, c10::optional<IntArrayRef> addends) -> Tensor {
autograd/generated/python_nn_functions.cpp:320:  auto dispatch__test_optional_floatlist = [](const Tensor & values, c10::optional<ArrayRef<double>> addends) -> Tensor {
autograd/generated/python_nn_functions.cpp:344:  auto dispatch__test_optional_intlist = [](const Tensor & values, c10::optional<IntArrayRef> addends) -> Tensor {
autograd/generated/python_nn_functions.cpp:529:    auto dispatch_avg_pool2d = [](const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) -> Tensor {
autograd/generated/python_nn_functions.cpp:537:    auto dispatch_avg_pool2d_out = [](Tensor out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) -> Tensor {
autograd/generated/python_nn_functions.cpp:563:    auto dispatch_avg_pool3d = [](const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) -> Tensor {
autograd/generated/python_nn_functions.cpp:571:    auto dispatch_avg_pool3d_out = [](Tensor out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) -> Tensor {
autograd/generated/python_nn_functions.cpp:597:    auto dispatch_binary_cross_entropy = [](const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) -> Tensor {
autograd/generated/python_nn_functions.cpp:605:    auto dispatch_binary_cross_entropy_out = [](Tensor out, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) -> Tensor {
autograd/generated/python_nn_functions.cpp:1148:  auto dispatch_linear = [](const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias) -> Tensor {
autograd/generated/python_nn_functions.cpp:1342:  auto dispatch_mkldnn_linear = [](const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias) -> Tensor {
autograd/generated/python_nn_functions.cpp:1449:    auto dispatch_multi_margin_loss = [](const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) -> Tensor {
autograd/generated/python_nn_functions.cpp:1457:    auto dispatch_multi_margin_loss_out = [](Tensor out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction) -> Tensor {
autograd/generated/python_nn_functions.cpp:1517:    auto dispatch_nll_loss = [](const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) -> Tensor {
autograd/generated/python_nn_functions.cpp:1525:    auto dispatch_nll_loss_out = [](Tensor out, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) -> Tensor {
autograd/generated/python_nn_functions.cpp:1551:    auto dispatch_nll_loss2d = [](const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) -> Tensor {
autograd/generated/python_nn_functions.cpp:1559:    auto dispatch_nll_loss2d_out = [](Tensor out, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index) -> Tensor {
autograd/generated/python_nn_functions.cpp:1779:    auto dispatch_rrelu_with_noise = [](const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_nn_functions.cpp:1787:    auto dispatch_rrelu_with_noise_out = [](Tensor out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_nn_functions.cpp:1812:  auto dispatch_rrelu_with_noise_ = [](Tensor self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) -> Tensor {
autograd/generated/python_nn_functions.cpp:1895:    auto dispatch_slow_conv3d = [](const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) -> Tensor {
autograd/generated/python_nn_functions.cpp:1903:    auto dispatch_slow_conv3d_out = [](Tensor out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) -> Tensor {
autograd/generated/python_nn_functions.cpp:1928:  auto dispatch_slow_conv_dilated2d = [](const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) -> Tensor {
autograd/generated/python_nn_functions.cpp:1952:  auto dispatch_slow_conv_dilated3d = [](const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) -> Tensor {
autograd/generated/python_nn_functions.cpp:1977:    auto dispatch_slow_conv_transpose2d = [](const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) -> Tensor {
autograd/generated/python_nn_functions.cpp:1985:    auto dispatch_slow_conv_transpose2d_out = [](Tensor out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) -> Tensor {
autograd/generated/python_nn_functions.cpp:2011:    auto dispatch_slow_conv_transpose3d = [](const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) -> Tensor {
autograd/generated/python_nn_functions.cpp:2019:    auto dispatch_slow_conv_transpose3d_out = [](Tensor out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) -> Tensor {
autograd/generated/python_nn_functions.cpp:2181:    auto dispatch_thnn_conv2d = [](const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) -> Tensor {
autograd/generated/python_nn_functions.cpp:2189:    auto dispatch_thnn_conv2d_out = [](Tensor out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) -> Tensor {
autograd/generated/python_nn_functions.cpp:2215:    auto dispatch_thnn_conv_depthwise2d = [](const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) -> Tensor {
autograd/generated/python_nn_functions.cpp:2223:    auto dispatch_thnn_conv_depthwise2d_out = [](Tensor out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) -> Tensor {
autograd/generated/python_nn_functions.cpp:2252:      auto dispatch_upsample_bicubic2d = [](const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) -> Tensor {
autograd/generated/python_nn_functions.cpp:2262:        auto dispatch_upsample_bicubic2d = [](const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/python_nn_functions.cpp:2270:        auto dispatch_upsample_bicubic2d_out = [](Tensor out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/python_nn_functions.cpp:2301:      auto dispatch_upsample_bilinear2d = [](const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) -> Tensor {
autograd/generated/python_nn_functions.cpp:2311:        auto dispatch_upsample_bilinear2d = [](const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/python_nn_functions.cpp:2319:        auto dispatch_upsample_bilinear2d_out = [](Tensor out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/python_nn_functions.cpp:2350:      auto dispatch_upsample_linear1d = [](const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) -> Tensor {
autograd/generated/python_nn_functions.cpp:2360:        auto dispatch_upsample_linear1d = [](const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) -> Tensor {
autograd/generated/python_nn_functions.cpp:2368:        auto dispatch_upsample_linear1d_out = [](Tensor out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) -> Tensor {
autograd/generated/python_nn_functions.cpp:2399:      auto dispatch_upsample_nearest1d = [](const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) -> Tensor {
autograd/generated/python_nn_functions.cpp:2409:        auto dispatch_upsample_nearest1d = [](const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) -> Tensor {
autograd/generated/python_nn_functions.cpp:2417:        auto dispatch_upsample_nearest1d_out = [](Tensor out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) -> Tensor {
autograd/generated/python_nn_functions.cpp:2448:      auto dispatch_upsample_nearest2d = [](const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) -> Tensor {
autograd/generated/python_nn_functions.cpp:2458:        auto dispatch_upsample_nearest2d = [](const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/python_nn_functions.cpp:2466:        auto dispatch_upsample_nearest2d_out = [](Tensor out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/python_nn_functions.cpp:2497:      auto dispatch_upsample_nearest3d = [](const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) -> Tensor {
autograd/generated/python_nn_functions.cpp:2507:        auto dispatch_upsample_nearest3d = [](const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/python_nn_functions.cpp:2515:        auto dispatch_upsample_nearest3d_out = [](Tensor out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/python_nn_functions.cpp:2546:      auto dispatch_upsample_trilinear3d = [](const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) -> Tensor {
autograd/generated/python_nn_functions.cpp:2556:        auto dispatch_upsample_trilinear3d = [](const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/python_nn_functions.cpp:2564:        auto dispatch_upsample_trilinear3d_out = [](Tensor out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) -> Tensor {
autograd/generated/VariableType_0.cpp:48:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:49:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:50:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:69:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:70:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:71:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:73:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:74:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:75:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:96:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:97:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:98:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:117:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:118:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:119:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:121:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:122:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:123:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:146:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:149:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:150:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:153:  c10::optional<Storage> found_inf__storage_saved =
autograd/generated/VariableType_0.cpp:154:    found_inf_.has_storage() ? c10::optional<Storage>(found_inf_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:155:  c10::intrusive_ptr<TensorImpl> found_inf__impl_saved;
autograd/generated/VariableType_0.cpp:157:  c10::optional<Storage> inv_scale__storage_saved =
autograd/generated/VariableType_0.cpp:158:    inv_scale_.has_storage() ? c10::optional<Storage>(inv_scale_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:159:  c10::intrusive_ptr<TensorImpl> inv_scale__impl_saved;
autograd/generated/VariableType_0.cpp:197:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:198:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:199:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:201:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_0.cpp:202:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:203:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_0.cpp:205:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:206:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:207:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:245:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_0.cpp:246:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:247:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_0.cpp:249:  c10::optional<Storage> coefficients__storage_saved =
autograd/generated/VariableType_0.cpp:250:    coefficients_.has_storage() ? c10::optional<Storage>(coefficients_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:251:  c10::intrusive_ptr<TensorImpl> coefficients__impl_saved;
autograd/generated/VariableType_0.cpp:253:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:254:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:255:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:279:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const c10::optional<Tensor> & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state) {
autograd/generated/VariableType_0.cpp:313:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_0.cpp:314:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:315:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_0.cpp:317:  std::vector<c10::optional<Storage>> weight__storage_saved(weight_.size());
autograd/generated/VariableType_0.cpp:320:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:321:  std::vector<c10::intrusive_ptr<TensorImpl>> weight__impl_saved(weight_.size());
autograd/generated/VariableType_0.cpp:324:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableType_0.cpp:325:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:326:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableType_0.cpp:376:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:377:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:378:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:380:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:381:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:382:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:406:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:407:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:408:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:423:std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights, bool include_last_offset) {
autograd/generated/VariableType_0.cpp:449:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:450:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:451:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:453:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:454:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:455:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:457:  c10::optional<Storage> offsets__storage_saved =
autograd/generated/VariableType_0.cpp:458:    offsets_.has_storage() ? c10::optional<Storage>(offsets_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:459:  c10::intrusive_ptr<TensorImpl> offsets__impl_saved;
autograd/generated/VariableType_0.cpp:508:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:509:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:510:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:512:  c10::optional<Storage> scale__storage_saved =
autograd/generated/VariableType_0.cpp:513:    scale_.has_storage() ? c10::optional<Storage>(scale_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:514:  c10::intrusive_ptr<TensorImpl> scale__impl_saved;
autograd/generated/VariableType_0.cpp:516:  c10::optional<Storage> zero_point__storage_saved =
autograd/generated/VariableType_0.cpp:517:    zero_point_.has_storage() ? c10::optional<Storage>(zero_point_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:518:  c10::intrusive_ptr<TensorImpl> zero_point__impl_saved;
autograd/generated/VariableType_0.cpp:553:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:556:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:557:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:584:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:587:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:588:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:617:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:620:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:621:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:656:  std::vector<c10::optional<Storage>> tensors1__storage_saved(tensors1_.size());
autograd/generated/VariableType_0.cpp:659:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:660:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors1__impl_saved(tensors1_.size());
autograd/generated/VariableType_0.cpp:663:  std::vector<c10::optional<Storage>> tensors2__storage_saved(tensors2_.size());
autograd/generated/VariableType_0.cpp:666:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:667:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors2__impl_saved(tensors2_.size());
autograd/generated/VariableType_0.cpp:709:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:712:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:713:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:740:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:743:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:744:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:767:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:770:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:771:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:774:  std::vector<c10::optional<Storage>> other__storage_saved(other_.size());
autograd/generated/VariableType_0.cpp:777:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:778:  std::vector<c10::intrusive_ptr<TensorImpl>> other__impl_saved(other_.size());
autograd/generated/VariableType_0.cpp:808:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:811:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:812:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:841:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:844:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:845:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:872:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:875:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:876:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:905:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:908:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:909:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:936:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:939:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:940:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:969:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:972:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:973:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:1000:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:1003:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1004:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:1033:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:1036:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1037:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:1071:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:1074:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1075:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:1102:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:1105:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1106:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:1128:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:1131:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1132:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:1161:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:1164:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1165:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:1192:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:1195:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1196:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:1225:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:1228:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1229:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:1256:  std::vector<c10::optional<Storage>> self__storage_saved(self_.size());
autograd/generated/VariableType_0.cpp:1259:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1260:  std::vector<c10::intrusive_ptr<TensorImpl>> self__impl_saved(self_.size());
autograd/generated/VariableType_0.cpp:1279:Tensor & _index_put_impl_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate, bool unsafe) {
autograd/generated/VariableType_0.cpp:1295:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1296:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1297:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1299:  std::vector<c10::optional<Storage>> indices_storage_saved(indices.size());
autograd/generated/VariableType_0.cpp:1300:  for (const c10::optional<Tensor>& tensor : indices)
autograd/generated/VariableType_0.cpp:1302:      tensor.has_value() && tensor->has_storage() ? c10::optional<Storage>(tensor->storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:1303:  std::vector<c10::intrusive_ptr<TensorImpl>> indices_impl_saved(indices.size());
autograd/generated/VariableType_0.cpp:1305:    c10::optional<Tensor> t = indices[i];
autograd/generated/VariableType_0.cpp:1308:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_0.cpp:1309:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1310:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_0.cpp:1324:          static_cast<c10::optional<Tensor>>(indices[i])->storage()));
autograd/generated/VariableType_0.cpp:1328:      AT_ASSERT(indices_impl_saved[i] == static_cast<c10::optional<Tensor>>(indices[i])->getIntrusivePtr());
autograd/generated/VariableType_0.cpp:1343:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1344:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1345:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1363:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1364:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1365:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1393:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1394:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1395:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1397:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:1398:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1399:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:1430:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1431:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1432:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1462:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1463:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1464:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1496:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1497:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1498:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1500:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_0.cpp:1501:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1502:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_0.cpp:1504:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:1505:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1506:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:1543:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1544:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1545:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1579:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1580:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1581:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1603:Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableType_0.cpp:1623:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:1624:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1625:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:1627:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_0.cpp:1628:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1629:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_0.cpp:1631:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1632:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1633:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1670:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1671:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1672:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1703:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1704:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1705:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1725:std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/VariableType_0.cpp:1744:  c10::optional<Storage> input_gates__storage_saved =
autograd/generated/VariableType_0.cpp:1745:    input_gates_.has_storage() ? c10::optional<Storage>(input_gates_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1746:  c10::intrusive_ptr<TensorImpl> input_gates__impl_saved;
autograd/generated/VariableType_0.cpp:1748:  c10::optional<Storage> hidden_gates__storage_saved =
autograd/generated/VariableType_0.cpp:1749:    hidden_gates_.has_storage() ? c10::optional<Storage>(hidden_gates_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1750:  c10::intrusive_ptr<TensorImpl> hidden_gates__impl_saved;
autograd/generated/VariableType_0.cpp:1752:  c10::optional<Storage> hx__storage_saved =
autograd/generated/VariableType_0.cpp:1753:    hx_.has_storage() ? c10::optional<Storage>(hx_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1754:  c10::intrusive_ptr<TensorImpl> hx__impl_saved;
autograd/generated/VariableType_0.cpp:1782:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) {
autograd/generated/VariableType_0.cpp:1799:  c10::optional<Storage> cx__storage_saved =
autograd/generated/VariableType_0.cpp:1800:    cx_.has_storage() ? c10::optional<Storage>(cx_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1801:  c10::intrusive_ptr<TensorImpl> cx__impl_saved;
autograd/generated/VariableType_0.cpp:1803:  c10::optional<Storage> cy__storage_saved =
autograd/generated/VariableType_0.cpp:1804:    cy_.has_storage() ? c10::optional<Storage>(cy_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1805:  c10::intrusive_ptr<TensorImpl> cy__impl_saved;
autograd/generated/VariableType_0.cpp:1807:  c10::optional<Storage> workspace__storage_saved =
autograd/generated/VariableType_0.cpp:1808:    workspace_.has_storage() ? c10::optional<Storage>(workspace_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1809:  c10::intrusive_ptr<TensorImpl> workspace__impl_saved;
autograd/generated/VariableType_0.cpp:1858:  c10::optional<Storage> i1__storage_saved =
autograd/generated/VariableType_0.cpp:1859:    i1_.has_storage() ? c10::optional<Storage>(i1_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1860:  c10::intrusive_ptr<TensorImpl> i1__impl_saved;
autograd/generated/VariableType_0.cpp:1862:  c10::optional<Storage> i2__storage_saved =
autograd/generated/VariableType_0.cpp:1863:    i2_.has_storage() ? c10::optional<Storage>(i2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1864:  c10::intrusive_ptr<TensorImpl> i2__impl_saved;
autograd/generated/VariableType_0.cpp:1866:  c10::optional<Storage> i3__storage_saved =
autograd/generated/VariableType_0.cpp:1867:    i3_.has_storage() ? c10::optional<Storage>(i3_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1868:  c10::intrusive_ptr<TensorImpl> i3__impl_saved;
autograd/generated/VariableType_0.cpp:1904:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1905:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1906:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:1940:  c10::optional<Storage> v__storage_saved =
autograd/generated/VariableType_0.cpp:1941:    v_.has_storage() ? c10::optional<Storage>(v_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1942:  c10::intrusive_ptr<TensorImpl> v__impl_saved;
autograd/generated/VariableType_0.cpp:1944:  c10::optional<Storage> g__storage_saved =
autograd/generated/VariableType_0.cpp:1945:    g_.has_storage() ? c10::optional<Storage>(g_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1946:  c10::intrusive_ptr<TensorImpl> g__impl_saved;
autograd/generated/VariableType_0.cpp:1982:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:1983:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:1984:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2015:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2016:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2017:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2048:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2049:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2050:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2052:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:2053:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2054:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:2088:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2089:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2090:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2092:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:2093:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2094:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:2130:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:2131:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2132:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:2134:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2135:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2136:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2138:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:2139:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2140:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:2178:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2179:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2180:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2217:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:2218:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2219:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:2221:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2222:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2223:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2225:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:2226:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2227:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:2229:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_0.cpp:2230:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2231:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_0.cpp:2280:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2281:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2282:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2284:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableType_0.cpp:2285:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2286:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableType_0.cpp:2288:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableType_0.cpp:2289:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2290:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableType_0.cpp:2337:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2338:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2339:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2341:  c10::optional<Storage> tensor1__storage_saved =
autograd/generated/VariableType_0.cpp:2342:    tensor1_.has_storage() ? c10::optional<Storage>(tensor1_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2343:  c10::intrusive_ptr<TensorImpl> tensor1__impl_saved;
autograd/generated/VariableType_0.cpp:2345:  c10::optional<Storage> tensor2__storage_saved =
autograd/generated/VariableType_0.cpp:2346:    tensor2_.has_storage() ? c10::optional<Storage>(tensor2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2347:  c10::intrusive_ptr<TensorImpl> tensor2__impl_saved;
autograd/generated/VariableType_0.cpp:2395:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2396:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2397:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2399:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableType_0.cpp:2400:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2401:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableType_0.cpp:2403:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_0.cpp:2404:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2405:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_0.cpp:2454:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2455:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2456:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2458:  c10::optional<Storage> mat1__storage_saved =
autograd/generated/VariableType_0.cpp:2459:    mat1_.has_storage() ? c10::optional<Storage>(mat1_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2460:  c10::intrusive_ptr<TensorImpl> mat1__impl_saved;
autograd/generated/VariableType_0.cpp:2462:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_0.cpp:2463:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2464:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_0.cpp:2503:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2504:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2505:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2507:  c10::optional<Storage> vec1__storage_saved =
autograd/generated/VariableType_0.cpp:2508:    vec1_.has_storage() ? c10::optional<Storage>(vec1_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2509:  c10::intrusive_ptr<TensorImpl> vec1__impl_saved;
autograd/generated/VariableType_0.cpp:2511:  c10::optional<Storage> vec2__storage_saved =
autograd/generated/VariableType_0.cpp:2512:    vec2_.has_storage() ? c10::optional<Storage>(vec2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2513:  c10::intrusive_ptr<TensorImpl> vec2__impl_saved;
autograd/generated/VariableType_0.cpp:2515:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:2516:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2517:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:2557:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2558:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2559:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2561:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:2562:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2563:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:2584:Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
autograd/generated/VariableType_0.cpp:2587:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2588:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2589:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2617:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2618:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2619:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2621:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:2622:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2623:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:2655:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2656:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2657:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2688:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2689:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2690:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2692:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:2693:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2694:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:2730:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2731:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2732:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2734:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:2735:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2736:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:2769:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2770:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2771:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2789:Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/VariableType_0.cpp:2806:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2807:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2808:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2827:Tensor & avg_pool2d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/VariableType_0.cpp:2841:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:2842:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2843:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:2845:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2846:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2847:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2849:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_0.cpp:2850:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2851:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_0.cpp:2875:Tensor & avg_pool3d_out_out(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & out) {
autograd/generated/VariableType_0.cpp:2888:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2889:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2890:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2892:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:2893:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2894:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:2930:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:2931:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2932:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:2934:  c10::optional<Storage> batch1__storage_saved =
autograd/generated/VariableType_0.cpp:2935:    batch1_.has_storage() ? c10::optional<Storage>(batch1_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2936:  c10::intrusive_ptr<TensorImpl> batch1__impl_saved;
autograd/generated/VariableType_0.cpp:2938:  c10::optional<Storage> batch2__storage_saved =
autograd/generated/VariableType_0.cpp:2939:    batch2_.has_storage() ? c10::optional<Storage>(batch2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2940:  c10::intrusive_ptr<TensorImpl> batch2__impl_saved;
autograd/generated/VariableType_0.cpp:2942:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:2943:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2944:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:2971:std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, double momentum) {
autograd/generated/VariableType_0.cpp:2983:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_0.cpp:2984:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:2985:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_0.cpp:3005:Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction) {
autograd/generated/VariableType_0.cpp:3024:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:3025:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3026:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:3028:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3029:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3030:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3032:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_0.cpp:3033:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3034:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_0.cpp:3073:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3074:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3075:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3077:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:3078:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3079:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:3081:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3082:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3083:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3120:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3121:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3122:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3124:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3125:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3126:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3160:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3161:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3162:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3164:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3165:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3166:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3201:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3202:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3203:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3205:  c10::optional<Storage> mat2__storage_saved =
autograd/generated/VariableType_0.cpp:3206:    mat2_.has_storage() ? c10::optional<Storage>(mat2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3207:  c10::intrusive_ptr<TensorImpl> mat2__impl_saved;
autograd/generated/VariableType_0.cpp:3209:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3210:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3211:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3240:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3241:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3242:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3244:  c10::optional<Storage> boundaries__storage_saved =
autograd/generated/VariableType_0.cpp:3245:    boundaries_.has_storage() ? c10::optional<Storage>(boundaries_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3246:  c10::intrusive_ptr<TensorImpl> boundaries__impl_saved;
autograd/generated/VariableType_0.cpp:3248:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3249:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3250:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3283:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3284:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3285:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3316:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3317:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3318:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3351:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3352:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3353:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3388:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3389:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3390:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3392:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3393:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3394:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3415:Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/VariableType_0.cpp:3428:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3429:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3430:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3449:Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
autograd/generated/VariableType_0.cpp:3463:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3464:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3465:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3496:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3497:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3498:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3500:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3501:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3502:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3540:  c10::optional<Storage> real__storage_saved =
autograd/generated/VariableType_0.cpp:3541:    real_.has_storage() ? c10::optional<Storage>(real_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3542:  c10::intrusive_ptr<TensorImpl> real__impl_saved;
autograd/generated/VariableType_0.cpp:3544:  c10::optional<Storage> imag__storage_saved =
autograd/generated/VariableType_0.cpp:3545:    imag_.has_storage() ? c10::optional<Storage>(imag_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3546:  c10::intrusive_ptr<TensorImpl> imag__impl_saved;
autograd/generated/VariableType_0.cpp:3580:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3581:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3582:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3584:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3585:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3586:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3630:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:3631:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3632:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:3634:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_0.cpp:3635:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3636:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_0.cpp:3638:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:3639:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3640:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:3681:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3682:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3683:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3685:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:3686:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3687:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:3689:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3690:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3691:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3726:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3727:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3728:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3758:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3759:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3760:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3778:std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_var, double epsilon, const Tensor & reserveSpace) {
autograd/generated/VariableType_0.cpp:3805:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_0.cpp:3806:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3807:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_0.cpp:3809:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:3810:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3811:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:3813:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:3814:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3815:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:3817:  c10::optional<Storage> reserveSpace__storage_saved =
autograd/generated/VariableType_0.cpp:3818:    reserveSpace_.has_storage() ? c10::optional<Storage>(reserveSpace_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3819:  c10::intrusive_ptr<TensorImpl> reserveSpace__impl_saved;
autograd/generated/VariableType_0.cpp:3863:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3864:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3865:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3867:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableType_0.cpp:3868:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3869:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableType_0.cpp:3871:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:3872:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3873:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:3913:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3914:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3915:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3917:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_0.cpp:3918:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3919:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_0.cpp:3921:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:3922:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3923:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:3948:Tensor & cumsum_out_out(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableType_0.cpp:3961:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3962:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3963:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:3965:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:3966:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:3967:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:3998:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:3999:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4000:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4030:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4031:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4032:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4062:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4063:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4064:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4093:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4094:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4095:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4126:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4127:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4128:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4159:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4160:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4161:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4163:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:4164:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4165:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:4199:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:4200:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4201:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:4203:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:4204:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4205:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:4237:  c10::optional<Storage> qtensor__storage_saved =
autograd/generated/VariableType_0.cpp:4238:    qtensor_.has_storage() ? c10::optional<Storage>(qtensor_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4239:  c10::intrusive_ptr<TensorImpl> qtensor__impl_saved;
autograd/generated/VariableType_0.cpp:4258:Tensor empty_strided(IntArrayRef size, IntArrayRef stride, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/VariableType_0.cpp:4279:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4280:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4281:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4283:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:4284:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4285:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:4317:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4318:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4319:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4350:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4351:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4352:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4381:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4382:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4383:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4421:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4422:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4423:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4425:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:4426:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4427:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:4459:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4460:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4461:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4463:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:4464:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4465:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:4499:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4500:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4501:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4503:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:4504:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4505:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:4539:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4540:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4541:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4543:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:4544:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4545:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:4580:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4581:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4582:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4584:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:4585:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4586:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:4588:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:4589:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4590:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:4629:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4630:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4631:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4633:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_0.cpp:4634:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4635:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_0.cpp:4667:  c10::optional<Storage> grad__storage_saved =
autograd/generated/VariableType_0.cpp:4668:    grad_.has_storage() ? c10::optional<Storage>(grad_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4669:  c10::intrusive_ptr<TensorImpl> grad__impl_saved;
autograd/generated/VariableType_0.cpp:4671:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4672:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4673:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4709:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:4710:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4711:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:4713:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_0.cpp:4714:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4715:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_0.cpp:4717:  c10::optional<Storage> grid__storage_saved =
autograd/generated/VariableType_0.cpp:4718:    grid_.has_storage() ? c10::optional<Storage>(grid_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4719:  c10::intrusive_ptr<TensorImpl> grid__impl_saved;
autograd/generated/VariableType_0.cpp:4757:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4758:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4759:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4792:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4793:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4794:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4796:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_0.cpp:4797:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4798:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_0.cpp:4800:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:4801:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4802:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:4843:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4844:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4845:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4847:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:4848:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4849:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:4889:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4890:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4891:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4893:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:4894:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4895:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:4930:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4931:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4932:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4934:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_0.cpp:4935:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4936:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_0.cpp:4938:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:4939:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4940:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:4967:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4968:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4969:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4988:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:4989:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4990:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:4992:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:4993:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:4994:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5026:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5027:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5028:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5030:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_0.cpp:5031:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5032:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_0.cpp:5034:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:5035:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5036:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5074:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5075:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5076:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5078:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:5079:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5080:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:5082:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:5083:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5084:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5121:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:5122:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5123:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:5125:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5126:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5127:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5161:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5162:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5163:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5165:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableType_0.cpp:5166:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5167:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableType_0.cpp:5208:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5209:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5210:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5212:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableType_0.cpp:5213:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5214:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableType_0.cpp:5216:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:5217:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5218:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:5256:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5257:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5258:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5260:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableType_0.cpp:5261:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5262:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableType_0.cpp:5303:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5304:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5305:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5307:  c10::optional<Storage> end__storage_saved =
autograd/generated/VariableType_0.cpp:5308:    end_.has_storage() ? c10::optional<Storage>(end_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5309:  c10::intrusive_ptr<TensorImpl> end__impl_saved;
autograd/generated/VariableType_0.cpp:5311:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:5312:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5313:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:5350:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5351:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5352:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5390:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:5391:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5392:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:5394:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5395:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5396:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5398:  c10::optional<Storage> buffer__storage_saved =
autograd/generated/VariableType_0.cpp:5399:    buffer_.has_storage() ? c10::optional<Storage>(buffer_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5400:  c10::intrusive_ptr<TensorImpl> buffer__impl_saved;
autograd/generated/VariableType_0.cpp:5402:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_0.cpp:5403:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5404:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_0.cpp:5444:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5445:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5446:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5448:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:5449:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5450:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5485:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5486:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5487:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5489:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:5490:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5491:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:5493:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:5494:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5495:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5533:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5534:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5535:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5537:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:5538:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5539:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:5541:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:5542:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5543:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5567:Tensor & logspace_out_out(Scalar start, Scalar end, c10::optional<int64_t> steps, double base, Tensor & out) {
autograd/generated/VariableType_0.cpp:5570:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:5571:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5572:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5600:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5601:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5602:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5604:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:5605:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5606:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5641:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5642:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5643:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5645:  c10::optional<Storage> max__storage_saved =
autograd/generated/VariableType_0.cpp:5646:    max_.has_storage() ? c10::optional<Storage>(max_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5647:  c10::intrusive_ptr<TensorImpl> max__impl_saved;
autograd/generated/VariableType_0.cpp:5649:  c10::optional<Storage> max_values__storage_saved =
autograd/generated/VariableType_0.cpp:5650:    max_values_.has_storage() ? c10::optional<Storage>(max_values_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5651:  c10::intrusive_ptr<TensorImpl> max_values__impl_saved;
autograd/generated/VariableType_0.cpp:5690:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5691:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5692:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5694:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:5695:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5696:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:5733:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:5734:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5735:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:5737:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5738:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5739:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5741:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:5742:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5743:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:5745:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_0.cpp:5746:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5747:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_0.cpp:5788:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5789:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5790:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5792:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:5793:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5794:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:5796:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:5797:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5798:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5836:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5837:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5838:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5840:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:5841:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5842:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:5844:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:5845:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5846:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:5894:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:5895:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5896:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:5898:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:5899:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5900:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:5902:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:5903:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5904:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:5941:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:5942:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5943:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:5973:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:5974:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5975:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:5977:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:5978:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:5979:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:6001:Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
autograd/generated/VariableType_0.cpp:6021:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6022:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6023:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6025:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:6026:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6027:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:6059:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6060:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6061:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6080:Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
autograd/generated/VariableType_0.cpp:6097:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6098:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6099:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6101:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:6102:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6103:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:6140:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6141:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6142:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6144:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:6145:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6146:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:6148:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:6149:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6150:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:6188:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:6189:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6190:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:6192:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:6193:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6194:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:6226:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6227:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6228:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6261:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6262:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6263:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6265:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_0.cpp:6266:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6267:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_0.cpp:6269:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:6270:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6271:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:6312:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:6313:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6314:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:6316:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6317:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6318:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6320:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_0.cpp:6321:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6322:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_0.cpp:6360:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:6361:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6362:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:6364:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6365:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6366:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6368:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_0.cpp:6369:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6370:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_0.cpp:6372:  c10::optional<Storage> is_target__storage_saved =
autograd/generated/VariableType_0.cpp:6373:    is_target_.has_storage() ? c10::optional<Storage>(is_target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6374:  c10::intrusive_ptr<TensorImpl> is_target__impl_saved;
autograd/generated/VariableType_0.cpp:6417:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6418:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6419:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6421:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_0.cpp:6422:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6423:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_0.cpp:6425:  c10::optional<Storage> output__storage_saved =
autograd/generated/VariableType_0.cpp:6426:    output_.has_storage() ? c10::optional<Storage>(output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6427:  c10::intrusive_ptr<TensorImpl> output__impl_saved;
autograd/generated/VariableType_0.cpp:6429:  c10::optional<Storage> is_target__storage_saved =
autograd/generated/VariableType_0.cpp:6430:    is_target_.has_storage() ? c10::optional<Storage>(is_target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6431:  c10::intrusive_ptr<TensorImpl> is_target__impl_saved;
autograd/generated/VariableType_0.cpp:6459:Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) {
autograd/generated/VariableType_0.cpp:6462:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6463:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6464:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6491:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6492:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6493:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6525:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6526:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6527:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6545:Tensor nan_to_num(const Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/VariableType_0.cpp:6556:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6557:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6558:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6577:Tensor & nan_to_num_(Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
autograd/generated/VariableType_0.cpp:6589:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6590:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6591:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6609:std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double momentum, double eps) {
autograd/generated/VariableType_0.cpp:6630:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_0.cpp:6631:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6632:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_0.cpp:6659:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6660:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6661:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6663:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:6664:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6665:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:6688:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6689:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6690:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6692:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:6693:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6694:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:6696:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:6697:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6698:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:6719:Tensor & nll_loss2d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/VariableType_0.cpp:6735:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:6736:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6737:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:6739:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6740:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6741:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6743:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_0.cpp:6744:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6745:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_0.cpp:6747:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableType_0.cpp:6748:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6749:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableType_0.cpp:6751:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_0.cpp:6752:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6753:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_0.cpp:6783:Tensor & nll_loss_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight, Tensor & grad_input) {
autograd/generated/VariableType_0.cpp:6799:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:6800:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6801:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:6803:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6804:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6805:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6807:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_0.cpp:6808:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6809:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_0.cpp:6811:  c10::optional<Storage> total_weight__storage_saved =
autograd/generated/VariableType_0.cpp:6812:    total_weight_.has_storage() ? c10::optional<Storage>(total_weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6813:  c10::intrusive_ptr<TensorImpl> total_weight__impl_saved;
autograd/generated/VariableType_0.cpp:6815:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_0.cpp:6816:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6817:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_0.cpp:6858:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6859:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6860:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6862:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableType_0.cpp:6863:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6864:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableType_0.cpp:6901:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6902:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6903:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6905:  c10::optional<Storage> input2__storage_saved =
autograd/generated/VariableType_0.cpp:6906:    input2_.has_storage() ? c10::optional<Storage>(input2_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6907:  c10::intrusive_ptr<TensorImpl> input2__impl_saved;
autograd/generated/VariableType_0.cpp:6909:  c10::optional<Storage> input3__storage_saved =
autograd/generated/VariableType_0.cpp:6910:    input3_.has_storage() ? c10::optional<Storage>(input3_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6911:  c10::intrusive_ptr<TensorImpl> input3__impl_saved;
autograd/generated/VariableType_0.cpp:6913:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:6914:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6915:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:6953:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6954:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6955:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:6996:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:6997:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:6998:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7000:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_0.cpp:7001:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7002:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_0.cpp:7004:  c10::optional<Storage> source__storage_saved =
autograd/generated/VariableType_0.cpp:7005:    source_.has_storage() ? c10::optional<Storage>(source_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7006:  c10::intrusive_ptr<TensorImpl> source__impl_saved;
autograd/generated/VariableType_0.cpp:7033:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7034:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7035:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7053:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7054:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7055:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7075:  std::vector<c10::optional<Storage>> tensors__storage_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:7078:      tensor.has_storage() ? c10::optional<Storage>(tensor.storage()) : c10::nullopt);
autograd/generated/VariableType_0.cpp:7079:  std::vector<c10::intrusive_ptr<TensorImpl>> tensors__impl_saved(tensors_.size());
autograd/generated/VariableType_0.cpp:7082:  c10::optional<Storage> scales__storage_saved =
autograd/generated/VariableType_0.cpp:7083:    scales_.has_storage() ? c10::optional<Storage>(scales_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7084:  c10::intrusive_ptr<TensorImpl> scales__impl_saved;
autograd/generated/VariableType_0.cpp:7086:  c10::optional<Storage> zero_points__storage_saved =
autograd/generated/VariableType_0.cpp:7087:    zero_points_.has_storage() ? c10::optional<Storage>(zero_points_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7088:  c10::intrusive_ptr<TensorImpl> zero_points__impl_saved;
autograd/generated/VariableType_0.cpp:7124:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7125:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7126:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7156:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7157:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7158:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7186:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7187:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7188:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7220:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7221:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7222:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7255:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7256:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7257:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7289:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:7290:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7291:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:7293:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7294:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7295:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7297:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_0.cpp:7298:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7299:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_0.cpp:7336:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7337:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7338:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7340:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:7341:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7342:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:7374:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7375:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7376:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7406:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7407:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7408:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7442:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7443:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7444:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7446:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:7447:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7448:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:7483:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7484:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7485:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7487:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:7488:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7489:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:7491:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:7492:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7493:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:7530:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7531:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7532:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7534:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:7535:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7536:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:7557:Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/VariableType_0.cpp:7574:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7575:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7576:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7578:  c10::optional<Storage> noise__storage_saved =
autograd/generated/VariableType_0.cpp:7579:    noise_.has_storage() ? c10::optional<Storage>(noise_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7580:  c10::intrusive_ptr<TensorImpl> noise__impl_saved;
autograd/generated/VariableType_0.cpp:7602:Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
autograd/generated/VariableType_0.cpp:7619:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7620:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7621:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7623:  c10::optional<Storage> noise__storage_saved =
autograd/generated/VariableType_0.cpp:7624:    noise_.has_storage() ? c10::optional<Storage>(noise_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7625:  c10::intrusive_ptr<TensorImpl> noise__impl_saved;
autograd/generated/VariableType_0.cpp:7666:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7667:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7668:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7670:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_0.cpp:7671:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7672:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_0.cpp:7674:  c10::optional<Storage> src__storage_saved =
autograd/generated/VariableType_0.cpp:7675:    src_.has_storage() ? c10::optional<Storage>(src_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7676:  c10::intrusive_ptr<TensorImpl> src__impl_saved;
autograd/generated/VariableType_0.cpp:7713:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7714:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7715:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7750:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7751:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7752:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7783:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7784:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7785:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7814:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7815:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7816:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7846:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7847:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7848:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7887:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:7888:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7889:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:7891:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7892:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7893:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7895:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:7896:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7897:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:7938:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7939:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7940:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7942:  c10::optional<Storage> target__storage_saved =
autograd/generated/VariableType_0.cpp:7943:    target_.has_storage() ? c10::optional<Storage>(target_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7944:  c10::intrusive_ptr<TensorImpl> target__impl_saved;
autograd/generated/VariableType_0.cpp:7946:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:7947:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7948:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:7985:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:7986:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7987:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:7989:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:7990:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:7991:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:8025:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:8026:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8027:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:8029:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8030:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8031:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8067:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8068:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8069:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8071:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_0.cpp:8072:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8073:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_0.cpp:8075:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:8076:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8077:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:8113:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8114:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8115:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8151:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8152:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8153:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8189:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8190:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8191:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8222:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8223:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8224:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8255:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8256:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8257:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8259:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:8260:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8261:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:8296:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8297:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8298:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8300:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:8301:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8302:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:8334:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8335:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8336:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8369:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8370:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8371:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8373:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:8374:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8375:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:8408:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8409:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8410:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8428:Tensor & sum_out_IntList_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/VariableType_0.cpp:8441:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8442:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8443:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8445:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:8446:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8447:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:8482:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8483:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8484:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8486:  c10::optional<Storage> index__storage_saved =
autograd/generated/VariableType_0.cpp:8487:    index_.has_storage() ? c10::optional<Storage>(index_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8488:  c10::intrusive_ptr<TensorImpl> index__impl_saved;
autograd/generated/VariableType_0.cpp:8490:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:8491:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8492:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:8516:std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding) {
autograd/generated/VariableType_0.cpp:8535:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8536:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8537:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8539:  c10::optional<Storage> weight__storage_saved =
autograd/generated/VariableType_0.cpp:8540:    weight_.has_storage() ? c10::optional<Storage>(weight_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8541:  c10::intrusive_ptr<TensorImpl> weight__impl_saved;
autograd/generated/VariableType_0.cpp:8581:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8582:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8583:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8585:  c10::optional<Storage> values__storage_saved =
autograd/generated/VariableType_0.cpp:8586:    values_.has_storage() ? c10::optional<Storage>(values_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8587:  c10::intrusive_ptr<TensorImpl> values__impl_saved;
autograd/generated/VariableType_0.cpp:8589:  c10::optional<Storage> indices__storage_saved =
autograd/generated/VariableType_0.cpp:8590:    indices_.has_storage() ? c10::optional<Storage>(indices_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8591:  c10::intrusive_ptr<TensorImpl> indices__impl_saved;
autograd/generated/VariableType_0.cpp:8629:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8630:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8631:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8633:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:8634:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8635:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:8667:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8668:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8669:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8687:std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
autograd/generated/VariableType_0.cpp:8700:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8701:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8702:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8735:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8736:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8737:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8755:Tensor upsample_bilinear2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_0.cpp:8768:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:8769:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8770:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:8789:Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_0.cpp:8803:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:8804:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8805:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:8824:Tensor upsample_linear1d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_0.cpp:8838:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_0.cpp:8839:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8840:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_0.cpp:8859:Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
autograd/generated/VariableType_0.cpp:8873:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:8874:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8875:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:8894:Tensor & upsample_linear1d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales, Tensor & grad_input) {
autograd/generated/VariableType_0.cpp:8907:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:8908:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8909:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:8911:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_0.cpp:8912:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8913:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_0.cpp:8934:Tensor upsample_nearest1d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_0.cpp:8946:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:8947:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8948:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:8967:Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
autograd/generated/VariableType_0.cpp:8979:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:8980:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:8981:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:9000:Tensor upsample_nearest2d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/VariableType_0.cpp:9013:  c10::optional<Storage> input__storage_saved =
autograd/generated/VariableType_0.cpp:9014:    input_.has_storage() ? c10::optional<Storage>(input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9015:  c10::intrusive_ptr<TensorImpl> input__impl_saved;
autograd/generated/VariableType_0.cpp:9034:Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/VariableType_0.cpp:9048:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:9049:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9050:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:9069:Tensor & upsample_nearest2d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/VariableType_0.cpp:9082:  c10::optional<Storage> grad_output__storage_saved =
autograd/generated/VariableType_0.cpp:9083:    grad_output_.has_storage() ? c10::optional<Storage>(grad_output_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9084:  c10::intrusive_ptr<TensorImpl> grad_output__impl_saved;
autograd/generated/VariableType_0.cpp:9086:  c10::optional<Storage> grad_input__storage_saved =
autograd/generated/VariableType_0.cpp:9087:    grad_input_.has_storage() ? c10::optional<Storage>(grad_input_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9088:  c10::intrusive_ptr<TensorImpl> grad_input__impl_saved;
autograd/generated/VariableType_0.cpp:9109:Tensor & upsample_nearest3d_out_out(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/VariableType_0.cpp:9122:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:9123:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9124:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:9126:  c10::optional<Storage> out__storage_saved =
autograd/generated/VariableType_0.cpp:9127:    out_.has_storage() ? c10::optional<Storage>(out_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9128:  c10::intrusive_ptr<TensorImpl> out__impl_saved;
autograd/generated/VariableType_0.cpp:9168:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:9169:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9170:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:9172:  c10::optional<Storage> other__storage_saved =
autograd/generated/VariableType_0.cpp:9173:    other_.has_storage() ? c10::optional<Storage>(other_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9174:  c10::intrusive_ptr<TensorImpl> other__impl_saved;
autograd/generated/VariableType_0.cpp:9205:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:9206:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9207:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/VariableType_0.cpp:9241:  c10::optional<Storage> self__storage_saved =
autograd/generated/VariableType_0.cpp:9242:    self_.has_storage() ? c10::optional<Storage>(self_.storage()) : c10::nullopt;
autograd/generated/VariableType_0.cpp:9243:  c10::intrusive_ptr<TensorImpl> self__impl_saved;
autograd/generated/python_fft_functions.cpp:121:    auto dispatch_fft_fft = [](const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:129:    auto dispatch_fft_fft_out = [](Tensor out, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:155:    auto dispatch_fft_fft2 = [](const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:163:    auto dispatch_fft_fft2_out = [](Tensor out, const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:233:    auto dispatch_fft_fftn = [](const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:241:    auto dispatch_fft_fftn_out = [](Tensor out, const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:266:  auto dispatch_fft_fftshift = [](const Tensor & self, c10::optional<IntArrayRef> dim) -> Tensor {
autograd/generated/python_fft_functions.cpp:291:    auto dispatch_fft_hfft = [](const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:299:    auto dispatch_fft_hfft_out = [](Tensor out, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:325:    auto dispatch_fft_ifft = [](const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:333:    auto dispatch_fft_ifft_out = [](Tensor out, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:359:    auto dispatch_fft_ifft2 = [](const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:367:    auto dispatch_fft_ifft2_out = [](Tensor out, const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:393:    auto dispatch_fft_ifftn = [](const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:401:    auto dispatch_fft_ifftn_out = [](Tensor out, const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:426:  auto dispatch_fft_ifftshift = [](const Tensor & self, c10::optional<IntArrayRef> dim) -> Tensor {
autograd/generated/python_fft_functions.cpp:451:    auto dispatch_fft_ihfft = [](const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:459:    auto dispatch_fft_ihfft_out = [](Tensor out, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:485:    auto dispatch_fft_irfft = [](const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:493:    auto dispatch_fft_irfft_out = [](Tensor out, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:519:    auto dispatch_fft_irfft2 = [](const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:527:    auto dispatch_fft_irfft2_out = [](Tensor out, const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:553:    auto dispatch_fft_irfftn = [](const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:561:    auto dispatch_fft_irfftn_out = [](Tensor out, const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:587:    auto dispatch_fft_rfft = [](const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:595:    auto dispatch_fft_rfft_out = [](Tensor out, const Tensor & self, c10::optional<int64_t> n, int64_t dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:621:    auto dispatch_fft_rfft2 = [](const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:629:    auto dispatch_fft_rfft2_out = [](Tensor out, const Tensor & self, c10::optional<IntArrayRef> s, IntArrayRef dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:699:    auto dispatch_fft_rfftn = [](const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_fft_functions.cpp:707:    auto dispatch_fft_rfftn_out = [](Tensor out, const Tensor & self, c10::optional<IntArrayRef> s, c10::optional<IntArrayRef> dim, c10::optional<std::string> norm) -> Tensor {
autograd/generated/python_linalg_functions.cpp:139:        auto dispatch_linalg_cond = [](const Tensor & self, c10::optional<Scalar> p) -> Tensor {
autograd/generated/python_linalg_functions.cpp:147:        auto dispatch_linalg_cond_out = [](Tensor out, const Tensor & self, c10::optional<Scalar> p) -> Tensor {
autograd/generated/python_linalg_functions.cpp:337:    auto dispatch_linalg_matrix_rank = [](const Tensor & self, c10::optional<double> tol, bool hermitian) -> Tensor {
autograd/generated/python_linalg_functions.cpp:345:    auto dispatch_linalg_matrix_rank_out = [](Tensor out, const Tensor & self, c10::optional<double> tol, bool hermitian) -> Tensor {
autograd/generated/python_linalg_functions.cpp:375:        auto dispatch_linalg_norm = [](const Tensor & self, c10::optional<Scalar> ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_linalg_functions.cpp:383:        auto dispatch_linalg_norm_out = [](Tensor out, const Tensor & self, c10::optional<Scalar> ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_linalg_functions.cpp:394:        auto dispatch_linalg_norm = [](const Tensor & self, std::string ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_linalg_functions.cpp:402:        auto dispatch_linalg_norm_out = [](Tensor out, const Tensor & self, std::string ord, c10::optional<IntArrayRef> dim, bool keepdim, c10::optional<ScalarType> dtype) -> Tensor {
autograd/generated/python_linalg_functions.cpp:710:    auto dispatch_linalg_tensorsolve = [](const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims) -> Tensor {
autograd/generated/python_linalg_functions.cpp:718:    auto dispatch_linalg_tensorsolve_out = [](Tensor out, const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims) -> Tensor {
autograd/engine.h:110:  std::unordered_set<c10::Stream> leaf_streams;
autograd/engine.h:174:        future_result_(std::make_shared<at::ivalue::Future>(c10::ListType::create(c10::TensorType::get()))) {}
autograd/anomaly_mode.cpp:1:#include <c10/util/Backtrace.h>
autograd/anomaly_mode.cpp:2:#include <c10/util/Exception.h>
autograd/anomaly_mode.cpp:43:  traceback_ = c10::get_backtrace(/* frames_to_skip */ 1);
autograd/record_function_ops.cpp:38:c10::intrusive_ptr<c10::ivalue::Future> _call_end_callbacks_on_fut(
autograd/record_function_ops.cpp:40:    const c10::intrusive_ptr<c10::ivalue::Future>& fut) {
autograd/record_function_ops.cpp:43:  std::function<c10::IValue(void)> futureProfilingFunc =
autograd/record_function_ops.cpp:60:  auto profiledFut = fut->then(at::wrapPropagateTLSState<c10::IValue>(
autograd/record_function_ops.cpp:74:c10::AliasAnalysisKind aliasAnalysisFromSchema() {
autograd/record_function_ops.cpp:75:  return c10::AliasAnalysisKind::FROM_SCHEMA;
autograd/generated/TraceType_1.cpp:36:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:39:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:40:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:62:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:65:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:66:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:88:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:91:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:92:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:114:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:117:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:118:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:140:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:143:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:144:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceType_1.cpp:173:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:176:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:177:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, alpha, out);
autograd/generated/TraceType_1.cpp:203:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:206:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:207:      .redispatch<Tensor, Tensor &, const Tensor &, const Tensor &, double, double, int64_t>(op, c10::DispatchKey::Tracer, growth_tracker, current_scale, found_inf, scale_growth_factor, scale_backoff_factor, growth_interval);
autograd/generated/TraceType_1.cpp:230:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:233:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:234:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, mat2, deterministic);
autograd/generated/TraceType_1.cpp:256:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:259:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:260:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceType_1.cpp:282:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:285:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:286:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceType_1.cpp:308:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:311:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:312:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, non_blocking);
autograd/generated/TraceType_1.cpp:340:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:343:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:344:      .redispatch<Tensor &, TensorList, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceType_1.cpp:369:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:372:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:373:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, double, const Tensor &>(op, c10::DispatchKey::Tracer, grad, x1, x2, p, cdist);
autograd/generated/TraceType_1.cpp:395:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:398:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:399:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, upper);
autograd/generated/TraceType_1.cpp:407:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:410:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:411:      .redispatch<Tensor &, Tensor &, bool>(op, c10::DispatchKey::Tracer, self, coalesced);
autograd/generated/TraceType_1.cpp:429:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:432:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:433:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input, coefficients);
autograd/generated/TraceType_1.cpp:454:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:457:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:458:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:465:Tensor _convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) {
autograd/generated/TraceType_1.cpp:491:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:493:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, bool)>();
autograd/generated/TraceType_1.cpp:494:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:495:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, allow_tf32);
autograd/generated/TraceType_1.cpp:502:Tensor _convolution_deprecated(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
autograd/generated/TraceType_1.cpp:527:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:529:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool)>();
autograd/generated/TraceType_1.cpp:530:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:531:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
autograd/generated/TraceType_1.cpp:538:std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const c10::optional<Tensor> & cx, const Tensor & output, const c10::optional<Tensor> & grad_output, const c10::optional<Tensor> & grad_hy, const c10::optional<Tensor> & grad_cy, int64_t mode, int64_t hidden_size, int64_t proj_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const c10::optional<Tensor> & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
autograd/generated/TraceType_1.cpp:577:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:579:      .typed<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &, const Tensor &, std::array<bool,4>)>();
autograd/generated/TraceType_1.cpp:580:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:581:      .redispatch<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>>, const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const c10::optional<Tensor> &, const Tensor &, std::array<bool,4>>(op, c10::DispatchKey::Tracer, input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, proj_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
autograd/generated/TraceType_1.cpp:592:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:595:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:596:      .redispatch<int64_t, int64_t>(op, c10::DispatchKey::Tracer, device_index);
autograd/generated/TraceType_1.cpp:600:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:603:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:604:      .redispatch<void, const Tensor &, Tensor &, Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, values, indices, dim);
autograd/generated/TraceType_1.cpp:627:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:630:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:631:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, out);
autograd/generated/TraceType_1.cpp:653:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:656:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:657:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_1.cpp:679:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:682:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:683:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, like, dim);
autograd/generated/TraceType_1.cpp:706:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:709:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:710:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, x, alpha, total);
autograd/generated/TraceType_1.cpp:717:Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<Tensor> & per_sample_weights) {
autograd/generated/TraceType_1.cpp:741:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:743:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, bool, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_1.cpp:744:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:745:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, bool, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);
autograd/generated/TraceType_1.cpp:776:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:779:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:780:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, double>(op, c10::DispatchKey::Tracer, grad, self, scale, zero_point, axis, quant_min, quant_max, grad_factor);
autograd/generated/TraceType_1.cpp:803:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:806:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:807:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:815:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:818:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:819:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:836:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:839:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:840:      .redispatch<std::vector<Tensor>, TensorList, Scalar>(op, c10::DispatchKey::Tracer, tensors, scalar);
autograd/generated/TraceType_1.cpp:862:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:865:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:866:      .redispatch<std::vector<Tensor>, TensorList, TensorList>(op, c10::DispatchKey::Tracer, tensors1, tensors2);
autograd/generated/TraceType_1.cpp:888:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:891:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:892:      .redispatch<std::vector<Tensor>, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, tensors, scalars);
autograd/generated/TraceType_1.cpp:900:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:903:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:904:      .redispatch<void, TensorList, Scalar>(op, c10::DispatchKey::Tracer, self, scalar);
autograd/generated/TraceType_1.cpp:907:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:910:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:911:      .redispatch<void, TensorList, TensorList>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:914:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:917:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:918:      .redispatch<void, TensorList, ArrayRef<double>>(op, c10::DispatchKey::Tracer, self, scalars);
autograd/generated/TraceType_1.cpp:934:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:937:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:938:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:946:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:949:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:950:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:966:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:969:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:970:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:978:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:981:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:982:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:998:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1001:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1002:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:1010:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1013:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1014:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:1030:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1033:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1034:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:1042:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1045:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1046:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:1062:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1065:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1066:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:1074:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1077:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1078:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:1094:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1097:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1098:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:1106:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1109:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1110:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:1113:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1116:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1117:      .redispatch<void, TensorList>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:1119:std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, c10::optional<Generator> generator) {
autograd/generated/TraceType_1.cpp:1137:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1139:      .typed<std::tuple<Tensor,Tensor> (const Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceType_1.cpp:1140:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1141:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, p, generator);
autograd/generated/TraceType_1.cpp:1164:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1167:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1168:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_1.cpp:1191:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1194:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1195:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, primal, tangent, level);
autograd/generated/TraceType_1.cpp:1218:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1221:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1222:      .redispatch<Tensor, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point);
autograd/generated/TraceType_1.cpp:1247:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1250:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1251:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_1.cpp:1259:Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef padding, IntArrayRef stride) {
autograd/generated/TraceType_1.cpp:1277:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1279:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_1.cpp:1280:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1281:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, input, weight, bias, padding, stride);
autograd/generated/TraceType_1.cpp:1305:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1308:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1309:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output, dim, self);
autograd/generated/TraceType_1.cpp:1316:Tensor _sparse_log_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:1332:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1334:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:1335:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1336:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_1.cpp:1343:Tensor _sparse_log_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:1359:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1361:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:1362:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1363:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_1.cpp:1386:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1389:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1390:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, half_to_float);
autograd/generated/TraceType_1.cpp:1413:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1416:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1417:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad, self, dim);
autograd/generated/TraceType_1.cpp:1439:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1442:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1443:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceType_1.cpp:1466:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1469:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1470:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, dummy, a, b);
autograd/generated/TraceType_1.cpp:1493:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1496:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1497:      .redispatch<Tensor, const Tensor &, int64_t, std::string>(op, c10::DispatchKey::Tracer, dummy, a, b);
autograd/generated/TraceType_1.cpp:1504:Tensor _test_optional_floatlist(const Tensor & values, c10::optional<ArrayRef<double>> addends) {
autograd/generated/TraceType_1.cpp:1519:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1521:      .typed<Tensor (const Tensor &, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_1.cpp:1522:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1523:      .redispatch<Tensor, const Tensor &, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, values, addends);
autograd/generated/TraceType_1.cpp:1530:std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const c10::optional<Tensor> & input_bias, const c10::optional<Tensor> & hidden_bias) {
autograd/generated/TraceType_1.cpp:1554:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1556:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &)>();
autograd/generated/TraceType_1.cpp:1557:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1558:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &>(op, c10::DispatchKey::Tracer, grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);
autograd/generated/TraceType_1.cpp:1590:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1593:  std::tie(result0, result1, result2, result3, result4) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1594:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad_hy, workspace, has_bias);
autograd/generated/TraceType_1.cpp:1606:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1609:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1610:      .redispatch<bool>(op, c10::DispatchKey::Tracer);
autograd/generated/TraceType_1.cpp:1627:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1630:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1631:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:1658:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1661:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1662:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad_w, saved_v, saved_g, saved_norms, dim);
autograd/generated/TraceType_1.cpp:1690:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1693:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1694:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:1715:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1718:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1719:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:1745:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1748:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1749:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:1771:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1774:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1775:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, output_size);
autograd/generated/TraceType_1.cpp:1803:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1806:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1807:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, out);
autograd/generated/TraceType_1.cpp:1830:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1833:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1834:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices);
autograd/generated/TraceType_1.cpp:1863:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1866:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1867:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, alpha, out);
autograd/generated/TraceType_1.cpp:1892:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1895:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1896:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, vec1, vec2, beta, alpha);
autograd/generated/TraceType_1.cpp:1926:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1929:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1930:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, vec1, vec2, beta, alpha);
autograd/generated/TraceType_1.cpp:1953:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1956:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1957:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, theta, size, align_corners);
autograd/generated/TraceType_1.cpp:1980:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1983:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:1984:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_1.cpp:2014:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2017:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2018:      .redispatch<Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, end, out);
autograd/generated/TraceType_1.cpp:2050:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2053:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2054:      .redispatch<Tensor &, Scalar, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, start, end, step, out);
autograd/generated/TraceType_1.cpp:2081:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2084:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2085:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:2112:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2115:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2116:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:2137:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2140:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2141:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:2167:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2170:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2171:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:2192:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2195:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2196:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:2217:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2220:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2221:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:2228:Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/TraceType_1.cpp:2249:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2251:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceType_1.cpp:2252:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2253:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
autograd/generated/TraceType_1.cpp:2260:Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
autograd/generated/TraceType_1.cpp:2280:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2282:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
autograd/generated/TraceType_1.cpp:2283:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2284:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
autograd/generated/TraceType_1.cpp:2291:Tensor & avg_pool3d_backward_out_grad_input(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, Tensor & grad_input) {
autograd/generated/TraceType_1.cpp:2318:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2320:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceType_1.cpp:2321:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2322:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
autograd/generated/TraceType_1.cpp:2347:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2350:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2351:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceType_1.cpp:2381:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2384:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2385:      .redispatch<Tensor &, Tensor &, const Tensor &, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, batch1, batch2, beta, alpha);
autograd/generated/TraceType_1.cpp:2392:std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const c10::optional<Tensor> & weight, bool input_g, bool weight_g, bool bias_g) {
autograd/generated/TraceType_1.cpp:2417:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2419:      .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, bool, bool, bool)>();
autograd/generated/TraceType_1.cpp:2420:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2421:      .redispatch<std::tuple<Tensor,Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, bool, bool, bool>(op, c10::DispatchKey::Tracer, grad_out, input, mean, invstd, weight, input_g, weight_g, bias_g);
autograd/generated/TraceType_1.cpp:2431:Tensor & bernoulli_out_out(const Tensor & self, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_1.cpp:2452:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2454:      .typed<Tensor & (const Tensor &, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_1.cpp:2455:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2456:      .redispatch<Tensor &, const Tensor &, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, self, generator, out);
autograd/generated/TraceType_1.cpp:2463:Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & pos_weight, int64_t reduction) {
autograd/generated/TraceType_1.cpp:2481:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2483:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceType_1.cpp:2484:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2485:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, self, target, weight, pos_weight, reduction);
autograd/generated/TraceType_1.cpp:2492:Tensor bincount(const Tensor & self, const c10::optional<Tensor> & weights, int64_t minlength) {
autograd/generated/TraceType_1.cpp:2508:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2510:      .typed<Tensor (const Tensor &, const c10::optional<Tensor> &, int64_t)>();
autograd/generated/TraceType_1.cpp:2511:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2512:      .redispatch<Tensor, const Tensor &, const c10::optional<Tensor> &, int64_t>(op, c10::DispatchKey::Tracer, self, weights, minlength);
autograd/generated/TraceType_1.cpp:2534:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2537:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2538:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:2560:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2563:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2564:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:2591:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2594:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2595:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:2622:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2625:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2626:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:2647:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2650:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2651:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:2677:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2680:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2681:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:2703:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2706:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2707:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, mat2);
autograd/generated/TraceType_1.cpp:2731:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2734:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2735:      .redispatch<Tensor, const Tensor &, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, boundaries, out_int32, right);
autograd/generated/TraceType_1.cpp:2759:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2762:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2763:      .redispatch<Tensor, Scalar, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, boundaries, out_int32, right);
autograd/generated/TraceType_1.cpp:2784:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2787:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2788:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:2816:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2819:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2820:      .redispatch<Tensor &, TensorList, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceType_1.cpp:2848:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2851:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2852:      .redispatch<Tensor &, TensorList, Dimname, Tensor &>(op, c10::DispatchKey::Tracer, tensors, dim, out);
autograd/generated/TraceType_1.cpp:2873:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2876:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2877:      .redispatch<Tensor, TensorList>(op, c10::DispatchKey::Tracer, matrices);
autograd/generated/TraceType_1.cpp:2899:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2902:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2903:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, upper);
autograd/generated/TraceType_1.cpp:2925:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2928:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2929:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, max);
autograd/generated/TraceType_1.cpp:2956:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2959:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2960:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, max);
autograd/generated/TraceType_1.cpp:2981:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2984:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:2985:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:3017:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3020:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3021:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, kernel_size, dilation, padding, stride, out);
autograd/generated/TraceType_1.cpp:3044:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3047:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3048:      .redispatch<Tensor, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, r, with_replacement);
autograd/generated/TraceType_1.cpp:3069:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3072:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3073:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:3097:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3100:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3101:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, weight, bias, pad);
autograd/generated/TraceType_1.cpp:3108:Tensor convolution(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
autograd/generated/TraceType_1.cpp:3109:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3111:      .typed<Tensor (const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t)>();
autograd/generated/TraceType_1.cpp:3112:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3113:      .redispatch<Tensor, const Tensor &, const Tensor &, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
autograd/generated/TraceType_1.cpp:3131:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3134:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3135:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:3157:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3160:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3161:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:3188:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3191:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3192:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:3219:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3222:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3223:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:3247:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3250:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3251:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, double>(op, c10::DispatchKey::Tracer, x1, x2, dim, eps);
autograd/generated/TraceType_1.cpp:3281:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3284:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3285:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic, allow_tf32);
autograd/generated/TraceType_1.cpp:3309:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3312:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3313:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_1.cpp:3338:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3341:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3342:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_1.cpp:3367:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3370:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3371:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, grad, input, indices, dim);
autograd/generated/TraceType_1.cpp:3378:Tensor & cumprod_out_out(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_1.cpp:3400:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3402:      .typed<Tensor & (const Tensor &, int64_t, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_1.cpp:3403:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3404:      .redispatch<Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, dtype, out);
autograd/generated/TraceType_1.cpp:3411:Tensor & cumprod_out_dimname_out(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_1.cpp:3433:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3435:      .typed<Tensor & (const Tensor &, Dimname, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_1.cpp:3436:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3437:      .redispatch<Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, dtype, out);
autograd/generated/TraceType_1.cpp:3444:Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:3460:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3462:      .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:3463:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3464:      .redispatch<Tensor, const Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_1.cpp:3471:Tensor cumsum_dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:3487:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3489:      .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:3490:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3491:      .redispatch<Tensor, const Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_1.cpp:3498:Tensor & cumsum_(Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:3519:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3521:      .typed<Tensor & (Tensor &, int64_t, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:3522:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3523:      .redispatch<Tensor &, Tensor &, int64_t, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_1.cpp:3530:Tensor & cumsum__dimname(Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:3551:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3553:      .typed<Tensor & (Tensor &, Dimname, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:3554:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3555:      .redispatch<Tensor &, Tensor &, Dimname, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, dtype);
autograd/generated/TraceType_1.cpp:3563:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3566:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3567:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:3586:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3589:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3590:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, grad, input_sizes, diagonal);
autograd/generated/TraceType_1.cpp:3614:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3617:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3618:      .redispatch<Tensor, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, offset, dim1, dim2);
autograd/generated/TraceType_1.cpp:3643:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3646:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3647:      .redispatch<Tensor, const Tensor &, Dimname, Dimname, Dimname, int64_t>(op, c10::DispatchKey::Tracer, self, outdim, dim1, dim2, offset);
autograd/generated/TraceType_1.cpp:3670:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3673:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3674:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other, p);
autograd/generated/TraceType_1.cpp:3702:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3705:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3706:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, tensor, out);
autograd/generated/TraceType_1.cpp:3729:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3732:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3733:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, input, p, train);
autograd/generated/TraceType_1.cpp:3761:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3764:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3765:      .redispatch<Tensor &, Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, p, train);
autograd/generated/TraceType_1.cpp:3789:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3792:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3793:      .redispatch<Tensor, const Tensor &, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, alpha, scale, input_scale);
autograd/generated/TraceType_1.cpp:3822:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3825:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3826:      .redispatch<Tensor &, Tensor &, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, alpha, scale, input_scale);
autograd/generated/TraceType_1.cpp:3855:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3858:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3859:      .redispatch<Tensor &, Tensor &, const Tensor &, double, double>(op, c10::DispatchKey::Tracer, self, indices, max_norm, norm_type);
autograd/generated/TraceType_1.cpp:3867:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3870:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3871:      .redispatch<bool, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:3894:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3897:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3898:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:3919:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3922:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3923:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:3949:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3952:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3953:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:3974:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3977:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:3978:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:4004:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4007:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4008:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:4015:Tensor & exponential_(Tensor & self, double lambd, c10::optional<Generator> generator) {
autograd/generated/TraceType_1.cpp:4036:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4038:      .typed<Tensor & (Tensor &, double, c10::optional<Generator>)>();
autograd/generated/TraceType_1.cpp:4039:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4040:      .redispatch<Tensor &, Tensor &, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, lambd, generator);
autograd/generated/TraceType_1.cpp:4066:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4069:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4070:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, scale, zero_point, axis, quant_min, quant_max);
autograd/generated/TraceType_1.cpp:4093:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4096:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4097:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, input, packed_weight, bias);
autograd/generated/TraceType_1.cpp:4124:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4127:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4128:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
autograd/generated/TraceType_1.cpp:4153:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4156:  std::tie(result0, result1, result2, result3) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4157:      .redispatch<std::tuple<Tensor,Tensor,double,int64_t>, const Tensor &>(op, c10::DispatchKey::Tracer, input);
autograd/generated/TraceType_1.cpp:4187:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4190:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4191:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:4213:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4216:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4217:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_1.cpp:4239:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4242:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4243:      .redispatch<Tensor, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_1.cpp:4265:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4268:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4269:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_1.cpp:4296:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4299:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4300:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_1.cpp:4327:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4330:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4331:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, exponent);
autograd/generated/TraceType_1.cpp:4352:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4355:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4356:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:4382:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4385:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4386:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:4408:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4411:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4412:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:4440:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4443:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4444:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:4472:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4475:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4476:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:4503:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4506:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4507:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:4538:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4541:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4542:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, output_size, random_samples, output, indices);
autograd/generated/TraceType_1.cpp:4572:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4575:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4576:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, out);
autograd/generated/TraceType_1.cpp:4583:Tensor full_like(const Tensor & self, Scalar fill_value, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory, c10::optional<MemoryFormat> memory_format) {
autograd/generated/TraceType_1.cpp:4603:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4605:      .typed<Tensor (const Tensor &, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
autograd/generated/TraceType_1.cpp:4606:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4607:      .redispatch<Tensor, const Tensor &, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>>(op, c10::DispatchKey::Tracer, self, fill_value, dtype, layout, device, pin_memory, memory_format);
autograd/generated/TraceType_1.cpp:4632:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4635:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4636:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t, const Tensor &, bool>(op, c10::DispatchKey::Tracer, grad, self, dim, index, sparse_grad);
autograd/generated/TraceType_1.cpp:4664:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4667:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4668:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:4690:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4693:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4694:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:4716:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4719:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4720:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:4747:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4750:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4751:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:4778:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4781:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4782:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:4810:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4813:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4814:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:4842:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4845:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4846:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:4853:Tensor group_norm(const Tensor & input, int64_t num_groups, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & bias, double eps, bool cudnn_enabled) {
autograd/generated/TraceType_1.cpp:4872:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4874:      .typed<Tensor (const Tensor &, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, bool)>();
autograd/generated/TraceType_1.cpp:4875:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4876:      .redispatch<Tensor, const Tensor &, int64_t, const c10::optional<Tensor> &, const c10::optional<Tensor> &, double, bool>(op, c10::DispatchKey::Tracer, input, num_groups, weight, bias, eps, cudnn_enabled);
autograd/generated/TraceType_1.cpp:4883:Tensor hamming_window(int64_t window_length, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:4901:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4903:      .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:4904:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4905:      .redispatch<Tensor, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:4912:Tensor hamming_window_periodic(int64_t window_length, bool periodic, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:4931:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4933:      .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:4934:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4935:      .redispatch<Tensor, int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:4942:Tensor hamming_window_periodic_alpha(int64_t window_length, bool periodic, double alpha, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:4962:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4964:      .typed<Tensor (int64_t, bool, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:4965:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4966:      .redispatch<Tensor, int64_t, bool, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, alpha, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:4973:Tensor hamming_window_periodic_alpha_beta(int64_t window_length, bool periodic, double alpha, double beta, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:4994:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4996:      .typed<Tensor (int64_t, bool, double, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:4997:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:4998:      .redispatch<Tensor, int64_t, bool, double, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, window_length, periodic, alpha, beta, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:5021:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5024:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5025:      .redispatch<Tensor, const Tensor &, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, grad_out, self, lambd);
autograd/generated/TraceType_1.cpp:5054:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5057:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5058:      .redispatch<Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, min_val, max_val, out);
autograd/generated/TraceType_1.cpp:5080:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5083:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5084:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, values);
autograd/generated/TraceType_1.cpp:5111:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5114:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5115:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, values);
autograd/generated/TraceType_1.cpp:5146:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5149:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5150:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, dilation, padding, stride, out);
autograd/generated/TraceType_1.cpp:5157:Tensor index_Tensor(const Tensor & self, const c10::List<c10::optional<Tensor>> & indices) {
autograd/generated/TraceType_1.cpp:5172:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5174:      .typed<Tensor (const Tensor &, const c10::List<c10::optional<Tensor>> &)>();
autograd/generated/TraceType_1.cpp:5175:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5176:      .redispatch<Tensor, const Tensor &, const c10::List<c10::optional<Tensor>> &>(op, c10::DispatchKey::Tracer, self, indices);
autograd/generated/TraceType_1.cpp:5183:Tensor index_put(const Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) {
autograd/generated/TraceType_1.cpp:5200:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5202:      .typed<Tensor (const Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool)>();
autograd/generated/TraceType_1.cpp:5203:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5204:      .redispatch<Tensor, const Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, indices, values, accumulate);
autograd/generated/TraceType_1.cpp:5211:Tensor & index_put_(Tensor & self, const c10::List<c10::optional<Tensor>> & indices, const Tensor & values, bool accumulate) {
autograd/generated/TraceType_1.cpp:5233:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5235:      .typed<Tensor & (Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool)>();
autograd/generated/TraceType_1.cpp:5236:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5237:      .redispatch<Tensor &, Tensor &, const c10::List<c10::optional<Tensor>> &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, indices, values, accumulate);
autograd/generated/TraceType_1.cpp:5260:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5263:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5264:      .redispatch<Tensor, const Tensor &, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index);
autograd/generated/TraceType_1.cpp:5287:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5290:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5291:      .redispatch<Tensor, const Tensor &, Dimname, const Tensor &>(op, c10::DispatchKey::Tracer, self, dim, index);
autograd/generated/TraceType_1.cpp:5299:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5302:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5303:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:5307:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5310:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5311:      .redispatch<bool, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:5315:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5318:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5319:      .redispatch<bool>(op, c10::DispatchKey::Tracer);
autograd/generated/TraceType_1.cpp:5336:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5339:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5340:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:5348:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5351:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5352:      .redispatch<Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:5376:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5379:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5380:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:5403:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5406:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5407:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceType_1.cpp:5437:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5440:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5441:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, grad_input);
autograd/generated/TraceType_1.cpp:5463:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5466:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5467:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:5494:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5497:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5498:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:5520:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5523:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5524:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:5551:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5554:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5555:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:5582:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5585:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5586:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:5593:Tensor linalg_cond(const Tensor & self, c10::optional<Scalar> p) {
autograd/generated/TraceType_1.cpp:5608:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5610:      .typed<Tensor (const Tensor &, c10::optional<Scalar>)>();
autograd/generated/TraceType_1.cpp:5611:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5612:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceType_1.cpp:5634:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5637:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5638:      .redispatch<Tensor, const Tensor &, std::string>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceType_1.cpp:5666:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5669:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5670:      .redispatch<Tensor &, const Tensor &, std::string, Tensor &>(op, c10::DispatchKey::Tracer, self, UPLO, out);
autograd/generated/TraceType_1.cpp:5693:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5696:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5697:      .redispatch<Tensor, const Tensor &, double, bool>(op, c10::DispatchKey::Tracer, self, rcond, hermitian);
autograd/generated/TraceType_1.cpp:5720:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5723:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5724:      .redispatch<Tensor, const Tensor &, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, rcond, hermitian);
autograd/generated/TraceType_1.cpp:5746:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5749:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5750:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, ind);
autograd/generated/TraceType_1.cpp:5757:Tensor linalg_tensorsolve(const Tensor & self, const Tensor & other, c10::optional<IntArrayRef> dims) {
autograd/generated/TraceType_1.cpp:5773:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5775:      .typed<Tensor (const Tensor &, const Tensor &, c10::optional<IntArrayRef>)>();
autograd/generated/TraceType_1.cpp:5776:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5777:      .redispatch<Tensor, const Tensor &, const Tensor &, c10::optional<IntArrayRef>>(op, c10::DispatchKey::Tracer, self, other, dims);
autograd/generated/TraceType_1.cpp:5784:Tensor & linspace_out_out(Scalar start, Scalar end, c10::optional<int64_t> steps, Tensor & out) {
autograd/generated/TraceType_1.cpp:5809:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5811:      .typed<Tensor & (Scalar, Scalar, c10::optional<int64_t>, Tensor &)>();
autograd/generated/TraceType_1.cpp:5812:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5813:      .redispatch<Tensor &, Scalar, Scalar, c10::optional<int64_t>, Tensor &>(op, c10::DispatchKey::Tracer, start, end, steps, out);
autograd/generated/TraceType_1.cpp:5840:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5843:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5844:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:5851:Tensor & log_normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
autograd/generated/TraceType_1.cpp:5873:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5875:      .typed<Tensor & (Tensor &, double, double, c10::optional<Generator>)>();
autograd/generated/TraceType_1.cpp:5876:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5877:      .redispatch<Tensor &, Tensor &, double, double, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, mean, std, generator);
autograd/generated/TraceType_1.cpp:5904:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5907:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5908:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:5931:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5934:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5935:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, buffer);
autograd/generated/TraceType_1.cpp:5963:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5966:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5967:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, output, buffer);
autograd/generated/TraceType_1.cpp:5996:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:5999:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6000:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:6028:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6031:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6032:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:6054:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6057:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6058:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_1.cpp:6080:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6083:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6084:      .redispatch<Tensor, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_1.cpp:6106:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6109:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6110:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:6137:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6140:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6141:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:6163:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6166:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6167:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:6194:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6197:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6198:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:6205:Tensor logspace(Scalar start, Scalar end, c10::optional<int64_t> steps, double base, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:6226:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6228:      .typed<Tensor (Scalar, Scalar, c10::optional<int64_t>, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:6229:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6230:      .redispatch<Tensor, Scalar, Scalar, c10::optional<int64_t>, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, start, end, steps, base, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:6253:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6256:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6257:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_1.cpp:6280:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6283:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6284:      .redispatch<Tensor, const Tensor &, DimnameList, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_1.cpp:6313:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6316:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6317:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, A, X, qr);
autograd/generated/TraceType_1.cpp:6340:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6343:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6344:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:6369:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6372:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6373:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_1.cpp:6399:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6402:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6403:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_1.cpp:6425:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6428:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6429:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:6451:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6454:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6455:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:6483:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6486:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6487:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode);
autograd/generated/TraceType_1.cpp:6521:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6524:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6525:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
autograd/generated/TraceType_1.cpp:6550:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6553:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6554:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, indices, output_size);
autograd/generated/TraceType_1.cpp:6579:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6582:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6583:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, indices, output_size, stride, padding);
autograd/generated/TraceType_1.cpp:6615:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6618:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6619:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, indices, output_size, stride, padding, grad_input);
autograd/generated/TraceType_1.cpp:6641:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6644:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6645:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:6652:Tensor & mean_out_out(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_1.cpp:6675:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6677:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_1.cpp:6678:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6679:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceType_1.cpp:6686:Tensor & mean_out_names_out(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_1.cpp:6709:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6711:      .typed<Tensor & (const Tensor &, DimnameList, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_1.cpp:6712:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6713:      .redispatch<Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceType_1.cpp:6743:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6746:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6747:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, int64_t, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceType_1.cpp:6778:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6781:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6782:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, Dimname, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, values, indices);
autograd/generated/TraceType_1.cpp:6804:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6807:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6808:      .redispatch<std::vector<Tensor>, TensorList>(op, c10::DispatchKey::Tracer, tensors);
autograd/generated/TraceType_1.cpp:6815:std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const c10::optional<Tensor> & bias, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, bool training, double exponential_average_factor, double epsilon) {
autograd/generated/TraceType_1.cpp:6839:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6841:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double)>();
autograd/generated/TraceType_1.cpp:6842:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6843:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, double>(op, c10::DispatchKey::Tracer, input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
autograd/generated/TraceType_1.cpp:6879:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6882:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6883:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
autograd/generated/TraceType_1.cpp:6913:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6916:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6917:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_1.cpp:6946:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6949:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6950:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
autograd/generated/TraceType_1.cpp:6981:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6984:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:6985:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, std::array<bool,3>>(op, c10::DispatchKey::Tracer, self, grad_output, weight, padding, stride, dilation, groups, output_mask);
autograd/generated/TraceType_1.cpp:7015:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7018:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7019:      .redispatch<Tensor, IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool>(op, c10::DispatchKey::Tracer, self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);
autograd/generated/TraceType_1.cpp:7044:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7047:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7048:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t>(op, c10::DispatchKey::Tracer, self, padding, stride, dilation, groups);
autograd/generated/TraceType_1.cpp:7073:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7076:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7077:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_1.cpp:7103:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7106:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7107:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, keepdim);
autograd/generated/TraceType_1.cpp:7131:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7134:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7135:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, source, destination);
autograd/generated/TraceType_1.cpp:7158:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7161:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7162:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, source, destination);
autograd/generated/TraceType_1.cpp:7169:Tensor & multi_margin_loss_out_out(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const c10::optional<Tensor> & weight, int64_t reduction, Tensor & out) {
autograd/generated/TraceType_1.cpp:7194:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7196:      .typed<Tensor & (const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t, Tensor &)>();
autograd/generated/TraceType_1.cpp:7197:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7198:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const c10::optional<Tensor> &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, target, p, margin, weight, reduction, out);
autograd/generated/TraceType_1.cpp:7223:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7226:  std::tie(output, is_target) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7227:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceType_1.cpp:7250:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7253:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7254:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:7276:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7279:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7280:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:7307:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7310:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7311:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:7338:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7341:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7342:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:7370:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7373:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7374:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, vec, out);
autograd/generated/TraceType_1.cpp:7381:std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const c10::optional<Tensor> & weight, const c10::optional<Tensor> & running_mean, const c10::optional<Tensor> & running_var, const c10::optional<Tensor> & save_mean, const c10::optional<Tensor> & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
autograd/generated/TraceType_1.cpp:7407:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7409:      .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, std::array<bool,3>)>();
autograd/generated/TraceType_1.cpp:7410:  std::tie(result0, result1, result2) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7411:      .redispatch<std::tuple<Tensor,Tensor,Tensor>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, const c10::optional<Tensor> &, bool, double, std::array<bool,3>>(op, c10::DispatchKey::Tracer, grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
autograd/generated/TraceType_1.cpp:7435:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7438:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7439:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, p);
autograd/generated/TraceType_1.cpp:7446:Tensor native_norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:7464:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7466:      .typed<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:7467:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7468:      .redispatch<Tensor, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, p, dim, keepdim, dtype);
autograd/generated/TraceType_1.cpp:7490:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7493:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7494:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:7516:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7519:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7520:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:7547:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7550:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7551:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:7578:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7581:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7582:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:7603:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7606:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7607:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:7633:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7636:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7637:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:7665:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7668:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7669:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:7676:Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
autograd/generated/TraceType_1.cpp:7696:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7698:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &)>();
autograd/generated/TraceType_1.cpp:7699:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7700:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, ignore_index, total_weight);
autograd/generated/TraceType_1.cpp:7707:std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out_output(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/TraceType_1.cpp:7732:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7734:      .typed<std::tuple<Tensor &,Tensor &> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &, Tensor &)>();
autograd/generated/TraceType_1.cpp:7735:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7736:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index, output, total_weight);
autograd/generated/TraceType_1.cpp:7744:Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
autograd/generated/TraceType_1.cpp:7764:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7766:      .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &)>();
autograd/generated/TraceType_1.cpp:7767:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7768:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, weight, reduction, ignore_index, total_weight);
autograd/generated/TraceType_1.cpp:7775:std::tuple<Tensor &,Tensor &> nll_loss_forward_out_output(const Tensor & self, const Tensor & target, const c10::optional<Tensor> & weight, int64_t reduction, int64_t ignore_index, Tensor & output, Tensor & total_weight) {
autograd/generated/TraceType_1.cpp:7800:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7802:      .typed<std::tuple<Tensor &,Tensor &> (const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &, Tensor &)>();
autograd/generated/TraceType_1.cpp:7803:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7804:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, const c10::optional<Tensor> &, int64_t, int64_t, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, target, weight, reduction, ignore_index, output, total_weight);
autograd/generated/TraceType_1.cpp:7835:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7838:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7839:      .redispatch<Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, size, out);
autograd/generated/TraceType_1.cpp:7864:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7867:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7868:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, bool, bool>(op, c10::DispatchKey::Tracer, self, input2, input3, left, transpose);
autograd/generated/TraceType_1.cpp:7893:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7896:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7897:      .redispatch<Tensor, const Tensor &, const Tensor &, double, double, bool>(op, c10::DispatchKey::Tracer, x1, x2, p, eps, keepdim);
autograd/generated/TraceType_1.cpp:7919:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7922:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7923:      .redispatch<Tensor, const Tensor &, double>(op, c10::DispatchKey::Tracer, self, rcond);
autograd/generated/TraceType_1.cpp:7951:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7954:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7955:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, abs, angle, out);
autograd/generated/TraceType_1.cpp:7983:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7986:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:7987:      .redispatch<Tensor &, int64_t, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, n, self, out);
autograd/generated/TraceType_1.cpp:8015:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8018:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8019:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceType_1.cpp:8047:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8050:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8051:      .redispatch<Tensor &, Scalar, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceType_1.cpp:8079:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8082:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8083:      .redispatch<Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, exponent, out);
autograd/generated/TraceType_1.cpp:8090:Tensor & prod_out_int_out(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_1.cpp:8113:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8115:      .typed<Tensor & (const Tensor &, int64_t, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_1.cpp:8116:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8117:      .redispatch<Tensor &, const Tensor &, int64_t, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceType_1.cpp:8124:Tensor & prod_out_Dimname_out(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype, Tensor & out) {
autograd/generated/TraceType_1.cpp:8147:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8149:      .typed<Tensor & (const Tensor &, Dimname, bool, c10::optional<ScalarType>, Tensor &)>();
autograd/generated/TraceType_1.cpp:8150:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8151:      .redispatch<Tensor &, const Tensor &, Dimname, bool, c10::optional<ScalarType>, Tensor &>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype, out);
autograd/generated/TraceType_1.cpp:8159:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8162:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8163:      .redispatch<int64_t, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:8180:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8183:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8184:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:8213:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8216:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8217:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, bool, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, some, Q, R);
autograd/generated/TraceType_1.cpp:8225:Tensor & quantile_out_scalar_out(const Tensor & self, double q, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceType_1.cpp:8248:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8250:      .typed<Tensor & (const Tensor &, double, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceType_1.cpp:8251:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8252:      .redispatch<Tensor &, const Tensor &, double, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim, out);
autograd/generated/TraceType_1.cpp:8259:Tensor & quantile_out_out(const Tensor & self, const Tensor & q, c10::optional<int64_t> dim, bool keepdim, Tensor & out) {
autograd/generated/TraceType_1.cpp:8282:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8284:      .typed<Tensor & (const Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &)>();
autograd/generated/TraceType_1.cpp:8285:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8286:      .redispatch<Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>, bool, Tensor &>(op, c10::DispatchKey::Tracer, self, q, dim, keepdim, out);
autograd/generated/TraceType_1.cpp:8320:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8323:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8324:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
autograd/generated/TraceType_1.cpp:8358:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8361:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8362:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar>(op, c10::DispatchKey::Tracer, input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
autograd/generated/TraceType_1.cpp:8369:Tensor rand_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:8388:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8390:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:8391:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8392:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:8399:Tensor rand_generator_with_names(IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:8419:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8421:      .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:8422:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8423:      .redispatch<Tensor, IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, generator, names, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:8430:Tensor rand(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:8448:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8450:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:8451:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8452:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:8459:Tensor rand_generator(IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:8478:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8480:      .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:8481:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8482:      .redispatch<Tensor, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:8513:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8516:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8517:      .redispatch<Tensor &, int64_t, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, high, size, out);
autograd/generated/TraceType_1.cpp:8524:Tensor & randint_out_generator_out(int64_t high, IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_1.cpp:8549:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8551:      .typed<Tensor & (int64_t, IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_1.cpp:8552:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8553:      .redispatch<Tensor &, int64_t, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, high, size, generator, out);
autograd/generated/TraceType_1.cpp:8585:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8588:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8589:      .redispatch<Tensor &, int64_t, int64_t, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, low, high, size, out);
autograd/generated/TraceType_1.cpp:8596:Tensor & randint_out_low_generator_out(int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_1.cpp:8622:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8624:      .typed<Tensor & (int64_t, int64_t, IntArrayRef, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_1.cpp:8625:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8626:      .redispatch<Tensor &, int64_t, int64_t, IntArrayRef, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, low, high, size, generator, out);
autograd/generated/TraceType_1.cpp:8633:Tensor randn(IntArrayRef size, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:8651:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8653:      .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:8654:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8655:      .redispatch<Tensor, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:8662:Tensor randn_generator(IntArrayRef size, c10::optional<Generator> generator, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:8681:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8683:      .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:8684:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8685:      .redispatch<Tensor, IntArrayRef, c10::optional<Generator>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, generator, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:8692:Tensor randn_names(IntArrayRef size, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:8711:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8713:      .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:8714:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8715:      .redispatch<Tensor, IntArrayRef, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, names, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:8722:Tensor randn_generator_with_names(IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, c10::optional<ScalarType> dtype, c10::optional<Layout> layout, c10::optional<Device> device, c10::optional<bool> pin_memory) {
autograd/generated/TraceType_1.cpp:8742:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8744:      .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
autograd/generated/TraceType_1.cpp:8745:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8746:      .redispatch<Tensor, IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>>(op, c10::DispatchKey::Tracer, size, generator, names, dtype, layout, device, pin_memory);
autograd/generated/TraceType_1.cpp:8753:Tensor & random__from(Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator) {
autograd/generated/TraceType_1.cpp:8775:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8777:      .typed<Tensor & (Tensor &, int64_t, c10::optional<int64_t>, c10::optional<Generator>)>();
autograd/generated/TraceType_1.cpp:8778:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8779:      .redispatch<Tensor &, Tensor &, int64_t, c10::optional<int64_t>, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, from, to, generator);
autograd/generated/TraceType_1.cpp:8786:Tensor & random__to(Tensor & self, int64_t to, c10::optional<Generator> generator) {
autograd/generated/TraceType_1.cpp:8807:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8809:      .typed<Tensor & (Tensor &, int64_t, c10::optional<Generator>)>();
autograd/generated/TraceType_1.cpp:8810:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8811:      .redispatch<Tensor &, Tensor &, int64_t, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, to, generator);
autograd/generated/TraceType_1.cpp:8818:Tensor & random_(Tensor & self, c10::optional<Generator> generator) {
autograd/generated/TraceType_1.cpp:8838:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8840:      .typed<Tensor & (Tensor &, c10::optional<Generator>)>();
autograd/generated/TraceType_1.cpp:8841:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8842:      .redispatch<Tensor &, Tensor &, c10::optional<Generator>>(op, c10::DispatchKey::Tracer, self, generator);
autograd/generated/TraceType_1.cpp:8872:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8875:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8876:      .redispatch<Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, n, out);
autograd/generated/TraceType_1.cpp:8883:Tensor & randperm_out_generator_out(int64_t n, c10::optional<Generator> generator, Tensor & out) {
autograd/generated/TraceType_1.cpp:8907:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8909:      .typed<Tensor & (int64_t, c10::optional<Generator>, Tensor &)>();
autograd/generated/TraceType_1.cpp:8910:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8911:      .redispatch<Tensor &, int64_t, c10::optional<Generator>, Tensor &>(op, c10::DispatchKey::Tracer, n, generator, out);
autograd/generated/TraceType_1.cpp:8919:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8922:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8923:      .redispatch<void, Tensor &, Stream>(op, c10::DispatchKey::Tracer, self, s);
autograd/generated/TraceType_1.cpp:8941:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8944:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8945:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, grad_output, self, padding);
autograd/generated/TraceType_1.cpp:8967:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8970:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:8971:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceType_1.cpp:9000:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9003:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9004:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceType_1.cpp:9026:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9029:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9030:      .redispatch<Tensor, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:9052:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9055:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9056:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:9083:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9086:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9087:      .redispatch<Tensor &, Tensor &, Scalar>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:9114:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9117:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9118:      .redispatch<Tensor &, Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:9140:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9143:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9144:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, repeats);
autograd/generated/TraceType_1.cpp:9166:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9169:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9170:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, padding);
autograd/generated/TraceType_1.cpp:9199:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9202:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9203:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, padding, grad_input);
autograd/generated/TraceType_1.cpp:9231:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9234:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9235:      .redispatch<Tensor &, const Tensor &, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, padding, out);
autograd/generated/TraceType_1.cpp:9257:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9260:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9261:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, other);
autograd/generated/TraceType_1.cpp:9269:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9272:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9273:      .redispatch<ScalarType, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, tensor, other);
autograd/generated/TraceType_1.cpp:9277:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9280:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9281:      .redispatch<ScalarType, const Tensor &, Scalar>(op, c10::DispatchKey::Tracer, tensor, other);
autograd/generated/TraceType_1.cpp:9285:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9288:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9289:      .redispatch<ScalarType, Scalar, const Tensor &>(op, c10::DispatchKey::Tracer, scalar, tensor);
autograd/generated/TraceType_1.cpp:9293:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9296:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9297:      .redispatch<ScalarType, Scalar, Scalar>(op, c10::DispatchKey::Tracer, scalar1, scalar2);
autograd/generated/TraceType_1.cpp:9324:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9327:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9328:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool>(op, c10::DispatchKey::Tracer, input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
autograd/generated/TraceType_1.cpp:9360:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9363:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9364:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool>(op, c10::DispatchKey::Tracer, data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
autograd/generated/TraceType_1.cpp:9388:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9391:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9392:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, shifts, dims);
autograd/generated/TraceType_1.cpp:9415:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9418:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9419:      .redispatch<Tensor, const Tensor &, int64_t, IntArrayRef>(op, c10::DispatchKey::Tracer, self, k, dims);
autograd/generated/TraceType_1.cpp:9446:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9449:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9450:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:9477:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9480:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9481:      .redispatch<Tensor, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool, bool>(op, c10::DispatchKey::Tracer, grad_output, self, noise, lower, upper, training, self_is_result);
autograd/generated/TraceType_1.cpp:9508:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9511:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9512:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:9542:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9545:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9546:      .redispatch<Tensor &, const Tensor &, const Tensor &, bool, bool, Tensor &>(op, c10::DispatchKey::Tracer, sorted_sequence, self, out_int32, right, out);
autograd/generated/TraceType_1.cpp:9570:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9573:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9574:      .redispatch<Tensor, const Tensor &, IntArrayRef, int64_t, int64_t>(op, c10::DispatchKey::Tracer, grad, input_sizes, dim, index);
autograd/generated/TraceType_1.cpp:9595:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9598:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9599:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:9625:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9628:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9629:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:9656:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9659:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9660:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:9682:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9685:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9686:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self);
autograd/generated/TraceType_1.cpp:9693:Tensor & slow_conv3d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, Tensor & out) {
autograd/generated/TraceType_1.cpp:9718:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9720:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceType_1.cpp:9721:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9722:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, out);
autograd/generated/TraceType_1.cpp:9729:Tensor & slow_conv_transpose2d_out_out(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, Tensor & out) {
autograd/generated/TraceType_1.cpp:9756:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9758:      .typed<Tensor & (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &)>();
autograd/generated/TraceType_1.cpp:9759:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9760:      .redispatch<Tensor &, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
autograd/generated/TraceType_1.cpp:9790:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9793:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9794:      .redispatch<Tensor &, const Tensor &, const Tensor &, int64_t, double, Tensor &>(op, c10::DispatchKey::Tracer, self, target, reduction, beta, out);
autograd/generated/TraceType_1.cpp:9817:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9820:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9821:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, target, reduction);
autograd/generated/TraceType_1.cpp:9851:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9854:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9855:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, target, reduction, grad_input);
autograd/generated/TraceType_1.cpp:9878:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9881:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9882:      .redispatch<Tensor, const Tensor &, Scalar, Scalar>(op, c10::DispatchKey::Tracer, self, beta, threshold);
autograd/generated/TraceType_1.cpp:9913:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9916:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9917:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, beta, threshold, output, grad_input);
autograd/generated/TraceType_1.cpp:9942:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9945:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9946:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, bool>(op, c10::DispatchKey::Tracer, self, dim, descending);
autograd/generated/TraceType_1.cpp:9972:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9975:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:9976:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, Dimname, bool>(op, c10::DispatchKey::Tracer, self, dim, descending);
autograd/generated/TraceType_1.cpp:10000:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10003:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10004:      .redispatch<std::vector<Tensor>, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, split_size, dim);
autograd/generated/TraceType_1.cpp:10035:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10038:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10039:      .redispatch<Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, mat1, mat2, beta, alpha, out);
autograd/generated/TraceType_1.cpp:10061:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10064:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10065:      .redispatch<Tensor, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceType_1.cpp:10089:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10092:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10093:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceType_1.cpp:10117:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10120:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10121:      .redispatch<Tensor, const Tensor &, DimnameList, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceType_1.cpp:10129:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10132:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10133:      .redispatch<int64_t, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_1.cpp:10137:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10140:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10141:      .redispatch<int64_t, const Tensor &, Dimname>(op, c10::DispatchKey::Tracer, self, dim);
autograd/generated/TraceType_1.cpp:10166:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10169:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10170:      .redispatch<Tensor &, const Tensor &, const Tensor &, Scalar, Tensor &>(op, c10::DispatchKey::Tracer, self, other, alpha, out);
autograd/generated/TraceType_1.cpp:10177:Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:10192:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10194:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:10195:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10196:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceType_1.cpp:10203:Tensor sum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:10220:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10222:      .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:10223:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10224:      .redispatch<Tensor, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceType_1.cpp:10231:Tensor sum_dim_DimnameList(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:10248:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10250:      .typed<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:10251:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10252:      .redispatch<Tensor, const Tensor &, DimnameList, bool, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dim, keepdim, dtype);
autograd/generated/TraceType_1.cpp:10274:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10277:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10278:      .redispatch<Tensor, const Tensor &, IntArrayRef>(op, c10::DispatchKey::Tracer, self, size);
autograd/generated/TraceType_1.cpp:10301:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10304:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10305:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, axis0, axis1);
autograd/generated/TraceType_1.cpp:10333:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10336:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10337:      .redispatch<Tensor &, Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, axis0, axis1);
autograd/generated/TraceType_1.cpp:10358:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10361:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10362:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:10388:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10391:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10392:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:10414:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10417:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10418:      .redispatch<Tensor, const Tensor &, const Tensor &>(op, c10::DispatchKey::Tracer, self, index);
autograd/generated/TraceType_1.cpp:10445:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10448:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10449:      .redispatch<Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, out);
autograd/generated/TraceType_1.cpp:10456:Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const c10::optional<Tensor> & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
autograd/generated/TraceType_1.cpp:10476:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10478:      .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef)>();
autograd/generated/TraceType_1.cpp:10479:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10480:      .redispatch<Tensor, const Tensor &, const Tensor &, IntArrayRef, const c10::optional<Tensor> &, IntArrayRef, IntArrayRef, IntArrayRef>(op, c10::DispatchKey::Tracer, self, weight, kernel_size, bias, stride, padding, dilation);
autograd/generated/TraceType_1.cpp:10514:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10517:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10518:      .redispatch<std::tuple<Tensor &,Tensor &>, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, self, weight, kernel_size, stride, padding, dilation, grad_input, grad_weight);
autograd/generated/TraceType_1.cpp:10526:Tensor to_mkldnn(const Tensor & self, c10::optional<ScalarType> dtype) {
autograd/generated/TraceType_1.cpp:10541:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10543:      .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
autograd/generated/TraceType_1.cpp:10544:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10545:      .redispatch<Tensor, const Tensor &, c10::optional<ScalarType>>(op, c10::DispatchKey::Tracer, self, dtype);
autograd/generated/TraceType_1.cpp:10567:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10570:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10571:      .redispatch<Tensor, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, self, sparse_dim);
autograd/generated/TraceType_1.cpp:10592:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10595:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10596:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:10623:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10626:  std::tie(values, indices) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10627:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, int64_t, int64_t, bool, bool>(op, c10::DispatchKey::Tracer, self, k, dim, largest, sorted);
autograd/generated/TraceType_1.cpp:10651:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10654:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10655:      .redispatch<Tensor, const Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceType_1.cpp:10678:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10681:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10682:      .redispatch<Tensor, const Tensor &, Dimname, Dimname>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceType_1.cpp:10710:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10713:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10714:      .redispatch<Tensor &, Tensor &, int64_t, int64_t>(op, c10::DispatchKey::Tracer, self, dim0, dim1);
autograd/generated/TraceType_1.cpp:10737:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10740:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10741:      .redispatch<Tensor, const Tensor &, const Tensor &, int64_t>(op, c10::DispatchKey::Tracer, y, x, dim);
autograd/generated/TraceType_1.cpp:10764:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10767:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10768:      .redispatch<Tensor, const Tensor &, double, int64_t>(op, c10::DispatchKey::Tracer, y, dx, dim);
autograd/generated/TraceType_1.cpp:10796:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10799:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10800:      .redispatch<Tensor &, const Tensor &, int64_t, Tensor &>(op, c10::DispatchKey::Tracer, self, diagonal, out);
autograd/generated/TraceType_1.cpp:10828:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10831:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10832:      .redispatch<Tensor &, const Tensor &, const Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self, other, out);
autograd/generated/TraceType_1.cpp:10853:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10856:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10857:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:10883:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10886:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10887:      .redispatch<Tensor &, Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:10894:Tensor & upsample_bicubic2d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceType_1.cpp:10918:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10920:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_1.cpp:10921:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10922:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_h, scales_w, out);
autograd/generated/TraceType_1.cpp:10929:Tensor upsample_linear1d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, bool align_corners, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_1.cpp:10947:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10949:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_1.cpp:10950:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10951:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, bool, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scale_factors);
autograd/generated/TraceType_1.cpp:10958:Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
autograd/generated/TraceType_1.cpp:10976:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10978:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>)>();
autograd/generated/TraceType_1.cpp:10979:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:10980:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, align_corners, scales);
autograd/generated/TraceType_1.cpp:10987:Tensor upsample_nearest2d_backward_vec(const Tensor & grad_output, c10::optional<IntArrayRef> output_size, IntArrayRef input_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_1.cpp:11004:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11006:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_1.cpp:11007:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11008:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, IntArrayRef, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scale_factors);
autograd/generated/TraceType_1.cpp:11015:Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_1.cpp:11033:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11035:      .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_1.cpp:11036:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11037:      .redispatch<Tensor, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales_h, scales_w);
autograd/generated/TraceType_1.cpp:11044:Tensor upsample_nearest3d_vec(const Tensor & input, c10::optional<IntArrayRef> output_size, c10::optional<ArrayRef<double>> scale_factors) {
autograd/generated/TraceType_1.cpp:11060:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11062:      .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>)>();
autograd/generated/TraceType_1.cpp:11063:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11064:      .redispatch<Tensor, const Tensor &, c10::optional<IntArrayRef>, c10::optional<ArrayRef<double>>>(op, c10::DispatchKey::Tracer, input, output_size, scale_factors);
autograd/generated/TraceType_1.cpp:11071:Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
autograd/generated/TraceType_1.cpp:11089:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11091:      .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
autograd/generated/TraceType_1.cpp:11092:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11093:      .redispatch<Tensor, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>>(op, c10::DispatchKey::Tracer, self, output_size, scales_d, scales_h, scales_w);
autograd/generated/TraceType_1.cpp:11100:Tensor & upsample_nearest3d_backward_out_grad_input(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & grad_input) {
autograd/generated/TraceType_1.cpp:11125:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11127:      .typed<Tensor & (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_1.cpp:11128:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11129:      .redispatch<Tensor &, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, grad_output, output_size, input_size, scales_d, scales_h, scales_w, grad_input);
autograd/generated/TraceType_1.cpp:11136:Tensor & upsample_trilinear3d_out_out(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, Tensor & out) {
autograd/generated/TraceType_1.cpp:11161:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11163:      .typed<Tensor & (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &)>();
autograd/generated/TraceType_1.cpp:11164:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11165:      .redispatch<Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, Tensor &>(op, c10::DispatchKey::Tracer, self, output_size, align_corners, scales_d, scales_h, scales_w, out);
autograd/generated/TraceType_1.cpp:11186:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11189:  auto result =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11190:      .redispatch<Tensor, const Tensor &>(op, c10::DispatchKey::Tracer, self);
autograd/generated/TraceType_1.cpp:11214:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11217:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11218:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, bool>(op, c10::DispatchKey::Tracer, self, unbiased);
autograd/generated/TraceType_1.cpp:11245:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11248:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11249:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, IntArrayRef, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceType_1.cpp:11276:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11279:  std::tie(result0, result1) =c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11280:      .redispatch<std::tuple<Tensor,Tensor>, const Tensor &, DimnameList, bool, bool>(op, c10::DispatchKey::Tracer, self, dim, unbiased, keepdim);
autograd/generated/TraceType_1.cpp:11308:  static auto op = c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11311:  c10::Dispatcher::singleton()
autograd/generated/TraceType_1.cpp:11312:      .redispatch<Tensor &, TensorList, Tensor &>(op, c10::DispatchKey::Tracer, tensors, out);
autograd/utils/grad_layout_contract.h:29:                                       variable.options().memory_format(c10::nullopt))
autograd/FunctionsManual.cpp:6:#include <c10/core/TensorOptions.h>
autograd/FunctionsManual.cpp:39:bool isDefined(const c10::optional<Tensor>& t) {
autograd/FunctionsManual.cpp:43:bool isFwGradDefined(const c10::optional<Tensor>& t) {
autograd/FunctionsManual.cpp:47:Tensor toLegacyTensor(const c10::optional<Tensor>& t) {
autograd/FunctionsManual.cpp:51:Tensor toLegacyFwGrad(const c10::optional<Tensor>& t) {
autograd/FunctionsManual.cpp:55:Tensor toLegacyPrimal(const c10::optional<Tensor>& t) {
autograd/FunctionsManual.cpp:79:  std::string msg = c10::str("the derivative for '", name, "' is not implemented.");
autograd/FunctionsManual.cpp:81:    msg = c10::str(msg, " ", reason);
autograd/FunctionsManual.cpp:281:                     grad * self / self.abs().pow(2) * Scalar(c10::complex<double>{0.0, 1.0}));
autograd/FunctionsManual.cpp:309:Tensor div_tensor_self_backward(Tensor grad, Tensor other, ScalarType self_st, c10::string_view rounding_mode) {
autograd/FunctionsManual.cpp:322:Tensor div_tensor_other_backward(Tensor grad, Tensor self, Tensor other, c10::string_view rounding_mode) {
autograd/FunctionsManual.cpp:635:at::IntArrayRef strides_or_error(const Tensor & input, c10::string_view const & input_name) {
autograd/FunctionsManual.cpp:1050:    c10::optional<double> eps) {
autograd/FunctionsManual.cpp:1094:Tensor binary_cross_entropy_with_logits_target_backward(const Tensor& grad_output, const Tensor& self, const Tensor& target, const c10::optional<Tensor>& weight, const c10::optional<Tensor>& pos_weight, int64_t reduction) {
autograd/FunctionsManual.cpp:1169:Tensor binary_cross_entropy_double_backward(const Tensor & grad_output, const Tensor & grad, const Tensor & input, const Tensor & target, const c10::optional<Tensor>& weight, int64_t reduction) {
autograd/FunctionsManual.cpp:1192:Tensor binary_cross_entropy_double_backward_grad_output(const Tensor & grad, const Tensor & input, const Tensor & target, const c10::optional<Tensor>& weight, int64_t reduction) {
autograd/FunctionsManual.cpp:1817:  c10::optional<at::Tensor> flatten_full_indices;
autograd/FunctionsManual.cpp:1958:    const c10::IntArrayRef& input_sizes,
autograd/FunctionsManual.cpp:1960:    c10::optional<int64_t> start,
autograd/FunctionsManual.cpp:1961:    c10::optional<int64_t> end,
autograd/FunctionsManual.cpp:2303:    c10::optional<Tensor> first_nonzero_det_index = nonzero_det_indices[0];
autograd/FunctionsManual.cpp:2310:    c10::optional<Tensor> first_zero_det_index = zero_det_indices[0];
autograd/FunctionsManual.cpp:2355:    c10::optional<Tensor> first_finite_logdet_index = finite_logdet_indices[0];
autograd/FunctionsManual.cpp:2362:    c10::optional<Tensor> first_neginf_logdet_index = neginf_logdet_indices[0];
autograd/FunctionsManual.cpp:2412:    c10::optional<Tensor> first_nonzero_signdet_index = nonzero_signdet_indices[0];
autograd/FunctionsManual.cpp:2419:    c10::optional<Tensor> first_zero_signdet_index = zero_signdet_indices[0];
autograd/FunctionsManual.cpp:2597:    const c10::optional<Tensor> & gamma,
autograd/FunctionsManual.cpp:2602:    const c10::optional<Tensor> & running_mean,
autograd/FunctionsManual.cpp:2603:    const c10::optional<Tensor> & running_var,
autograd/FunctionsManual.cpp:2606:    const c10::optional<Tensor> & save_mean,
autograd/FunctionsManual.cpp:2607:    const c10::optional<Tensor> & save_invstd,
autograd/FunctionsManual.cpp:2729:    const c10::optional<Tensor>& gamma,
autograd/FunctionsManual.cpp:2833:    const c10::optional<Tensor>& gamma,
autograd/FunctionsManual.cpp:2973:Tensor index_backward(Tensor zeros_like_self, const torch::List<c10::optional<Tensor>>& indices, const Tensor& grad) {
autograd/utils/python_arg_parsing.h:12:inline std::tuple<c10::optional<at::Device>, c10::optional<at::ScalarType>, bool, bool, c10::optional<at::MemoryFormat>>
autograd/utils/python_arg_parsing.h:21:    return std::make_tuple(c10::nullopt, r.scalartype(0), r.toBool(1), r.toBool(2), r.memoryformatOptional(3));
autograd/profiler_kineto.h:16:enum class C10_API_ENUM ActivityType {
autograd/profiler_kineto.h:29:  c10::optional<std::vector<std::vector<int64_t>>> shapes;
autograd/profiler_kineto.h:33:  c10::optional<std::vector<std::string>> stack;
autograd/profiler_kineto.h:35:  c10::optional<std::unordered_map<std::string, c10::IValue>> extraArgs;
autograd/profiler_kineto.h:58:    return shapes_ != c10::nullopt;
autograd/profiler_kineto.h:74:    return stack_ != c10::nullopt;
autograd/profiler_kineto.h:162:  c10::DeviceType deviceType() const;
autograd/profiler_kineto.h:171:  c10::optional<std::vector<std::vector<int64_t>>> shapes_;
autograd/profiler_kineto.h:172:  c10::optional<std::vector<std::string>> stack_;
autograd/saved_variable.cpp:45:SavedVariable::SavedVariable(const c10::optional<Variable>& variable, bool is_output, bool is_inplace_view)
autograd/record_function_ops.h:12:TORCH_API c10::intrusive_ptr<c10::ivalue::Future> _call_end_callbacks_on_fut(
autograd/record_function_ops.h:14:    const c10::intrusive_ptr<c10::ivalue::Future>& fut);
autograd/utils/wrap_outputs.h:36:inline PyObject* wrap(c10::complex<double> value) {
autograd/cpp_hook.cpp:35:    check_single_result(value, res, c10::to_string(i));
autograd/forward_grad.h:124:        c10::SmallVector<uint64_t, EXPECTED_MAX_LEVEL> levels_idx;
autograd/input_buffer.cpp:3:#include <c10/core/DeviceGuard.h>
autograd/input_buffer.cpp:4:#include <c10/core/StreamGuard.h>
autograd/input_buffer.cpp:5:#include <c10/core/Event.h>
autograd/input_buffer.cpp:6:#include <c10/util/Optional.h>
autograd/input_buffer.cpp:39:                        const c10::optional<c10::Stream>& opt_producer_stream,
autograd/input_buffer.cpp:40:                        const c10::optional<c10::Stream>& opt_consumer_stream) {
autograd/input_buffer.cpp:65:  c10::optional<c10::Stream> opt_accumulate_stream = c10::nullopt;
autograd/input_buffer.cpp:76:        auto event = c10::Event{c10::DeviceType::CUDA};
autograd/input_buffer.cpp:81:      c10::optional<c10::Stream> opt_sync_stream = c10::nullopt;
autograd/input_buffer.cpp:82:      const auto guard = c10::impl::VirtualGuardImpl{c10::DeviceType::CUDA};
autograd/input_buffer.cpp:97:        c10::OptionalDeviceGuard device_guard{opt_sync_stream->device()};
autograd/input_buffer.cpp:98:        auto event = c10::Event{c10::DeviceType::CUDA};
autograd/input_buffer.cpp:110:      c10::OptionalStreamGuard stream_guard{opt_accumulate_stream};
autograd/input_buffer.cpp:115:      c10::OptionalDeviceGuard device_guard{device_of(var)};
autograd/profiler_legacy.h:18:#if defined(C10_IOS) && defined(C10_MOBILE)
autograd/profiler_legacy.h:76:#if defined(C10_IOS) && defined(C10_MOBILE)
autograd/profiler_legacy.h:94:enum class C10_API_ENUM EventKind : uint16_t {
autograd/profiler_legacy.h:208:  void updateMemoryStats(int64_t alloc_size, c10::Device device) {
autograd/profiler_legacy.h:209:    if (device.type() == c10::DeviceType::CUDA ||
autograd/profiler_legacy.h:210:        device.type() == c10::DeviceType::HIP) {
autograd/profiler_legacy.h:212:    } else if (device.type() == c10::DeviceType::CPU ||
autograd/profiler_legacy.h:213:        device.type() == c10::DeviceType::MKLDNN ||
autograd/profiler_legacy.h:214:        device.type() == c10::DeviceType::IDEEP) {
autograd/profiler_legacy.h:295:  const std::unordered_map<std::string, c10::IValue>& extraArgs() const {
autograd/profiler_legacy.h:299:  void setExtraArgs(std::unordered_map<std::string, c10::IValue>&& save_args) {
autograd/profiler_legacy.h:333:  std::unordered_map<std::string, c10::IValue> extra_args_;
autograd/profiler_legacy.h:376:enum class C10_API_ENUM ProfilerState {
autograd/profiler_legacy.h:431:TORCH_API thread_event_lists disableProfilerLegacy(c10::optional<ProfilerDisableOptions> profilerDisableOptions = c10::nullopt);
autograd/profiler_legacy.h:473:      c10::optional<std::function<void(const thread_event_lists&)>>
autograd/profiler_legacy.h:474:          resultCallback = c10::nullopt,
autograd/profiler_legacy.h:475:      c10::optional<ProfilerDisableOptions> profilerDisableOptions =
autograd/profiler_legacy.h:476:          c10::nullopt)
autograd/profiler_legacy.h:493:  c10::optional<std::function<void(const thread_event_lists&)>> cb_;
autograd/profiler_legacy.h:494:  const c10::optional<ProfilerDisableOptions> profilerDisableOptions_;
autograd/profiler_legacy.h:506:struct TORCH_API ProfilerThreadLocalState : public c10::MemoryReportingInfoBase {
autograd/profiler_legacy.h:508:      : config_(config), remoteProfiledEvents_{c10::nullopt} {}
autograd/profiler_legacy.h:543:      c10::Device device) override;
autograd/profiler_legacy.h:562:  c10::optional<std::vector<std::vector<LegacyEvent>>> remoteProfiledEvents_;
autograd/functions/comm.cpp:11:#include <c10/util/Optional.h>
autograd/functions/comm.cpp:21:    const c10::optional<std::vector<int64_t>>& chunk_sizes,
autograd/functions/comm.cpp:23:    const c10::optional<std::vector<c10::optional<at::cuda::CUDAStream>>>& streams,
autograd/functions/comm.cpp:107:        /*streams=*/c10::nullopt,
autograd/functions/utils.h:39:  void operator()(const c10::optional<at::Tensor>& tensor) {
autograd/functions/accumulate_grad.h:47:  // optimizer kernels, and grads interact efficiently with c10d::Reducer.cpp.
autograd/functions/accumulate_grad.h:192:        //                              variable.options().memory_format(c10::nullopt));
autograd/functions/tensor.h:9:#include <c10/util/Optional.h>
autograd/functions/comm.h:20:      const c10::optional<std::vector<int64_t>>& chunk_sizes = c10::nullopt,
autograd/functions/comm.h:22:      const c10::optional<std::vector<c10::optional<at::cuda::CUDAStream>>>& streams =
autograd/functions/comm.h:23:          c10::nullopt,
autograd/functions/comm.h:30:  c10::optional<std::vector<int64_t>> chunk_sizes_;
autograd/functions/comm.h:32:  c10::optional<std::vector<c10::optional<at::cuda::CUDAStream>>> streams_;
autograd/variable.h:13:#include <c10/util/Exception.h>
autograd/variable.h:164:  TORCH_API void set_version_counter(const Variable&, const c10::VariableVersion& version_counter);
autograd/variable.h:167:  TORCH_API const c10::VariableVersion& version_counter(const Variable&);
autograd/variable.h:190:struct TORCH_API AutogradMeta : public c10::AutogradMetaInterface {
autograd/variable.h:522:  c10::optional<ViewInfo> backward_info_;
autograd/variable.h:523:  c10::optional<ViewInfo> forward_info_;
autograd/variable.h:578:  DifferentiableViewMeta(at::TensorImpl* self_impl, c10::optional<ViewInfo> backward_info,
autograd/variable.h:579:    c10::optional<ViewInfo> forward_info, CreationMeta creation_meta=CreationMeta::DEFAULT);
autograd/variable.h:606:    c10::optional<ViewInfo> backward_info,
autograd/variable.h:607:    c10::optional<ViewInfo> forward_info,
autograd/variable.h:623:      c10::intrusive_ptr<at::TensorImpl> data_impl_copy = data.getIntrusivePtr()->shallow_copy_and_detach(
autograd/saved_variable.h:24:  SavedVariable(const c10::optional<Variable>& variable, bool is_output, bool is_inplace_view=false);
autograd/saved_variable.h:64:  c10::VariableVersion version_counter_;
autograd/python_anomaly_mode.cpp:2:#include <c10/util/Exception.h>
autograd/profiler_utils.cpp:27:                       const std::vector<c10::IValue>& inputs,
autograd/profiler_utils.cpp:51:std::unordered_map<std::string, c10::IValue> saveExtraArgs(const at::RecordFunction& fn) {
autograd/profiler_utils.cpp:53:  std::unordered_map<std::string, c10::IValue> map;
autograd/profiler_utils.cpp:54:  std::vector<c10::IValue> inputs = fn.inputs();
autograd/profiler_utils.cpp:115:uint64_t computeFlops(const std::string &op_name, const std::unordered_map<std::string, c10::IValue> &extra_args) {
autograd/function.cpp:37:  return c10::demangle(typeid(*this).name());
autograd/VariableTypeManual.cpp:1:#include <c10/util/Optional.h>
autograd/VariableTypeManual.cpp:2:#include <c10/core/ScalarType.h>
autograd/VariableTypeManual.cpp:29:C10_EXPORT std::vector<at::DeprecatedTypeProperties*> allCPUTypes() {
autograd/VariableTypeManual.cpp:33:C10_EXPORT std::vector<at::DeprecatedTypeProperties*> allCUDATypes() {
autograd/VariableTypeManual.cpp:86:    const c10::optional<Tensor>& gradient,
autograd/VariableTypeManual.cpp:87:    c10::optional<bool> keep_graph,
autograd/VariableTypeManual.cpp:89:  // TODO torch::autograd::backward should take the c10::optional<Tensor> gradient directly
autograd/VariableTypeManual.cpp:171:  c10::weak_intrusive_ptr<TensorImpl> weak_self(self.getIntrusivePtr());
autograd/VariableTypeManual.cpp:273:    c10::optional<MemoryFormat> optional_memory_format) {
autograd/VariableTypeManual.cpp:293:    c10::optional<MemoryFormat> optional_memory_format) {
autograd/VariableTypeManual.cpp:312:  RECORD_FUNCTION("detach", std::vector<c10::IValue>({self}));
autograd/VariableTypeManual.cpp:329:  RECORD_FUNCTION("detach_", std::vector<c10::IValue>({self}));
autograd/python_variable_indexing.cpp:22:#include <c10/core/TensorOptions.h>
autograd/python_variable_indexing.cpp:86:static inline Variable sequenceToVariable(c10::DispatchKey dispatch_key, PyObject* seq) {
autograd/python_variable_indexing.cpp:87:  return torch::utils::indexing_tensor_from_data(dispatch_key, kLong, c10::nullopt, seq);
autograd/python_variable_indexing.cpp:90:static inline Variable valueToTensor(c10::TensorOptions options, PyObject* value, const at::Device& device) {
autograd/python_variable.cpp:804:    auto p = c10::intrusive_ptr<c10::TensorImpl, at::UndefinedTensorImpl>::
autograd/python_variable.cpp:805:        unsafe_reclaim_from_nonowning(static_cast<c10::TensorImpl*>(ptr));
autograd/profiler_legacy.cpp:19:#include <c10/core/Allocator.h>
autograd/profiler_legacy.cpp:20:#include <c10/util/ThreadLocalDebugInfo.h>
autograd/profiler_legacy.cpp:114://  - c10/ATen ops
autograd/profiler_legacy.cpp:233:#ifndef C10_MOBILE
autograd/profiler_legacy.cpp:273:    c10::Device device) {
autograd/profiler_legacy.cpp:354:  for (const c10::IValue& input : fn.inputs()) {
autograd/profiler_legacy.cpp:414:      c10::ThreadLocalDebugInfo::get(c10::DebugInfoKind::PROFILER_STATE));
autograd/profiler_legacy.cpp:468:  c10::impl::GenericList eventIValueList(at::AnyType::get());
autograd/profiler_legacy.cpp:480:      "Expected IValue to contain type c10::impl::GenericList");
autograd/profiler_legacy.cpp:484:      c10::str(
autograd/profiler_legacy.cpp:516:  c10::ThreadLocalDebugInfo::_push(c10::DebugInfoKind::PROFILER_STATE, state);
autograd/profiler_legacy.cpp:540:thread_event_lists disableProfilerLegacy(c10::optional<ProfilerDisableOptions> profilerDisableOptions) {
autograd/profiler_legacy.cpp:544:  std::shared_ptr<c10::DebugInfoBase> state;
autograd/profiler_legacy.cpp:546:    state = c10::ThreadLocalDebugInfo::_pop(c10::DebugInfoKind::PROFILER_STATE);
autograd/profiler_legacy.cpp:548:    state = c10::ThreadLocalDebugInfo::_peek(c10::DebugInfoKind::PROFILER_STATE);
autograd/profiler_legacy.cpp:585:      "Expected IValue to contain type c10::impl::GenericList");
autograd/profiler_legacy.cpp:597:    "Expected profiler shapes IValue to contain type c10::impl::GenericList."
autograd/profiler_legacy.cpp:608:        "Expected each profiler shape element to contain shapes of type c10::impl::GenericList.")
autograd/profiler_legacy.cpp:638:  c10::impl::GenericList eventIValueList(at::AnyType::get());
autograd/profiler_legacy.cpp:654:  c10::impl::GenericList shapesList =
autograd/profiler_legacy.cpp:655:      c10::impl::GenericList(at::ListType::create(at::IntType::get()));
autograd/profiler_legacy.cpp:658:    c10::impl::GenericList s = c10::impl::GenericList(at::IntType::get());
autograd/profiler_legacy.cpp:673:      c10::str(
autograd/input_metadata.h:4:#include <c10/core/Device.h>
autograd/input_metadata.h:5:#include <c10/core/DeviceType.h>
autograd/input_metadata.h:6:#include <c10/core/Stream.h>
autograd/input_metadata.h:7:#include <c10/core/impl/DeviceGuardImplInterface.h>
autograd/input_metadata.h:25:    stream_ = c10::impl::getDeviceGuardImpl(device_.type())->getStream(device_);
autograd/input_metadata.h:43:  c10::Stream stream() const {
autograd/input_metadata.h:55:  c10::Stream stream_ = c10::Stream(c10::Stream::Default::DEFAULT, device_);
autograd/FunctionsManual.h:34:bool isFwGradDefined(const c10::optional<Tensor>& t);
autograd/FunctionsManual.h:35:Tensor toLegacyFwGrad(const c10::optional<Tensor>& t);
autograd/FunctionsManual.h:36:Tensor toLegacyPrimal(const c10::optional<Tensor>& t);
autograd/FunctionsManual.h:59:at::Tensor div_tensor_self_backward(Tensor grad, Tensor other, ScalarType self_st, c10::string_view rounding_mode);
autograd/FunctionsManual.h:60:at::Tensor div_tensor_other_backward(Tensor grad, Tensor self, Tensor other, c10::string_view rounding_mode);
autograd/FunctionsManual.h:83:at::IntArrayRef strides_or_error(const Tensor & input, c10::string_view const & input_name);
autograd/FunctionsManual.h:111:Tensor infinitely_differentiable_logit_backward(const Tensor& grad, const Tensor& self, c10::optional<double> eps);
autograd/FunctionsManual.h:113:at::Tensor binary_cross_entropy_with_logits_target_backward(const at::Tensor& grad_output, const at::Tensor& self, const at::Tensor& target, const c10::optional<at::Tensor>& weight, const c10::optional<at::Tensor>& pos_weight, int64_t reduction);
autograd/FunctionsManual.h:117:at::Tensor binary_cross_entropy_double_backward(const at::Tensor & grad_output, const at::Tensor & grad, const at::Tensor & input, const at::Tensor & target, const c10::optional<at::Tensor>& weight, int64_t reduction);
autograd/FunctionsManual.h:118:at::Tensor binary_cross_entropy_double_backward_grad_output(const at::Tensor & grad, const at::Tensor & input, const at::Tensor & target, const c10::optional<at::Tensor>& weight, int64_t reduction);
autograd/FunctionsManual.h:133:at::Tensor index_backward(at::Tensor zeros_like_self, const torch::List<c10::optional<Tensor>>& indices, const at::Tensor& grad);
autograd/FunctionsManual.h:141:    const c10::IntArrayRef& input_sizes,
autograd/FunctionsManual.h:143:    c10::optional<int64_t> start,
autograd/FunctionsManual.h:144:    c10::optional<int64_t> end,
autograd/FunctionsManual.h:163:    const c10::optional<Tensor> & gamma,
autograd/FunctionsManual.h:168:    const c10::optional<Tensor> & running_mean,
autograd/FunctionsManual.h:169:    const c10::optional<Tensor> & running_var,
autograd/FunctionsManual.h:172:    const c10::optional<Tensor> & save_mean,
autograd/FunctionsManual.h:173:    const c10::optional<Tensor> & save_invstd,
autograd/FunctionsManual.h:197:    const c10::optional<Tensor>& gamma,
autograd/FunctionsManual.h:220:    const c10::optional<Tensor>& gamma,
autograd/python_function.cpp:626:    std::vector<c10::IValue>(),
autograd/input_buffer.h:14:#include <c10/util/Optional.h>
autograd/input_buffer.h:15:#include <c10/core/Stream.h>
autograd/input_buffer.h:32:           const c10::optional<c10::Stream>& opt_producer_stream,
autograd/input_buffer.h:33:           const c10::optional<c10::Stream>& opt_consumer_stream);
autograd/engine.cpp:14:#include <c10/util/Exception.h>
autograd/engine.cpp:15:#include <c10/core/Stream.h>
autograd/engine.cpp:16:#include <c10/core/Event.h>
autograd/engine.cpp:17:#include <c10/core/DeviceGuard.h>
autograd/engine.cpp:18:#include <c10/util/Optional.h>
autograd/engine.cpp:19:#include <c10/core/StreamGuard.h>
autograd/engine.cpp:230:#if !defined(_WIN32) || defined(C10_USE_MSVC_STATIC_RUNTIME)
autograd/engine.cpp:360:        C10_LOG_API_USAGE_ONCE("torch.autograd.thread_shutdown");
autograd/engine.cpp:505:    const auto guard = c10::impl::VirtualGuardImpl{c10::DeviceType::CUDA};
autograd/engine.cpp:508:      auto event = c10::Event{c10::DeviceType::CUDA};
autograd/engine.cpp:562:    for (size_t i = 0; i < static_cast<size_t>(c10::DeviceType::COMPILE_TIME_MAX_DEVICE_TYPES); i++) {
autograd/engine.cpp:563:      auto* impl = c10::impl::device_guard_impl_registry[i].load();
autograd/engine.cpp:565:        impl->setDevice(at::Device(static_cast<c10::DeviceType>(i), device));
autograd/engine.cpp:606:    bool input_is_complex = isComplexType(c10::typeMetaToScalarType(metadata.options().dtype()));
autograd/engine.cpp:610:    if (c10::typeMetaToScalarType(metadata.options().dtype()) != grad.scalar_type()) {
autograd/engine.cpp:611:      grad = grad.to(c10::typeMetaToScalarType(metadata.options().dtype()));
autograd/engine.cpp:719:  const auto opt_parent_stream = (*func).stream(c10::DeviceType::CUDA);
autograd/engine.cpp:720:  c10::OptionalStreamGuard parent_stream_guard{opt_parent_stream};
autograd/engine.cpp:788:      const auto opt_next_stream = next.function->stream(c10::DeviceType::CUDA);
autograd/engine.cpp:806:      const auto opt_next_stream = next.function->stream(c10::DeviceType::CUDA);
autograd/engine.cpp:884:    const auto opt_next_stream = roots.at(0).function->stream(c10::DeviceType::CUDA);
autograd/engine.cpp:1065:  c10::DeviceIndex num_devices = 0;
autograd/engine.cpp:1066:  for (const auto& impl_atomic : c10::impl::device_guard_impl_registry) {
autograd/custom_function.h:6:#include <c10/util/flat_hash_map.h>
autograd/custom_function.h:31:/// will be traversed. You can use c10::optional<Tensor> as one of the arguments
autograd/custom_function.h:173:  void operator()(const c10::optional<at::Tensor>& x) {
autograd/custom_function.h:293:    msg += c10::to_string(num_forward_inputs) + ", got " ;
autograd/custom_function.h:294:    msg += c10::to_string(num_outputs) + ")";
autograd/custom_function.h:305:        msg += c10::to_string(i + 1) + ", but the corresponding forward input was not a Variable";
autograd/init.cpp:3:#include <c10/core/DeviceType.h>
autograd/init.cpp:87:  py::enum_<c10::DeviceType>(m, "DeviceType")
autograd/init.cpp:88:      .value("CPU", c10::DeviceType::CPU)
autograd/init.cpp:89:      .value("CUDA", c10::DeviceType::CUDA)
autograd/init.cpp:90:      .value("MKLDNN", c10::DeviceType::MKLDNN)
autograd/init.cpp:91:      .value("OPENGL", c10::DeviceType::OPENGL)
autograd/init.cpp:92:      .value("OPENCL", c10::DeviceType::OPENCL)
autograd/init.cpp:93:      .value("IDEEP", c10::DeviceType::IDEEP)
autograd/init.cpp:94:      .value("HIP", c10::DeviceType::HIP)
autograd/init.cpp:95:      .value("FPGA", c10::DeviceType::FPGA)
autograd/init.cpp:96:      .value("MSNPU", c10::DeviceType::MSNPU)
autograd/init.cpp:97:      .value("XLA", c10::DeviceType::XLA)
autograd/init.cpp:98:      .value("Vulkan", c10::DeviceType::Vulkan)
autograd/init.cpp:99:      .value("Metal", c10::DeviceType::Metal);
autograd/autograd.cpp:133:    c10::optional<bool> retain_graph,
autograd/autograd.cpp:147:    c10::optional<bool> retain_graph,
autograd/profiler_kineto.cpp:101:      c10::Device device) override {
autograd/profiler_kineto.cpp:147:  const auto& state = c10::ThreadLocalDebugInfo::get(
autograd/profiler_kineto.cpp:148:      c10::DebugInfoKind::PROFILER_STATE);
autograd/profiler_kineto.cpp:182:#ifndef C10_MOBILE
autograd/profiler_kineto.cpp:293:  c10::ThreadLocalDebugInfo::_push(c10::DebugInfoKind::PROFILER_STATE, state);
autograd/profiler_kineto.cpp:312:  auto state = c10::ThreadLocalDebugInfo::_pop(c10::DebugInfoKind::PROFILER_STATE);
autograd/profiler_kineto.cpp:357:c10::DeviceType KinetoEvent::deviceType() const {
autograd/profiler_kineto.cpp:360:      return c10::DeviceType::CPU;
autograd/profiler_kineto.cpp:362:      return c10::DeviceType::CUDA;
autograd/profiler_kineto.cpp:364:      return c10::DeviceType::CUDA;
autograd/profiler_kineto.cpp:366:      return c10::DeviceType::CUDA;
autograd/profiler_kineto.cpp:368:      return c10::DeviceType::CPU;
autograd/profiler_kineto.cpp:370:      return c10::DeviceType::CPU;
autograd/TraceTypeManual.cpp:3:#include <c10/core/ScalarType.h>
autograd/TraceTypeManual.cpp:4:#include <c10/util/Optional.h>
autograd/TraceTypeManual.cpp:51:    c10::optional<MemoryFormat> optional_memory_format) {
autograd/TraceTypeManual.cpp:68:    c10::optional<MemoryFormat> optional_memory_format) {
autograd/python_function.h:12:#include <c10/util/Optional.h>
autograd/python_function.h:13:#include <c10/core/DeviceGuard.h>
autograd/python_function.h:36:  // capture Python Error in autograd, remove this when c10 thread pool
autograd/VariableTypeUtils.h:142:    // It is useful as it avoids the creation of the temporary c10<optional> which makes
autograd/VariableTypeUtils.h:150:                                                 c10::nullopt, creation_meta, allow_tensor_metadata_change);
autograd/VariableTypeUtils.h:153:                                                 c10::nullopt, creation_meta, allow_tensor_metadata_change);
autograd/VariableTypeUtils.h:162:  c10::optional<ViewInfo> new_bw_info;
autograd/VariableTypeUtils.h:163:  c10::optional<ViewInfo> new_fw_info;
autograd/VariableTypeUtils.h:206:  c10::optional<ViewInfo> new_bw_info = c10::nullopt;
autograd/VariableTypeUtils.h:207:  c10::optional<ViewInfo> new_fw_info = c10::nullopt;
autograd/VariableTypeUtils.h:267:inline void check_no_requires_grad(const c10::optional<Tensor>& tensor, const char* name) {
autograd/VariableTypeUtils.h:279:inline void check_no_requires_grad(const c10::List<c10::optional<Tensor>>& tensors, const char* name) {
autograd/VariableTypeUtils.h:280:  for (c10::optional<Tensor> tensor : tensors) {
autograd/VariableTypeUtils.h:294:inline std::vector<SavedVariable> make_saved_variable_list(const c10::List<c10::optional<at::Tensor>>& tensors) {
autograd/VariableTypeUtils.h:295:  return fmap(tensors, [](const c10::optional<Tensor>& tensor) -> SavedVariable {
autograd/profiler_utils.h:11:std::unordered_map<std::string, c10::IValue> TORCH_API saveExtraArgs(const at::RecordFunction& fn);
autograd/profiler_utils.h:14:                                const std::unordered_map<std::string, c10::IValue> &extra_args);
autograd/variable.cpp:15:#include <c10/util/Exception.h>
autograd/variable.cpp:31:  c10::optional<ViewInfo> backward_info,
autograd/variable.cpp:32:  c10::optional<ViewInfo> forward_info,
autograd/variable.cpp:108:struct ConcreteAutogradMetaFactory : public c10::impl::AutogradMetaFactory {
autograd/variable.cpp:109:  std::unique_ptr<c10::AutogradMetaInterface> make() const override {
autograd/variable.cpp:119:static c10::impl::AutogradMetaFactoryRegisterer meta_factory_registerer(&meta_factory);
autograd/variable.cpp:210:    c10::raw::intrusive_ptr::incref(self.unsafeGetTensorImpl());
autograd/variable.cpp:211:    auto intrusive_from_this = c10::intrusive_ptr<at::TensorImpl>::reclaim(self.unsafeGetTensorImpl());
autograd/variable.cpp:260:      const c10::VariableVersion& version_counter) {
autograd/variable.cpp:270:  const c10::VariableVersion& version_counter(const Variable& self) {
autograd/variable.cpp:507:      msg = c10::str("Output ", diff_view_meta->output_nr_, " of ", grad_fn->name(), " is a view and ",
autograd/variable.cpp:510:      msg = c10::str("A view was created in no_grad mode and ", modified_obj, " modified inplace with grad mode enabled.");
autograd/variable.cpp:520:        msg = c10::str(msg, " Given that this use case is ambiguous and error-prone, it is deprecated and will be forbidden"
autograd/variable.cpp:526:        msg = c10::str(msg, " This view was created inside a custom Function (or because an input was returned as-is) and the"
autograd/variable.cpp:531:        msg = c10::str(msg, " This view is an output of a function that "
autograd/function.h:15:#include <c10/util/Exception.h>
autograd/function.h:152:            std::vector<c10::IValue>(inputs.begin(), inputs.end()),
autograd/function.h:215:  c10::optional<c10::Stream> stream(const c10::DeviceType device_type) {
autograd/function.h:220:    return c10::nullopt;
autograd/function.h:467:  void operator()(const c10::optional<Variable>& variable) {
autograd/edge.h:7:#include <c10/util/hash.h>
autograd/edge.h:53:    return c10::get_hash(edge.function, edge.input_nr);
Device.cpp:11:#include <c10/util/Exception.h>
Stream.cpp:37:  return THPDevice_New(c10::Stream::unpack(self->cdata).device());
WindowsTorchApiMacro.h:3:#include <c10/macros/Export.h>
MemoryFormat.h:5:#include <c10/core/MemoryFormat.h>
TypeInfo.cpp:11:#include <c10/util/Exception.h>
TypeInfo.cpp:24:  self_->type = c10::toValueType(type);
CudaIPCTypes.cpp:8:#include <c10/util/win32-headers.h>
CudaIPCTypes.cpp:149:    C10_CUDA_CHECK(cudaEventCreateWithFlags(
CudaIPCTypes.cpp:153:    C10_CUDA_CHECK(cudaEventRecord(
CudaIPCTypes.cpp:154:        event_, c10::cuda::getCurrentCUDAStream(device.index())));
CudaIPCTypes.cpp:157:    auto stream = c10::cuda::getCurrentCUDAStream(device.index());
CudaIPCTypes.cpp:158:    C10_CUDA_CHECK(cudaStreamSynchronize(stream));
CudaIPCTypes.cpp:164:  auto stream = c10::cuda::getCurrentCUDAStream(device.index());
CudaIPCTypes.cpp:165:  C10_CUDA_CHECK(cudaStreamSynchronize(stream));
CudaIPCTypes.cpp:240:namespace c10 {
CudaIPCTypes.cpp:244:} // namespace c10
tensor/python_tensor.h:4:#include <c10/core/ScalarType.h>
tensor/python_tensor.h:5:#include <c10/core/DispatchKey.h>
tensor/python_tensor.h:7:namespace c10 {
tensor/python_tensor.h:32:c10::DispatchKey get_default_dispatch_key();
tensor/python_tensor.cpp:384:c10::DispatchKey get_default_dispatch_key() {
generic/StorageSharing.cpp:4:#include <c10/cuda/CUDAGuard.h>
generic/StorageSharing.cpp:249:    void *base_ptr = c10::cuda::CUDACachingAllocator::getBaseAllocation(THWStorage_(data)(LIBRARY_STATE storage), &base_size);
generic/StorageSharing.cpp:335:  } catch (c10::Error& err) {
generic/StorageSharing.cpp:394:        cudaStreamWaitEvent(c10::cuda::getCurrentCUDAStream(device), event, 0));
generic/StorageSharing.cpp:401:  std::shared_ptr<void> basePtr = c10::cuda::CUDACachingAllocator::getIpcDevPtr(s_handle);
generic/StorageSharing.cpp:427:        cudaStreamSynchronize(c10::cuda::getCurrentCUDAStream(device));
generic/StorageSharing.cpp:441:        } catch (c10::Error& err) {
generic/StorageSharing.cpp:467:  return PyLong_FromVoidPtr(c10::raw::intrusive_ptr::make_weak(storage));
generic/StorageSharing.cpp:477:  if (auto* storage = c10::raw::weak_intrusive_ptr::lock(weak_storage)) {
generic/StorageSharing.cpp:493:  c10::raw::weak_intrusive_ptr::decref(weak_storage);
generic/StorageSharing.cpp:504:  return PyBool_FromLong(c10::raw::weak_intrusive_ptr::use_count(weak_storage) == 0);
generic/serialization.cpp:6:#include <c10/cuda/CUDAGuard.h>
generic/serialization.cpp:16:  c10::cuda::CUDAGuard guard(self->device());
generic/serialization.cpp:88:  c10::cuda::OptionalCUDAGuard guard;
MemoryFormat.cpp:7:#include <c10/core/MemoryFormat.h>
generic/Storage.cpp:43:  c10::Allocator* allocator = nullptr;
generic/Storage.cpp:50:      allocator = static_cast<c10::Allocator*>(PyLong_AsVoidPtr(allocator_ptr));
generic/Storage.cpp:173:    c10::raw::intrusive_ptr::incref(old_storage);
generic/Storage.cpp:174:    at::Storage new_storage(c10::make_intrusive<at::StorageImpl>(
generic/Storage.cpp:175:        c10::StorageImpl::use_byte_size_t(),
generic/Storage.cpp:185:              c10::raw::intrusive_ptr::decref(static_cast<at::StorageImpl*>(s));
QScheme.cpp:7:#include <c10/core/QScheme.h>
python_dimname.cpp:4:#include <c10/util/flat_hash_map.h>
jit/runtime/static/impl.h:5:#include <c10/core/CPUAllocator.h>
jit/runtime/static/impl.h:72:  std::unique_ptr<c10::FunctionSchema> schema;
jit/runtime/static/impl.h:119:  c10::IValue run(
jit/runtime/static/impl.h:120:      const std::vector<c10::IValue>& args,
jit/runtime/static/impl.h:121:      const std::unordered_map<std::string, c10::IValue>& kwargs);
jit/runtime/static/impl.h:124:      const std::vector<c10::IValue>& args,
jit/runtime/static/impl.h:125:      const std::unordered_map<std::string, c10::IValue>& kwargs,
jit/runtime/static/impl.h:130:      const std::vector<c10::IValue>& args,
jit/runtime/static/impl.h:131:      const std::unordered_map<std::string, c10::IValue>& kwargs,
jit/runtime/static/impl.h:145:      const std::vector<c10::IValue>& args,
jit/runtime/static/impl.h:146:      const std::unordered_map<std::string, c10::IValue>& kwargs,
jit/runtime/static/impl.h:244:  std::vector<std::pair<size_t, std::vector<c10::StorageImpl*>>>
jit/runtime/static/impl.h:292:  c10::optional<Operation> op_;
jit/runtime/static/fusion.cpp:28:    RECORD_FUNCTION("Static Runtime", std::vector<c10::IValue>());
jit/runtime/static/fusion.cpp:151:c10::optional<Node*> tryMerge(
jit/runtime/static/fusion.cpp:156:    return c10::nullopt;
jit/runtime/static/fusion.cpp:173:      return c10::nullopt;
jit/runtime/static/ops.h:25:C10_DECLARE_REGISTRY(SROperatorRegistry, SROperatorFunctor);
jit/runtime/static/ops.h:42:  C10_REGISTER_CLASS(SROperatorRegistry, name, SROperatorFunctor_##id);
jit/runtime/static/ops.h:54:  C10_REGISTER_CLASS(SRViewOperatorRegistry, name, SROperatorFunctor_##id);
jit/runtime/static/ops.h:56:C10_DECLARE_REGISTRY(SRViewOperatorRegistry, SROperatorFunctor);
jit/runtime/static/impl.cpp:5:#include <c10/core/CPUAllocator.h>
jit/runtime/static/impl.cpp:39:    if (n->kind() == c10::Symbol::fromQualString("prim::GetAttr")) {
jit/runtime/static/impl.cpp:78:std::unique_ptr<c10::FunctionSchema> RemoveSelfFromSchema(
jit/runtime/static/impl.cpp:79:    const c10::FunctionSchema& s) {
jit/runtime/static/impl.cpp:82:  return std::make_unique<c10::FunctionSchema>(s.cloneWithArguments(args));
jit/runtime/static/impl.cpp:350:  const c10::FunctionSchema& s = method.function().getSchema();
jit/runtime/static/impl.cpp:438:  std::vector<c10::IValue> stack;
jit/runtime/static/impl.cpp:444:  c10::IValue v = run(stack, std::unordered_map<std::string, c10::IValue>());
jit/runtime/static/impl.cpp:459:c10::IValue StaticRuntime::run(
jit/runtime/static/impl.cpp:460:    const std::vector<c10::IValue>& args,
jit/runtime/static/impl.cpp:461:    const std::unordered_map<std::string, c10::IValue>& kwargs) {
jit/runtime/static/impl.cpp:478:    std::vector<c10::IValue> s = args;
jit/runtime/static/impl.cpp:506:    std::vector<c10::IValue> outputs;
jit/runtime/static/impl.cpp:511:    return c10::ivalue::Tuple::create(outputs);
jit/runtime/static/impl.cpp:517:    const std::vector<c10::IValue>& args,
jit/runtime/static/impl.cpp:518:    const std::unordered_map<std::string, c10::IValue>& kwargs,
jit/runtime/static/impl.cpp:566:    const std::vector<c10::IValue>& args,
jit/runtime/static/impl.cpp:567:    const std::unordered_map<std::string, c10::IValue>& kwargs,
jit/runtime/static/impl.cpp:584:    const std::vector<c10::IValue>& args,
jit/runtime/static/impl.cpp:585:    const std::unordered_map<std::string, c10::IValue>& kwargs,
jit/runtime/static/impl.cpp:721:  std::unordered_set<c10::StorageImpl*> managed_storage_impls;
jit/runtime/static/impl.cpp:741:              std::make_pair<size_t, std::vector<c10::StorageImpl*>>(0, {impl});
jit/runtime/static/impl.cpp:759:  return (nbytes + c10::gAlignment - 1) & (~(c10::gAlignment - 1));
jit/runtime/static/impl.cpp:763:  at::Allocator* allocator = c10::GetCPUCachingAllocator();
jit/runtime/static/init.cpp:38:            std::vector<c10::IValue> arg_ivalues{args.begin(), args.end()};
jit/runtime/static/init.cpp:39:            std::unordered_map<std::string, c10::IValue> kwarg_ivalues{
jit/runtime/static/init.cpp:41:            c10::IValue ret = self.run(arg_ivalues, kwarg_ivalues);
jit/runtime/static/init.cpp:51:            std::vector<c10::IValue> arg_ivalues{args.begin(), args.end()};
jit/runtime/static/init.cpp:52:            std::unordered_map<std::string, c10::IValue> kwarg_ivalues{
jit/runtime/static/init.cpp:63:            std::vector<c10::IValue> arg_ivalues{args.begin(), args.end()};
jit/runtime/static/init.cpp:64:            std::unordered_map<std::string, c10::IValue> kwarg_ivalues{
jit/runtime/slice_indices_adjust.cpp:3:#include <c10/util/Exception.h>
jit/runtime/static/ops.cpp:29:      auto impl = c10::make_intrusive<c10::TensorImpl>(
jit/runtime/static/ops.cpp:30:          c10::Storage(self.storage()), self.key_set(), self.dtype());
jit/runtime/static/ops.cpp:34:    c10::TensorImpl* impl = out.unsafeGetTensorImpl();
jit/runtime/static/ops.cpp:47:    c10::TensorImpl* impl = out.unsafeGetTensorImpl();
jit/runtime/static/ops.cpp:60:      start_dim < 0 ? c10::maybe_wrap_dim(start_dim, self.dim()) : start_dim;
jit/runtime/static/ops.cpp:61:  end_dim = end_dim < 0 ? c10::maybe_wrap_dim(end_dim, self.dim()) : end_dim;
jit/runtime/static/ops.cpp:104:C10_DEFINE_REGISTRY(SROperatorRegistry, SROperatorFunctor);
jit/runtime/static/ops.cpp:106:C10_DEFINE_REGISTRY(SRViewOperatorRegistry, SROperatorFunctor);
jit/runtime/static/ops.cpp:367:    at::native::resize_as_(out_t, in0_t, c10::nullopt);
jit/runtime/static/ops.cpp:512:  if (n->kind() == c10::Symbol::fromQualString("aten::transpose")) {
jit/runtime/static/ops.cpp:519:  } else if (n->kind() == c10::Symbol::fromQualString("aten::flatten")) {
jit/runtime/static/ops.cpp:582:  } else if (n->kind() == c10::Symbol::fromQualString("aten::permute")) {
jit/runtime/static/ops.cpp:588:  } else if (n->kind() == c10::Symbol::fromQualString("aten::reshape")) {
jit/runtime/static/ops.cpp:594:  } else if (n->kind() == c10::Symbol::fromQualString("aten::slice")) {
jit/runtime/static/ops.cpp:603:  } else if (n->kind() == c10::Symbol::fromQualString("aten::narrow")) {
jit/runtime/static/ops.cpp:634:  } else if (n->kind() == c10::Symbol::fromQualString("aten::to")) {
jit/runtime/static/ops.cpp:643:            at::native::to(in0_t, in1_i, in2_i, in3_i, c10::nullopt);
jit/runtime/exception_message.h:2:#include <c10/util/Exception.h>
jit/runtime/exception_message.h:21:  auto c10_error = dynamic_cast<const c10::Error*>(&msg.e_);
jit/runtime/exception_message.h:22:  if (c10_error) {
jit/runtime/exception_message.h:23:    out << c10_error->what_without_backtrace();
jit/runtime/register_distributed_ops.cpp:39:  IValue emptyTuple(c10::ivalue::Tuple::create({}));
jit/runtime/register_distributed_ops.cpp:40:  IValue emptyDict{c10::impl::GenericDict(AnyType::get(), AnyType::get())};
jit/runtime/register_distributed_ops.cpp:54:      c10::getCustomClassType<c10::intrusive_ptr<dist_rpc::WorkerInfo>>() ==
jit/runtime/register_distributed_ops.cpp:62:  auto qualifiedName = c10::QualifiedName(qualifiedNameIValue.toStringRef());
jit/runtime/register_distributed_ops.cpp:98:      throw std::runtime_error(c10::str(
jit/runtime/register_distributed_ops.cpp:169:        c10::static_intrusive_pointer_cast<c10::RRefInterface>(rrefPtr));
jit/runtime/register_distributed_ops.cpp:172:        c10::str(rpc_op, "() is not supported in TorchScript!'"));
jit/runtime/register_distributed_ops.cpp:187:                 c10::dynamic_intrusive_pointer_cast<dist_rpc::OwnerRRef>(rref)
jit/runtime/register_distributed_ops.cpp:190:             res = c10::dynamic_intrusive_pointer_cast<dist_rpc::UserRRef>(rref)
jit/runtime/register_distributed_ops.cpp:204:               c10::static_intrusive_pointer_cast<dist_rpc::OwnerRRef>(rref)
jit/runtime/operator_options.h:8:using AliasAnalysisKind = c10::AliasAnalysisKind;
jit/runtime/register_ops_utils.cpp:8:c10::impl::GenericList make_result_list<IValue>(const TypePtr& elemType) {
jit/runtime/register_ops_utils.cpp:9:  return c10::impl::GenericList(elemType);
jit/runtime/register_ops_utils.cpp:15:  c10::List<at::Tensor> list = pop(stack).to<c10::List<at::Tensor>>();
jit/runtime/register_ops_utils.cpp:33:  c10::List<at::Tensor> list = pop(stack).to<c10::List<at::Tensor>>();
jit/runtime/register_ops_utils.cpp:45:  c10::List<at::Tensor> b = pop(stack).to<c10::List<at::Tensor>>();
jit/runtime/register_ops_utils.cpp:46:  c10::List<at::Tensor> a = pop(stack).to<c10::List<at::Tensor>>();
jit/runtime/register_ops_utils.cpp:52:  c10::List<at::Tensor> b = pop(stack).to<c10::List<at::Tensor>>();
jit/runtime/register_ops_utils.cpp:53:  c10::List<at::Tensor> a = pop(stack).to<c10::List<at::Tensor>>();
jit/runtime/register_ops_utils.cpp:60:  c10::List<at::Tensor> list = pop(stack).toTensorList();
jit/runtime/register_ops_utils.cpp:75:  c10::List<at::Tensor> list = pop(stack).toTensorList();
jit/runtime/register_ops_utils.cpp:89:  c10::List<at::Tensor> list = pop(stack).to<c10::List<at::Tensor>>();
jit/runtime/register_ops_utils.cpp:160:  auto result = c10::impl::GenericList(ty);
jit/runtime/register_ops_utils.cpp:198:    throw c10::Error(
jit/runtime/register_ops_utils.cpp:199:        "Cannot convert float " + c10::to_string(a) + " to integer", "");
jit/runtime/register_ops_utils.cpp:259:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:266:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:273:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:291:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:304:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:321:  c10::List<IValue> b = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:322:  c10::List<IValue> a = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:331:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:337:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:344:  c10::List<IValue> a = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:351:  c10::List<IValue> a = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:356:  c10::List<IValue> b = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:357:  c10::List<IValue> a = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:359:  c10::List<IValue> ret = make_result_list<IValue>(a.elementType());
jit/runtime/register_ops_utils.cpp:373:  c10::List<IValue> b = pop(stack).to<List<IValue>>();
jit/runtime/register_ops_utils.cpp:374:  c10::List<IValue> a = pop(stack).to<List<IValue>>();
jit/runtime/register_ops_utils.cpp:381:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:398:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:400:  c10::List<IValue> ret = make_result_list<IValue>(list.elementType());
jit/runtime/register_ops_utils.cpp:414:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:417:  c10::List<IValue> ret = make_result_list<IValue>(list.elementType());
jit/runtime/register_ops_utils.cpp:434:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/register_ops_utils.cpp:438:  c10::List<IValue> sliced_list = make_result_list<IValue>(list.elementType());
jit/runtime/register_ops_utils.cpp:455:  c10::List<IValue> list = pop(stack).to<c10::List<IValue>>();
jit/runtime/graph_executor_impl.h:5:#include <c10/util/Exception.h>
jit/runtime/graph_executor_impl.h:75:  c10::intrusive_ptr<Future> runAsync(
jit/runtime/symbolic_script.h:5:#include <c10/util/Optional.h>
jit/runtime/symbolic_script.h:6:#include <c10/util/StringUtil.h>
jit/runtime/symbolic_script.h:16:TORCH_API c10::optional<GradientPair> gradientInfoForSchema(
jit/runtime/register_prim_ops.cpp:1:#include <c10/util/Optional.h>
jit/runtime/register_prim_ops.cpp:34:    c10::optional<int64_t> start,
jit/runtime/register_prim_ops.cpp:35:    c10::optional<int64_t> end,
jit/runtime/register_prim_ops.cpp:56:c10::List<std::string> splitNoneSeparator(const std::string& string) {
jit/runtime/register_prim_ops.cpp:57:  c10::List<std::string> splits;
jit/runtime/register_prim_ops.cpp:93:           c10::List<std::string> chars;
jit/runtime/register_prim_ops.cpp:316:           int64_t val = static_cast<int64_t>(c10::stoll(s->string(), &sz));
jit/runtime/register_prim_ops.cpp:368:           double b = c10::stod(s->string(), &sz);
jit/runtime/register_prim_ops.cpp:518:           RECORD_FUNCTION("get_device", std::vector<c10::IValue>());
jit/runtime/register_prim_ops.cpp:528:           RECORD_FUNCTION("storage_offset", std::vector<c10::IValue>());
jit/runtime/register_prim_ops.cpp:538:           RECORD_FUNCTION("is_contiguous", std::vector<c10::IValue>());
jit/runtime/register_prim_ops.cpp:912:           auto indices = pop(stack).to<List<c10::optional<at::Tensor>>>();
jit/runtime/register_prim_ops.cpp:925:           auto indices = pop(stack).to<List<c10::optional<at::Tensor>>>();
jit/runtime/register_prim_ops.cpp:938:           auto indices = pop(stack).to<List<c10::optional<at::Tensor>>>();
jit/runtime/register_prim_ops.cpp:950:           auto indices = pop(stack).to<List<c10::optional<at::Tensor>>>();
jit/runtime/register_prim_ops.cpp:964:           c10::optional<at::ScalarType> scalarType =
jit/runtime/register_prim_ops.cpp:966:           c10::optional<c10::Device> device =
jit/runtime/register_prim_ops.cpp:967:               pop(stack).toOptional<c10::Device>();
jit/runtime/register_prim_ops.cpp:981:           c10::optional<at::ScalarType> scalarType =
jit/runtime/register_prim_ops.cpp:983:           c10::optional<c10::Device> device = c10::nullopt;
jit/runtime/register_prim_ops.cpp:1099:  auto values = c10::impl::GenericList(dict.valueType());
jit/runtime/register_prim_ops.cpp:1108:  auto keys = c10::impl::GenericList(dict.keyType());
jit/runtime/register_prim_ops.cpp:1194:      c10::ivalue::Tuple::create({head_item->key(), head_item->value()});
jit/runtime/register_prim_ops.cpp:1226:      c10::impl::GenericList(TupleType::create({key_type, value_type}));
jit/runtime/register_prim_ops.cpp:1229:    items.emplace_back(c10::ivalue::Tuple::create({item.key(), item.value()}));
jit/runtime/register_prim_ops.cpp:1242:  auto dict = c10::impl::GenericDict(
jit/runtime/register_prim_ops.cpp:1363:c10::AliasAnalysisKind aliasAnalysisFromSchema() {
jit/runtime/register_prim_ops.cpp:1364:  return c10::AliasAnalysisKind::FROM_SCHEMA;
jit/runtime/register_prim_ops.cpp:1437:         c10::optional<std::string> separator,
jit/runtime/register_prim_ops.cpp:1451:        c10::List<std::string> splits;
jit/runtime/register_prim_ops.cpp:1473:        c10::List<std::string> splits;
jit/runtime/register_prim_ops.cpp:1896:        c10::List<std::string> splits;
jit/runtime/register_prim_ops.cpp:1918:      [](const std::string& string, const c10::List<std::string>& values) {
jit/runtime/graph_executor.h:12:C10_DECLARE_bool(torch_jit_enable_new_executor);
jit/runtime/graph_executor.h:61:  c10::intrusive_ptr<Future> runAsync(
jit/runtime/profiling_record.h:82:using ::c10::TensorTypePtr;
jit/runtime/profiling_record.h:94:  std::map<c10::ShapeSymbol, std::map<Dimension, c10::ShapeSymbol>>
jit/runtime/profiling_record.h:104:  c10::ShapeSymbol partitionSetByDimension(
jit/runtime/profiling_record.h:106:      c10::ShapeSymbol symbol) {
jit/runtime/profiling_record.h:110:      auto new_sym = c10::ShapeSymbol::newSymbol();
jit/runtime/profiling_record.h:119:  std::map<Dimension, c10::ShapeSymbol>& getSetForSymbol(c10::ShapeSymbol s) {
jit/runtime/profiling_record.h:139:  bool isBound(c10::ShapeSymbol s) {
jit/runtime/profiling_record.h:148:  Dimension getValue(c10::ShapeSymbol s) {
jit/runtime/profiling_record.h:154:  void assign(c10::ShapeSymbol s, Dimension v) {
jit/runtime/profiling_record.h:158:  std::map<c10::ShapeSymbol, Dimension> data_;
jit/runtime/profiling_record.h:170:      const c10::SymbolicShape& sym_shapes);
jit/runtime/profiling_record.h:195:  c10::SymbolicShape mergeSymbolicShapes(
jit/runtime/profiling_record.h:196:      const c10::SymbolicShape& new_sizes,
jit/runtime/profiling_record.h:197:      const c10::SymbolicShape& sym_shapes,
jit/runtime/autodiff.cpp:4:#include <c10/util/Exception.h>
jit/runtime/autodiff.cpp:76:    return n->get<c10::List<int64_t>>(attr::size) &&
jit/runtime/autodiff.cpp:139:static c10::optional<std::vector<Value*>> build_script_grad(
jit/runtime/autodiff.cpp:145:    return c10::nullopt;
jit/runtime/autodiff.cpp:149:    return c10::nullopt;
jit/runtime/autodiff.cpp:249:           graph->insertConstant(c10::List<bool>({true, true, true}))});
jit/runtime/autodiff.cpp:279:           graph->insertConstant(c10::List<bool>({true, true, true}))});
jit/runtime/argument_spec.h:5:#include <c10/util/hash.h>
jit/runtime/argument_spec.h:49:        c10::optional<size_t>(dim()),
jit/runtime/argument_spec.h:76:        c10::hash_combine(num_flat_tensor_inputs, num_flat_optional_inputs);
jit/runtime/argument_spec.h:84:    hash_code = c10::hash_combine(hash_code, is_present);
jit/runtime/argument_spec.h:113:    hash_code = c10::hash_combine(hash_code, arg_data);
jit/runtime/argument_spec.h:274:    hash_code = c10::hash_combine(0, ninputs);
jit/runtime/argument_spec.h:276:      hash_code = c10::hash_combine(hash_code, d);
jit/runtime/argument_spec.h:357:        c10::VaryingShape<int64_t>{sizes()},
jit/runtime/argument_spec.h:358:        c10::VaryingShape<int64_t>{strides()},
jit/runtime/argument_spec.h:435:inline c10::optional<int8_t> convertOptional(
jit/runtime/argument_spec.h:436:    c10::optional<c10::ScalarType> const& from) {
jit/runtime/argument_spec.h:437:  return (from) ? c10::optional<int8_t>(static_cast<int8_t>(*from))
jit/runtime/argument_spec.h:438:                : c10::optional<int8_t>{};
jit/runtime/argument_spec.h:447:struct hash<c10::VaryingShape<T>> {
jit/runtime/argument_spec.h:448:  size_t operator()(const c10::VaryingShape<T>& vs) const {
jit/runtime/argument_spec.h:449:    return c10::get_hash(
jit/runtime/argument_spec.h:451:        vs.size() ? vs.sizes().value() : std::vector<c10::optional<T>>());
jit/runtime/argument_spec.h:456:struct hash<c10::TensorType> {
jit/runtime/argument_spec.h:457:  size_t operator()(const c10::TensorType& ptt) const {
jit/runtime/argument_spec.h:458:    return c10::get_hash<
jit/runtime/argument_spec.h:459:        c10::optional<int8_t>,
jit/runtime/argument_spec.h:460:        c10::VaryingShape<int64_t>,
jit/runtime/argument_spec.h:461:        c10::VaryingShape<int64_t>,
jit/runtime/argument_spec.h:462:        c10::optional<bool>>(
jit/runtime/custom_operator.h:22:  RegisterOperators(std::vector<c10::optional<Operator>> operators) {
jit/runtime/custom_operator.h:23:    for (c10::optional<Operator>& o : operators) {
jit/runtime/register_cuda_ops.cpp:15:c10::AliasAnalysisKind aliasAnalysisFromSchema() {
jit/runtime/register_cuda_ops.cpp:16:  return c10::AliasAnalysisKind::FROM_SCHEMA;
jit/runtime/register_cuda_ops.cpp:24:          auto s = c10::cuda::getCurrentCUDAStream(idx);
jit/runtime/register_cuda_ops.cpp:33:          auto s = c10::cuda::getDefaultCUDAStream(idx);
jit/runtime/register_cuda_ops.cpp:41:          auto v = c10::cuda::current_device();
jit/runtime/register_cuda_ops.cpp:50:          c10::cuda::set_device(static_cast<c10::DeviceIndex>(idx));
jit/runtime/register_cuda_ops.cpp:71:          // c10::cuda::setCurrentCUDAStream, the jit::CUDAStream object needs
jit/runtime/register_cuda_ops.cpp:72:          // to be converted to c10::cuda::CUDAStream. Since the latter cannot
jit/runtime/register_cuda_ops.cpp:74:          // achieved by packing the c10::cuda::CUDAStream instance contained
jit/runtime/register_cuda_ops.cpp:79:          auto unpacked = c10::cuda::CUDAStream::unpack(packed);
jit/runtime/register_cuda_ops.cpp:80:          c10::cuda::setCurrentCUDAStream(unpacked);
jit/runtime/profiling_graph_executor_impl.h:25:  c10::optional<ExecutionPlan>
jit/runtime/profiling_graph_executor_impl.h:27:  c10::optional<ExecutionPlan> optimized_plan_;
jit/runtime/profiling_graph_executor_impl.h:29:  c10::optional<ExecutionPlan> fallback_plan_;
jit/runtime/profiling_graph_executor_impl.h:39:  c10::optional<size_t> remaining_bailout_depth_;
jit/runtime/profiling_record.cpp:57:    const c10::SymbolicShape& sym_shapes) {
jit/runtime/profiling_record.cpp:131:c10::SymbolicShape ProfilingRecord::mergeSymbolicShapes(
jit/runtime/profiling_record.cpp:132:    const c10::SymbolicShape& new_sizes,
jit/runtime/profiling_record.cpp:133:    const c10::SymbolicShape& sym_shapes,
jit/runtime/profiling_record.cpp:135:  std::vector<c10::ShapeSymbol> new_symbols;
jit/runtime/profiling_record.cpp:153:  return c10::SymbolicShape(new_symbols);
jit/runtime/profiling_record.cpp:265:      if (i->type()->kind() == c10::TypeKind::TensorType &&
jit/runtime/operator.h:2:// once C10 exists this can be removed, or stubbed out, but we need
jit/runtime/operator.h:10:#include <c10/util/Exception.h>
jit/runtime/operator.h:31:using ::c10::FunctionSchema;
jit/runtime/operator.h:32:using ::c10::Symbol;
jit/runtime/operator.h:45: * with a wrapper for each c10 operator. The c10 operator library registers
jit/runtime/operator.h:46: * those wrappers using listeners in register_c10_ops.cpp.
jit/runtime/operator.h:48: * the jit library but have the JIT operator lookup look into the c10 library
jit/runtime/operator.h:53:// ops) or a c10 operator, allowing some common operations and abstracting away
jit/runtime/operator.h:57:  struct C10Operator final {
jit/runtime/operator.h:58:    c10::OperatorHandle handle_;
jit/runtime/operator.h:63:    mutable c10::optional<c10::AliasAnalysisKind> alias_analysis_;
jit/runtime/operator.h:68:    mutable c10::either<FunctionSchema, UnparsedFunctionSchema> schema_;
jit/runtime/operator.h:70:    c10::either<Operation, OperationCreator> op_;
jit/runtime/operator.h:74:  Operator(c10::OperatorHandle opHandle, Operation operation)
jit/runtime/operator.h:75:      : op_(c10::make_left<C10Operator, JitOnlyOperator>(
jit/runtime/operator.h:76:            C10Operator{opHandle, std::move(operation)})) {}
jit/runtime/operator.h:81:      c10::AliasAnalysisKind alias_analysis)
jit/runtime/operator.h:82:      : op_(c10::make_right<C10Operator, JitOnlyOperator>(JitOnlyOperator{
jit/runtime/operator.h:83:            c10::make_right<FunctionSchema, UnparsedFunctionSchema>(
jit/runtime/operator.h:85:            c10::make_left<Operation, OperationCreator>(std::move(op))})) {}
jit/runtime/operator.h:87:  C10_DEPRECATED_MESSAGE(
jit/runtime/operator.h:92:      c10::AliasAnalysisKind alias_analysis)
jit/runtime/operator.h:101:      c10::AliasAnalysisKind alias_analysis)
jit/runtime/operator.h:102:      : op_(c10::make_right<C10Operator, JitOnlyOperator>(JitOnlyOperator{
jit/runtime/operator.h:103:            c10::make_right<FunctionSchema, UnparsedFunctionSchema>(
jit/runtime/operator.h:105:            c10::make_right<Operation, OperationCreator>(op_creator)})) {}
jit/runtime/operator.h:114:      c10::AliasAnalysisKind alias_analysis)
jit/runtime/operator.h:115:      : op_(c10::make_right<C10Operator, JitOnlyOperator>(JitOnlyOperator{
jit/runtime/operator.h:116:            c10::make_left<FunctionSchema, UnparsedFunctionSchema>(
jit/runtime/operator.h:118:            c10::make_right<Operation, OperationCreator>(op_creator)})) {}
jit/runtime/operator.h:122:        [](const C10Operator& op) { return op.op_; },
jit/runtime/operator.h:134:        [](const C10Operator& op) -> const FunctionSchema& {
jit/runtime/operator.h:148:            op.schema_ = c10::make_left<FunctionSchema, UnparsedFunctionSchema>(
jit/runtime/operator.h:155:  bool isC10Op() const {
jit/runtime/operator.h:159:  c10::AliasAnalysisKind aliasAnalysisKind() const {
jit/runtime/operator.h:161:    c10::AliasAnalysisKind alias_analysis = schemaRef.aliasAnalysis();
jit/runtime/operator.h:174:        [](const C10Operator&) { return true; },
jit/runtime/operator.h:193:  c10::either<C10Operator, JitOnlyOperator> op_;
jit/runtime/operator.h:205:    const c10::OperatorName& full_name);
jit/runtime/operator.h:216:// Ensure the thing that registers c10 ops is defined.
jit/runtime/operator.h:217:// Otherwise, our registry will not have c10 ops. You can run into this
jit/runtime/operator.h:220:// This fn is defined in register_c10_ops.cpp
jit/runtime/operator.h:221:TORCH_API void ensure_c10_registerer_defined();
jit/runtime/operator.h:224:TORCH_API bool aliasAnalysisHasSpecialCaseFor(c10::Symbol sym);
jit/runtime/operator.h:231:c10::optional<Operator> OperatorGenerator(
jit/runtime/operator.h:235:  return c10::optional<Operator>(Operator(
jit/runtime/operator.h:240:c10::optional<Operator> OperatorGenerator(
jit/runtime/operator.h:244:  return c10::nullopt;
jit/runtime/register_special_ops.cpp:6:#include <c10/core/DefaultDtype.h>
jit/runtime/register_special_ops.cpp:15:#include <c10/core/ScalarType.h>
jit/runtime/register_special_ops.cpp:26:c10::AliasAnalysisKind aliasAnalysisFromSchema() {
jit/runtime/register_special_ops.cpp:27:  return c10::AliasAnalysisKind::FROM_SCHEMA;
jit/runtime/register_special_ops.cpp:30:c10::AliasAnalysisKind aliasAnalysisConservative() {
jit/runtime/register_special_ops.cpp:31:  return c10::AliasAnalysisKind::CONSERVATIVE;
jit/runtime/register_special_ops.cpp:34:void checkListInputType(const c10::TypePtr& elem_type, bool empty_list) {
jit/runtime/register_special_ops.cpp:59:  c10::Device dev = device.isNone() ? self.device() : device.toDevice();
jit/runtime/register_special_ops.cpp:96:    const c10::ArrayRef<int64_t>& strides,
jit/runtime/register_special_ops.cpp:112:    const c10::ArrayRef<int64_t>& strides,
jit/runtime/register_special_ops.cpp:128:    const c10::ArrayRef<int64_t>& strides,
jit/runtime/register_special_ops.cpp:145:    const c10::ArrayRef<int64_t>& strides,
jit/runtime/register_special_ops.cpp:207:    initial_scalar_type = typeMetaToScalarType(c10::get_default_dtype());
jit/runtime/register_special_ops.cpp:298:            at::device(at::kCPU).dtype(c10::get_default_dtype())))
jit/runtime/register_special_ops.cpp:342:          auto device = pop(stack).toOptional<c10::Device>();
jit/runtime/register_special_ops.cpp:347:          c10::Device dev = device ? device.value() : data.device();
jit/runtime/symbolic_script.cpp:1507:    compilation_unit.define(c10::nullopt, str, nativeResolver(), nullptr);
jit/runtime/symbolic_script.cpp:1512:c10::optional<GradientPair> gradientInfoForSchema(
jit/runtime/symbolic_script.cpp:1534:  return c10::nullopt;
jit/runtime/graph_executor.cpp:4:#include <c10/util/Exception.h>
jit/runtime/graph_executor.cpp:71:c10::AliasAnalysisKind aliasAnalysisInternalSpecialCase() {
jit/runtime/graph_executor.cpp:158:          c10::List<at::Tensor> lst;
jit/runtime/graph_executor.cpp:431:      c10::List<at::Tensor> lst = std::move(v).toTensorList();
jit/runtime/graph_executor.cpp:514:  C10_LOG_API_USAGE_ONCE("torch.graph_executor.run");
jit/runtime/graph_executor.cpp:524:c10::intrusive_ptr<Future> GraphExecutorImplBase::runAsync(
jit/runtime/graph_executor.cpp:534:  C10_LOG_API_USAGE_ONCE("torch.graph_executor.runAsync");
jit/runtime/graph_executor.cpp:742:c10::intrusive_ptr<Future> GraphExecutor::runAsync(
jit/runtime/interpreter.cpp:6:#include <c10/core/thread_pool.h>
jit/runtime/interpreter.cpp:7:#include <c10/util/Exception.h>
jit/runtime/interpreter.cpp:473:  c10::optional<std::vector<GraphExecutor*>> grad_executors_;
jit/runtime/interpreter.cpp:518:  const std::vector<c10::IValue>& constant_table() const {
jit/runtime/interpreter.cpp:834:      c10::ArrayRef<Value*> inputs) {
jit/runtime/interpreter.cpp:1039:struct InterpreterStateImpl : c10::intrusive_ptr_target {
jit/runtime/interpreter.cpp:1066:  c10::intrusive_ptr<Future> future_;
jit/runtime/interpreter.cpp:1101:    c10::optional<size_t> id;
jit/runtime/interpreter.cpp:1113:  c10::intrusive_ptr<InterpreterStateImpl> intrusive_from_this() {
jit/runtime/interpreter.cpp:1114:    c10::raw::intrusive_ptr::incref(this);
jit/runtime/interpreter.cpp:1115:    return c10::intrusive_ptr<InterpreterStateImpl>::reclaim(this);
jit/runtime/interpreter.cpp:1119:    frames.emplace_back(Frame{code.pImpl, 0, base_pointer, c10::nullopt});
jit/runtime/interpreter.cpp:1328:                future_->markCompleted(c10::ivalue::Tuple::create(
jit/runtime/interpreter.cpp:1344:                    c10::intrusive_ptr<InterpreterStateImpl> state,
jit/runtime/interpreter.cpp:1361:                c10::intrusive_ptr<InterpreterStateImpl> stateImpl_;
jit/runtime/interpreter.cpp:1398:            push(stack, c10::IValue{static_cast<int64_t>(*frame_id_ref)});
jit/runtime/interpreter.cpp:1553:                c10::SourceLocation location{
jit/runtime/interpreter.cpp:1558:                c10::Warning::warn(location, msg, /*verbatim=*/true);
jit/runtime/interpreter.cpp:1657:  c10::intrusive_ptr<Future> getOrCreateFuture() {
jit/runtime/interpreter.cpp:1660:          c10::make_intrusive<Future>(frames.front().function->return_type_);
jit/runtime/interpreter.cpp:1665:  c10::intrusive_ptr<Future> runAsync(Stack& stack) {
jit/runtime/interpreter.cpp:1735:const std::vector<c10::IValue>& Code::constant_table() const {
jit/runtime/interpreter.cpp:1756:    : pImpl(c10::make_intrusive<InterpreterStateImpl>(
jit/runtime/interpreter.cpp:1765:c10::intrusive_ptr<Future> InterpreterState::runAsync(Stack& stack) {
jit/runtime/interpreter.cpp:1769:c10::intrusive_ptr<Future> InterpreterState::getFuture() {
jit/runtime/interpreter.cpp:1774:    c10::intrusive_ptr<c10::intrusive_ptr_target> pImpl_)
jit/runtime/interpreter.cpp:1782:  if (tls_state_ != c10::nullopt) {
jit/runtime/operator.cpp:42:#ifdef C10_MOBILE
jit/runtime/operator.cpp:43:  std::unordered_set<c10::OperatorName> registered_operator_names;
jit/runtime/operator.cpp:59:#ifdef C10_MOBILE
jit/runtime/operator.cpp:75:#ifdef C10_MOBILE
jit/runtime/operator.cpp:224:      c10::onnx::Reshape, // only used in onnx
jit/runtime/operator.cpp:225:      c10::onnx::Shape, // only used in onnx
jit/runtime/operator.cpp:259:      c10::namespaces::prim,
jit/runtime/operator.cpp:260:      c10::namespaces::aten,
jit/runtime/operator.cpp:261:      c10::namespaces::onnx,
jit/runtime/operator.cpp:381:std::shared_ptr<Operator> findOperatorFor(const c10::OperatorName& full_name) {
jit/runtime/vararg_functions.cpp:194:  push(stack, c10::ivalue::Tuple::create(std::move(elems)));
jit/runtime/vararg_functions.cpp:207:      c10::ivalue::Tuple::createNamed(std::move(elems), std::move(type)));
jit/runtime/vararg_functions.cpp:216:        c10::List<IValue> vals(type.getElementType());
jit/runtime/vararg_functions.cpp:233:  auto vals = c10::impl::GenericDict(key_type, value_type);
jit/runtime/vararg_functions.cpp:248:  auto userObj = c10::ivalue::Object::create(
jit/runtime/vararg_functions.cpp:249:      c10::StrongTypePtr(type->compilation_unit(), type),
jit/runtime/vararg_functions.cpp:273:  push(stack, c10::ivalue::Tuple::create(std::move(output_elems)));
jit/runtime/vararg_functions.cpp:290:    push(stack, c10::ivalue::Tuple::create(std::move(output_elems)));
jit/runtime/vararg_functions.cpp:293:    auto output_list = c10::impl::GenericList(elems.elementType());
jit/runtime/register_c10_ops.cpp:18:Operator createOperatorFromC10_withTracingHandledHere(
jit/runtime/register_c10_ops.cpp:19:    const c10::OperatorHandle& op) {
jit/runtime/register_c10_ops.cpp:78:            std::vector<c10::intrusive_ptr<c10::ivalue::Object>> objects;
jit/runtime/register_c10_ops.cpp:105:                c10::IntArrayRef(iter->toIntVector()));
jit/runtime/register_c10_ops.cpp:156:Operator createOperatorFromC10_withTracingNotHandledHere(
jit/runtime/register_c10_ops.cpp:157:    const c10::OperatorHandle& op) {
jit/runtime/register_c10_ops.cpp:161:class RegistrationListener final : public c10::OpRegistrationListener {
jit/runtime/register_c10_ops.cpp:163:  void onOperatorRegistered(const c10::OperatorHandle& op) override {
jit/runtime/register_c10_ops.cpp:166:      // We should not additionally export the c10 aten::backward op from
jit/runtime/register_c10_ops.cpp:177:          createOperatorFromC10_withTracingHandledHere(op));
jit/runtime/register_c10_ops.cpp:182:          createOperatorFromC10_withTracingNotHandledHere(op));
jit/runtime/register_c10_ops.cpp:186:  void onOperatorDeregistered(const c10::OperatorHandle& op) override {
jit/runtime/register_c10_ops.cpp:199:      : listenerRAII(c10::Dispatcher::singleton().addRegistrationListener(
jit/runtime/register_c10_ops.cpp:201:  c10::RegistrationHandleRAII listenerRAII;
jit/runtime/register_c10_ops.cpp:214:void ensure_c10_registerer_defined() {
jit/runtime/register_ops_utils.h:4:#include <c10/core/DeviceType.h>
jit/runtime/register_ops_utils.h:31:#include <c10/core/thread_pool.h>
jit/runtime/register_ops_utils.h:32:#include <c10/util/SmallVector.h>
jit/runtime/register_ops_utils.h:33:#include <c10/util/math_compat.h>
jit/runtime/register_ops_utils.h:34:#include <c10/util/string_utils.h>
jit/runtime/register_ops_utils.h:38:inline c10::AliasAnalysisKind aliasAnalysisFromSchema() {
jit/runtime/register_ops_utils.h:39:  return c10::AliasAnalysisKind::FROM_SCHEMA;
jit/runtime/register_ops_utils.h:42:inline c10::AliasAnalysisKind aliasAnalysisConservative() {
jit/runtime/register_ops_utils.h:43:  return c10::AliasAnalysisKind::CONSERVATIVE;
jit/runtime/register_ops_utils.h:46:inline c10::AliasAnalysisKind aliasAnalysisSpecialCase() {
jit/runtime/register_ops_utils.h:47:  return c10::AliasAnalysisKind::INTERNAL_SPECIAL_CASE;
jit/runtime/register_ops_utils.h:51:c10::List<T> make_result_list(const TypePtr& elemType) {
jit/runtime/register_ops_utils.h:52:  return c10::List<T>();
jit/runtime/register_ops_utils.h:56:c10::impl::GenericList make_result_list<IValue>(const TypePtr& elemType);
jit/runtime/register_ops_utils.h:142:    c10::optional<at::Device> device,
jit/runtime/register_ops_utils.h:143:    c10::optional<at::ScalarType> scalarType,
jit/runtime/register_ops_utils.h:166:T getItem(const c10::List<T>& list, int64_t idx) {
jit/runtime/register_ops_utils.h:176:void setItem(const c10::List<T>& list, int64_t idx, T&& value) {
jit/runtime/register_ops_utils.h:191:  c10::List<T> a = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:192:  c10::List<T> b = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:209:  c10::List<T> a = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:210:  c10::List<T> b = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:238:  c10::List<T> list = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:251:  c10::List<T> list = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:268:  c10::List<T> list = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:289:  c10::List<T> list = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:306:  c10::List<T> list = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:325:  c10::List<T> b = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:326:  c10::List<T> a = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:332:  c10::List<T> b = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:333:  c10::List<T> a = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:338:    const c10::List<at::Tensor>& a,
jit/runtime/register_ops_utils.h:339:    const c10::List<at::Tensor>& b) {
jit/runtime/register_ops_utils.h:372:  auto list = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:397:  c10::List<T> list = pop(stack).to<c10::List<T>>();
jit/runtime/register_ops_utils.h:415:  c10::List<T> list = pop(stack).to<c10::List<T>>();
jit/runtime/interpreter.h:2:#include <c10/util/Optional.h>
jit/runtime/interpreter.h:12:C10_DECLARE_bool(torch_jit_disable_warning_prints);
jit/runtime/interpreter.h:18:namespace c10 {
jit/runtime/interpreter.h:21:} // namespace c10
jit/runtime/interpreter.h:37:using Stack = std::vector<c10::IValue>;
jit/runtime/interpreter.h:38:using c10::ivalue::Future;
jit/runtime/interpreter.h:60:  const std::vector<c10::IValue>& constant_table() const;
jit/runtime/interpreter.h:61:  const std::vector<c10::TypePtr>& type_table() const;
jit/runtime/interpreter.h:78:  TORCH_API c10::intrusive_ptr<Future> runAsync(Stack& stack);
jit/runtime/interpreter.h:79:  c10::intrusive_ptr<Future> getFuture();
jit/runtime/interpreter.h:83:  InterpreterState(c10::intrusive_ptr<c10::intrusive_ptr_target> pImpl);
jit/runtime/interpreter.h:84:  // Ideally we should use c10::intrusive_ptr<InterpreterStateImpl> for pImpl;
jit/runtime/interpreter.h:87:  c10::intrusive_ptr<c10::intrusive_ptr_target> pImpl;
jit/runtime/interpreter.h:97:  explicit Suspend(c10::intrusive_ptr<Future> future_)
jit/runtime/interpreter.h:100:  c10::intrusive_ptr<Future> future;
jit/runtime/interpreter.h:111:      c10::optional<at::ThreadLocalState> tls_state = c10::nullopt)
jit/runtime/interpreter.h:125:  c10::optional<at::ThreadLocalState> tls_state_ = c10::nullopt;
jit/runtime/profiling_graph_executor_impl.cpp:36:C10_DEFINE_bool(
jit/runtime/profiling_graph_executor_impl.cpp:41:C10_DEFINE_bool(
jit/runtime/profiling_graph_executor_impl.cpp:49:C10_DEFINE_int64(
jit/runtime/profiling_graph_executor_impl.cpp:53:C10_DEFINE_int64(
jit/runtime/profiling_graph_executor_impl.cpp:61:#if defined(C10_MOBILE)
jit/runtime/profiling_graph_executor_impl.cpp:172:        dnode->g(attr::Subgraph), c10::nullopt);
jit/runtime/profiling_graph_executor_impl.cpp:668:  auto otypes = c10::fmap(
jit/runtime/register_prim_ops_fulljit.cpp:52:             RECORD_FUNCTION("FusionGroup", std::vector<c10::IValue>());
jit/runtime/register_prim_ops_fulljit.cpp:153:           c10::impl::GenericList res_list{OptionalType::ofTensor()};
jit/runtime/register_prim_ops_fulljit.cpp:215:           c10::List<int64_t> elems;
jit/runtime/register_prim_ops_fulljit.cpp:236:           push(stack, c10::Device(pop(stack).toStringRef()));
jit/runtime/register_prim_ops_fulljit.cpp:253:           c10::optional<c10::Device> device = c10::nullopt;
jit/runtime/register_prim_ops_fulljit.cpp:254:           c10::optional<at::ScalarType> scalarType = c10::nullopt;
jit/runtime/register_prim_ops_fulljit.cpp:369:           c10::List<int64_t> axes = pop(stack).toIntList();
jit/runtime/register_prim_ops_fulljit.cpp:370:           c10::List<int64_t> size = pop(stack).toIntList();
jit/runtime/register_prim_ops_fulljit.cpp:413:             c10::List<int64_t> shape = pop(stack).toIntList();
jit/runtime/register_prim_ops_fulljit.cpp:414:             c10::List<int64_t> regular_shape = shape.copy();
jit/runtime/register_prim_ops_fulljit.cpp:415:             c10::List<int64_t> last_shape = shape.copy();
jit/runtime/register_prim_ops_fulljit.cpp:632:               c10::impl::GenericDict(StringType::get(), TensorType::get());
jit/runtime/register_prim_ops_fulljit.cpp:738:    // TODO: Add List[bool] once .to<c10::List<bool>> doesn't throw an error
jit/runtime/register_prim_ops_fulljit.cpp:998:          c10::List<int64_t> elems;
jit/runtime/register_prim_ops_fulljit.cpp:1009:          c10::List<int64_t> l = pop(stack).toIntList();
jit/runtime/register_prim_ops_fulljit.cpp:1021:          c10::List<int64_t> l = pop(stack).toIntList();
jit/runtime/register_prim_ops_fulljit.cpp:1034:          c10::List<double> l = pop(stack).toDoubleList();
jit/runtime/register_prim_ops_fulljit.cpp:1047:          c10::List<bool> l = pop(stack).toBoolList();
jit/runtime/register_prim_ops_fulljit.cpp:1150:        if (!c10::checkObjectSortSchema(
jit/runtime/register_prim_ops_fulljit.cpp:1168:    c10::List<IValue>& ivalues,
jit/runtime/register_prim_ops_fulljit.cpp:1195:    return c10::checkObjectSortSchema(class_type, why_not) != nullptr;
jit/runtime/register_prim_ops_fulljit.cpp:1223:    c10::IValueComparator comparator;
jit/runtime/register_prim_ops_fulljit.cpp:1225:      comparator = c10::getGreaterThanComparator(g_list.get(0));
jit/runtime/register_prim_ops_fulljit.cpp:1227:      comparator = c10::getLessThanComparator(g_list.get(0));
jit/runtime/register_prim_ops_fulljit.cpp:1292:    c10::optional<bool> align_corners,
jit/runtime/register_prim_ops_fulljit.cpp:1293:    c10::optional<bool> recompute_scale_factor) {
jit/runtime/register_prim_ops_fulljit.cpp:1295:    if (align_corners != c10::nullopt) {
jit/runtime/register_prim_ops_fulljit.cpp:1301:    if (align_corners == c10::nullopt) {
jit/runtime/register_prim_ops_fulljit.cpp:1316:  if (!scale_factors.isNone() && recompute_scale_factor == c10::nullopt) {
jit/runtime/register_prim_ops_fulljit.cpp:1375:        c10::make_optional(scale_factors_1));
jit/runtime/register_prim_ops_fulljit.cpp:1403:        c10::make_optional(scale_factors_1));
jit/runtime/register_prim_ops_fulljit.cpp:1506:      input, size, scale_factor_double, "nearest", c10::nullopt, c10::nullopt);
jit/runtime/register_prim_ops_fulljit.cpp:1524:      c10::nullopt);
jit/runtime/register_prim_ops_fulljit.cpp:1535:      input, size, scale_factor_double, "bilinear", true, c10::nullopt);
jit/runtime/register_prim_ops_fulljit.cpp:1598:at::Tensor cat(const c10::List<at::Tensor>& tensors) {
jit/runtime/register_prim_ops_fulljit.cpp:1602:std::string get_first(const c10::List<c10::List<std::string>>& strings) {
jit/api/method.h:10:using ObjectPtr = c10::intrusive_ptr<c10::ivalue::Object>;
jit/api/method.h:30:  c10::IValue operator()(
jit/api/method.h:31:      std::vector<c10::IValue> stack,
jit/api/method.h:38:  c10::intrusive_ptr<c10::ivalue::Future> run_async(
jit/api/method.h:39:      std::vector<c10::IValue> stack,
jit/api/object.cpp:13:    const c10::ClassTypePtr& type)
jit/api/object.cpp:14:    : Object(c10::ivalue::Object::create(
jit/api/object.cpp:15:          c10::StrongTypePtr(std::move(cu), type),
jit/api/object.cpp:23:c10::optional<Method> Object::find_method(const std::string& basename) const {
jit/api/object.cpp:29:  return c10::nullopt;
jit/jit_log.cpp:8:#include <c10/util/Exception.h>
jit/jit_log.cpp:9:#include <c10/util/StringUtil.h>
jit/jit_log.cpp:60:  fname = c10::detail::StripBasename(fname);
jit/jit_log.cpp:107:  prefix_ss << c10::detail::StripBasename(std::string(fn)) << ":";
jit/api/module.cpp:4:#include <c10/util/Exception.h>
jit/api/module.cpp:20:    c10::QualifiedName class_name,
jit/api/module.cpp:26:    class_name = c10::QualifiedName("__torch__", class_name.name());
jit/api/module.cpp:33:  return c10::ivalue::Object::create(
jit/api/module.cpp:34:      c10::StrongTypePtr(std::move(cu), std::move(cls)), 0);
jit/api/module.cpp:37:Module::Module(c10::QualifiedName class_name)
jit/api/module.cpp:44:    const c10::ClassTypePtr& type)
jit/api/module.cpp:45:    : Object(c10::ivalue::Object::create(
jit/api/module.cpp:46:          c10::StrongTypePtr(std::move(cu), type),
jit/api/module.cpp:50:    c10::QualifiedName class_name,
jit/api/module.cpp:73:  to_impl(/*device=*/c10::nullopt, dtype, non_blocking);
jit/api/module.cpp:77:  to_impl(device, /*dtype=*/c10::nullopt, non_blocking);
jit/api/module.cpp:82:    const c10::optional<at::Device>& device,
jit/api/module.cpp:83:    const c10::optional<at::ScalarType>& dtype,
jit/api/module.cpp:95:    const c10::optional<at::Device>& device,
jit/api/module.cpp:96:    const c10::optional<at::ScalarType>& dtype,
jit/api/module.cpp:124:c10::intrusive_ptr<c10::ivalue::Future> Method::run_async(
jit/api/module.cpp:141:    auto tuple_input = c10::ivalue::Tuple::create(inputs);
jit/api/module.cpp:157:    auto tuple_input = c10::ivalue::Tuple::create(inputs);
jit/api/module.cpp:313:IValue Module::create_class(const c10::QualifiedName& name, Stack stack) const {
jit/api/module.cpp:316:      _ivalue()->compilation_unit()->get_class(c10::QualifiedName(name));
jit/api/module.cpp:326:  auto obj = c10::ivalue::Object::create(
jit/api/module.cpp:327:      c10::StrongTypePtr(_ivalue()->compilation_unit(), classType), numAttrs);
jit/api/module.cpp:343:    c10::optional<std::vector<std::string>> preserved_attrs,
jit/api/module.cpp:471:namespace c10 {
jit/api/module.cpp:480:} // namespace c10
jit/api/object.h:13:using ObjectPtr = c10::intrusive_ptr<c10::ivalue::Object>;
jit/api/object.h:25:  Object(std::shared_ptr<CompilationUnit> cu, const c10::ClassTypePtr& type);
jit/api/object.h:27:      c10::QualifiedName,
jit/api/object.h:33:  c10::ClassTypePtr type() const {
jit/api/object.h:37:  void setattr(const std::string& name, c10::IValue v) {
jit/api/object.h:46:      const c10::TypePtr& expected = _ivalue()->type()->getAttribute(*slot);
jit/api/object.h:62:  c10::IValue attr(const std::string& name) const {
jit/api/object.h:75:  c10::IValue attr(const std::string& name, c10::IValue or_else) const {
jit/api/object.h:100:    return c10::fmap(type()->methods(), [&](Function* func) {
jit/api/object.h:105:  c10::optional<Method> find_method(const std::string& basename) const;
jit/api/module.h:2:#include <c10/util/Exception.h>
jit/api/module.h:19:#include <c10/util/ArrayRef.h>
jit/api/module.h:20:#include <c10/util/Optional.h>
jit/api/module.h:38:using ::c10::Argument;
jit/api/module.h:39:using ::c10::FunctionSchema;
jit/api/module.h:40:using ::c10::QualifiedName;
jit/api/module.h:44:using ModulePtr = c10::intrusive_ptr<c10::ivalue::Object>;
jit/api/module.h:89:  explicit Module(c10::QualifiedName class_name);
jit/api/module.h:90:  Module(std::shared_ptr<CompilationUnit> cu, const c10::ClassTypePtr& type);
jit/api/module.h:93:      c10::QualifiedName,
jit/api/module.h:248:  IValue create_class(const c10::QualifiedName& name, Types&&... args) const {
jit/api/module.h:252:  IValue create_class(const c10::QualifiedName& name, Stack stack) const;
jit/api/module.h:269:  c10::QualifiedName getNameForMethod(std::string basename) const {
jit/api/module.h:274:      const c10::optional<at::Device>& device,
jit/api/module.h:275:      const c10::optional<at::ScalarType>& dtype,
jit/api/module.h:283:    c10::optional<std::vector<std::string>> preserved_attrs = c10::nullopt,
jit/api/module.h:456:        size_(c10::nullopt) {
jit/api/module.h:468:  mutable c10::optional<size_t> size_;
jit/api/function_impl.h:13:      c10::QualifiedName name,
jit/api/function_impl.h:28:  c10::intrusive_ptr<c10::ivalue::Future> runAsync(
jit/api/function_impl.h:59:  const c10::QualifiedName& qualname() const override {
jit/api/function_impl.h:117:  c10::QualifiedName name_;
jit/api/function_impl.h:124:  mutable c10::optional<std::shared_ptr<Graph>> optimized_graph_;
jit/api/function_impl.cpp:12:c10::FunctionSchema defaultSchemaFor(const Function& function) {
jit/api/function_impl.cpp:13:  std::vector<c10::Argument> args;
jit/api/function_impl.cpp:14:  std::vector<c10::Argument> returns;
jit/api/function_impl.cpp:20:                                         : ("argument_" + c10::to_string(i));
jit/api/function_impl.cpp:42:c10::intrusive_ptr<c10::ivalue::Future> GraphFunction::runAsync(
jit/api/function_impl.cpp:66:const c10::FunctionSchema& GraphFunction::getSchema() const {
jit/api/function_impl.cpp:68:    schema_ = std::make_unique<c10::FunctionSchema>(defaultSchemaFor(*this));
jit/mobile/type_parser.cpp:10:const std::unordered_map<std::string, c10::TypePtr>& string_to_type_lut();
jit/mobile/type_parser.cpp:17:namespace c10 {
jit/mobile/type_parser.cpp:159:} // namespace c10
jit/mobile/type_parser.h:3:namespace c10 {
jit/mobile/type_parser.h:5:} // namespace c10
jit/mobile/export_data.cpp:39:    std::vector<c10::ClassTypePtr> memoizedClassTypes;
jit/mobile/export_data.cpp:45:        [&](const c10::ClassTypePtr& t) {
jit/mobile/export_data.cpp:56:      std::string fname = prefix + c10::to_string(i++);
jit/mobile/export_data.cpp:93:  c10::Dict<std::string, at::Tensor> dict;
jit/mobile/export_data.cpp:104:  c10::Dict<std::string, at::Tensor> dict;
jit/api/compilation_unit.h:3:#include <c10/util/Exception.h>
jit/api/compilation_unit.h:15:#include <c10/util/ArrayRef.h>
jit/api/compilation_unit.h:16:#include <c10/util/Optional.h>
jit/api/compilation_unit.h:60:  Function* find_function(const c10::QualifiedName& name) const {
jit/api/compilation_unit.h:68:  Function& get_function(const c10::QualifiedName& name) const {
jit/api/compilation_unit.h:91:      const c10::optional<c10::QualifiedName>& prefix,
jit/api/compilation_unit.h:104:      const c10::optional<c10::QualifiedName>& prefix,
jit/api/compilation_unit.h:116:      const c10::optional<c10::QualifiedName>& prefix,
jit/api/compilation_unit.h:122:      const c10::QualifiedName& qualifiedName,
jit/api/compilation_unit.h:128:      c10::QualifiedName name,
jit/api/compilation_unit.h:161:  IValue run_method(const c10::QualifiedName& method_name, Types&&... args) {
jit/api/compilation_unit.h:173:  void register_type(c10::NamedTypePtr namedType) {
jit/api/compilation_unit.h:186:  c10::ClassTypePtr get_class(const c10::QualifiedName& name) const {
jit/api/compilation_unit.h:191:    return type->cast<c10::ClassType>();
jit/api/compilation_unit.h:194:  c10::InterfaceTypePtr get_interface(const c10::QualifiedName& name) const {
jit/api/compilation_unit.h:199:    return type->cast<c10::InterfaceType>();
jit/api/compilation_unit.h:202:  c10::TupleTypePtr get_named_tuple(const c10::QualifiedName& name) const {
jit/api/compilation_unit.h:211:  c10::NamedTypePtr get_type(const c10::QualifiedName& name) const {
jit/api/compilation_unit.h:260:  void unsafeRemoveMethod(const c10::QualifiedName& method_name) {
jit/api/compilation_unit.h:279:  c10::QualifiedName mangle(const c10::QualifiedName& name) const {
jit/api/compilation_unit.h:289:      const c10::optional<c10::QualifiedName>& prefix,
jit/api/compilation_unit.h:300:      const c10::optional<c10::QualifiedName>& prefix,
jit/api/compilation_unit.h:319:  std::unordered_map<c10::QualifiedName, size_t> dict_;
jit/api/compilation_unit.h:320:  std::unordered_map<c10::QualifiedName, size_t> classDict_;
jit/api/compilation_unit.h:327:  std::vector<c10::NamedTypePtr> classes_;
jit/mobile/method.h:20:  c10::IValue operator()(std::vector<c10::IValue> stack) const;
jit/mobile/import_data.cpp:16:namespace c10 {
jit/mobile/import_data.cpp:19:} // namespace c10
jit/mobile/import_data.cpp:33:  c10::IValue deserialize(c10::optional<at::Device> device);
jit/mobile/import_data.cpp:36:  c10::IValue readArchive(
jit/mobile/import_data.cpp:39:      c10::optional<at::Device> device);
jit/mobile/import_data.cpp:50:c10::IValue BytecodeDeserializer::deserialize(
jit/mobile/import_data.cpp:51:    c10::optional<at::Device> device) {
jit/mobile/import_data.cpp:57:c10::IValue BytecodeDeserializer::readArchive(
jit/mobile/import_data.cpp:60:    c10::optional<at::Device> device) {
jit/mobile/import_data.cpp:81:  static const c10::QualifiedName torchPrefix = "__torch__";
jit/mobile/import_data.cpp:82:  auto type_resolver = [&](const c10::QualifiedName& qn) {
jit/mobile/import_data.cpp:95:      type = c10::parseType(qn.qualifiedName());
jit/mobile/import_data.cpp:97:    return c10::StrongTypePtr(compilation_unit_, type);
jit/mobile/import_data.cpp:103:    c10::QualifiedName method_name(qn.value(), "__setstate__");
jit/mobile/import_data.cpp:105:    auto find_custom_class_with_setstate = [&qn]() -> c10::ClassTypePtr {
jit/mobile/import_data.cpp:113:      auto obj = c10::ivalue::Object::create(type, 0);
jit/mobile/import_data.cpp:118:      auto obj = c10::ivalue::Object::create(
jit/mobile/import_data.cpp:119:          c10::StrongTypePtr(nullptr, custom_class_type), 1);
jit/mobile/import_data.cpp:126:      auto obj = c10::ivalue::Object::create(type, ndict);
jit/mobile/import_data.cpp:158:mobile::Module _load_data(std::istream& in, c10::optional<at::Device> device) {
jit/mobile/import_data.cpp:165:    c10::optional<at::Device> device) {
jit/mobile/import_data.cpp:172:    c10::optional<c10::Device> device) {
jit/mobile/import_data.cpp:193:  } catch (c10::Error& error) {
jit/mobile/import_data.cpp:210:    } catch (c10::Error& error) {
jit/mobile/import_data.cpp:223:    c10::optional<at::Device> device) {
jit/mobile/import_data.cpp:230:    c10::optional<at::Device> device) {
jit/mobile/import_data.cpp:237:    c10::optional<c10::Device> device) {
jit/mobile/function.cpp:14:Function::Function(c10::QualifiedName name)
jit/mobile/function.cpp:17:const c10::QualifiedName& Function::qualname() const {
jit/mobile/function.cpp:41:  const auto& opname_c10 = opname;
jit/mobile/function.cpp:48:    auto op = c10::Dispatcher::singleton().findSchema(opname_c10);
jit/mobile/function.cpp:57:      opname == c10::OperatorName("aten::_convolution", "")) {
jit/mobile/function.cpp:87:void Function::append_constant(const c10::IValue& constant) {
jit/mobile/function.cpp:106:void Function::setSchema(c10::FunctionSchema schema) {
jit/mobile/function.cpp:110:const at::optional<c10::FunctionSchema>& Function::getSchema() const {
jit/mobile/function.cpp:124:c10::IValue Function::operator()(Stack& stack) const {
jit/mobile/import.cpp:60:namespace c10 {
jit/mobile/import.cpp:63:} // namespace c10
jit/mobile/import.cpp:116:  mobile::Module deserialize(c10::optional<at::Device> device);
jit/mobile/import.cpp:118:      c10::optional<at::Device> device,
jit/mobile/import.cpp:121:      c10::optional<at::Device> device);
jit/mobile/import.cpp:123:      c10::optional<at::Device> device,
jit/mobile/import.cpp:127:  TypePtr resolveTypeName(const c10::QualifiedName& qn);
jit/mobile/import.cpp:130:      const c10::optional<std::vector<IValue>>& debug_info_vals,
jit/mobile/import.cpp:132:  c10::IValue readArchive(
jit/mobile/import.cpp:140:  c10::optional<at::Device> device_;
jit/mobile/import.cpp:148:TypePtr BytecodeDeserializer::resolveTypeName(const c10::QualifiedName& qn) {
jit/mobile/import.cpp:149:  static const c10::QualifiedName torchPrefix = "__torch__";
jit/mobile/import.cpp:162:    return c10::parseType(qn.qualifiedName());
jit/mobile/import.cpp:168:    const c10::optional<std::vector<IValue>>& debug_info_vals,
jit/mobile/import.cpp:210:        new mobile::Function(c10::QualifiedName(function_name)));
jit/mobile/import.cpp:297:    static const c10::QualifiedName classPrefix = "__torch__.torch.classes";
jit/mobile/import.cpp:299:      c10::QualifiedName qn(t.toStringRef());
jit/mobile/import.cpp:309:        function->append_type(c10::parseType(t.toStringRef()));
jit/mobile/import.cpp:318:        std::vector<c10::Argument> args;
jit/mobile/import.cpp:332:              c10::Argument(name, type, c10::nullopt /*N*/, default_value);
jit/mobile/import.cpp:346:      c10::FunctionSchema schema(
jit/mobile/import.cpp:361:    deserializeMetadata(c10::optional<at::Device> device) {
jit/mobile/import.cpp:368:    c10::optional<at::Device> device,
jit/mobile/import.cpp:384:    c10::optional<at::Device> device,
jit/mobile/import.cpp:391:    c10::optional<at::Device> device) {
jit/mobile/import.cpp:406:  c10::optional<std::vector<IValue>> debug_info_bvals;
jit/mobile/import.cpp:430:c10::IValue BytecodeDeserializer::readArchive(
jit/mobile/import.cpp:453:  auto type_resolver = [this](const c10::QualifiedName& qn) {
jit/mobile/import.cpp:454:    return c10::StrongTypePtr(compilation_unit_, resolveTypeName(qn));
jit/mobile/import.cpp:460:    c10::QualifiedName method_name(qn.value(), "__setstate__");
jit/mobile/import.cpp:462:    auto find_custom_class_with_setstate = [&qn]() -> c10::ClassTypePtr {
jit/mobile/import.cpp:470:      auto obj = c10::ivalue::Object::create(type, 0);
jit/mobile/import.cpp:475:      auto obj = c10::ivalue::Object::create(
jit/mobile/import.cpp:476:          c10::StrongTypePtr(nullptr, custom_class_type), 1);
jit/mobile/import.cpp:483:      auto obj = c10::ivalue::Object::create(type, ndict);
jit/mobile/import.cpp:515:    c10::optional<at::Device> device) {
jit/mobile/import.cpp:522:    c10::optional<at::Device> device) {
jit/mobile/import.cpp:529:    c10::optional<c10::Device> device) {
jit/mobile/import.cpp:536:    c10::optional<at::Device> device,
jit/mobile/import.cpp:545:    c10::optional<at::Device> device,
jit/mobile/import.cpp:554:    c10::optional<c10::Device> device,
jit/mobile/import.cpp:574:  } catch (c10::Error& error) {
jit/mobile/import.cpp:594:    } catch (c10::Error& error) {
jit/mobile/import.cpp:608:    c10::optional<at::Device> device,
jit/mobile/module.cpp:19:Function* CompilationUnit::find_function(const c10::QualifiedName& qn) {
jit/mobile/module.cpp:35:c10::optional<Method> Module::find_method(const std::string& basename) const {
jit/mobile/module.cpp:38:      return c10::make_optional<Method>(Method(this, fn.get()));
jit/mobile/module.cpp:41:  return c10::nullopt;
jit/mobile/module.cpp:46:    const c10::intrusive_ptr<c10::ivalue::Object>& obj,
jit/mobile/module.cpp:61:    const c10::intrusive_ptr<c10::ivalue::Object>& obj,
jit/mobile/module.cpp:73:    const c10::intrusive_ptr<c10::ivalue::Object>& obj,
jit/mobile/module.cpp:158:  } catch (c10::Error& error) {
jit/mobile/module.cpp:175:    } catch (c10::Error& error) {
jit/mobile/module.cpp:184:c10::IValue Method::operator()(std::vector<c10::IValue> stack) const {
jit/mobile/observer.h:3:#include <c10/util/ThreadLocalDebugInfo.h>
jit/mobile/observer.h:9:class MobileDebugInfo : public c10::DebugInfoBase {
jit/mobile/observer.h:53:  // c10::ThreadLocalDebugInfo::get(c10::DebugInfoKind::MOBILE_RUNTIME_INFO))
jit/mobile/observer.h:63:  // boundaries. c10::CachingAllocatorInfo caching_allocator_info;
jit/mobile/module.h:9:using Stack = std::vector<c10::IValue>;
jit/mobile/module.h:26:// std::vector<c10::OperatorName> op_names_;
jit/mobile/module.h:28:// std::vector<c10::IValue> constants_;
jit/mobile/module.h:29:// std::vector<c10::TypePtr> types_;
jit/mobile/module.h:38:  Function* find_function(const c10::QualifiedName& qn);
jit/mobile/module.h:55:      c10::intrusive_ptr<c10::ivalue::Object> object,
jit/mobile/module.h:61:      c10::intrusive_ptr<c10::ivalue::Object> object,
jit/mobile/module.h:68:  c10::IValue run_method(const std::string& method_name, Types&&... args) {
jit/mobile/module.h:71:  c10::IValue forward(std::vector<c10::IValue> inputs) {
jit/mobile/module.h:74:  c10::optional<Method> find_method(const std::string& basename) const;
jit/mobile/module.h:81:  const c10::intrusive_ptr<c10::ivalue::Object> _ivalue() const {
jit/mobile/module.h:100:  c10::IValue attr(const std::string& name, c10::IValue or_else) const {
jit/mobile/module.h:111:  c10::intrusive_ptr<c10::ivalue::Object> object_;
jit/mobile/import.h:20:    c10::optional<at::Device> device,
jit/mobile/import.h:25:    c10::optional<at::Device> device,
jit/mobile/import.h:30:    c10::optional<c10::Device> device,
jit/mobile/import.h:35:    c10::optional<at::Device> device = c10::nullopt);
jit/mobile/import.h:39:    c10::optional<at::Device> device = c10::nullopt);
jit/mobile/import.h:43:    c10::optional<c10::Device> device = c10::nullopt);
jit/mobile/import.h:59:    c10::optional<at::Device> device,
jit/mobile/interpreter.cpp:24:  auto userObj = c10::ivalue::Object::create(
jit/mobile/interpreter.cpp:25:      c10::StrongTypePtr(type->compilation_unit(), type),
jit/mobile/interpreter.cpp:50:                  static_cast<MobileDebugInfo*>(c10::ThreadLocalDebugInfo::get(
jit/mobile/interpreter.cpp:51:                      c10::DebugInfoKind::MOBILE_RUNTIME_INFO))) {
jit/mobile/interpreter.cpp:128:          userObj->type()->addAttribute(ss.str(), c10::NoneType::create());
jit/mobile/interpreter.cpp:188:        auto type = code_->types_[inst.X]->expect<c10::ClassType>();
jit/mobile/optim/sgd.cpp:66:        state_.count(c10::guts::to_string(p.unsafeGetTensorImpl())) == 0,
jit/mobile/optim/sgd.cpp:108:            state_.find(c10::guts::to_string(p.unsafeGetTensorImpl()));
jit/mobile/optim/sgd.cpp:113:          state_[c10::guts::to_string(p.unsafeGetTensorImpl())] =
jit/mobile/import_data.h:19:    c10::optional<at::Device> device = c10::nullopt);
jit/mobile/import_data.h:23:    c10::optional<at::Device> device = c10::nullopt);
jit/mobile/import_data.h:27:    c10::optional<c10::Device> device = c10::nullopt);
jit/mobile/import_data.h:32:    c10::optional<at::Device> device = c10::nullopt);
jit/mobile/import_data.h:36:    c10::optional<at::Device> device = c10::nullopt);
jit/mobile/import_data.h:40:    c10::optional<c10::Device> device = c10::nullopt);
jit/mobile/interpreter.h:10:using Stack = std::vector<c10::IValue>;
jit/mobile/interpreter.h:13:  std::vector<c10::OperatorName> op_names_;
jit/mobile/interpreter.h:15:  std::vector<c10::IValue> constants_;
jit/mobile/interpreter.h:16:  std::vector<c10::TypePtr> types_;
jit/mobile/interpreter.h:26:  c10::IValue& reg(size_t reg);
jit/mobile/interpreter.h:27:  std::vector<c10::IValue> registers_;
jit/mobile/function.h:9:using Stack = std::vector<c10::IValue>;
jit/mobile/function.h:17:  Function(c10::QualifiedName name);
jit/mobile/function.h:19:  c10::IValue operator()(Stack& stack) const;
jit/mobile/function.h:21:  const c10::QualifiedName& qualname() const;
jit/mobile/function.h:29:  void append_constant(const c10::IValue& constant);
jit/mobile/function.h:30:  void append_type(const c10::TypePtr& type);
jit/mobile/function.h:37:  void setSchema(c10::FunctionSchema schema);
jit/mobile/function.h:38:  const at::optional<c10::FunctionSchema>& getSchema() const;
jit/mobile/function.h:41:  c10::QualifiedName name_;
jit/mobile/function.h:43:  at::optional<c10::FunctionSchema> schema_; // (byte-code version 4+)
jit/serialization/import_legacy.h:20:    const c10::optional<c10::Device>& device);
jit/serialization/pickler.h:10:#include <c10/util/ArrayRef.h>
jit/serialization/pickler.h:93:using ::c10::IValue;
jit/serialization/pickler.h:129:      std::function<c10::QualifiedName(const c10::ClassTypePtr&)> type_renamer,
jit/serialization/pickler.h:130:      std::vector<c10::ClassTypePtr>* memoized_class_types)
jit/serialization/pickler.h:254:  std::function<c10::QualifiedName(const c10::ClassTypePtr&)> type_renamer_;
jit/serialization/pickler.h:257:  std::vector<c10::ClassTypePtr>* memoized_class_types_;
jit/serialization/pickler.h:280:bool checkHasValidSetGetState(const std::shared_ptr<c10::ClassType>& cls);
jit/serialization/pickle.cpp:40:#ifndef C10_MOBILE
jit/serialization/pickle.cpp:76:#ifndef C10_MOBILE
jit/serialization/pickle.cpp:101:#ifndef C10_MOBILE
jit/serialization/pickle.cpp:107:      /*type_resolver=*/c10::nullopt,
jit/serialization/pickle.cpp:108:      /*obj_loader=*/c10::nullopt,
jit/serialization/pickle.cpp:109:      /*device=*/c10::nullopt,
jit/serialization/import_export_helpers.cpp:7:#include <c10/util/Exception.h>
jit/serialization/import_source.cpp:40:      c10::QualifiedName name,
jit/serialization/import_source.cpp:53:  c10::QualifiedName basename_;
jit/serialization/import_source.cpp:185:    c10::QualifiedName prefix = *mod.type()->name();
jit/serialization/import_source.cpp:227:          c10::QualifiedName(name), shared_from_this());
jit/serialization/import_source.cpp:280:  c10::optional<Assign> attributeAssignmentSpecialHandlingHack(
jit/serialization/import_source.cpp:325:        return c10::nullopt;
jit/serialization/import_source.cpp:343:    return c10::nullopt;
jit/serialization/import_source.cpp:367:        c10::QualifiedName(qualified_classname), cu_, is_module);
jit/serialization/import_source.cpp:697:  auto fullName = c10::QualifiedName(basename_, name);
jit/serialization/source_range_serialization.h:3:#include <c10/core/Allocator.h>
jit/serialization/source_range_serialization.h:9:namespace c10 {
jit/serialization/source_range_serialization.h:32:  virtual c10::optional<SourceRange> findSourceRangeThatGenerated(
jit/serialization/pickler.cpp:14:using ::c10::IValue;
jit/serialization/pickler.cpp:176:      c10::static_intrusive_pointer_cast<distributed::rpc::RRef>(rrefInterface);
jit/serialization/pickler.cpp:297:  pushString(c10::to_string(tensor_data_.size()));
jit/serialization/pickler.cpp:470:  c10::complex<double> d = value.toComplexDouble();
jit/serialization/pickler.cpp:637:bool checkHasValidSetGetState(const std::shared_ptr<c10::ClassType>& cls) {
jit/serialization/import_export_functions.h:8:    std::vector<c10::IValue>& elements);
jit/serialization/python_print.cpp:4:#include <c10/util/Exception.h>
jit/serialization/python_print.cpp:5:#include <c10/util/StringUtil.h>
jit/serialization/python_print.cpp:16:using c10::QualifiedName;
jit/serialization/python_print.cpp:92:void PrintDepsTable::add(const c10::NamedTypePtr& type) {
jit/serialization/python_print.cpp:103:      table_.cbegin(), table_.cend(), [&](const c10::NamedTypePtr& dep) {
jit/serialization/python_print.cpp:356:      name = candidate + c10::to_string(next_id[name]++);
jit/serialization/python_print.cpp:1053:          c10::printQuotedString(field_stream, field);
jit/serialization/python_print.cpp:1194:    c10::List<dtype> repeated;
jit/serialization/python_print.cpp:1293:      c10::TypePrinter type_printer,
jit/serialization/python_print.cpp:1431:  void printNamedType(const c10::NamedTypePtr& type) {
jit/serialization/python_print.cpp:1527:  c10::TypePrinter type_printer_;
jit/serialization/python_print.cpp:1540:    c10::TypePrinter type_printer,
jit/serialization/python_print.cpp:1548:void PythonPrint::printNamedType(const c10::NamedTypePtr& type) {
jit/serialization/source_range_serialization_impl.h:15:  c10::optional<SourceRange> findSourceRangeThatGenerated(
jit/serialization/import.cpp:5:#include <c10/util/Exception.h>
jit/serialization/import.cpp:7:#if !defined(C10_MOBILE) && !defined(C10_DISABLE_LEGACY_IMPORT)
jit/serialization/import.cpp:62:    c10::optional<TypeResolver> type_resolver,
jit/serialization/import.cpp:63:    c10::optional<ObjLoader> obj_loader,
jit/serialization/import.cpp:64:    c10::optional<at::Device> device,
jit/serialization/import.cpp:125:      c10::optional<at::Device> device,
jit/serialization/import.cpp:133:  c10::optional<at::Device> device_;
jit/serialization/import.cpp:140:  auto type_resolver = [&](const c10::QualifiedName& qn) {
jit/serialization/import.cpp:142:    return c10::StrongTypePtr(compilation_unit_, std::move(cls));
jit/serialization/import.cpp:153:      auto obj = c10::ivalue::Object::create(type, n);
jit/serialization/import.cpp:172:      auto obj = c10::ivalue::Object::create(type, n);
jit/serialization/import.cpp:243:    c10::optional<at::Device> device,
jit/serialization/import.cpp:245:  C10_LOG_API_USAGE_ONCE("torch.script.load");
jit/serialization/import.cpp:259:#if !defined(C10_MOBILE) && !defined(C10_DISABLE_LEGACY_IMPORT)
jit/serialization/import.cpp:278:    c10::optional<at::Device> device) {
jit/serialization/import.cpp:286:    c10::optional<at::Device> device,
jit/serialization/import.cpp:296:    c10::optional<at::Device> device) {
jit/serialization/import.cpp:304:    c10::optional<at::Device> device,
jit/serialization/import.cpp:314:    c10::optional<at::Device> device) {
jit/serialization/import.cpp:322:    c10::optional<at::Device> device,
jit/serialization/import.cpp:329:Module load(std::istream& in, c10::optional<at::Device> device) {
jit/serialization/import.cpp:336:    c10::optional<at::Device> device,
jit/serialization/import.cpp:343:Module load(const std::string& filename, c10::optional<at::Device> device) {
jit/serialization/import.cpp:350:    c10::optional<at::Device> device,
jit/serialization/import.cpp:359:    c10::optional<c10::Device> device) {
jit/serialization/import.cpp:366:    c10::optional<c10::Device> device,
jit/serialization/type_name_uniquer.h:20:  c10::QualifiedName getUniqueName(c10::ConstNamedTypePtr t);
jit/serialization/type_name_uniquer.h:24:  std::unordered_set<c10::QualifiedName> used_names_;
jit/serialization/type_name_uniquer.h:26:      c10::ConstNamedTypePtr,
jit/serialization/type_name_uniquer.h:27:      c10::QualifiedName,
jit/serialization/import.h:22:    c10::optional<c10::Device> device = c10::nullopt);
jit/serialization/import.h:27:    c10::optional<c10::Device> device = c10::nullopt);
jit/serialization/import.h:32:    c10::optional<c10::Device> device = c10::nullopt);
jit/serialization/import.h:37:    c10::optional<c10::Device> device,
jit/serialization/import.h:43:    c10::optional<c10::Device> device,
jit/serialization/import.h:49:    c10::optional<c10::Device> device,
jit/serialization/import.h:57:load(std::istream& in, c10::optional<c10::Device> device = c10::nullopt);
jit/serialization/import.h:61:    c10::optional<c10::Device> device,
jit/serialization/import.h:71:    c10::optional<c10::Device> device = c10::nullopt);
jit/serialization/import.h:75:    c10::optional<c10::Device> device,
jit/serialization/import.h:85:    c10::optional<c10::Device> device = c10::nullopt);
jit/serialization/import.h:89:    c10::optional<c10::Device> device,
jit/serialization/import.h:94:    c10::optional<TypeResolver> type_resolver,
jit/serialization/import.h:95:    c10::optional<ObjLoader> obj_loader,
jit/serialization/import.h:96:    c10::optional<at::Device> device,
jit/serialization/export.h:28:using SymbolDimMap = std::map<c10::ShapeSymbol, std::string>;
jit/serialization/export.h:105:    std::function<c10::Dict<std::string, std::string>(
jit/serialization/unpickler.cpp:15:using ::c10::IValue;
jit/serialization/unpickler.cpp:252:      stack_.emplace_back(c10::impl::GenericList(AnyType::get()));
jit/serialization/unpickler.cpp:257:        empty_tuple_ = c10::ivalue::Tuple::create({});
jit/serialization/unpickler.cpp:315:      auto tuple = c10::ivalue::Tuple::create({});
jit/serialization/unpickler.cpp:325:      auto tuple = c10::ivalue::Tuple::create(pop(stack_, 1));
jit/serialization/unpickler.cpp:329:      auto tuple = c10::ivalue::Tuple::create(pop(stack_, 2));
jit/serialization/unpickler.cpp:333:      auto tuple = c10::ivalue::Tuple::create(pop(stack_, 3));
jit/serialization/unpickler.cpp:338:          c10::impl::GenericDict(AnyType::get(), AnyType::get()));
jit/serialization/unpickler.cpp:346:      IValue list_ivalue = c10::impl::GenericList(AnyType::get());
jit/serialization/unpickler.cpp:353:      auto dict = c10::impl::GenericDict(AnyType::get(), AnyType::get());
jit/serialization/unpickler.cpp:415:          c10::Storage::use_byte_size_t(),
jit/serialization/unpickler.cpp:429:      if (options.backend() == c10::Backend::QuantizedCPU) {
jit/serialization/unpickler.cpp:504:            type = c10::parseType(type_str);
jit/serialization/unpickler.cpp:549:          c10::complex<double>(elems.at(0).toDouble(), elems.at(1).toDouble());
jit/serialization/unpickler.cpp:566:      stack_.emplace_back(c10::Device(device_string.toStringRef()));
jit/serialization/unpickler.cpp:584:    c10::optional<c10::ScalarType> scalar_type;
jit/serialization/unpickler.cpp:587:    scalar_type = c10::k##name;        \
jit/serialization/unpickler.cpp:596:    c10::optional<at::QScheme> qscheme;
jit/serialization/unpickler.cpp:614:        type_resolver_(c10::QualifiedName(module_name, class_name));
jit/serialization/unpickler.cpp:615:    if (auto enum_type = type.type_->cast<c10::EnumType>()) {
jit/serialization/unpickler.cpp:621:            auto enum_holder = c10::make_intrusive<at::ivalue::EnumHolder>(
jit/serialization/unpickler.cpp:717:    c10::intrusive_ptr<distributed::rpc::RRef> rref;
jit/serialization/unpickler.cpp:720:    at::StrongTypePtr type = type_resolver_(c10::QualifiedName(typeStr));
jit/serialization/unpickler.cpp:725:        c10::static_intrusive_pointer_cast<c10::RRefInterface>(rref));
jit/serialization/type_name_uniquer.cpp:5:c10::QualifiedName TypeNameUniquer::getUniqueName(c10::ConstNamedTypePtr t) {
jit/serialization/source_range_serialization.cpp:15:  c10::IValue serialize(const SourceRange& sr);
jit/serialization/source_range_serialization.cpp:21:  c10::IValue serialize_source(const std::shared_ptr<Source>& s);
jit/serialization/source_range_serialization.cpp:23:  std::unordered_map<std::shared_ptr<Source>, c10::IValue> serialized_sources;
jit/serialization/source_range_serialization.cpp:28:  SourceRange deserialize(const c10::IValue& iv) {
jit/serialization/source_range_serialization.cpp:38:  std::shared_ptr<Source> deserialize_source(const c10::IValue& iv) {
jit/serialization/source_range_serialization.cpp:47:    c10::optional<std::string> filename_ =
jit/serialization/source_range_serialization.cpp:58:      c10::intrusive_ptr<c10::ivalue::Tuple>,
jit/serialization/source_range_serialization.cpp:63:c10::IValue SourceRangeSerializer::serialize(const SourceRange& sr) {
jit/serialization/source_range_serialization.cpp:64:  std::vector<c10::IValue> elements = {
jit/serialization/source_range_serialization.cpp:66:  return c10::ivalue::Tuple::create(std::move(elements));
jit/serialization/source_range_serialization.cpp:69:c10::IValue SourceRangeSerializer::serialize_source(
jit/serialization/source_range_serialization.cpp:74:  std::vector<c10::IValue> elements;
jit/serialization/source_range_serialization.cpp:80:  auto serialized = c10::ivalue::Tuple::create(std::move(elements));
jit/serialization/source_range_serialization.cpp:88:  std::vector<c10::IValue> ivalues;
jit/serialization/source_range_serialization.cpp:90:    std::vector<c10::IValue> row_elems{
jit/serialization/source_range_serialization.cpp:92:    ivalues.emplace_back(c10::ivalue::Tuple::create(std::move(row_elems)));
jit/serialization/source_range_serialization.cpp:95:  auto ivalue = c10::ivalue::Tuple::create(std::move(ivalues));
jit/serialization/source_range_serialization.cpp:127:c10::optional<SourceRange> ConcreteSourceRangeUnpickler::
jit/serialization/source_range_serialization.cpp:146:  return c10::nullopt;
jit/serialization/python_print.h:15:  void add(const c10::NamedTypePtr& type);
jit/serialization/python_print.h:21:  const c10::NamedTypePtr& operator[](size_t index) const {
jit/serialization/python_print.h:26:  std::vector<c10::NamedTypePtr> table_;
jit/serialization/python_print.h:27:  std::unordered_set<c10::NamedTypePtr> non_unique_;
jit/serialization/python_print.h:34:      c10::TypePrinter type_printer = nullptr,
jit/serialization/python_print.h:37:  void printNamedType(const c10::NamedTypePtr& classType);
jit/serialization/python_print.h:51:TORCH_API bool printerHasSpecialCaseFor(c10::Symbol sym);
jit/serialization/import_legacy.cpp:32:    return source_importer_.loadType(c10::QualifiedName(name));
jit/serialization/import_legacy.cpp:44:      const c10::optional<at::Device>& device)
jit/serialization/import_legacy.cpp:80:  c10::optional<at::Device> device_;
jit/serialization/import_legacy.cpp:151:      [&](const c10::QualifiedName& qn) {
jit/serialization/import_legacy.cpp:153:        return c10::StrongTypePtr(compilation_unit_, std::move(cls));
jit/serialization/import_legacy.cpp:193:        c10::Storage::use_byte_size_t(),
jit/serialization/import_legacy.cpp:240:            {0}, c10::TensorOptions(type).device(storage_it->second.device()))
jit/serialization/import_legacy.cpp:280:  const auto atoms = c10::QualifiedName(module_def.name()).atoms();
jit/serialization/import_legacy.cpp:290:      Module(c10::QualifiedName(LEGACY_moduleStack_), compilation_unit_);
jit/serialization/import_legacy.cpp:387:    const c10::optional<c10::Device>& device) {
jit/serialization/export_module.cpp:3:#include <c10/util/Exception.h>
jit/serialization/export_module.cpp:47:  return c10::ivalue::Tuple::create(std::move(ivalues));
jit/serialization/export_module.cpp:109:std::pair<IValue, c10::optional<IValue>> getFunctionTuple(
jit/serialization/export_module.cpp:121:  std::vector<c10::OperatorName> opnames;
jit/serialization/export_module.cpp:279:  c10::optional<IValue> debug_info_vals;
jit/serialization/export_module.cpp:296:    std::vector<c10::IValue>& elements,
jit/serialization/export_module.cpp:297:    c10::optional<std::vector<c10::IValue>>& debug_info_elements,
jit/serialization/export_module.cpp:328:    std::vector<c10::IValue>& elements, // note: appended to in-place
jit/serialization/export_module.cpp:329:    c10::optional<std::vector<c10::IValue>>& debug_info_elements,
jit/serialization/export_module.cpp:374:    C10_LOG_API_USAGE_ONCE("torch.script.save");
jit/serialization/export_module.cpp:384:    writeArchive("constants", c10::ivalue::Tuple::create(ivalue_constants));
jit/serialization/export_module.cpp:400:    std::vector<c10::ClassTypePtr> memoizedClassTypes;
jit/serialization/export_module.cpp:406:        [&](const c10::ClassTypePtr& t) {
jit/serialization/export_module.cpp:417:      std::string fname = prefix + c10::to_string(i++);
jit/serialization/export_module.cpp:424:    for (const c10::ClassTypePtr& wroteType : memoizedClassTypes) {
jit/serialization/export_module.cpp:515:    std::vector<c10::IValue> elements;
jit/serialization/export_module.cpp:518:    c10::optional<std::vector<c10::IValue>> debug_info_elements;
jit/serialization/export_module.cpp:520:      debug_info_elements = std::vector<c10::IValue>();
jit/serialization/export_module.cpp:535:  void convertNamedType(const c10::NamedTypePtr& class_type) {
jit/serialization/export_module.cpp:545:        [&](const c10::ConstTypePtr& t) -> c10::optional<std::string> {
jit/serialization/export_module.cpp:546:      auto namedType = t->cast<c10::NamedType>();
jit/serialization/export_module.cpp:550:      return c10::nullopt;
jit/serialization/export_module.cpp:566:  std::unordered_set<c10::NamedTypePtr> converted_types_;
jit/serialization/export_module.cpp:614:  std::vector<c10::IValue> elements;
jit/serialization/export_module.cpp:615:  c10::optional<std::vector<c10::IValue>> debug_info_elements;
jit/serialization/export_module.cpp:658:    std::vector<c10::OperatorName> const& op_names = cptr->op_names_;
jit/serialization/export.cpp:12:#include <c10/util/Exception.h>
jit/serialization/export.cpp:22:#include <c10/util/Optional.h>
jit/serialization/export.cpp:83:                  Symbol(::c10::onnx::ATen),
jit/serialization/export.cpp:142:    const c10::optional<std::string>& external_ref) {
jit/serialization/export.cpp:235:      const c10::optional<std::string> external_ref = {},
jit/serialization/export.cpp:522:    if (node->kind() == ::c10::onnx::Loop) {
jit/serialization/export.cpp:539:    if (node->kind() == ::c10::onnx::If) {
jit/serialization/export.cpp:731:      const c10::optional<std::string> external_ref = {},
jit/serialization/export.cpp:807:    const c10::optional<std::string> external_ref,
jit/serialization/unpickler.h:12:    std::function<c10::StrongTypePtr(const c10::QualifiedName&)>;
jit/serialization/unpickler.h:15:    c10::intrusive_ptr<c10::ivalue::Object>(at::StrongTypePtr, IValue)>;
jit/serialization/unpickler.h:47:      c10::optional<at::Device> device,
jit/serialization/unpickler.h:136:  std::unordered_map<std::string, c10::TypePtr> type_cache_;
jit/serialization/unpickler.h:144:  c10::optional<at::Device> device_;
jit/serialization/unpickler.h:154:void restoreAccurateTypeTags(const IValue& root, const c10::TypePtr& type_tag);
jit/jit_opt_limit.cpp:9:#include <c10/util/Exception.h>
jit/jit_opt_limit.cpp:10:#include <c10/util/StringUtil.h>
jit/jit_opt_limit.cpp:24:    int64_t n = c10::stoi(opt_limit);
jit/jit_opt_limit.cpp:45:    pass_name = c10::detail::ExcludeFileExtension(pass_name);
jit/jit_opt_limit.cpp:63:  pass = c10::detail::StripBasename(pass);
jit/jit_opt_limit.cpp:64:  pass = c10::detail::ExcludeFileExtension(pass);
jit/jit_log.h:79:        level, __FILE__, __LINE__, ::c10::str(__VA_ARGS__)); \
jit/cuda/cuda.h:2:#include <c10/core/Device.h>
jit/cuda/cuda.h:3:#include <c10/cuda/CUDAStream.h>
jit/cuda/cuda.h:10:// This class is a wrapper around c10::cuda::CUDAStream.
jit/cuda/cuda.h:12:// for c10::cuda::CUDAStream. For more details, please refer to
jit/cuda/cuda.h:13:// c10/cuda/CUDAStream.h.
jit/cuda/cuda.h:18:    stream_ = std::make_unique<c10::cuda::CUDAStream>(
jit/cuda/cuda.h:19:        c10::cuda::getStreamFromPool(priority < PRIORITY_INDEX, device));
jit/cuda/cuda.h:22:  CUDAStream(c10::cuda::CUDAStream s) {
jit/cuda/cuda.h:23:    stream_ = std::make_unique<c10::cuda::CUDAStream>(s);
jit/cuda/cuda.h:30:  c10::intrusive_ptr<CUDAEvent> recordEvent(
jit/cuda/cuda.h:31:      c10::intrusive_ptr<CUDAEvent> event);
jit/cuda/cuda.h:37:  void waitEvent(c10::intrusive_ptr<CUDAEvent> event);
jit/cuda/cuda.h:39:  void waitStream(c10::intrusive_ptr<CUDAStream> stream);
jit/cuda/cuda.h:48:  c10::Device device() const {
jit/cuda/cuda.h:65:  std::unique_ptr<c10::cuda::CUDAStream> stream_;
jit/cuda/cuda.h:94:  double elapsedTime(c10::intrusive_ptr<CUDAEvent> end) {
jit/cuda/cuda.h:109:  void record(c10::intrusive_ptr<CUDAStream> stream);
jit/cuda/cuda.h:114:  void wait(c10::intrusive_ptr<CUDAStream> stream);
jit/cuda/cuda.h:123:c10::intrusive_ptr<CUDAEvent> CUDAStream::recordEvent(
jit/cuda/cuda.h:124:    c10::intrusive_ptr<CUDAEvent> event) {
jit/cuda/cuda.h:126:    event = c10::make_intrusive<CUDAEvent>();
jit/cuda/cuda.h:133:void CUDAStream::waitEvent(c10::intrusive_ptr<CUDAEvent> event) {
jit/cuda/cuda.h:137:void CUDAStream::waitStream(c10::intrusive_ptr<CUDAStream> stream) {
jit/cuda/cuda.h:138:  auto ev = c10::make_intrusive<CUDAEvent>();
jit/cuda/cuda.h:143:void CUDAEvent::record(c10::intrusive_ptr<CUDAStream> stream) {
jit/cuda/cuda.h:151:void CUDAEvent::wait(c10::intrusive_ptr<CUDAStream> stream) {
jit/tensorexpr/eval.h:9:#include <c10/macros/Macros.h>
jit/tensorexpr/eval.h:10:#include <c10/util/Logging.h>
jit/tensorexpr/eval.h:11:#include <c10/util/math_compat.h>
jit/tensorexpr/eval.h:12:#include <c10/util/string_utils.h>
jit/tensorexpr/registerizer.h:2:#include <c10/core/ScalarType.h>
jit/tensorexpr/intrinsic_symbols.cpp:2:#include <c10/util/Half.h>
jit/tensorexpr/intrinsic_symbols.cpp:134:c10::ArrayRef<SymbolAddress> getIntrinsicSymbols() {
jit/tensorexpr/intrinsic_symbols.cpp:163:     reinterpret_cast<void*>(&c10::detail::fp16_ieee_to_fp32_value)},
jit/tensorexpr/intrinsic_symbols.cpp:165:     reinterpret_cast<void*>(&c10::detail::fp16_ieee_from_fp32_value)},
jit/tensorexpr/intrinsic_symbols.cpp:285:  return c10::ArrayRef<SymbolAddress>(symbolAddresses);
jit/tensorexpr/intrinsic_symbols.h:4:#include <c10/util/ArrayRef.h>
jit/tensorexpr/intrinsic_symbols.h:17:c10::ArrayRef<SymbolAddress> getIntrinsicSymbols();
jit/tensorexpr/external_functions.cpp:20:  std::vector<c10::ScalarType> buf_dtypes_vec;
jit/tensorexpr/external_functions.cpp:28:    buf_dtypes_vec.push_back(static_cast<c10::ScalarType>(buf_dtypes[i]));
jit/tensorexpr/tensor.cpp:3:#include <c10/util/Logging.h>
jit/tensorexpr/external_functions_registry.h:22:// `at::Tensor` (or `c10::IValue`) type there directly as it would mean that
jit/tensorexpr/registerizer.cpp:729:            c10::to_string(getBufferAccessCount(info->buf())),
jit/tensorexpr/cuda_codegen.cpp:5:#include <c10/cuda/CUDAFunctions.h>
jit/tensorexpr/cuda_codegen.cpp:1163:    c10::IntArrayRef size,
jit/tensorexpr/cuda_codegen.cpp:1164:    c10::IntArrayRef stride,
jit/tensorexpr/cuda_codegen.cpp:1165:    c10::optional<c10::ScalarType> dtype_opt,
jit/tensorexpr/cuda_codegen.cpp:1166:    c10::optional<c10::Layout> layout_opt,
jit/tensorexpr/cuda_codegen.cpp:1167:    c10::optional<c10::Device> device_opt,
jit/tensorexpr/cuda_codegen.cpp:1168:    c10::optional<bool> pin_memory_opt) {
jit/tensorexpr/cuda_codegen.cpp:1169:  c10::DeviceGuard device_guard(device_opt.value());
jit/tensorexpr/cuda_codegen.cpp:1189:        *(c10::cuda::CUDACachingAllocator::getFreeMutex()));
jit/tensorexpr/codegen.h:70:      c10::IntArrayRef size,
jit/tensorexpr/codegen.h:71:      c10::IntArrayRef stride,
jit/tensorexpr/codegen.h:72:      c10::optional<c10::ScalarType> dtype_opt,
jit/tensorexpr/codegen.h:73:      c10::optional<c10::Layout> layout_opt,
jit/tensorexpr/codegen.h:74:      c10::optional<c10::Device> device_opt,
jit/tensorexpr/codegen.h:75:      c10::optional<bool> pin_memory_opt) {
jit/tensorexpr/llvm_codegen.cpp:5:#include <c10/util/Exception.h>
jit/tensorexpr/llvm_codegen.cpp:47:C10_DEFINE_bool(
jit/tensorexpr/llvm_codegen.cpp:267:    c10::IntArrayRef size,
jit/tensorexpr/llvm_codegen.cpp:268:    c10::IntArrayRef stride,
jit/tensorexpr/llvm_codegen.cpp:269:    c10::optional<c10::ScalarType> dtype_opt,
jit/tensorexpr/llvm_codegen.cpp:270:    c10::optional<c10::Layout> layout_opt,
jit/tensorexpr/llvm_codegen.cpp:271:    c10::optional<c10::Device> device_opt,
jit/tensorexpr/llvm_codegen.cpp:272:    c10::optional<bool> pin_memory_opt) {
jit/tensorexpr/ir.h:6:#include <c10/util/string_utils.h>
jit/tensorexpr/ir.h:765:            "invalid op_type: " + c10::to_string(op_type()));
jit/tensorexpr/bounds_inference.h:18:enum C10_API_ENUM TensorAccessKind { kLoad, kStore, kMutate };
jit/tensorexpr/kernel.cpp:5:#include <c10/util/string_utils.h>
jit/tensorexpr/kernel.cpp:90:c10::optional<at::Device> pickDeviceType(
jit/tensorexpr/kernel.cpp:92:  c10::optional<at::Device> device = c10::nullopt;
jit/tensorexpr/kernel.cpp:97:        return c10::nullopt;
jit/tensorexpr/kernel.cpp:207:    const c10::VaryingShape<int64_t>& shape) {
jit/tensorexpr/kernel.cpp:219:    dimArgs.emplace_back(DimArg(sizes[idx], "i" + c10::to_string(idx)));
jit/tensorexpr/kernel.cpp:445:  auto scalarType = static_cast<c10::ScalarType>(e.dtype().scalar_type());
jit/tensorexpr/kernel.cpp:446:  if (!c10::isIntegralType(scalarType, /*includeBool*/ true)) {
jit/tensorexpr/kernel.cpp:450:  auto defaultType = c10::typeMetaToScalarType(c10::get_default_dtype());
jit/tensorexpr/kernel.cpp:454:      !c10::isIntegralType(defaultType, /*includeBool*/ true));
jit/tensorexpr/kernel.cpp:463:  auto scalarType = static_cast<c10::ScalarType>(e.dtype().scalar_type());
jit/tensorexpr/kernel.cpp:464:  auto floatType = static_cast<c10::ScalarType>(tensorexpr::ScalarType::Float);
jit/tensorexpr/kernel.cpp:465:  if (c10::isFloatingType(scalarType) &&
jit/tensorexpr/kernel.cpp:466:      (c10::elementSize(scalarType) < c10::elementSize(floatType))) {
jit/tensorexpr/kernel.cpp:623:      c10::fmap<DimArg>(shape),
jit/tensorexpr/kernel.cpp:646:      c10::fmap<DimArg>(shape),
jit/tensorexpr/kernel.cpp:671:      c10::fmap<DimArg>(shape),
jit/tensorexpr/kernel.cpp:702:      c10::fmap<DimArg>(shape),
jit/tensorexpr/kernel.cpp:736:      c10::fmap<DimArg>(shape),
jit/tensorexpr/kernel.cpp:771:      c10::fmap<DimArg>(shape),
jit/tensorexpr/kernel.cpp:798:c10::optional<ScalarType> findDtypeForValue(const torch::jit::Value* v) {
jit/tensorexpr/kernel.cpp:805:  return c10::nullopt;
jit/tensorexpr/kernel.cpp:1205:            c10::fmap<DimArg>(shape),
jit/tensorexpr/kernel.cpp:1584:            "Invalid loop-level: " + c10::to_string(loopLevels));
jit/tensorexpr/kernel.cpp:1639:          c10::to_string(static_cast<int>(backendType)));
jit/tensorexpr/kernel.cpp:1661:static bool isValidPrimProperty(const c10::optional<T>& a, T b) {
jit/tensorexpr/kernel.cpp:1700:            DimArg(IntImm::make(size), "i" + c10::to_string(i)));
jit/tensorexpr/kernel.cpp:1706:              "input" + c10::to_string(tensors_.size() + 1),
jit/tensorexpr/kernel.cpp:1884:  c10::optional<Dtype> dtype = ToDtype(ScalarType::None);
jit/tensorexpr/kernel.cpp:1970:  c10::optional<Dtype> dtype;
jit/tensorexpr/kernel.cpp:2138:        c10::TensorOptions(tensorType(tensors_[output->unique()]))
jit/tensorexpr/loopnest.cpp:9:#include <c10/util/Logging.h>
jit/tensorexpr/loopnest.cpp:10:#include <c10/util/string_utils.h>
jit/tensorexpr/loopnest.cpp:798:      auto stores = c10::filter(
jit/tensorexpr/loopnest.cpp:2117:    temp_indices[i] = new Var(std::string("idx") + c10::to_string(i), kInt);
jit/tensorexpr/kernel.h:65:      const c10::VaryingShape<int64_t>& shape);
jit/tensorexpr/kernel.h:164:    c10::optional<Dtype> dtype;
jit/tensorexpr/kernel.h:209:    c10::optional<c10::ScalarType> dtype;
jit/tensorexpr/kernel.h:210:    c10::optional<c10::Layout> layout;
jit/tensorexpr/kernel.h:211:    c10::optional<c10::Device> device;
jit/tensorexpr/kernel.h:212:    c10::optional<bool> pinned_memory;
jit/tensorexpr/kernel.h:214:    UnpackedTensorOptions(const c10::TensorOptions& opts)
jit/tensorexpr/kernel.h:251:TORCH_API c10::optional<at::Device> pickDeviceType(
jit/tensorexpr/unique_name_manager.cpp:3:#include <c10/util/string_utils.h>
jit/tensorexpr/unique_name_manager.cpp:33:      unique_name += "_" + c10::to_string(count_v);
jit/tensorexpr/cuda_codegen.h:9:#include <c10/cuda/CUDACachingAllocator.h>
jit/tensorexpr/cuda_codegen.h:10:#include <c10/cuda/CUDAGuard.h>
jit/tensorexpr/cuda_codegen.h:220:      c10::IntArrayRef size,
jit/tensorexpr/cuda_codegen.h:221:      c10::IntArrayRef stride,
jit/tensorexpr/cuda_codegen.h:222:      c10::optional<c10::ScalarType> dtype_opt,
jit/tensorexpr/cuda_codegen.h:223:      c10::optional<c10::Layout> layout_opt,
jit/tensorexpr/cuda_codegen.h:224:      c10::optional<c10::Device> device_opt,
jit/tensorexpr/cuda_codegen.h:225:      c10::optional<bool> pin_memory_opt) override;
jit/tensorexpr/llvm_codegen.h:35:      c10::IntArrayRef size,
jit/tensorexpr/llvm_codegen.h:36:      c10::IntArrayRef stride,
jit/tensorexpr/llvm_codegen.h:37:      c10::optional<c10::ScalarType> dtype_opt,
jit/tensorexpr/llvm_codegen.h:38:      c10::optional<c10::Layout> layout_opt,
jit/tensorexpr/llvm_codegen.h:39:      c10::optional<c10::Device> device_opt,
jit/tensorexpr/llvm_codegen.h:40:      c10::optional<bool> pin_memory_opt) override;
jit/tensorexpr/block_codegen.cpp:329:  return func_prefix + "_" + c10::to_string(value);
jit/tensorexpr/llvm_jit.h:4:#include <c10/util/Exception.h>
jit/tensorexpr/types.h:6:#include <c10/core/ScalarType.h>
jit/tensorexpr/types.h:7:#include <c10/util/Logging.h>
jit/tensorexpr/types.h:26:  // Undefined must be next to match c10::ScalarType;
jit/tensorexpr/types.h:115:// Call c10 type promotion directly.
jit/tensorexpr/types.h:117:  return static_cast<ScalarType>(c10::promoteTypes(
jit/tensorexpr/types.h:118:      static_cast<c10::ScalarType>(a), static_cast<c10::ScalarType>(b)));
jit/tensorexpr/types.h:125:      static_cast<ScalarType>(c10::promoteTypes(
jit/tensorexpr/types.h:126:          static_cast<c10::ScalarType>(a.scalar_type()),
jit/tensorexpr/types.h:127:          static_cast<c10::ScalarType>(b.scalar_type()))),
jit/tensorexpr/ir.cpp:244:      throw std::runtime_error("invalid op_type: " + c10::to_string(op_type));
jit/tensorexpr/types.cpp:6:#include <c10/util/Logging.h>
jit/tensorexpr/types.cpp:12:static bool is_c10_type(const ScalarType& type) {
jit/tensorexpr/types.cpp:17:  return is_c10_type(type)
jit/tensorexpr/types.cpp:18:      ? c10::isIntegralType(static_cast<c10::ScalarType>(type), true)
jit/tensorexpr/types.cpp:23:  return is_c10_type(type)
jit/tensorexpr/types.cpp:24:      ? c10::isFloatingType(static_cast<c10::ScalarType>(type))
jit/tensorexpr/types.cpp:29:  return is_c10_type(type)
jit/tensorexpr/types.cpp:30:      ? c10::isSignedType(static_cast<c10::ScalarType>(type))
jit/tensorexpr/eval.cpp:50:inline c10::Half div_value(c10::Half lhs, c10::Half rhs) {
jit/tensorexpr/eval.cpp:911:        throw std::runtime_error("Invalid op_type: " + c10::to_string(op_type));
jit/tensorexpr/eval.cpp:931:            "Invalid integral op_type: " + c10::to_string(op_type));
jit/tensorexpr/eval.cpp:941:        throw std::runtime_error("Invalid op_type: " + c10::to_string(op_type));
jit/tensorexpr/eval.cpp:957:        throw std::runtime_error("Invalid op_type: " + c10::to_string(op_type));
jit/tensorexpr/ir_visitor.h:2:#include <c10/core/ScalarType.h>
jit/tensorexpr/ir_mutator.h:2:#include <c10/core/ScalarType.h>
jit/tensorexpr/llvm_jit.cpp:25:#include <c10/util/Half.h>
jit/tensorexpr/mem_dependency_checker.h:2:#include <c10/core/ScalarType.h>
jit/frontend/source_range.h:2:#include <c10/util/Exception.h>
jit/frontend/source_range.h:3:#include <c10/util/Optional.h>
jit/frontend/source_range.h:25:        filename_(c10::nullopt),
jit/frontend/source_range.h:33:      c10::optional<std::string> filename,
jit/frontend/source_range.h:77:  const c10::optional<std::string>& filename() const {
jit/frontend/source_range.h:85:  c10::optional<SourceRange> findSourceRangeThatGenerated(
jit/frontend/source_range.h:97:  c10::optional<std::string> filename_;
jit/frontend/source_range.h:145:  c10::optional<std::tuple<std::string, size_t, size_t>> file_line_col() const {
jit/frontend/source_range.h:147:      return c10::nullopt;
jit/frontend/source_range.h:152:    // TODO: c10::optional<>::value returns an rvalue ref so can't use it here??
jit/frontend/source_range.h:168:  c10::optional<SourceRange> findSourceRangeThatGenerated() const {
jit/frontend/source_range.h:170:      return c10::nullopt;
jit/frontend/source_range.h:186:C10_EXPORT void format_stack_trace(
jit/frontend/canonicalize_modified_loop.cpp:32:  if (inp_condition == c10::nullopt || inp_condition->toBool() == false) {
jit/frontend/error_report.cpp:3:#include <c10/util/Optional.h>
jit/frontend/error_report.cpp:11:#ifndef C10_MOBILE
jit/frontend/error_report.cpp:13:#endif // C10_MOBILE
jit/frontend/error_report.cpp:21:#ifndef C10_MOBILE
jit/frontend/error_report.cpp:38:#else // defined C10_MOBILE
jit/frontend/error_report.cpp:48:#endif // C10_MOBILE
jit/frontend/error_report.cpp:66:#ifndef C10_MOBILE
jit/frontend/error_report.cpp:70:#endif // C10_MOBILE
jit/frontend/function_schema_parser.cpp:4:#include <c10/util/string_utils.h>
jit/frontend/function_schema_parser.cpp:14:using c10::Argument;
jit/frontend/function_schema_parser.cpp:15:using c10::either;
jit/frontend/function_schema_parser.cpp:16:using c10::FunctionSchema;
jit/frontend/function_schema_parser.cpp:17:using c10::IValue;
jit/frontend/function_schema_parser.cpp:18:using c10::ListType;
jit/frontend/function_schema_parser.cpp:19:using c10::make_left;
jit/frontend/function_schema_parser.cpp:20:using c10::make_right;
jit/frontend/function_schema_parser.cpp:21:using c10::OperatorName;
jit/frontend/function_schema_parser.cpp:22:using c10::OptionalType;
jit/frontend/function_schema_parser.cpp:91:  c10::OperatorName parseName() {
jit/frontend/function_schema_parser.cpp:117:    c10::optional<int32_t> N;
jit/frontend/function_schema_parser.cpp:118:    c10::optional<IValue> default_value;
jit/frontend/function_schema_parser.cpp:119:    c10::optional<std::string> alias_set;
jit/frontend/function_schema_parser.cpp:124:      N = c10::stoll(L.expect(TK_NUMBER).text());
jit/frontend/function_schema_parser.cpp:183:          return static_cast<int64_t>(c10::MemoryFormat::Contiguous);
jit/frontend/function_schema_parser.cpp:196:          return c10::stod(n);
jit/frontend/function_schema_parser.cpp:198:          int64_t v = c10::stoll(n);
jit/frontend/function_schema_parser.cpp:237:      c10::optional<int32_t> arg_N) {
jit/frontend/function_schema_parser.cpp:256:        return c10::Device(device_text);
jit/frontend/function_schema_parser.cpp:298:C10_EXPORT either<OperatorName, FunctionSchema> parseSchemaOrName(
jit/frontend/function_schema_parser.cpp:303:C10_EXPORT FunctionSchema parseSchema(const std::string& schema) {
jit/frontend/function_schema_parser.cpp:311:C10_EXPORT OperatorName parseName(const std::string& name) {
jit/frontend/tracer.h:6:#include <c10/util/Exception.h>
jit/frontend/tracer.h:29:using ::c10::ivalue::Shared;
jit/frontend/tracer.h:31:using ::c10::IValue;
jit/frontend/tracer.h:32:using ::c10::ivalue::Future;
jit/frontend/tracer.h:34:using ::c10::ArrayRef;
jit/frontend/tracer.h:35:using ::c10::TupleType;
jit/frontend/tracer.h:36:using ::c10::TupleTypePtr;
jit/frontend/tracer.h:37:using ::c10::ivalue::ConstantString;
jit/frontend/tracer.h:127:      const c10::TypePtr& type = nullptr);
jit/frontend/tracer.h:227:    c10::optional<int64_t> value);
jit/frontend/tracer.h:232:    const c10::optional<bool>& value);
jit/frontend/tracer.h:237:    const c10::optional<double>& value);
jit/frontend/tracer.h:242:    const c10::optional<at::Scalar>& value);
jit/frontend/tracer.h:247:    const c10::optional<at::Tensor>& value);
jit/frontend/tracer.h:252:    const c10::optional<ArrayRef<int64_t>>& value);
jit/frontend/tracer.h:261:    const List<c10::optional<at::Tensor>>& value);
jit/frontend/tracer.h:265:    ArrayRef<c10::intrusive_ptr<c10::ivalue::Object>> value,
jit/frontend/tracer.h:271:    const c10::optional<ArrayRef<double>>& value);
jit/frontend/tracer.h:276:    const c10::optional<std::string>& value);
jit/frontend/tracer.h:278:TORCH_API void addInputs(Node* n, const char* name, c10::Stream stream);
jit/frontend/tracer.h:284:    const c10::optional<at::ScalarType>& value);
jit/frontend/tracer.h:288:    const c10::optional<at::Device>& value);
jit/frontend/tracer.h:292:    const c10::optional<at::Layout>& value);
jit/frontend/tracer.h:297:    c10::optional<at::DimnameList> value);
jit/frontend/tracer.h:301:    const c10::optional<at::MemoryFormat>& value);
jit/frontend/tracer.h:305:    const c10::optional<at::Generator>& value);
jit/frontend/tracer.h:335:    const c10::intrusive_ptr<c10::ivalue::Object>& obj);
jit/frontend/tracer.h:342:    const c10::optional<at::Tensor>& tensor);
jit/frontend/tracer.h:348:        !std::is_convertible<torch::decay_t<T>, c10::List<at::Tensor>>::value &&
jit/frontend/tracer.h:352:            c10::intrusive_ptr<c10::ivalue::Object>>::value)>>
jit/frontend/tracer.h:356:      c10::demangle_type<T>(),
jit/frontend/tracer.h:362:TORCH_API void addOutput(Node* node, const c10::List<at::Tensor>& list);
jit/frontend/tracer.h:365:    const c10::intrusive_ptr<c10::ivalue::Object>& output);
jit/frontend/strtod.cpp:78:C10_EXPORT double strtod_c(const char* nptr, char** endptr) {
jit/frontend/strtod.cpp:83:C10_EXPORT double strtod_c(const char* nptr, char** endptr) {
jit/frontend/strtod.cpp:239:C10_EXPORT double strtod_c(const char* nptr, char** endptr) {
jit/frontend/strtod.cpp:246:C10_EXPORT float strtof_c(const char* nptr, char** endptr) {
jit/frontend/error_report.h:3:#include <c10/util/Optional.h>
jit/frontend/schema_matching.h:18:  c10::OptNameList return_field_names;
jit/frontend/schema_matching.h:22:    const ::c10::FunctionSchema& schema,
jit/frontend/schema_matching.h:27:    const c10::optional<NamedValue>& self = c10::nullopt);
jit/frontend/schema_matching.h:30:    const std::vector<const ::c10::FunctionSchema*>& schemas,
jit/frontend/schema_matching.h:35:    const c10::optional<NamedValue>& self = c10::nullopt,
jit/frontend/schema_matching.h:48:    const c10::optional<NamedValue>& self = c10::nullopt);
jit/frontend/schema_matching.h:50:TORCH_API c10::optional<size_t> findInputWithName(
jit/frontend/tree.h:8:#include <c10/util/SmallVector.h>
jit/frontend/tree.h:9:#include <c10/util/intrusive_ptr.h>
jit/frontend/tree.h:29:using TreeRef = c10::intrusive_ptr<Tree>;
jit/frontend/tree.h:34:struct Tree : c10::intrusive_ptr_target {
jit/frontend/tree.h:56:    c10::raw::intrusive_ptr::incref(this); // we are creating a new pointer
jit/frontend/tree.h:114:    return c10::make_intrusive<String>(std::forward<Args>(args)...);
jit/frontend/tree.h:146:    return c10::make_intrusive<Compound>(kind, range_, std::move(trees_));
jit/frontend/lexer.h:3:#include <c10/util/C++17.h>
jit/frontend/lexer.h:4:#include <c10/util/Exception.h>
jit/frontend/lexer.h:490:                  "invalid indent level " + c10::guts::to_string(depth), r);
jit/frontend/tree_views.h:2:#include <c10/util/string_utils.h>
jit/frontend/tree_views.h:478:      c10::optional<const List<Property>> properties = {}) {
jit/frontend/tree_views.h:879:      return c10::stoll(subtree(0)->stringValue(), /*__idx=*/0, /*base=*/0);
jit/frontend/tree_views.h:991:    return Expr(Const::create(range(), c10::to_string(value)));
jit/frontend/script_type_parser.h:22:  c10::TypePtr parseTypeFromExpr(const Expr& expr) const;
jit/frontend/script_type_parser.h:24:  c10::optional<std::pair<c10::TypePtr, int32_t>> parseBroadcastList(
jit/frontend/script_type_parser.h:27:  c10::TypePtr parseType(const std::string& str);
jit/frontend/script_type_parser.h:31:  c10::IValue parseClassConstant(const Assign& assign);
jit/frontend/script_type_parser.h:34:  c10::TypePtr parseTypeFromExprImpl(const Expr& expr) const;
jit/frontend/script_type_parser.h:36:  c10::optional<std::string> parseBaseTypeName(const Expr& expr) const;
jit/frontend/sugared_value.h:68:      const c10::optional<size_t>& size_hint = {}) {
jit/frontend/sugared_value.h:120:  virtual c10::optional<int64_t> staticLen() {
jit/frontend/sugared_value.h:121:    return c10::nullopt;
jit/frontend/sugared_value.h:127:    return staticLen() != c10::nullopt;
jit/frontend/sugared_value.h:167:      const c10::optional<size_t>& size_hint = {}) override;
jit/frontend/sugared_value.h:209:  BuiltinFunction(Symbol symbol, c10::optional<NamedValue> self)
jit/frontend/sugared_value.h:216:  c10::optional<NamedValue> self;
jit/frontend/sugared_value.h:232:      c10::optional<NamedValue> self);
jit/frontend/sugared_value.h:242:      const c10::optional<size_t>& size_hint = {}) override {
jit/frontend/sugared_value.h:291:  c10::optional<int64_t> staticLen() override {
jit/frontend/sugared_value.h:299:  BuiltinModule(std::string name, c10::optional<int64_t> version = at::nullopt)
jit/frontend/sugared_value.h:323:    return std::make_shared<BuiltinFunction>(sym, c10::nullopt);
jit/frontend/sugared_value.h:330:  c10::optional<int64_t> version;
jit/frontend/sugared_value.h:505:  CastValue(TypePtr type, c10::Symbol method)
jit/frontend/sugared_value.h:506:      : BuiltinFunction(method, c10::nullopt), type_(std::move(type)) {}
jit/frontend/sugared_value.h:619:      c10::optional<int64_t> static_len = c10::nullopt);
jit/frontend/sugared_value.h:635:  c10::optional<int64_t> staticLen() override {
jit/frontend/sugared_value.h:648:  c10::optional<int64_t> static_len_ = c10::nullopt;
jit/frontend/sugared_value.h:693:  c10::optional<int64_t> staticLen() override {
jit/frontend/sugared_value.h:711:  c10::optional<int64_t> unroll_length_ = c10::nullopt;
jit/frontend/schema_matching.cpp:190:          inferred_type_hint = c10::str(
jit/frontend/schema_matching.cpp:216:c10::optional<size_t> findInputWithName(
jit/frontend/schema_matching.cpp:223:  return c10::nullopt;
jit/frontend/schema_matching.cpp:301:static c10::optional<MatchedSchema> tryMatchSchema(
jit/frontend/schema_matching.cpp:307:    c10::optional<NamedValue> self,
jit/frontend/schema_matching.cpp:311:    return c10::nullopt;
jit/frontend/schema_matching.cpp:329:    c10::optional<NamedValue> actual_named_value;
jit/frontend/schema_matching.cpp:332:      self = c10::nullopt;
jit/frontend/schema_matching.cpp:357:            return c10::nullopt;
jit/frontend/schema_matching.cpp:376:        return c10::nullopt;
jit/frontend/schema_matching.cpp:389:      return c10::nullopt;
jit/frontend/schema_matching.cpp:403:      return c10::nullopt;
jit/frontend/schema_matching.cpp:408:  if (self != c10::nullopt && failure_messages) {
jit/frontend/schema_matching.cpp:424:    return c10::nullopt;
jit/frontend/schema_matching.cpp:437:      return c10::nullopt;
jit/frontend/schema_matching.cpp:454:  c10::OptNameList return_field_names = c10::nullopt;
jit/frontend/schema_matching.cpp:466:    const ::c10::FunctionSchema& schema,
jit/frontend/schema_matching.cpp:471:    const c10::optional<NamedValue>& self) {
jit/frontend/schema_matching.cpp:488:    const ::c10::FunctionSchema& schema,
jit/frontend/schema_matching.cpp:518:    const c10::optional<NamedValue>& self,
jit/frontend/schema_matching.cpp:566:    c10::OptNameList field_names) {
jit/frontend/schema_matching.cpp:575:        TupleType::createNamed(c10::nullopt, field_names.value(), types);
jit/frontend/schema_matching.cpp:609:    const c10::optional<NamedValue>& self) {
jit/frontend/sugared_value.cpp:212:    const c10::optional<size_t>& size_hint) {
jit/frontend/sugared_value.cpp:446:    c10::optional<int64_t> static_len) {
jit/frontend/sugared_value.cpp:452:          << " in argument " << c10::guts::to_string(i);
jit/frontend/sugared_value.cpp:565:  c10::optional<int64_t> child_len = iter_value->staticLen();
jit/frontend/sugared_value.cpp:578:      unroll_length_ = c10::nullopt;
jit/frontend/sugared_value.cpp:667:    c10::optional<NamedValue> self) {
jit/frontend/sugared_value.cpp:703:  auto enum_holder = c10::make_intrusive<at::ivalue::EnumHolder>(
jit/frontend/sugared_value.cpp:711:  auto enum_value_ivalues = c10::impl::GenericList(enum_type_);
jit/frontend/sugared_value.cpp:714:    auto enum_holder = c10::make_intrusive<at::ivalue::EnumHolder>(
jit/frontend/schema_type_parser.h:11:using TypePtr = c10::TypePtr;
jit/frontend/schema_type_parser.h:15:  c10::optional<c10::AliasInfo> parseAliasAnnotation();
jit/frontend/schema_type_parser.h:16:  std::pair<TypePtr, c10::optional<c10::AliasInfo>> parseType();
jit/frontend/schema_type_parser.h:17:  c10::optional<at::ScalarType> parseTensorDType(const std::string& dtype);
jit/frontend/schema_type_parser.h:25:  c10::optional<bool> tryToParseRequiresGrad();
jit/frontend/schema_type_parser.h:26:  c10::optional<c10::Device> tryToParseDeviceType();
jit/frontend/concrete_module_type.h:166:  std::unordered_map<std::string, c10::Symbol> builtinFunctions_;
jit/frontend/concrete_module_type.h:198:  c10::optional<py::object> getPyClass() const;
jit/frontend/concrete_module_type.h:200:  c10::optional<std::vector<std::string>> findOverloads(
jit/frontend/concrete_module_type.h:202:  c10::optional<Function*> findFunctionAttribute(const std::string& name) const;
jit/frontend/concrete_module_type.h:203:  c10::optional<c10::Symbol> findBuiltinFunction(const std::string& name) const;
jit/frontend/concrete_module_type.h:206:  c10::optional<std::string> findFailedAttribute(const std::string& name) const;
jit/frontend/parser.cpp:3:#include <c10/util/Optional.h>
jit/frontend/parser.cpp:213:  c10::optional<TreeRef> maybeParseAssignmentOp() {
jit/frontend/parser.cpp:244:        return c10::nullopt;
jit/frontend/code_template.h:32:    strings_[k] = c10::to_string(v);
jit/frontend/string_to_type.cpp:5:using namespace c10;
jit/frontend/builtin_functions.cpp:192:    cu->define(c10::nullopt, source, nativeResolver(), /*self=*/nullptr);
jit/frontend/script_type_parser.cpp:112:c10::optional<std::pair<TypePtr, int32_t>> ScriptTypeParser::parseBroadcastList(
jit/frontend/script_type_parser.cpp:131:    return c10::nullopt;
jit/frontend/script_type_parser.cpp:134:    return c10::nullopt;
jit/frontend/script_type_parser.cpp:145:      return c10::nullopt;
jit/frontend/script_type_parser.cpp:148:    return c10::nullopt;
jit/frontend/script_type_parser.cpp:184:c10::optional<std::string> ScriptTypeParser::parseBaseTypeName(
jit/frontend/script_type_parser.cpp:306:      c10::nullopt,
jit/frontend/script_type_parser.cpp:361:    c10::optional<int32_t> N = c10::nullopt;
jit/frontend/script_type_parser.cpp:375:    c10::optional<IValue> default_value = c10::nullopt;
jit/frontend/script_type_parser.cpp:385:        /*alias_info=*/c10::nullopt);
jit/frontend/script_type_parser.cpp:409:      /*N =*/c10::nullopt,
jit/frontend/script_type_parser.cpp:410:      /*default_value =*/c10::nullopt,
jit/frontend/script_type_parser.cpp:423:c10::IValue ScriptTypeParser::parseClassConstant(const Assign& assign) {
jit/frontend/lexer.cpp:3:#include <c10/util/Exception.h>
jit/frontend/lexer.cpp:67:C10_EXPORT int stringToKind(const std::string& str) {
jit/frontend/lexer.cpp:86:C10_EXPORT std::string kindToString(int kind) {
jit/frontend/lexer.cpp:96:      throw std::runtime_error("Unknown kind: " + c10::guts::to_string(kind));
jit/frontend/lexer.cpp:100:C10_EXPORT SharedParserData& sharedParserData() {
jit/frontend/function_schema_parser.h:5:#include <c10/util/either.h>
jit/frontend/function_schema_parser.h:11:TORCH_API c10::either<c10::OperatorName, c10::FunctionSchema> parseSchemaOrName(
jit/frontend/function_schema_parser.h:13:TORCH_API c10::FunctionSchema parseSchema(const std::string& schema);
jit/frontend/function_schema_parser.h:14:TORCH_API c10::OperatorName parseName(const std::string& name);
jit/frontend/schema_type_parser.cpp:6:#include <c10/util/string_utils.h>
jit/frontend/schema_type_parser.cpp:12:using c10::AliasInfo;
jit/frontend/schema_type_parser.cpp:13:using c10::BoolType;
jit/frontend/schema_type_parser.cpp:14:using c10::CapsuleType;
jit/frontend/schema_type_parser.cpp:15:using c10::ComplexType;
jit/frontend/schema_type_parser.cpp:16:using c10::DeviceObjType;
jit/frontend/schema_type_parser.cpp:17:using c10::DictType;
jit/frontend/schema_type_parser.cpp:18:using c10::FloatType;
jit/frontend/schema_type_parser.cpp:19:using c10::FutureType;
jit/frontend/schema_type_parser.cpp:20:using c10::GeneratorType;
jit/frontend/schema_type_parser.cpp:21:using c10::IntType;
jit/frontend/schema_type_parser.cpp:22:using c10::ListType;
jit/frontend/schema_type_parser.cpp:23:using c10::NoneType;
jit/frontend/schema_type_parser.cpp:24:using c10::NumberType;
jit/frontend/schema_type_parser.cpp:25:using c10::OptionalType;
jit/frontend/schema_type_parser.cpp:26:using c10::QSchemeType;
jit/frontend/schema_type_parser.cpp:27:using c10::QuantizerType;
jit/frontend/schema_type_parser.cpp:28:using c10::RRefType;
jit/frontend/schema_type_parser.cpp:29:using c10::StorageType;
jit/frontend/schema_type_parser.cpp:30:using c10::StreamObjType;
jit/frontend/schema_type_parser.cpp:31:using c10::StringType;
jit/frontend/schema_type_parser.cpp:32:using c10::Symbol;
jit/frontend/schema_type_parser.cpp:33:using c10::TensorType;
jit/frontend/schema_type_parser.cpp:34:using c10::TupleType;
jit/frontend/schema_type_parser.cpp:35:using c10::VarType;
jit/frontend/schema_type_parser.cpp:92:c10::optional<AliasInfo> SchemaTypeParser::parseAliasAnnotation() {
jit/frontend/schema_type_parser.cpp:133:        Symbol::fromQualString("alias::$" + c10::guts::to_string(next_id++)));
jit/frontend/schema_type_parser.cpp:136:    return c10::nullopt;
jit/frontend/schema_type_parser.cpp:142:c10::optional<at::ScalarType> SchemaTypeParser::parseTensorDType(
jit/frontend/schema_type_parser.cpp:153:  return c10::nullopt;
jit/frontend/schema_type_parser.cpp:156:c10::optional<c10::Device> SchemaTypeParser::tryToParseDeviceType() {
jit/frontend/schema_type_parser.cpp:161:    return c10::Device(at::kCPU);
jit/frontend/schema_type_parser.cpp:165:    c10::DeviceIndex device_idx = -1;
jit/frontend/schema_type_parser.cpp:170:      device_idx = c10::stoi(num, &num_len);
jit/frontend/schema_type_parser.cpp:172:    return c10::Device(at::kCUDA, device_idx);
jit/frontend/schema_type_parser.cpp:178:c10::optional<bool> SchemaTypeParser::tryToParseRequiresGrad() {
jit/frontend/schema_type_parser.cpp:182:  return (bool)c10::stoi(num, &num_len);
jit/frontend/schema_type_parser.cpp:192:  c10::optional<c10::Device> device;
jit/frontend/schema_type_parser.cpp:193:  c10::optional<bool> requires_grad;
jit/frontend/schema_type_parser.cpp:201:  std::vector<c10::optional<int64_t>> dims;
jit/frontend/schema_type_parser.cpp:234:          size_t stride = c10::stoi(num, &num_len);
jit/frontend/schema_type_parser.cpp:249:      dims.emplace_back(c10::nullopt);
jit/frontend/schema_type_parser.cpp:258:    size_t dim = c10::stoi(num, &num_len);
jit/frontend/schema_type_parser.cpp:272:        c10::VaryingShape<int64_t>(dims),
jit/frontend/schema_type_parser.cpp:273:        c10::VaryingShape<int64_t>(strides),
jit/frontend/schema_type_parser.cpp:279:        c10::VaryingShape<int64_t>(dims),
jit/frontend/schema_type_parser.cpp:280:        c10::VaryingShape<int64_t>(dims.size()),
jit/frontend/schema_type_parser.cpp:286:std::pair<TypePtr, c10::optional<AliasInfo>> SchemaTypeParser::parseType() {
jit/frontend/schema_type_parser.cpp:288:  c10::optional<AliasInfo> alias_info;
jit/frontend/concrete_module_type.cpp:12:  auto className = c10::QualifiedName(py::cast<std::string>(pyQualName));
jit/frontend/concrete_module_type.cpp:14:    className = c10::QualifiedName("__torch__", className.name());
jit/frontend/concrete_module_type.cpp:149:c10::optional<py::object> ConcreteModuleType::getPyClass() const {
jit/frontend/concrete_module_type.cpp:151:    return c10::nullopt;
jit/frontend/concrete_module_type.cpp:156:c10::optional<std::vector<std::string>> ConcreteModuleType::findOverloads(
jit/frontend/concrete_module_type.cpp:162:  return c10::nullopt;
jit/frontend/concrete_module_type.cpp:165:c10::optional<Function*> ConcreteModuleType::findFunctionAttribute(
jit/frontend/concrete_module_type.cpp:171:  return c10::nullopt;
jit/frontend/concrete_module_type.cpp:174:c10::optional<c10::Symbol> ConcreteModuleType::findBuiltinFunction(
jit/frontend/concrete_module_type.cpp:180:  return c10::nullopt;
jit/frontend/concrete_module_type.cpp:183:c10::optional<std::string> ConcreteModuleType::findFailedAttribute(
jit/frontend/concrete_module_type.cpp:189:  return c10::nullopt;
jit/frontend/concrete_module_type.cpp:269:      std::move(name), c10::Symbol::fromQualString(symbol_name));
jit/frontend/source_range.cpp:7:c10::optional<SourceRange> Source::findSourceRangeThatGenerated(
jit/frontend/source_range.cpp:10:    return c10::nullopt;
jit/frontend/source_range.cpp:15:C10_EXPORT void SourceRange::highlight(std::ostream& out) const {
jit/frontend/source_range.cpp:24:C10_EXPORT void format_stack_trace(
jit/frontend/source_range.cpp:60:C10_EXPORT void SourceRange::print_with_context(
jit/frontend/name_mangler.h:20:  c10::QualifiedName mangle(const c10::QualifiedName& name);
jit/frontend/name_mangler.cpp:6:c10::QualifiedName NameMangler::mangle(const c10::QualifiedName& name) {
jit/frontend/name_mangler.cpp:17:      size_t num_i = c10::stoi(num);
jit/frontend/name_mangler.cpp:25:      atom = newAtomPrefix + c10::to_string(mangleIndex_++);
jit/frontend/name_mangler.cpp:27:      return c10::QualifiedName(atoms);
jit/frontend/name_mangler.cpp:33:  atoms.insert(atoms.end() - 1, manglePrefix + c10::to_string(mangleIndex_++));
jit/frontend/name_mangler.cpp:34:  return c10::QualifiedName(atoms);
jit/frontend/ir_emitter.cpp:3:#include <c10/util/Exception.h>
jit/frontend/ir_emitter.cpp:4:#include <c10/util/StringUtil.h>
jit/frontend/ir_emitter.cpp:30:#include <c10/util/Optional.h>
jit/frontend/ir_emitter.cpp:146:      c10::optional<bool> static_if)
jit/frontend/ir_emitter.cpp:164:  c10::optional<bool> staticIf() const {
jit/frontend/ir_emitter.cpp:171:  c10::optional<bool>
jit/frontend/ir_emitter.cpp:254:  c10::optional<std::string> findVariableTypeError(const std::string& name) {
jit/frontend/ir_emitter.cpp:263:      return c10::nullopt;
jit/frontend/ir_emitter.cpp:673:    return prefix + c10::to_string(temp_name_count_++);
jit/frontend/ir_emitter.cpp:1160:        c10::optional<bool> static_if;
jit/frontend/ir_emitter.cpp:1199:          return CondValue(cond_value, refinements, c10::nullopt);
jit/frontend/ir_emitter.cpp:1226:        c10::optional<bool> static_if = c10::nullopt;
jit/frontend/ir_emitter.cpp:1391:    c10::optional<CondValue> rhs;
jit/frontend/ir_emitter.cpp:1400:    c10::optional<RefinementSet> refinements;
jit/frontend/ir_emitter.cpp:1401:    c10::optional<bool> static_if;
jit/frontend/ir_emitter.cpp:1734:    return CondValue(result, std::move(refinement), c10::nullopt);
jit/frontend/ir_emitter.cpp:1763:      c10::optional<List<Expr>> targets,
jit/frontend/ir_emitter.cpp:1764:      c10::optional<Expr> cond) {
jit/frontend/ir_emitter.cpp:2191:          /*self=*/c10::nullopt);
jit/frontend/ir_emitter.cpp:2298:    if (kind == c10::TypeKind::NumberType || kind == c10::TypeKind::IntType ||
jit/frontend/ir_emitter.cpp:2299:        kind == c10::TypeKind::BoolType || kind == c10::TypeKind::FloatType) {
jit/frontend/ir_emitter.cpp:2407:        starred_unpack ? c10::nullopt : c10::optional<size_t>{n_binders});
jit/frontend/ir_emitter.cpp:2647:        throw std::runtime_error("unknown kind " + c10::to_string(kind));
jit/frontend/ir_emitter.cpp:2694:        throw std::runtime_error("unknown kind " + c10::to_string(kind));
jit/frontend/ir_emitter.cpp:2953:        c10::optional<int64_t> iter_static_len = iterable_value->staticLen();
jit/frontend/ir_emitter.cpp:3088:      const c10::Symbol& opSymbol) {
jit/frontend/ir_emitter.cpp:3157:    // The RPC C++ entry API can take c10::Function directly.
jit/frontend/ir_emitter.cpp:3540:            : tuple_args.emplace_back(c10::nullopt);
jit/frontend/ir_emitter.cpp:3542:          : tuple_args.emplace_back(c10::nullopt);
jit/frontend/ir_emitter.cpp:3544:           : tuple_args.emplace_back(c10::nullopt);
jit/frontend/ir_emitter.cpp:3636:    std::vector<c10::optional<Value*>> exprs(
jit/frontend/ir_emitter.cpp:3637:        subscript_exprs.size(), c10::nullopt);
jit/frontend/ir_emitter.cpp:3690:      if (index->type()->kind() == c10::TypeKind::ListType) {
jit/frontend/ir_emitter.cpp:3695:            aten::tensor, {index}, {NamedValue("dtype", c10::kLong)});
jit/frontend/ir_emitter.cpp:3986:          tuple_args.emplace_back(c10::nullopt);
jit/frontend/ir_emitter.cpp:3989:        tuple_args.emplace_back(c10::nullopt);
jit/frontend/ir_emitter.cpp:4069:  define(c10::nullopt, source, nativeResolver(), nullptr);
jit/frontend/ir_emitter.cpp:4094:    const c10::optional<c10::QualifiedName>& prefix,
jit/frontend/ir_emitter.cpp:4128:    const c10::optional<QualifiedName>& prefix,
jit/frontend/ir_emitter.cpp:4182:    const c10::optional<c10::QualifiedName>& prefix,
jit/frontend/ir_emitter.cpp:4251:    const c10::optional<c10::QualifiedName>& prefix,
jit/frontend/ir_emitter.cpp:4356:    const c10::optional<QualifiedName>& prefix,
jit/frontend/ir_emitter.cpp:4426:    const c10::QualifiedName& qualifiedName,
jit/frontend/ir_emitter.cpp:4432:      InterfaceType::create(c10::QualifiedName(qualifiedName), is_module);
jit/frontend/parse_string_literal.h:2:#include <c10/util/Optional.h>
jit/frontend/parse_string_literal.h:15:inline c10::optional<char> parseOctal(const std::string& str, size_t pos) {
jit/frontend/parse_string_literal.h:18:    return c10::nullopt;
jit/frontend/parse_string_literal.h:23:      return c10::nullopt;
jit/frontend/parse_string_literal.h:27:    return c10::nullopt;
jit/passes/dead_code_elimination.cpp:14:using namespace ::c10::prim;
jit/passes/dead_code_elimination.cpp:113:        outerNode->kind() == c10::onnx::Loop) {
jit/passes/dead_code_elimination.cpp:117:        if (outerNode->kind() == c10::onnx::Loop) {
jit/frontend/tracer.cpp:7:#include <c10/util/Exception.h>
jit/frontend/tracer.cpp:46:    const c10::optional<T>& value) {
jit/frontend/tracer.cpp:60:      c10::demangle_type<T>(),
jit/frontend/tracer.cpp:106:Value* getOptTensorValueTrace(const c10::optional<at::Tensor>& var) {
jit/frontend/tracer.cpp:564:void addInputs(Node* n, const char* name, c10::optional<int64_t> value) {
jit/frontend/tracer.cpp:580:void addInputs(Node* n, const char* name, const c10::optional<bool>& value) {
jit/frontend/tracer.cpp:586:void addInputs(Node* n, const char* name, const c10::optional<double>& value) {
jit/frontend/tracer.cpp:601:    const c10::optional<at::Scalar>& value) {
jit/frontend/tracer.cpp:610:    const c10::optional<std::string>& value) {
jit/frontend/tracer.cpp:619:    const c10::optional<at::Tensor>& value) {
jit/frontend/tracer.cpp:625:    const c10::optional<at::Generator>& value) {
jit/frontend/tracer.cpp:636:void addInputs(Node* n, const char* name, c10::Stream stream) {
jit/frontend/tracer.cpp:651:    const c10::optional<at::MemoryFormat>& value) {
jit/frontend/tracer.cpp:657:    const c10::optional<at::Layout>& value) {
jit/frontend/tracer.cpp:663:    const c10::optional<at::Device>& value) {
jit/frontend/tracer.cpp:669:    c10::optional<at::DimnameList> value) {
jit/frontend/tracer.cpp:675:    const c10::optional<at::ScalarType>& value) {
jit/frontend/tracer.cpp:699:    const List<c10::optional<at::Tensor>>& value) {
jit/frontend/tracer.cpp:710:    ArrayRef<c10::intrusive_ptr<c10::ivalue::Object>> value,
jit/frontend/tracer.cpp:721:    c10::optional<caffe2::TypeMeta> opt_dtype) {
jit/frontend/tracer.cpp:758:    const c10::optional<at::IntArrayRef>& opt_value) {
jit/frontend/tracer.cpp:776:    const c10::optional<c10::ArrayRef<double>>& opt_value) {
jit/frontend/tracer.cpp:783:    const c10::intrusive_ptr<c10::ivalue::Object>& obj) {
jit/frontend/tracer.cpp:811:void addOutput(Node* node, const c10::List<at::Tensor>& outputs) {
jit/frontend/tracer.cpp:817:    const c10::intrusive_ptr<c10::ivalue::Object>& output) {
jit/frontend/tracer.cpp:881:    const c10::optional<at::Tensor>& tensor) {
jit/frontend/tracer.cpp:1001:  // `torch/csrc/jit/runtime/register_c10_ops.cpp`.
jit/passes/graph_fuser.cpp:3:#include <c10/util/Exception.h>
jit/passes/graph_fuser.cpp:490:  c10::optional<Node*> findFusedChunk(Node* group, Value* input) {
jit/passes/graph_fuser.cpp:494:      return c10::nullopt;
jit/passes/graph_fuser.cpp:505:    return c10::nullopt;
jit/passes/onnx/fixup_onnx_controlflow.cpp:12:using namespace ::c10::onnx;
jit/passes/onnx/fixup_onnx_controlflow.cpp:44:      return *scalar_type != c10::kBool;
jit/passes/onnx/fixup_onnx_controlflow.cpp:56:  if (seq_node->kind() != ::c10::onnx::SequenceInsert) {
jit/passes/onnx/fixup_onnx_controlflow.cpp:72:  if ((init_seq_node_kind != ::c10::onnx::SequenceEmpty) &&
jit/passes/onnx/fixup_onnx_controlflow.cpp:73:      (init_seq_node_kind != ::c10::prim::ListConstruct ||
jit/passes/onnx/fixup_onnx_controlflow.cpp:110:  if (node->kind() != ::c10::onnx::Loop) {
jit/passes/onnx/fixup_onnx_controlflow.cpp:153:      loop_output->setType(c10::unshapedType(loop_output->type()));
jit/passes/onnx/fixup_onnx_controlflow.cpp:197:  if (node->kind() != ::c10::onnx::Loop) {
jit/passes/onnx/fixup_onnx_controlflow.cpp:234:  if (n->kind() == ::c10::onnx::Identity &&
jit/passes/onnx/fixup_onnx_controlflow.cpp:252:  Node* const_node = graph->create(::c10::onnx::Constant, 1);
jit/passes/onnx/fixup_onnx_controlflow.cpp:291:  if (node->kind() != ::c10::onnx::If) {
jit/passes/onnx/fixup_onnx_controlflow.cpp:337:  if (node->kind() != ::c10::onnx::If) {
jit/passes/onnx/fixup_onnx_controlflow.cpp:361:    case ::c10::onnx::Loop: {
jit/passes/onnx/fixup_onnx_controlflow.cpp:364:    case ::c10::onnx::If: {
jit/passes/onnx/preprocess_for_onnx.cpp:10:using namespace ::c10::onnx;
jit/passes/onnx/constant_fold.cpp:3:#include <c10/util/Exception.h>
jit/passes/onnx/constant_fold.cpp:6:#include <c10/util/Optional.h>
jit/passes/onnx/constant_fold.cpp:13:using namespace ::c10::onnx;
jit/passes/onnx/constant_fold.cpp:51:    c10::IntArrayRef tensorSizes) {
jit/passes/onnx/constant_fold.cpp:64:c10::optional<at::Tensor> runTorchSlice_opset9(
jit/passes/onnx/constant_fold.cpp:72:    return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:75:    return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:80:    return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:98:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:101:  return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:104:c10::optional<at::Tensor> runTorchSlice_opset10(
jit/passes/onnx/constant_fold.cpp:114:    return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:122:    return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:127:    return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:136:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:144:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:162:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:170:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:179:        return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:192:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:195:  return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:198:c10::optional<at::Tensor> runTorchBackendForOnnx(
jit/passes/onnx/constant_fold.cpp:213:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:217:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:221:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:224:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:227:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:230:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:233:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:236:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:245:        return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:259:      return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:265:        return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:273:      return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:277:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:291:          return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:305:      return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:318:      return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:322:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:327:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:330:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:336:      return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:338:    return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:361:    return c10::optional<at::Tensor>(at::reshape(updated_val, shape));
jit/passes/onnx/constant_fold.cpp:365:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:369:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:372:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:377:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:381:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:397:      return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:404:    return c10::optional<at::Tensor>(updated_val);
jit/passes/onnx/constant_fold.cpp:406:    return c10::nullopt;
jit/passes/onnx/constant_fold.cpp:510:    if (updatedValWrapped == c10::nullopt) {
jit/passes/onnx/eliminate_unused_items.cpp:4:#include <c10/util/Optional.h>
jit/passes/onnx/eliminate_unused_items.cpp:11:using namespace ::c10::onnx;
jit/passes/onnx/eval_peephole.cpp:5:#include <c10/util/Optional.h>
jit/passes/onnx/eval_peephole.cpp:12:using namespace ::c10::onnx;
jit/passes/onnx/helper.cpp:8:using namespace ::c10::onnx;
jit/passes/onnx/helper.cpp:54:c10::optional<at::ScalarType> ONNXTypeToATenType(int32_t onnx_type) {
jit/passes/onnx/helper.cpp:85:  return c10::optional<at::ScalarType>{};
jit/passes/onnx/list_model_parameters.cpp:11:using namespace ::c10::onnx;
jit/passes/onnx/list_model_parameters.cpp:55:  args.emplace_back(Argument(name, nullptr, c10::nullopt, attr));
jit/passes/onnx/unpack_quantized_weights.cpp:11:using ::c10::Dispatcher;
jit/passes/onnx/unpack_quantized_weights.cpp:12:using ::c10::DispatchKey;
jit/passes/onnx/unpack_quantized_weights.cpp:16:using namespace ::c10::onnx;
jit/passes/onnx/unpack_quantized_weights.cpp:27:  c10::optional<IValue> scale;
jit/passes/onnx/unpack_quantized_weights.cpp:143:// passed to the appropriate unpack function using c10::Dispatcher. We insert
jit/passes/onnx/unpack_quantized_weights.cpp:169:    c10::optional<at::Tensor> bias;
jit/passes/onnx/unpack_quantized_weights.cpp:174:    c10::optional<torch::List<int64_t>> stride, padding, dilation,
jit/passes/onnx/unpack_quantized_weights.cpp:176:    c10::optional<int64_t> groups;
jit/passes/onnx/unpack_quantized_weights.cpp:177:    c10::optional<int64_t> transpose;
jit/passes/onnx/unpack_quantized_weights.cpp:230:        torch::List<c10::IValue> optional = elements[2].toList();
jit/passes/onnx/unpack_quantized_weights.cpp:269:                    .typed<std::tuple<at::Tensor, c10::optional<at::Tensor>>(
jit/passes/onnx/unpack_quantized_weights.cpp:290:        reinterpret_cast<int8_t*>(unpacked_weight.data_ptr<c10::qint8>());
jit/passes/onnx/unpack_quantized_weights.cpp:334:    auto bias_data = (int32_t*)q_bias.data_ptr<c10::qint32>();
jit/passes/onnx/unpack_quantized_weights.cpp:350:      std::vector<c10::optional<torch::List<int64_t>>> conv_ints_args;
jit/passes/onnx/cast_all_constant_to_floating.cpp:6:using namespace ::c10::onnx;
jit/passes/onnx/remove_inplace_ops_for_onnx.cpp:44:      graph->insert(aten::arange, {size}, {NamedValue("dtype", c10::kLong)});
jit/passes/onnx/remove_inplace_ops_for_onnx.cpp:56:      graph->insert(aten::arange, {size}, {NamedValue("dtype", c10::kLong)});
jit/passes/onnx/remove_inplace_ops_for_onnx.cpp:98:  ConvertedIndex(Value* index, c10::Symbol orig_node_kind)
jit/passes/onnx/remove_inplace_ops_for_onnx.cpp:102:  c10::Symbol orig_node_kind;
jit/passes/onnx/remove_inplace_ops_for_onnx.cpp:155:            aten::arange, {size}, {NamedValue("dtype", c10::kLong)});
jit/passes/onnx/scalar_type_analysis.cpp:9:using namespace ::c10::onnx;
jit/passes/onnx/scalar_type_analysis.cpp:15:  size_t operator()(const c10::ScalarType& type) const {
jit/passes/onnx/scalar_type_analysis.cpp:20:static const std::unordered_map<c10::ScalarType, int, ScalarTypeHashFunction>
jit/passes/onnx/scalar_type_analysis.cpp:22:        {c10::kFloat, 1},
jit/passes/onnx/scalar_type_analysis.cpp:23:        {c10::kByte, 2},
jit/passes/onnx/scalar_type_analysis.cpp:24:        {c10::kChar, 3},
jit/passes/onnx/scalar_type_analysis.cpp:25:        {c10::kShort, 5},
jit/passes/onnx/scalar_type_analysis.cpp:26:        {c10::kInt, 6},
jit/passes/onnx/scalar_type_analysis.cpp:27:        {c10::kLong, 7},
jit/passes/onnx/scalar_type_analysis.cpp:28:        {c10::kBool, 9},
jit/passes/onnx/scalar_type_analysis.cpp:29:        {c10::kHalf, 10},
jit/passes/onnx/scalar_type_analysis.cpp:30:        {c10::kDouble, 11},
jit/passes/onnx/scalar_type_analysis.cpp:33:static int64_t ScalarTypeToONNXType(const c10::ScalarType& st) {
jit/passes/onnx/scalar_type_analysis.cpp:70:    const c10::ScalarType& scalar_type) {
jit/passes/onnx/scalar_type_analysis.cpp:81:static c10::optional<c10::ScalarType> PromoteScalarTypes(
jit/passes/onnx/scalar_type_analysis.cpp:82:    const std::vector<c10::ScalarType>& types) {
jit/passes/onnx/scalar_type_analysis.cpp:84:    return c10::nullopt;
jit/passes/onnx/scalar_type_analysis.cpp:88:    st = c10::promoteTypes(st, types[i]);
jit/passes/onnx/scalar_type_analysis.cpp:96:static c10::optional<c10::ScalarType> PromoteScalarTypesWithCategory(
jit/passes/onnx/scalar_type_analysis.cpp:97:    const std::vector<c10::ScalarType>& typesFromTensors,
jit/passes/onnx/scalar_type_analysis.cpp:98:    const std::vector<c10::ScalarType>& typesFromScalars) {
jit/passes/onnx/scalar_type_analysis.cpp:102:  auto getTypeCategory = [](c10::ScalarType t) {
jit/passes/onnx/scalar_type_analysis.cpp:103:    if (c10::kBool == t) {
jit/passes/onnx/scalar_type_analysis.cpp:106:    if (c10::isIntegralType(t, /*includeBool=*/false)) {
jit/passes/onnx/scalar_type_analysis.cpp:109:    if (c10::isFloatingType(t)) {
jit/passes/onnx/scalar_type_analysis.cpp:115:  if (c10::nullopt == typeFromScalar) {
jit/passes/onnx/scalar_type_analysis.cpp:117:  } else if (c10::nullopt == typeFromTensor) {
jit/passes/onnx/scalar_type_analysis.cpp:130:static c10::optional<c10::ScalarType> InferExpectedScalarType(const Node* n) {
jit/passes/onnx/scalar_type_analysis.cpp:131:  std::vector<c10::ScalarType> typesFromTensors;
jit/passes/onnx/scalar_type_analysis.cpp:132:  std::vector<c10::ScalarType> typesFromScalars;
jit/passes/onnx/scalar_type_analysis.cpp:135:      [](const Value* input) -> c10::optional<at::ScalarType> {
jit/passes/onnx/scalar_type_analysis.cpp:139:    return c10::nullopt;
jit/passes/onnx/scalar_type_analysis.cpp:155:          typesFromScalars.emplace_back(c10::kLong);
jit/passes/onnx/scalar_type_analysis.cpp:195:  c10::optional<c10::ScalarType> st = c10::nullopt;
jit/passes/onnx/scalar_type_analysis.cpp:225:    const c10::ScalarType& scalar_type) {
jit/passes/onnx/scalar_type_analysis.cpp:229:              << c10::toString(scalar_type)
jit/passes/onnx/scalar_type_analysis.cpp:238:        input_tensor_type ? input_tensor_type->scalarType() : c10::nullopt;
jit/passes/onnx/scalar_type_analysis.cpp:268:    const c10::ScalarType& scalar_type) {
jit/passes/onnx/peephole.cpp:3:#include <c10/util/Exception.h>
jit/passes/onnx/peephole.cpp:6:#include <c10/util/Optional.h>
jit/passes/onnx/peephole.cpp:17:using namespace ::c10::onnx;
jit/passes/onnx/peephole.cpp:89:c10::optional<size_t> fusibleExpandTo(
jit/passes/onnx/peephole.cpp:93:    return c10::nullopt;
jit/passes/onnx/peephole.cpp:100:      return c10::nullopt;
jit/passes/onnx/peephole.cpp:139:      c10::optional<size_t> axis = fusibleExpandTo(
jit/passes/onnx/peephole.cpp:151:      if (axis == c10::nullopt)
jit/passes/onnx/peephole.cpp:594:          c10::Symbol seq_node_kind = lc_node->inputs().size() > 0
jit/passes/onnx/shape_type_inference.cpp:79:  c10::optional<at::ScalarType> scalar_type;
jit/passes/onnx/shape_type_inference.cpp:87:      c10::SymbolicShape(),
jit/passes/onnx/shape_type_inference.cpp:88:      c10::VaryingShape<c10::Stride>{},
jit/passes/onnx/shape_type_inference.cpp:91:    std::vector<c10::ShapeSymbol> sizes;
jit/passes/onnx/shape_type_inference.cpp:97:        sizes.emplace_back(c10::ShapeSymbol::fromStaticSize(dim.dim_value()));
jit/passes/onnx/shape_type_inference.cpp:99:        c10::optional<c10::ShapeSymbol> sym = c10::nullopt;
jit/passes/onnx/shape_type_inference.cpp:112:            sym = c10::ShapeSymbol::newSymbol();
jit/passes/onnx/shape_type_inference.cpp:119:          sym = c10::ShapeSymbol::newSymbol();
jit/passes/onnx/shape_type_inference.cpp:125:    v_type = v_type->withSymbolicShapes(c10::SymbolicShape(sizes));
jit/passes/onnx/shape_type_inference.cpp:140:  c10::optional<at::ScalarType> scalar_type;
jit/passes/onnx/shape_type_inference.cpp:189:  if (node_kind == ::c10::onnx::Loop || node_kind == ::c10::onnx::If) {
jit/passes/onnx/shape_type_inference.cpp:210:  TORCH_INTERNAL_ASSERT(lc_node->kind() == ::c10::prim::ListConstruct);
jit/passes/onnx/shape_type_inference.cpp:218:  c10::optional<at::ScalarType> scalar_type = c10::nullopt;
jit/passes/onnx/shape_type_inference.cpp:235:        n_graph->insertNode(n_graph->create(::c10::onnx::Concat, 1));
jit/passes/onnx/shape_type_inference.cpp:254:        c10::SymbolicShape(),
jit/passes/onnx/shape_type_inference.cpp:255:        c10::VaryingShape<c10::Stride>{},
jit/passes/onnx/shape_type_inference.cpp:274:          case ::c10::onnx::Constant: {
jit/passes/onnx/shape_type_inference.cpp:280:          case ::c10::prim::ListConstruct: {
jit/passes/onnx/shape_type_inference.cpp:283:          case ::c10::prim::PackPadded: {
jit/passes/onnx/shape_type_inference.cpp:294:                  ->insertNode(n_graph->create(::c10::onnx::Constant)
jit/passes/onnx/shape_type_inference.cpp:363:  TORCH_INTERNAL_ASSERT(n->kind() == ::c10::onnx::If);
jit/passes/onnx/shape_type_inference.cpp:384:    case ::c10::onnx::If: {
jit/passes/onnx/shape_type_inference.cpp:395:    case ::c10::onnx::SequenceInsert: {
jit/passes/onnx/shape_type_inference.cpp:447:  if (nullptr != n && n->kind() == ::c10::onnx::Loop) {
jit/passes/onnx/shape_type_inference.cpp:549:  std::map<std::string, ::c10::ShapeSymbol> name_to_sym;
jit/passes/onnx/shape_type_inference.cpp:570:          name_to_sym[name] = ::c10::ShapeSymbol::newSymbol();
jit/passes/onnx/shape_type_inference.cpp:580:          input_tensor_type->withSymbolicShapes(::c10::SymbolicShape(shape)));
jit/passes/onnx/shape_type_inference.cpp:586:  if (node->kind() == ::c10::onnx::SplitToSequence ||
jit/passes/onnx/shape_type_inference.cpp:587:      node->kind() == ::c10::onnx::SequenceInsert ||
jit/passes/onnx/shape_type_inference.cpp:588:      node->kind() == ::c10::onnx::SequenceEmpty ||
jit/passes/onnx/shape_type_inference.cpp:589:      node->kind() == ::c10::onnx::SequenceErase ||
jit/passes/onnx/shape_type_inference.cpp:590:      node->kind() == ::c10::onnx::SequenceConstruct ||
jit/passes/onnx/shape_type_inference.cpp:591:      node->kind() == ::c10::onnx::Loop || node->kind() == ::c10::onnx::If)
jit/passes/onnx/fold_if_node.cpp:6:#include <c10/util/Optional.h>
jit/passes/onnx/fold_if_node.cpp:13:using namespace ::c10::onnx;
jit/passes/onnx/fold_if_node.cpp:72:static c10::optional<int> findIndex(
jit/passes/onnx/fold_if_node.cpp:73:    c10::ArrayRef<torch::jit::Value*> outputs,
jit/passes/onnx/fold_if_node.cpp:75:  c10::optional<int> idx = c10::nullopt;
jit/passes/onnx/fold_if_node.cpp:137:        val = c10::scalar_to_tensor((int64_t)*rank);
jit/passes/onnx/fold_if_node.cpp:145:        val = c10::scalar_to_tensor(prod);
jit/passes/onnx/helper.h:36:TORCH_API c10::optional<at::ScalarType> ONNXTypeToATenType(int32_t onnx_type);
jit/passes/specialize_autogradzero.cpp:3:#include <c10/util/Exception.h>
jit/passes/specialize_autogradzero.cpp:36:        c10::Dict<std::string, int64_t> noneCountsDict;
jit/passes/specialize_autogradzero.cpp:53:          auto noneCounts = c10::impl::toTypedDict<std::string, int64_t>(
jit/passes/create_autodiff_subgraphs.cpp:3:#include <c10/util/Exception.h>
jit/passes/create_autodiff_subgraphs.cpp:247:  c10::optional<Node*> tryMerge(Node* consumer, Node* producer) {
jit/passes/create_autodiff_subgraphs.cpp:253:      return c10::nullopt;
jit/passes/utils/check_alias_annotation.cpp:22:    c10::List<at::Tensor> newList;
jit/passes/utils/check_alias_annotation.cpp:32:    auto newList = c10::impl::GenericList(source.elementType());
jit/passes/utils/check_alias_annotation.cpp:76:  AliasAndIValue(c10::optional<at::AliasInfo> aliasInfo, IValue iValue)
jit/passes/utils/check_alias_annotation.cpp:79:  const c10::optional<at::AliasInfo> aliasInfo;
jit/passes/utils/check_alias_annotation.cpp:161:c10::optional<IValue> toIValueProp(const Value* v) {
jit/passes/utils/check_alias_annotation.cpp:169:        return c10::nullopt;
jit/passes/utils/check_alias_annotation.cpp:186:      return c10::nullopt;
jit/passes/utils/check_alias_annotation.cpp:195:  return c10::nullopt;
jit/passes/utils/memory_dag.h:3:#include <c10/util/ArrayRef.h>
jit/passes/utils/memory_dag.h:4:#include <c10/util/Optional.h>
jit/passes/utils/memory_dag.h:5:#include <c10/util/flat_hash_map.h>
jit/passes/utils/memory_dag.h:6:#include <c10/util/sparse_bitset.h>
jit/passes/utils/memory_dag.h:15:typedef c10::SparseBitVector<256> MemoryLocations;
jit/passes/utils/memory_dag.h:153:  mutable c10::optional<MemoryLocations> cachedMemoryLocations_;
jit/passes/utils/memory_dag.cpp:3:#include <c10/util/flat_hash_map.h>
jit/passes/utils/subgraph_utils.cpp:14:std::vector<c10::optional<const Use>> gatherLastUses(
jit/passes/utils/subgraph_utils.cpp:16:  return fmap(values, [&](Value* v) -> c10::optional<const Use> {
jit/passes/utils/subgraph_utils.cpp:69:  std::vector<c10::optional<const Use>> last_uses_;
jit/passes/utils/subgraph_utils.cpp:76:    c10::optional<Node*> existing,
jit/passes/utils/subgraph_utils.cpp:393:      to_merge, c10::nullopt, db, [&]() {
jit/passes/utils/subgraph_utils.cpp:402:  std::string hash_str = c10::to_string(c10::hash<std::string>{}(s));
jit/passes/peephole_alias_sensitive.cpp:42:        auto dim_uses = c10::filter(node->output()->uses(), [](const Use& use) {
jit/passes/erase_number_types.cpp:35:              scalar_to_tensor(s), c10::nullopt, it->scope());
jit/passes/shape_analysis.cpp:3:#include <c10/util/Exception.h>
jit/passes/shape_analysis.cpp:26:using namespace ::c10::prim;
jit/passes/shape_analysis.cpp:186:  // returns c10::nullopt if any Tensor in the schema does not have a known
jit/passes/shape_analysis.cpp:188:  c10::optional<std::vector<TensorTypePtr>> gatherTensorTypes(
jit/passes/shape_analysis.cpp:195:      return c10::nullopt;
jit/passes/shape_analysis.cpp:202:      return c10::nullopt;
jit/passes/shape_analysis.cpp:206:        return c10::nullopt;
jit/passes/shape_analysis.cpp:210:            return c10::nullopt;
jit/passes/shape_analysis.cpp:214:          return c10::nullopt;
jit/passes/shape_analysis.cpp:223:  c10::ScalarType unionScalarTypes(
jit/passes/shape_analysis.cpp:224:      c10::ScalarType original,
jit/passes/shape_analysis.cpp:225:      c10::ScalarType next) {
jit/passes/shape_analysis.cpp:226:    if (original == c10::ScalarType::Undefined) {
jit/passes/shape_analysis.cpp:229:      return c10::promoteTypes(original, next);
jit/passes/shape_analysis.cpp:237:  c10::optional<c10::ScalarType> getPromotedTypeForArithmeticOp(Node* node) {
jit/passes/shape_analysis.cpp:238:    c10::ScalarType dimmed = c10::ScalarType::Undefined;
jit/passes/shape_analysis.cpp:239:    c10::ScalarType zerodim = c10::ScalarType::Undefined;
jit/passes/shape_analysis.cpp:245:        return c10::nullopt;
jit/passes/shape_analysis.cpp:264:    if (c10::ScalarType::Bool == dimmed &&
jit/passes/shape_analysis.cpp:265:        c10::ScalarType::Undefined != zerodim) {
jit/passes/shape_analysis.cpp:271:    if (c10::ScalarType::Undefined != dimmed) {
jit/passes/shape_analysis.cpp:519:      if (inp == c10::nullopt) {
jit/passes/shape_analysis.cpp:529:      if (inp == c10::nullopt) {
jit/passes/shape_analysis.cpp:536:        default_type, default_device, dims, /*requires_grad=*/c10::nullopt));
jit/passes/shape_analysis.cpp:610:              at::kLong, at::kCPU, 0, /*requires_grad=*/c10::nullopt));
jit/passes/shape_analysis.cpp:613:              at::kDouble, at::kCPU, 0, /*requires_grad=*/c10::nullopt));
jit/passes/shape_analysis.cpp:739:  static c10::optional<size_t> determineListSize(Value* list) {
jit/passes/shape_analysis.cpp:741:    if (auto shape = constant_as<c10::List<int64_t>>(list)) {
jit/passes/shape_analysis.cpp:748:    return c10::nullopt;
jit/passes/shape_analysis.cpp:767:           c10::optional<at::ScalarType> t) -> TensorTypePtr {
jit/passes/shape_analysis.cpp:776:          max_dims = c10::nullopt;
jit/passes/shape_analysis.cpp:785:          /*requires_grad=*/c10::nullopt);
jit/passes/shape_analysis.cpp:914:              const auto out_type = c10::toValueType(scalar_type);
jit/passes/shape_analysis.cpp:985:            if (c10::promoteTypes(*first_scalar_type, *second_scalar_type) !=
jit/passes/shape_analysis.cpp:1034:            if (c10::ScalarType::Bool == *first_scalar_type &&
jit/passes/shape_analysis.cpp:1035:                c10::ScalarType::Bool != *second_scalar_type) {
jit/passes/shape_analysis.cpp:1037:                  c10::promoteTypes(*first_scalar_type, *second_scalar_type);
jit/passes/shape_analysis.cpp:1287:                                             c10::optional<IValue> opt_dtype =
jit/passes/shape_analysis.cpp:1288:                                                 c10::nullopt) -> type_vec_t {
jit/passes/shape_analysis.cpp:1332:            if (node->input(1)->type()->kind() == c10::TypeKind::NoneType) {
jit/passes/shape_analysis.cpp:1454:          dtype, device, dim, /*requires_grad=*/c10::nullopt)};
jit/passes/shape_analysis.cpp:1484:          in_type, in_dev, dim, /*requires_grad=*/c10::nullopt)};
jit/passes/shape_analysis.cpp:1537:          if (auto maybe_size = node->get<c10::List<int64_t>>(attr::size)) {
jit/passes/shape_analysis.cpp:1769:            c10::Device default_device = *type->device();
jit/passes/shape_analysis.cpp:1773:              if (inp == c10::nullopt) {
jit/passes/shape_analysis.cpp:1783:              if (inp == c10::nullopt) {
jit/passes/shape_analysis.cpp:1794:                /*requires_grad=*/c10::nullopt));
jit/passes/shape_analysis.cpp:1945:      if (c10::ScalarType::Bool == *first_scalar_type &&
jit/passes/shape_analysis.cpp:1946:          c10::ScalarType::Bool != *second_scalar_type) {
jit/passes/shape_analysis.cpp:1948:            c10::promoteTypes(*first_scalar_type, *second_scalar_type);
jit/passes/shape_analysis.cpp:2025:      auto dims = node->get<c10::List<int64_t>>(attr::dim).value();
jit/passes/shape_analysis.cpp:2070:      auto sizes = node->get<c10::List<int64_t>>(attr::size).value();
jit/passes/shape_analysis.cpp:2117:          node->get<c10::List<int64_t>>(attr::size).value().vec());
jit/passes/shape_analysis.cpp:2151:    } else if (node->kind() == ::c10::onnx::Shape) {
jit/passes/shape_analysis.cpp:2159:    } else if (node->kind() == ::c10::onnx::Reshape) {
jit/passes/freeze_module.cpp:308:      c10::List<IValue> elems = std::move(attr).toList();
jit/passes/fixup_trace_scope_blocks.cpp:133:      const c10::QualifiedName& prefix,
jit/passes/fixup_trace_scope_blocks.cpp:188:      const c10::QualifiedName& prefix,
jit/passes/fixup_trace_scope_blocks.cpp:196:      auto attr_qualname = c10::QualifiedName(inp_node->s(attr::scope));
jit/passes/fixup_trace_scope_blocks.cpp:388:      mangled += c10::to_string(method_idx);
jit/passes/fixup_trace_scope_blocks.cpp:421:      auto qualname = c10::QualifiedName(
jit/passes/update_differentiable_graph_requires_grad.h:17:    c10::optional<bool> new_requires_grad);
jit/passes/frozen_conv_folding.cpp:2:#include <c10/core/ScalarType.h>
jit/passes/frozen_conv_folding.cpp:3:#include <c10/util/Exception.h>
jit/passes/frozen_conv_folding.cpp:181:    if (c10::promoteTypes(
jit/passes/tensorexpr_fuser.h:34:    c10::function_ref<TensorTypePtr(const TensorTypePtr& t)>;
jit/passes/tensorexpr_fuser.h:55:    c10::Symbol kind);
jit/passes/decompose_ops.cpp:15:c10::AliasAnalysisKind aliasAnalysisFromSchema() {
jit/passes/decompose_ops.cpp:16:  return c10::AliasAnalysisKind::FROM_SCHEMA;
jit/passes/decompose_ops.cpp:23:c10::optional<bool> isDefined(Value* tensor) {
jit/passes/decompose_ops.cpp:65:           c10::SmallVector<int64_t, 8> sizes(ndim, 1);
jit/passes/decompose_ops.cpp:78:           c10::SmallVector<int64_t, 8> sizes(input_ndim, 1);
jit/passes/loop_unrolling.cpp:4:#include <c10/util/Exception.h>
jit/passes/loop_unrolling.cpp:21:  c10::optional<bool> maybe_value = constant_as<bool>(val);
jit/passes/loop_unrolling.cpp:181:  c10::optional<int64_t> const_len = constant_as<int64_t>(trip_count);
jit/passes/onnx.cpp:4:#include <c10/util/Exception.h>
jit/passes/onnx.cpp:46:void checkONNXCompatibility(const c10::FunctionSchema& schema) {
jit/passes/onnx.cpp:145:                ", type: " + c10::typeKindToString(elem_type->kind()));
jit/passes/onnx.cpp:150:              " in Caffe2 operator: " + c10::typeKindToString(type->kind()));
jit/passes/create_functional_graphs.cpp:3:#include <c10/util/Exception.h>
jit/passes/remove_dropout.cpp:29:    if ((node->kind() == c10::Symbol::fromQualString("aten::dropout") ||
jit/passes/remove_dropout.cpp:30:         node->kind() == c10::Symbol::fromQualString("aten::dropout_")) &&
jit/passes/lower_graph.h:8:using ModulePtr = c10::intrusive_ptr<c10::ivalue::Object>;
jit/passes/graph_rewrite_helper.cpp:30:c10::optional<IValue> getIValue(
jit/passes/graph_rewrite_helper.cpp:37:std::unordered_map<std::string, c10::IValue> getConvParams(
jit/passes/graph_rewrite_helper.cpp:40:  std::unordered_map<std::string, c10::IValue> calc_values;
jit/passes/graph_rewrite_helper.cpp:248:    // If output_min/max are not constant, we get c10::nullopt.
jit/passes/quantization/helper.cpp:177:std::tuple<c10::QScheme, QParamVector> _per_tensor_asym_qparam =
jit/passes/quantization/helper.cpp:179:        c10::kPerTensorAffine,
jit/passes/quantization/helper.cpp:183:             std::make_pair(".scalar_type", IValue(c10::kQUInt8))}));
jit/passes/quantization/helper.cpp:187:std::tuple<c10::QScheme, QParamVector> _per_tensor_sym_qparam = std::make_tuple(
jit/passes/quantization/helper.cpp:188:    c10::kPerTensorAffine,
jit/passes/quantization/helper.cpp:192:         std::make_pair(".scalar_type", IValue(c10::kQUInt8))}));
jit/passes/quantization/helper.cpp:196:std::unordered_map<NodeKind, std::tuple<c10::QScheme, QParamVector>>
jit/passes/quantization/helper.cpp:235:    c10::optional<int> n) {
jit/passes/quantization/helper.cpp:244:    c10::optional<int> n) {
jit/passes/quantization/helper.cpp:316:c10::optional<Use> getClampScalarInputUse(Value* v) {
jit/passes/quantization/helper.cpp:325:  return c10::nullopt;
jit/passes/quantization/helper.cpp:477:c10::optional<std::tuple<c10::QScheme, QParamVector>> getFixedQParams(Node* n) {
jit/passes/quantization/helper.cpp:487:  return c10::nullopt;
jit/passes/quantization/helper.cpp:518:      if (matchAtenFuncToUse(use, func_input.func_name, c10::nullopt)) {
jit/passes/quantization/helper.cpp:524:      if (matchCallFuncToUse(use, func_input.func_name, c10::nullopt)) {
jit/passes/quantization/helper.cpp:626:c10::optional<Module> getInvokedModuleOpt(
jit/passes/quantization/helper.cpp:637:      return c10::nullopt;
jit/passes/quantization/helper.cpp:670:c10::optional<std::string> getModuleName(Value* value) {
jit/passes/quantization/helper.cpp:675:  return c10::nullopt;
jit/passes/quantization/insert_observers.cpp:20:using ModuleQConfigMap = std::unordered_map<ModulePtr, c10::optional<QConfig>>;
jit/passes/quantization/insert_observers.cpp:25:  inline size_t operator()(const c10::optional<QConfig>& qconfig_opt) const {
jit/passes/quantization/insert_observers.cpp:36:    std::unordered_map<c10::optional<QConfig>, TypePtr, OptionalQConfigHash>;
jit/passes/quantization/insert_observers.cpp:38:using OptionalModuleVector = std::vector<c10::optional<Module>>;
jit/passes/quantization/insert_observers.cpp:49:    const c10::optional<QConfig>& parent_qconfig = c10::nullopt) {
jit/passes/quantization/insert_observers.cpp:50:  c10::optional<QConfig> qconfig;
jit/passes/quantization/insert_observers.cpp:186:      const std::function<TypePtr(TypePtr, c10::optional<QConfig>)>&
jit/passes/quantization/insert_observers.cpp:238:      const std::function<TypePtr(TypePtr, c10::optional<QConfig>)>&
jit/passes/quantization/insert_observers.cpp:256:                             const c10::optional<QConfig>& qconfig) {
jit/passes/quantization/insert_observers.cpp:276:        c10::QualifiedName(*target.type()->name(), method.name());
jit/passes/quantization/insert_observers.cpp:386:  c10::optional<Module> getObserverFor(Value* v);
jit/passes/quantization/insert_observers.cpp:969:  std::string observer_name = "_observer_" + c10::to_string(uid_++);
jit/passes/quantization/insert_observers.cpp:971:    observer_name = "_observer_" + c10::to_string(uid_++);
jit/passes/quantization/insert_observers.cpp:1264:c10::optional<Module> InsertObserversHelper::getObserverFor(Value* v) {
jit/passes/quantization/insert_observers.cpp:1270:  c10::optional<Module> result;
jit/passes/quantization/insert_observers.cpp:1336:  std::vector<c10::optional<Module>> block_input_observers;
jit/passes/quantization/insert_observers.cpp:1338:  std::vector<c10::optional<Module>> block_output_observers;
jit/passes/quantization/insert_observers.cpp:1366:        block_output_observers.emplace_back(c10::nullopt);
jit/passes/quantization/insert_observers.h:11:    return std::hash<c10::intrusive_ptr<c10::ivalue::Object>>()(arg._ivalue());
jit/passes/quantization/insert_observers.h:21:using QConfigDict = std::unordered_map<std::string, c10::optional<QConfig>>;
jit/passes/quantization/dedup_module_uses.cpp:100:    std::string child_name = original_name + "_" + c10::to_string(uid++);
jit/passes/quantization/dedup_module_uses.cpp:102:      child_name = original_name + "_" + c10::to_string(uid++);
jit/passes/quantization/insert_quant_dequant.cpp:3:#include <c10/core/QScheme.h>
jit/passes/quantization/insert_quant_dequant.cpp:25:c10::QScheme toAffine(c10::QScheme qscheme) {
jit/passes/quantization/insert_quant_dequant.cpp:27:    case c10::kPerTensorAffine:
jit/passes/quantization/insert_quant_dequant.cpp:28:    case c10::kPerTensorSymmetric:
jit/passes/quantization/insert_quant_dequant.cpp:29:      return c10::kPerTensorAffine;
jit/passes/quantization/insert_quant_dequant.cpp:30:    case c10::kPerChannelAffine:
jit/passes/quantization/insert_quant_dequant.cpp:31:    case c10::kPerChannelSymmetric:
jit/passes/quantization/insert_quant_dequant.cpp:32:      return c10::kPerChannelAffine;
jit/passes/quantization/insert_quant_dequant.cpp:39:  return qscheme == c10::kPerChannelAffine ||
jit/passes/quantization/insert_quant_dequant.cpp:40:      qscheme == c10::kPerChannelSymmetric;
jit/passes/quantization/insert_quant_dequant.cpp:48:  c10::optional<bool> result;
jit/passes/quantization/insert_quant_dequant.cpp:115:          original_val->debugName() + ".dequant." + c10::guts::to_string(id))
jit/passes/quantization/insert_quant_dequant.cpp:159:  Value* float_scalar_type = graph->insertConstant(IValue(c10::kFloat));
jit/passes/quantization/insert_quant_dequant.cpp:210:c10::optional<std::string> findObserverName(Value* v) {
jit/passes/quantization/insert_quant_dequant.cpp:223:  return c10::nullopt;
jit/passes/quantization/insert_quant_dequant.cpp:246:c10::optional<std::string> getEmbeddingBagObsName(
jit/passes/quantization/insert_quant_dequant.cpp:256:  return c10::nullopt;
jit/passes/quantization/insert_quant_dequant.cpp:261:    c10::optional<std::string> embedding_bag_name) {
jit/passes/quantization/insert_quant_dequant.cpp:678:  std::tuple<c10::QScheme, QParamVector> getQSchemeAndQParamVector(
jit/passes/quantization/insert_quant_dequant.cpp:681:  void checkQScheme(Graph* g, c10::QScheme qscheme) {
jit/passes/quantization/insert_quant_dequant.cpp:689:          c10::toString(qscheme_for_graph_.at(g)),
jit/passes/quantization/insert_quant_dequant.cpp:691:          c10::toString(qscheme));
jit/passes/quantization/insert_quant_dequant.cpp:725:      const c10::optional<std::tuple<c10::QScheme, QParamVector>>& qparams_opt =
jit/passes/quantization/insert_quant_dequant.cpp:726:          c10::nullopt);
jit/passes/quantization/insert_quant_dequant.cpp:750:  std::unordered_map<Graph*, c10::QScheme> qscheme_for_graph_;
jit/passes/quantization/insert_quant_dequant.cpp:963:          original_value->debugName() + name + "_" + c10::to_string(uid++);
jit/passes/quantization/insert_quant_dequant.cpp:966:            original_value->debugName() + name + "_" + c10::to_string(uid++);
jit/passes/quantization/insert_quant_dequant.cpp:977:std::tuple<c10::QScheme, QParamVector> InsertQuantDeQuantHelper::
jit/passes/quantization/insert_quant_dequant.cpp:991:  c10::QScheme qscheme = c10::kPerTensorAffine;
jit/passes/quantization/insert_quant_dequant.cpp:1047:        c10::optional<Module> m;
jit/passes/quantization/insert_quant_dequant.cpp:1074:    const c10::optional<std::tuple<c10::QScheme, QParamVector>>& qparams_opt) {
jit/passes/quantization/insert_quant_dequant.cpp:1170:c10::optional<std::vector<Value*>> getDequantizedInputs(Value* output) {
jit/passes/quantization/insert_quant_dequant.cpp:1191:  return c10::nullopt;
jit/passes/quantization/helper.h:35:c10::optional<Use> getClampScalarInputUse(Value* v);
jit/passes/quantization/helper.h:56:TORCH_API c10::optional<std::string> getModuleName(Value* value);
jit/passes/quantization/helper.h:88:TORCH_API c10::optional<std::tuple<c10::QScheme, QParamVector>> getFixedQParams(
jit/passes/quantization/helper.h:118:    c10::optional<int> nth_arg);
jit/passes/quantization/helper.h:125:    c10::optional<int> nth_arg);
jit/passes/quantization/helper.h:147:// c10::nullopt
jit/passes/quantization/helper.h:148:c10::optional<Module> getInvokedModuleOpt(
jit/passes/inline_autodiff_subgraphs.cpp:70:  UpdateDifferentiableGraphRequiresGrad(subgraph, c10::nullopt);
jit/passes/update_differentiable_graph_requires_grad.cpp:11:    c10::optional<bool> new_requires_grad) {
jit/passes/update_differentiable_graph_requires_grad.cpp:34:    c10::optional<bool> new_requires_grad) {
jit/passes/constant_propagation.h:24:TORCH_API c10::optional<Stack> runNodeIfInputsAreConstant(
jit/passes/fold_conv_bn.cpp:88:      auto optional_tensor = c10::optional<at::Tensor>();
jit/passes/remove_mutation.h:3:#include <c10/util/Exception.h>
jit/passes/tensorexpr_fuser.cpp:4:#include <c10/util/FunctionRef.h>
jit/passes/tensorexpr_fuser.cpp:22:C10_DEFINE_bool(
jit/passes/tensorexpr_fuser.cpp:777:  c10::optional<Node*> tryMerge(Node* fusion_group, Node* to_merge) {
jit/passes/tensorexpr_fuser.cpp:779:      return c10::nullopt;
jit/passes/tensorexpr_fuser.cpp:796:        return c10::nullopt;
jit/passes/tensorexpr_fuser.cpp:893:        if (*st == c10::ScalarType::Byte) {
jit/passes/tensorexpr_fuser.cpp:967:        if (c10::isComplexType(*st) || c10::isQIntType(*st) ||
jit/passes/tensorexpr_fuser.cpp:968:            *st == c10::ScalarType::BFloat16) {
jit/passes/tensorexpr_fuser.cpp:1152:    RECORD_FUNCTION("TensorExpr", std::vector<c10::IValue>());
jit/passes/graph_rewrite_helper.h:17:c10::optional<IValue> getIValue(
jit/passes/prepack_folding.cpp:32:          auto attr_name = attr_name_base + c10::to_string(uid++);
jit/passes/inliner.cpp:11:using namespace ::c10::prim;
jit/passes/cuda_graph_fuser.h:12:struct C10_EXPORT RegisterCudaFuseGraph
jit/passes/liveness.h:7:#include <c10/util/sparse_bitset.h>
jit/passes/liveness.h:16:using SparseBitVector = ::c10::SparseBitVector<256>;
jit/passes/normalize_ops.cpp:3:#include <c10/util/Exception.h>
jit/passes/canonicalize.cpp:144:c10::optional<const Use> firstOrLastUse(Value* v, bool find_first) {
jit/passes/canonicalize.cpp:146:    return c10::nullopt;
jit/passes/canonicalize.cpp:159:std::vector<c10::optional<const Use>> gatherFirstUses(
jit/passes/canonicalize.cpp:161:  return fmap(values, [&](Value* v) -> c10::optional<const Use> {
jit/passes/canonicalize.cpp:171:  std::vector<c10::optional<const Use>> first_uses = gatherFirstUses(values);
jit/passes/canonicalize.cpp:178:    if (first_uses[i1] == c10::nullopt && first_uses[i2] == c10::nullopt) {
jit/passes/canonicalize.cpp:181:    if (first_uses[i1] == c10::nullopt) {
jit/passes/canonicalize.cpp:183:    } else if (first_uses[i2] == c10::nullopt) {
jit/passes/canonicalize.h:14:TORCH_API c10::optional<const Use> firstOrLastUse(Value* v, bool find_first);
jit/passes/lower_graph.cpp:13:  c10::intrusive_ptr<c10::ivalue::Object> obj;
jit/passes/lower_graph.cpp:36:      auto obj_hash = std::hash<c10::ivalue::Object*>{}(slot.obj.get());
jit/passes/lower_graph.cpp:38:      return c10::hash_combine(obj_hash, offset_hash);
jit/passes/peephole_list_idioms.cpp:13:c10::optional<size_t> normalizeIndex(int64_t index, size_t len) {
jit/passes/peephole_list_idioms.cpp:20:    return c10::nullopt;
jit/passes/peephole.cpp:19:static bool mustBeEqual(const c10::optional<T>& a, const c10::optional<T>& b) {
jit/passes/peephole.cpp:96:          auto expanded_sizes = node->get<c10::List<int64_t>>(attr::size);
jit/passes/peephole.cpp:185:          c10::ScalarType dtype = *maybe_dtype;
jit/passes/hoist_conv_packed_params.cpp:57:  c10::IValue packedParams = convModule.attr("_packed_params");
jit/passes/hoist_conv_packed_params.cpp:67:  std::string newName = newNameBase + "." + c10::to_string(nameUniqueCounter);
jit/passes/hoist_conv_packed_params.cpp:70:    newName = newNameBase + "." + c10::to_string(nameUniqueCounter);
jit/passes/hoist_conv_packed_params.cpp:103:        c10::optional<std::string> moduleName = getModuleName(n->inputs()[0]);
jit/passes/pass_manager.h:73:struct C10_EXPORT PassManager {
jit/passes/lower_tuples.cpp:4:#include <c10/util/Exception.h>
jit/passes/constant_propagation.cpp:5:#include <c10/util/Exception.h>
jit/passes/constant_propagation.cpp:20:c10::optional<std::vector<IValue>> runNodeIfInputsAreConstant(
jit/passes/constant_propagation.cpp:28:      return c10::nullopt;
jit/passes/constant_propagation.cpp:35:        return c10::nullopt;
jit/passes/constant_propagation.cpp:73:        return c10::nullopt;
jit/passes/constant_propagation.cpp:80:        return c10::nullopt;
jit/passes/constant_propagation.cpp:90:        return c10::nullopt;
jit/passes/constant_propagation.cpp:96:        return c10::nullopt;
jit/passes/batch_mm.cpp:5:#include <c10/util/Exception.h>
jit/passes/batch_mm.cpp:20:c10::AliasAnalysisKind aliasAnalysisIsSpecialCase() {
jit/passes/batch_mm.cpp:388:    return c10::filter(mms, [](Node* n) { return n != nullptr; });
jit/passes/canonicalize_graph_fuser_ops.cpp:13:static c10::optional<std::vector<ChunkOutput>> getChunkOutputs(Node* chunk) {
jit/passes/canonicalize_graph_fuser_ops.cpp:27:        return c10::nullopt;
jit/passes/canonicalize_graph_fuser_ops.cpp:34:      return c10::nullopt;
jit/codegen/cuda/executor.cpp:14:#include <c10/core/DeviceGuard.h>
jit/codegen/cuda/executor.cpp:15:#include <c10/cuda/CUDAFunctions.h>
jit/codegen/cuda/executor.cpp:16:#include <c10/cuda/CUDAStream.h>
jit/codegen/cuda/executor.cpp:182:    c10::IntArrayRef isizes(sizes);
jit/codegen/cuda/executor.cpp:185:    c10::IntArrayRef isizes(sizes);
jit/codegen/cuda/executor.cpp:189:        isizes, at_type, c10::nullopt, options.device, c10::nullopt);
jit/codegen/cuda/executor.cpp:385:    const c10::optional<size_t>& opt_code) {
jit/codegen/cuda/executor.cpp:400:  c10::DeviceGuard dg(options_.device);
jit/codegen/cuda/executor.cpp:418:            c10::nullopt,
jit/codegen/cuda/executor.cpp:420:            c10::nullopt));
jit/codegen/cuda/executor.cpp:426:            c10::nullopt,
jit/codegen/cuda/executor.cpp:428:            c10::nullopt));
jit/codegen/cuda/lower_utils.cpp:343:        ir_builder.create<kir::Int>(c10::nullopt), kir_id, scope);
jit/codegen/cuda/graph_fuser.cpp:3:#include <c10/util/Exception.h>
jit/codegen/cuda/graph_fuser.cpp:299:  c10::optional<Node*> findFusedChunk(Node* group, Value* input) {
jit/codegen/cuda/graph_fuser.cpp:303:      return c10::nullopt;
jit/codegen/cuda/graph_fuser.cpp:314:    return c10::nullopt;
jit/codegen/cuda/executor_utils.h:5:#include <c10/core/DeviceType.h>
jit/codegen/cuda/executor_utils.h:6:#include <c10/util/Exception.h>
jit/codegen/cuda/executor_utils.h:32:    const c10::Device& device);
jit/codegen/cuda/executor_utils.h:37:    const c10::Device& device);
jit/codegen/cuda/scheduler.h:16:    const at::ArrayRef<c10::IValue> inputs);
jit/codegen/cuda/scheduler.h:59:TORCH_CUDA_CU_API c10::optional<ReductionParams> getReductionHeuristics(
jit/codegen/cuda/scheduler.h:61:    const at::ArrayRef<c10::IValue>& fusion_inputs,
jit/codegen/cuda/partition.cpp:18:static c10::optional<c10::Device> getDevice(const Value* value) {
jit/codegen/cuda/partition.cpp:21:    return c10::nullopt;
jit/codegen/cuda/partition.cpp:26:static c10::optional<c10::Device> getDevice(const Node* node) {
jit/codegen/cuda/partition.cpp:34:  return c10::nullopt;
jit/codegen/cuda/partition.cpp:37:static bool isFusableDevice(const Node* node, const c10::Device device) {
jit/codegen/cuda/partition.cpp:86:    const std::vector<c10::optional<int64_t>>& shape) {
jit/codegen/cuda/partition.cpp:194:         const std::vector<c10::optional<int64_t>>& shape,
jit/codegen/cuda/partition.cpp:220:      std::vector<c10::optional<int64_t>> n_input_shape =
jit/codegen/cuda/partition.cpp:256:      std::vector<c10::optional<int64_t>> n_output_shape =
jit/codegen/cuda/ir_base_nodes.cpp:10:#include <c10/util/Exception.h>
jit/codegen/cuda/ir_base_nodes.cpp:174:c10::optional<int64_t> Val::getInt() const {
jit/codegen/cuda/ir_base_nodes.cpp:182:  return c10::optional<int64_t>();
jit/codegen/cuda/ir_base_nodes.cpp:195:c10::optional<DataType> Val::getDataType() const {
jit/codegen/cuda/ir_internal_nodes.h:432:  c10::optional<unsigned int> getReductionAxis() const;
jit/codegen/cuda/ir_internal_nodes.h:671:  c10::optional<ParallelType> getParallelDim() const;
jit/codegen/cuda/ir_internal_nodes.h:675:  c10::optional<ParallelType> getParallelIndex() const;
jit/codegen/cuda/kernel_cache.cpp:99:      auto dims_list = constant_as<c10::List<int64_t>>(n->input(1));
jit/codegen/cuda/kernel_cache.cpp:379:        options.device = c10::Device(DeviceType::CUDA, device_index);
jit/codegen/cuda/kernel_cache.cpp:391:        options.device = c10::Device(DeviceType::CUDA, device_index);
jit/codegen/cuda/kernel_cache.cpp:447:      // std::vector<c10::ShapeSymbol> vec_shape_symbol =
jit/codegen/cuda/kernel_cache.cpp:450:      // std::vector<c10::optional<c10::Stride>> vec_optional_stride =
jit/codegen/cuda/kernel_cache.cpp:456:      std::vector<c10::ShapeSymbol> permuted_vec_ss;
jit/codegen/cuda/kernel_cache.cpp:457:      std::vector<c10::optional<c10::Stride>> permuted_vec_optional_stride;
jit/codegen/cuda/kernel_cache.cpp:464:          c10::optional<size_t> index = vec_optional_stride[i]->stride_index_;
jit/codegen/cuda/kernel_cache.cpp:474:          permuted_vec_optional_stride.emplace_back(c10::Stride(
jit/codegen/cuda/kernel_cache.cpp:479:          permuted_vec_optional_stride.emplace_back(c10::nullopt);
jit/codegen/cuda/kernel_cache.cpp:501:          auto dims_list = constant_as<c10::List<int64_t>>(n->input(1));
jit/codegen/cuda/scheduler.cpp:85:bool scheduleFusion(Fusion* fusion, const at::ArrayRef<c10::IValue> inputs) {
jit/codegen/cuda/scheduler.cpp:291:TORCH_CUDA_CU_API c10::optional<ReductionParams> getReductionHeuristics(
jit/codegen/cuda/scheduler.cpp:293:    const at::ArrayRef<c10::IValue>& fusion_inputs,
jit/codegen/cuda/scheduler.cpp:300:    return c10::nullopt;
jit/codegen/cuda/scheduler.cpp:311:    return c10::nullopt;
jit/codegen/cuda/scheduler.cpp:319:      red_expr->getExprType() != c10::nullopt &&
jit/codegen/cuda/dispatch.h:3:#include <c10/util/Exception.h>
jit/codegen/cuda/ir_base_nodes.h:3:#include <c10/core/ScalarType.h>
jit/codegen/cuda/ir_base_nodes.h:4:#include <c10/util/Exception.h>
jit/codegen/cuda/ir_base_nodes.h:5:#include <c10/util/Optional.h>
jit/codegen/cuda/ir_base_nodes.h:84:  virtual c10::optional<ValType> getValType() const {
jit/codegen/cuda/ir_base_nodes.h:85:    return c10::nullopt;
jit/codegen/cuda/ir_base_nodes.h:87:  virtual c10::optional<DataType> getDataType() const {
jit/codegen/cuda/ir_base_nodes.h:88:    return c10::nullopt;
jit/codegen/cuda/ir_base_nodes.h:90:  virtual c10::optional<ExprType> getExprType() const {
jit/codegen/cuda/ir_base_nodes.h:91:    return c10::nullopt;
jit/codegen/cuda/ir_base_nodes.h:96:    return getValType() != c10::nullopt;
jit/codegen/cuda/ir_base_nodes.h:99:    return getExprType() != c10::nullopt;
jit/codegen/cuda/ir_base_nodes.h:195:  c10::optional<ValType> getValType() const override {
jit/codegen/cuda/ir_base_nodes.h:200:  c10::optional<DataType> getDataType() const override;
jit/codegen/cuda/ir_base_nodes.h:213:  c10::optional<int64_t> getInt() const;
jit/codegen/cuda/ir_base_nodes.h:302:  c10::optional<ExprType> getExprType() const override {
jit/codegen/cuda/executor_kernel_arg.cpp:14:    c10::ScalarType dtype,
jit/codegen/cuda/executor_kernel_arg.cpp:17:    case c10::ScalarType::Float:
jit/codegen/cuda/executor_kernel_arg.cpp:19:    case c10::ScalarType::Half:
jit/codegen/cuda/executor_kernel_arg.cpp:21:    case c10::ScalarType::Bool:
jit/codegen/cuda/executor_kernel_arg.cpp:23:    case c10::ScalarType::Long:
jit/codegen/cuda/executor_kernel_arg.cpp:39:  c10::ScalarType dtype = tensor.scalar_type();
jit/codegen/cuda/executor_kernel_arg.cpp:57:    case c10::ScalarType::Double:
jit/codegen/cuda/executor_kernel_arg.cpp:60:    case c10::ScalarType::Long:
jit/codegen/cuda/executor_kernel_arg.cpp:90:void KernelArgumentHolder::push(const c10::ArrayRef<c10::IValue>& args) {
jit/codegen/cuda/ir_nodes.cpp:435:        factor->as<NamedScalar>()->getParallelDim() != c10::nullopt,
jit/codegen/cuda/ir_nodes.cpp:663:c10::optional<unsigned int> TensorDomain::getReductionAxis() const {
jit/codegen/cuda/ir_nodes.cpp:668:    return c10::optional<unsigned int>();
jit/codegen/cuda/ir_nodes.cpp:670:    return c10::optional<unsigned int>(std::distance(domain_.begin(), it));
jit/codegen/cuda/ir_nodes.cpp:1448:c10::optional<ParallelType> NamedScalar::getParallelDim() const {
jit/codegen/cuda/ir_nodes.cpp:1450:    return c10::optional<ParallelType>(ParallelType::TIDx);
jit/codegen/cuda/ir_nodes.cpp:1452:    return c10::optional<ParallelType>(ParallelType::TIDy);
jit/codegen/cuda/ir_nodes.cpp:1454:    return c10::optional<ParallelType>(ParallelType::TIDz);
jit/codegen/cuda/ir_nodes.cpp:1456:    return c10::optional<ParallelType>(ParallelType::BIDx);
jit/codegen/cuda/ir_nodes.cpp:1458:    return c10::optional<ParallelType>(ParallelType::BIDy);
jit/codegen/cuda/ir_nodes.cpp:1460:    return c10::optional<ParallelType>(ParallelType::BIDz);
jit/codegen/cuda/ir_nodes.cpp:1462:  return c10::nullopt;
jit/codegen/cuda/ir_nodes.cpp:1465:c10::optional<ParallelType> NamedScalar::getParallelIndex() const {
jit/codegen/cuda/ir_nodes.cpp:1467:    return c10::optional<ParallelType>(ParallelType::TIDx);
jit/codegen/cuda/ir_nodes.cpp:1469:    return c10::optional<ParallelType>(ParallelType::TIDy);
jit/codegen/cuda/ir_nodes.cpp:1471:    return c10::optional<ParallelType>(ParallelType::TIDz);
jit/codegen/cuda/ir_nodes.cpp:1473:    return c10::optional<ParallelType>(ParallelType::BIDx);
jit/codegen/cuda/ir_nodes.cpp:1475:    return c10::optional<ParallelType>(ParallelType::BIDy);
jit/codegen/cuda/ir_nodes.cpp:1477:    return c10::optional<ParallelType>(ParallelType::BIDz);
jit/codegen/cuda/ir_nodes.cpp:1479:  return c10::nullopt;
jit/codegen/cuda/kernel_ir.cpp:25:c10::optional<ParallelType> NamedScalar::getParallelDim() const {
jit/codegen/cuda/kernel_ir.cpp:27:    return c10::optional<ParallelType>(ParallelType::TIDx);
jit/codegen/cuda/kernel_ir.cpp:29:    return c10::optional<ParallelType>(ParallelType::TIDy);
jit/codegen/cuda/kernel_ir.cpp:31:    return c10::optional<ParallelType>(ParallelType::TIDz);
jit/codegen/cuda/kernel_ir.cpp:33:    return c10::optional<ParallelType>(ParallelType::BIDx);
jit/codegen/cuda/kernel_ir.cpp:35:    return c10::optional<ParallelType>(ParallelType::BIDy);
jit/codegen/cuda/kernel_ir.cpp:37:    return c10::optional<ParallelType>(ParallelType::BIDz);
jit/codegen/cuda/kernel_ir.cpp:39:  return c10::nullopt;
jit/codegen/cuda/kernel_ir.cpp:42:c10::optional<ParallelType> NamedScalar::getParallelIndex() const {
jit/codegen/cuda/kernel_ir.cpp:44:    return c10::optional<ParallelType>(ParallelType::TIDx);
jit/codegen/cuda/kernel_ir.cpp:46:    return c10::optional<ParallelType>(ParallelType::TIDy);
jit/codegen/cuda/kernel_ir.cpp:48:    return c10::optional<ParallelType>(ParallelType::TIDz);
jit/codegen/cuda/kernel_ir.cpp:50:    return c10::optional<ParallelType>(ParallelType::BIDx);
jit/codegen/cuda/kernel_ir.cpp:52:    return c10::optional<ParallelType>(ParallelType::BIDy);
jit/codegen/cuda/kernel_ir.cpp:54:    return c10::optional<ParallelType>(ParallelType::BIDz);
jit/codegen/cuda/kernel_ir.cpp:56:  return c10::nullopt;
jit/codegen/cuda/index_compute.cpp:3:#include <c10/util/Exception.h>
jit/codegen/cuda/interface.cpp:85:    const c10::TensorTypePtr& guard_tensor_type) {
jit/codegen/cuda/interface.cpp:214:              const c10::TensorTypePtr& guard_tensor_type =
jit/codegen/cuda/arith.cpp:3:#include <c10/util/Exception.h>
jit/codegen/cuda/arith.cpp:165:      c10::nullopt) {
jit/codegen/cuda/instrumentation.cpp:6:#include <c10/util/win32-headers.h>
jit/codegen/cuda/interface.h:31:C10_EXPORT CudaFuserInterface* getFuserInterface();
jit/codegen/cuda/interface.h:33:C10_EXPORT void compileFusionGroup(Node* fusion_node);
jit/codegen/cuda/interface.h:34:C10_EXPORT void runFusionGroup(const Node* fusion_node, Stack& stack);
jit/codegen/cuda/interface.h:35:C10_EXPORT void fuseGraph(std::shared_ptr<Graph>&);
jit/codegen/cuda/interface.h:36:C10_EXPORT bool canFuseNode(const Node* node);
jit/codegen/cuda/interface.h:38:C10_EXPORT bool complyWith(
jit/codegen/cuda/interface.h:40:    const c10::TensorTypePtr& guard_tensor_type);
jit/codegen/cuda/ir_interface_nodes.h:30:  Bool() : Val(ValType::Scalar, DataType::Bool), maybe_value_{c10::nullopt} {}
jit/codegen/cuda/ir_interface_nodes.h:49:  c10::optional<bool> value() const {
jit/codegen/cuda/ir_interface_nodes.h:56:  const c10::optional<bool> maybe_value_;
jit/codegen/cuda/ir_interface_nodes.h:70:  Float() : Val(ValType::Scalar, DataType::Float), maybe_value_{c10::nullopt} {}
jit/codegen/cuda/ir_interface_nodes.h:89:  c10::optional<ScalarType> value() const {
jit/codegen/cuda/ir_interface_nodes.h:96:  const c10::optional<ScalarType> maybe_value_;
jit/codegen/cuda/ir_interface_nodes.h:108:  Half() : Val(ValType::Scalar, DataType::Half), maybe_value_{c10::nullopt} {}
jit/codegen/cuda/ir_interface_nodes.h:127:  c10::optional<float> value() const {
jit/codegen/cuda/ir_interface_nodes.h:134:  const c10::optional<float> maybe_value_;
jit/codegen/cuda/ir_interface_nodes.h:145:  Int() : Val(ValType::Scalar, DataType::Int), maybe_value_{c10::nullopt} {}
jit/codegen/cuda/ir_interface_nodes.h:164:  c10::optional<ScalarType> value() const {
jit/codegen/cuda/ir_interface_nodes.h:171:  const c10::optional<ScalarType> maybe_value_;
jit/codegen/cuda/ir_interface_nodes.h:218:  TensorView(const std::shared_ptr<c10::TensorType>& tensor_type);
jit/codegen/cuda/ir_interface_nodes.h:221:      : TensorView(jit_value->type()->cast<c10::TensorType>()) {}
jit/codegen/cuda/ir_interface_nodes.h:236:  c10::optional<unsigned int> getReductionAxis() const;
jit/codegen/cuda/utils.h:3:#include <c10/util/Exception.h>
jit/codegen/cuda/kernel_cache.h:7:#include <c10/util/ArrayRef.h>
jit/codegen/cuda/executor_utils.cpp:5:#include <c10/cuda/CUDACachingAllocator.h>
jit/codegen/cuda/executor_utils.cpp:49:// param and provided c10:device
jit/codegen/cuda/executor_utils.cpp:53:    const c10::Device& device,
jit/codegen/cuda/executor_utils.cpp:108:    const c10::TypePtr& arg_type,
jit/codegen/cuda/executor_utils.cpp:119:    case c10::TypeKind::IntType:
jit/codegen/cuda/executor_utils.cpp:122:    case c10::TypeKind::FloatType:
jit/codegen/cuda/executor_utils.cpp:125:    case c10::TypeKind::BoolType:
jit/codegen/cuda/executor_utils.cpp:141:    const c10::IValue& arg,
jit/codegen/cuda/executor_utils.cpp:143:    const c10::Device& device,
jit/codegen/cuda/executor_utils.cpp:157:    const c10::Device& device) {
jit/codegen/cuda/executor_utils.cpp:181:    const c10::Device& device) {
jit/codegen/cuda/executor_utils.cpp:240:          aten_inputs[i].type()->kind() == c10::TypeKind::IntType);
jit/codegen/cuda/executor_utils.cpp:258:        *(c10::cuda::CUDACachingAllocator::getFreeMutex()));
jit/codegen/cuda/kernel_ir.h:11:#include <c10/util/Optional.h>
jit/codegen/cuda/kernel_ir.h:57:  c10::optional<ParallelType> getParallelDim() const;
jit/codegen/cuda/kernel_ir.h:61:  c10::optional<ParallelType> getParallelIndex() const;
jit/codegen/cuda/kernel_ir.h:69:  explicit Bool(Passkey, const c10::optional<bool>& value)
jit/codegen/cuda/kernel_ir.h:82:  c10::optional<bool> value() const {
jit/codegen/cuda/kernel_ir.h:87:  const c10::optional<bool> maybe_value_;
jit/codegen/cuda/kernel_ir.h:94:  explicit Float(Passkey, const c10::optional<ScalarType>& value)
jit/codegen/cuda/kernel_ir.h:107:  c10::optional<ScalarType> value() const {
jit/codegen/cuda/kernel_ir.h:112:  const c10::optional<ScalarType> maybe_value_;
jit/codegen/cuda/kernel_ir.h:117:  explicit Half(Passkey, const c10::optional<float>& value)
jit/codegen/cuda/kernel_ir.h:130:  c10::optional<float> value() const {
jit/codegen/cuda/kernel_ir.h:135:  const c10::optional<float> maybe_value_;
jit/codegen/cuda/kernel_ir.h:142:  explicit Int(Passkey, const c10::optional<ScalarType>& value)
jit/codegen/cuda/kernel_ir.h:158:  c10::optional<ScalarType> value() const {
jit/codegen/cuda/kernel_ir.h:163:  const c10::optional<ScalarType> maybe_value_;
jit/codegen/cuda/executor_kernel_arg.h:4:#include <c10/util/Exception.h>
jit/codegen/cuda/executor_kernel_arg.h:146:    c10::ScalarType dtype,
jit/codegen/cuda/executor_kernel_arg.h:163:  void push(const c10::ArrayRef<c10::IValue>& args);
jit/codegen/cuda/type.h:3:#include <c10/core/ScalarType.h>
jit/codegen/cuda/type.h:4:#include <c10/util/Exception.h>
jit/codegen/cuda/type.h:185:TORCH_CUDA_CU_API c10::optional<std::string> inline_op_str(const UnaryOpType);
jit/codegen/cuda/type.h:186:TORCH_CUDA_CU_API c10::optional<std::string> inline_op_str(const BinaryOpType);
jit/codegen/cuda/type.h:188:TORCH_CUDA_CU_API c10::optional<std::string> cast_func_str(
jit/codegen/cuda/lower_loops.cpp:184:          ir_builder_.create<kir::Int>(c10::nullopt), id, inner_fl);
jit/codegen/cuda/parser.cpp:462:            auto dims_list = constant_as<c10::List<int64_t>>(node->input(1));
jit/codegen/cuda/parser.cpp:479:                    static_cast<c10::TypePtr>(NoneType::get()))) {
jit/codegen/cuda/parser.cpp:542:    if (val->type()->isSubtypeOf(static_cast<c10::TypePtr>(FloatType::get()))) {
jit/codegen/cuda/parser.cpp:552:                   static_cast<c10::TypePtr>(IntType::get()))) {
jit/codegen/cuda/parser.cpp:562:                   static_cast<c10::TypePtr>(BoolType::get()))) {
jit/codegen/cuda/parser.cpp:572:                   static_cast<c10::TypePtr>(NoneType::get()))) {
jit/codegen/cuda/expr_evaluator.h:8:#include <c10/util/Optional.h>
jit/codegen/cuda/expr_evaluator.h:30:  // Returns value if found in mapping, otherwise returns c10::nullopt
jit/codegen/cuda/expr_evaluator.h:31:  c10::optional<Int::ScalarType> getValue(Val* value);
jit/codegen/cuda/expr_evaluator.h:35:  c10::optional<Int::ScalarType> inferValue(Val* value);
jit/codegen/cuda/expr_evaluator.h:73:  c10::optional<Int::ScalarType> maybeHandle(Val*);
jit/codegen/cuda/type.cpp:498:TORCH_CUDA_CU_API c10::optional<std::string> inline_op_str(
jit/codegen/cuda/type.cpp:501:  return str != nullptr ? c10::optional<std::string>(std::string(str))
jit/codegen/cuda/type.cpp:502:                        : c10::nullopt;
jit/codegen/cuda/type.cpp:505:c10::optional<std::string> inline_op_str(const BinaryOpType botype) {
jit/codegen/cuda/type.cpp:507:  return str != nullptr ? c10::optional<std::string>(std::string(str))
jit/codegen/cuda/type.cpp:508:                        : c10::nullopt;
jit/codegen/cuda/type.cpp:519:c10::optional<std::string> cast_func_str(
jit/codegen/cuda/type.cpp:522:  return str != nullptr ? c10::optional<std::string>(std::string(str))
jit/codegen/cuda/type.cpp:523:                        : c10::nullopt;
jit/codegen/cuda/fusion.h:3:#include <c10/util/Exception.h>
jit/codegen/cuda/compute_at.h:3:#include <c10/util/Exception.h>
jit/codegen/cuda/transform_replay.h:3:#include <c10/util/Exception.h>
jit/codegen/cuda/shape_inference.cpp:3:#include <c10/core/ScalarType.h>
jit/codegen/cuda/shape_inference.cpp:156:                static_cast<c10::TypePtr>(NoneType::get()))) {
jit/codegen/cuda/shape_inference.cpp:161:        const auto dims = constant_as<c10::List<int64_t>>(node->input(1));
jit/codegen/cuda/shape_inference.cpp:200:        *op->scalarType(), *op->device(), ndims, c10::nullopt);
jit/codegen/cuda/shape_inference.cpp:207:      c10::optional<at::ScalarType> scalar_type = c10::nullopt) {
jit/codegen/cuda/shape_inference.cpp:222:          : c10::promoteTypes(*op0->scalarType(), *op1->scalarType());
jit/codegen/cuda/shape_inference.cpp:225:          promoted_scalar_type, *op0->device(), ndims, c10::nullopt);
jit/codegen/cuda/shape_inference.cpp:235:          c10::nullopt);
jit/codegen/cuda/executor_launch_params.h:110:  // TODO: convert to c10::optional
jit/codegen/cuda/executor.h:12:#include <c10/core/DeviceType.h>
jit/codegen/cuda/executor.h:21:  c10::Device device = c10::Device(c10::DeviceType::CUDA, 0);
jit/codegen/cuda/executor.h:41:      const c10::optional<size_t>& opt_code = c10::nullopt);
jit/codegen/cuda/executor.h:46:      const c10::optional<size_t>& opt_code = c10::nullopt) {
jit/codegen/cuda/expr_evaluator.cpp:62:c10::optional<Int::ScalarType> StatefulExpressionEvaluator::inferValue(
jit/codegen/cuda/expr_evaluator.cpp:82:c10::optional<Int::ScalarType> StatefulExpressionEvaluator::getValue(
jit/codegen/cuda/expr_evaluator.cpp:104:  return it != bindings_.end() ? c10::optional<Int::ScalarType>(it->second)
jit/codegen/cuda/expr_evaluator.cpp:105:                               : c10::nullopt;
jit/codegen/cuda/expr_evaluator.cpp:108:c10::optional<Int::ScalarType> StatefulExpressionEvaluator::maybeHandle(
jit/codegen/cuda/manager.cpp:17:#include <c10/core/DeviceType.h>
jit/codegen/cuda/manager.cpp:191:      const c10::Device){};
jit/codegen/cuda/ir_iostream.cpp:245:      c10::optional<std::string> cast_str = cast_func_str(std::make_pair(
jit/codegen/cuda/ir_iostream.cpp:247:      TORCH_INTERNAL_ASSERT(cast_str != c10::nullopt, "Unsupported Cast");
jit/codegen/cuda/tensor_view.cpp:20:DataType aten_opt_type_map(const c10::optional<at::ScalarType>& scalar_type) {
jit/codegen/cuda/tensor_view.cpp:29:TensorView::TensorView(const std::shared_ptr<c10::TensorType>& tensor_type)
jit/codegen/cuda/tensor_view.cpp:121:c10::optional<unsigned int> TensorView::getReductionAxis() const {
jit/codegen/cuda/kernel_ir_builder.cpp:41:      return create<Bool>(c10::nullopt);
jit/codegen/cuda/kernel_ir_builder.cpp:43:      return create<Float>(c10::nullopt);
jit/codegen/cuda/kernel_ir_builder.cpp:45:      return create<Half>(c10::nullopt);
jit/codegen/cuda/kernel_ir_builder.cpp:47:      return create<Int>(c10::nullopt);
jit/codegen/cuda/kernel_ir_builder.cpp:60:  auto result = create<Bool>(c10::nullopt);
jit/codegen/fuser/executor.cpp:7:#include <c10/util/Optional.h>
jit/codegen/fuser/executor.cpp:27:static c10::optional<std::vector<int64_t>> getMapSize(
jit/codegen/fuser/executor.cpp:45:        return c10::nullopt;
jit/codegen/fuser/executor.cpp:53:        return c10::nullopt;
jit/codegen/fuser/executor.cpp:59:        return c10::nullopt;
jit/codegen/fuser/executor.cpp:68:static c10::optional<std::vector<int64_t>> canRunKernel(
jit/codegen/fuser/executor.cpp:79:  c10::optional<std::vector<int64_t>> map_size;
jit/codegen/fuser/executor.cpp:84:        return c10::nullopt;
jit/codegen/fuser/executor.cpp:89:        return c10::nullopt;
jit/codegen/fuser/codegen.cpp:4:#include <c10/util/Exception.h>
jit/codegen/fuser/codegen.cpp:33:  return "n" + c10::to_string(n->unique());
jit/codegen/fuser/codegen.cpp:37:  return c10::to_string(v);
jit/codegen/fuser/codegen.cpp:41:  return c10::to_string(v);
jit/codegen/fuser/codegen.cpp:87:static std::string variableType(const std::shared_ptr<c10::Type>& t) {
jit/codegen/fuser/codegen.cpp:103:    const std::shared_ptr<c10::Type>& t,
jit/codegen/fuser/codegen.cpp:271:          c10::to_string(i),
jit/codegen/fuser/codegen.cpp:274:      env.s(c10::to_string(i) + "_nocast", valueName(in));
jit/codegen/fuser/codegen.cpp:361:    const std::vector<std::pair<const Value*, const c10::optional<TensorDesc>>>&
jit/codegen/fuser/codegen.cpp:388:        c10::to_string(
jit/codegen/fuser/codegen.cpp:410:        c10::to_string(
jit/codegen/fuser/partition_desc.h:3:#include <c10/util/Exception.h>
jit/codegen/fuser/compiler.cpp:5:#include <c10/util/Exception.h>
jit/codegen/fuser/compiler.cpp:148:  std::unordered_set<std::vector<int64_t>, c10::hash<std::vector<int64_t>>>
jit/codegen/fuser/compiler.cpp:227:  std::vector<std::pair<const Value*, const c10::optional<TensorDesc>>>
jit/codegen/fuser/compiler.cpp:233:        flat_inputs.emplace_back(p, c10::nullopt);
jit/codegen/fuser/compiler.cpp:283:  const std::string name = "kernel_" + c10::to_string(next_kernel_id++);
jit/codegen/fuser/interface.cpp:8:#include <c10/util/Flags.h>
jit/codegen/fuser/interface.cpp:11:C10_DEFINE_bool(torch_jit_enable_cpu_fusion, false, "enable cpu fusion");
jit/codegen/fuser/codegen.h:23:    const std::vector<std::pair<const Value*, const c10::optional<TensorDesc>>>&
jit/codegen/fuser/cuda/fused_kernel.cpp:10:#include <c10/cuda/CUDAGuard.h>
jit/codegen/fuser/cuda/fused_kernel.cpp:102:        *(c10::cuda::CUDACachingAllocator::getFreeMutex()));
jit/codegen/fuser/kernel_spec.h:5:#include <c10/util/Optional.h>
jit/codegen/fuser/kernel_spec.h:119:  c10::optional<std::shared_ptr<FusedKernel>> findKernel(
jit/codegen/fuser/kernel_spec.h:124:      return c10::nullopt;
jit/codegen/fuser/kernel_spec.h:144:      unordered_map<ArgSpec, std::shared_ptr<FusedKernel>, c10::hash<ArgSpec>>
jit/codegen/fuser/arg_spec.h:4:#include <c10/util/hash.h>
jit/codegen/fuser/arg_spec.h:22:      : descs_{c10::fmap<TensorDesc>(inputs)},
jit/codegen/fuser/arg_spec.h:23:        hash_code_{c10::get_hash(_device, inputs.size(), descs_)},
jit/codegen/fuser/kernel_cache.h:3:#include <c10/util/Optional.h>
jit/codegen/fuser/fallback.cpp:17:c10::AliasAnalysisKind aliasAnalysisIsSpecialCase() {
jit/codegen/fuser/cpu/fused_kernel.cpp:4:#include <c10/util/Exception.h>
jit/codegen/fuser/cpu/fused_kernel.cpp:5:#include <c10/util/Optional.h>
jit/codegen/fuser/cpu/fused_kernel.cpp:32:  return std::string(c10::u16u8(lpTempPathBuffer));
jit/codegen/fuser/cpu/fused_kernel.cpp:64:c10::optional<std::wstring> exec(const std::wstring& cmd) {
jit/codegen/fuser/cpu/fused_kernel.cpp:70:    return c10::nullopt;
jit/codegen/fuser/cpu/fused_kernel.cpp:87:  c10::optional<std::wstring> exec_out;
jit/codegen/fuser/cpu/fused_kernel.cpp:158:  auto wCmd = c10::u8u16(cmd);
jit/codegen/fuser/cpu/temp_file.h:4:#include <c10/util/Exception.h>
jit/codegen/fuser/cpu/temp_file.h:10:#include <c10/util/Unicode.h>
jit/codegen/fuser/cpu/temp_file.h:11:#include <c10/util/win32-headers.h>
jit/codegen/fuser/cpu/temp_file.h:68:    auto wt = c10::u8u16(t);
jit/codegen/fuser/cpu/temp_file.h:74:    name_ = c10::u16u8(wname);
jit/codegen/fuser/cpu/temp_file.h:119:    auto wname = c10::u8u16(name_);
jit/codegen/fuser/tensor_desc.h:5:#include <c10/util/Exception.h>
jit/codegen/fuser/tensor_desc.h:6:#include <c10/util/hash.h>
jit/codegen/fuser/tensor_desc.h:44:  TensorDesc(const c10::TensorTypePtr& type)
jit/codegen/fuser/tensor_desc.h:82:    return c10::get_hash(
jit/python/python_sugared_value.h:31:c10::optional<StrongFunctionPtr> as_function(const py::object& obj);
jit/python/python_sugared_value.h:36:      c10::optional<py::object> rcb = c10::nullopt,
jit/python/python_sugared_value.h:60:      const c10::optional<size_t>& size_hint = {}) override;
jit/python/python_sugared_value.h:81:  c10::optional<py::object> rcb;
jit/OVERVIEW.md:189:Attributes are _rarely used_. Operators like convolution or matrix-multiply have no attributes and take of their arguments through the input list. This includes things that might be typically thought of as constants, like the stride of the convolution. In PyTorch, any of this information is potentially a dynamic property of the program so Nodes are always encoded in a way that allows these values to be dynamically determined. However, we recognize that many inputs are almost always constants, so we make it easy to quickly check if an input is constant and get its value with `c10::optional<IValue> Node::get(Symbol name)`, which returns an IValue (a concrete value for the input) in the case the node is constant and `nullopt` otherwise.
jit/python/module_python.h:11:inline c10::optional<Module> as_module(const py::object& obj) {
jit/python/module_python.h:16:  return c10::nullopt;
jit/python/python_tree_views.cpp:16:c10::optional<std::string> maybeConvertToString(const py::object& obj) {
jit/python/python_tree_views.cpp:18:    return c10::nullopt;
jit/python/python_tree_views.cpp:179:          return c10::optional<Ident>(property.setter().get().name());
jit/python/python_tree_views.cpp:182:        return c10::optional<Ident>(c10::nullopt);
jit/python/python_ir.cpp:26:using c10::Type;
jit/python/python_ir.cpp:78:    c10::ArrayRef<torch::jit::Block*> blocks,
jit/python/python_ir.cpp:105:    c10::ArrayRef<torch::jit::Block*> blocks,
jit/python/python_ir.cpp:153:c10::optional<THPObjectPtr> ConcretePythonOp::autogradFunction() const {
jit/python/python_ir.cpp:160:    return c10::nullopt;
jit/python/python_ir.cpp:164:    return c10::nullopt;
jit/python/python_ir.cpp:170:    return c10::nullopt;
jit/python/python_ir.cpp:414:          py::overload_cast<const c10::intrusive_ptr<c10::ivalue::Object>&>(
jit/python/python_ir.cpp:675:  using ::c10::Type;
jit/python/python_ir.cpp:834:        return get_python_cu()->get_class(c10::QualifiedName(qualified_name));
jit/python/python_ir.cpp:849:            c10::QualifiedName(qualified_name),
jit/python/python_ir.cpp:858:            c10::QualifiedName(qualified_name));
jit/python/python_ir.cpp:873:  using ::c10::InferredType;
jit/python/python_custom_class.cpp:58:        c10::ClassTypePtr class_type = named_type->cast<ClassType>();
jit/python/python_custom_class.cpp:59:        return ScriptClass(c10::StrongTypePtr(
jit/python/pybind_utils.h:33:#include <c10/core/Stream.h>
jit/python/pybind_utils.h:34:#ifdef USE_C10D_NCCL
jit/python/pybind_utils.h:35:#include <c10/cuda/CUDACachingAllocator.h>
jit/python/pybind_utils.h:36:#include <c10/cuda/CUDAStream.h>
jit/python/pybind_utils.h:38:#include <c10/util/Exception.h>
jit/python/pybind_utils.h:62:    c10::optional<int32_t> N = c10::nullopt);
jit/python/pybind_utils.h:99:      c10::intrusive_ptr<c10::ivalue::Future> fut,
jit/python/pybind_utils.h:100:      c10::optional<UnwrapFunc> unwrap_func = c10::nullopt)
jit/python/pybind_utils.h:159:            auto err = std::runtime_error(c10::str(
jit/python/pybind_utils.h:216:  c10::intrusive_ptr<c10::ivalue::Future> fut;
jit/python/pybind_utils.h:219:  c10::optional<UnwrapFunc> unwrap_func;
jit/python/pybind_utils.h:263:inline c10::optional<TypePtr> unifyOrInitializeType(
jit/python/pybind_utils.h:272:using InferredType = c10::InferredType;
jit/python/pybind_utils.h:342:          c10::QualifiedName(py::cast<std::string>(qualifiedName));
jit/python/pybind_utils.h:409:        return InferredType(c10::str(
jit/python/pybind_utils.h:424:        return InferredType(c10::str(
jit/python/pybind_utils.h:446:        return InferredType(c10::str(
jit/python/pybind_utils.h:453:        return InferredType(c10::str(
jit/python/pybind_utils.h:466:    return InferredType(c10::str(
jit/python/pybind_utils.h:522:  auto elems = c10::impl::GenericList(elem_type);
jit/python/pybind_utils.h:533:  c10::impl::GenericDict elems(key_type, value_type);
jit/python/pybind_utils.h:552:IValue toIValue(py::handle obj, const TypePtr& type, c10::optional<int32_t> N);
jit/python/pybind_utils.h:594:    throw schema_match_error(c10::str(
jit/python/pybind_utils.h:603:    throw schema_match_error(c10::str(
jit/python/pybind_utils.h:618:    throw std::runtime_error(c10::str(
jit/python/pybind_utils.h:707:        c10::dynamic_intrusive_pointer_cast<torch::distributed::rpc::RRef>(
jit/python/pybind_utils.h:723:    const auto classType = pyCu->get_class(c10::QualifiedName(obj->name()));
jit/python/pybind_utils.h:741:    return py::cast(c10::Capsule(ivalue.toCapsule()));
jit/python/pybind_utils.h:753:        c10::static_intrusive_pointer_cast<distributed::rpc::RRef>(
jit/python/pybind_utils.h:796:    c10::optional<IValue> self) {
jit/python/pybind_utils.h:799:    throw schema_match_error(c10::str(
jit/python/pybind_utils.h:832:      throw schema_match_error(c10::str(
jit/python/pybind_utils.h:896:    c10::optional<IValue> self,
jit/python/pybind_utils.h:959:      /*self=*/c10::nullopt,
jit/python/pybind_utils.h:989:        op->schema(), std::move(args), kwargs, c10::nullopt);
jit/python/pybind_utils.h:997:        stack = createStackForSchema(op->schema(), args, kwargs, c10::nullopt);
jit/python/python_ivalue.h:9:namespace c10 {
jit/python/python_ivalue.h:13:struct C10_EXPORT ConcretePyObjectHolder final : PyObjectHolder {
jit/python/python_ivalue.h:15:  static c10::intrusive_ptr<PyObjectHolder> create(py::object py_obj) {
jit/python/python_ivalue.h:16:    return c10::make_intrusive<ConcretePyObjectHolder>(std::move(py_obj));
jit/python/python_ivalue.h:19:  static c10::intrusive_ptr<PyObjectHolder> create(const py::handle& handle) {
jit/python/python_ivalue.h:21:    return c10::make_intrusive<ConcretePyObjectHolder>(
jit/python/python_ivalue.h:34:  IValue toIValue(const TypePtr& type, c10::optional<int32_t> N = c10::nullopt)
jit/python/python_ivalue.h:76:} // namespace c10
jit/python/init.cpp:91:#include <c10/macros/Export.h>
jit/python/init.cpp:110:using ::c10::Argument;
jit/python/init.cpp:111:using ::c10::FunctionSchema;
jit/python/init.cpp:261:                c10::optional<std::tuple<Module, Module>>>>(qconfig_dict);
jit/python/init.cpp:792:                c10::kCPU,
jit/python/init.cpp:795:                c10::nullopt));
jit/python/init.cpp:980:            c10::Storage storage(
jit/python/init.cpp:981:                c10::Storage::use_byte_size_t(),
jit/python/init.cpp:987:                c10::make_intrusive<at::TensorImpl, at::UndefinedTensorImpl>(
jit/python/init.cpp:1073:        } catch (const c10::Error& error) {
jit/python/init.cpp:1160:            c10::make_intrusive<c10::ivalue::Future>(PyObjectType::get()));
jit/python/init.cpp:1258:          c10::make_intrusive<c10::ivalue::Future>(output_ivalue.type());
jit/python/init.cpp:1269:      auto retval = c10::make_intrusive<c10::ivalue::Future>(result.type());
jit/python/init.cpp:1285:        c10::List<c10::intrusive_ptr<c10::ivalue::Future>> asList(
jit/python/init.cpp:1286:            c10::FutureType::create(typePtr));
jit/python/init.cpp:1292:            c10::collectAll(asList),
jit/python/init.cpp:1300:              // By extracting the c10::ivalue::Future from PythonFutureWrapper
jit/python/pybind_utils.cpp:22:IValue toIValue(py::handle obj, const TypePtr& type, c10::optional<int32_t> N) {
jit/python/pybind_utils.cpp:40:      return static_cast<c10::complex<double>>(c_obj);
jit/python/pybind_utils.cpp:62:            c10::str("Cannot cast ", py::str(obj), " to None"));
jit/python/pybind_utils.cpp:73:        throw py::cast_error(c10::str(
jit/python/pybind_utils.cpp:85:          ? c10::ivalue::Tuple::createNamed(std::move(values), tuple_type)
jit/python/pybind_utils.cpp:86:          : c10::ivalue::Tuple::create(std::move(values));
jit/python/pybind_utils.cpp:95:      return c10::Device(py::cast<std::string>(obj.ptr()));
jit/python/pybind_utils.cpp:110:            c10::List<int64_t> repeated;
jit/python/pybind_utils.cpp:122:            c10::List<double> repeated;
jit/python/pybind_utils.cpp:164:      auto userObj = c10::ivalue::Object::create(
jit/python/pybind_utils.cpp:165:          c10::StrongTypePtr(cu, classType), numAttrs);
jit/python/pybind_utils.cpp:173:          throw py::cast_error(c10::str(
jit/python/pybind_utils.cpp:185:          throw py::cast_error(c10::str(
jit/python/pybind_utils.cpp:201:      c10::ClassTypePtr classType = nullptr;
jit/python/pybind_utils.cpp:212:        classType = pyCu->get_class(c10::QualifiedName(qualified_name));
jit/python/pybind_utils.cpp:214:          throw std::runtime_error(c10::str(
jit/python/pybind_utils.cpp:226:        throw py::cast_error(c10::str(
jit/python/pybind_utils.cpp:255:        return static_cast<c10::complex<double>>(c_obj);
jit/python/pybind_utils.cpp:258:            c10::str("Cannot cast ", py::str(obj), " to ", type->repr_str()));
jit/python/pybind_utils.cpp:269:      return c10::ivalue::ConcretePyObjectHolder::create(obj);
jit/python/pybind_utils.cpp:272:      return IValue::make_capsule(py::cast<c10::Capsule>(obj).obj_ptr);
jit/python/pybind_utils.cpp:296:          c10::make_intrusive<c10::ivalue::EnumHolder>(enum_type, name, value);
jit/python/pybind_utils.cpp:299:  throw py::cast_error(c10::str(
jit/python/script_init.cpp:51:using ::c10::Argument;
jit/python/script_init.cpp:52:using ::c10::FunctionSchema;
jit/python/script_init.cpp:117:    auto qualifiedName = c10::QualifiedName(
jit/python/script_init.cpp:180:c10::optional<IValue> tryCalculateDefaultParam(
jit/python/script_init.cpp:193:    return c10::nullopt;
jit/python/script_init.cpp:260:      c10::optional<IValue> value = tryCalculateDefaultParam(arg, it->second);
jit/python/script_init.cpp:339:    const c10::QualifiedName& name,
jit/python/script_init.cpp:377:    const c10::QualifiedName& name,
jit/python/script_init.cpp:452:    if (auto named_type = v->type()->cast<c10::NamedType>()) {
jit/python/script_init.cpp:532:      if (!item.a.type()->cast<c10::NamedType>()) {
jit/python/script_init.cpp:727:    cu.define(c10::nullopt, src, pythonResolver(*rcb), nullptr);
jit/python/script_init.cpp:733:    cu.define(c10::nullopt, src, pythonResolver(default_rcb), nullptr);
jit/python/script_init.cpp:741:  py::class_<c10::Capsule>(m, "Capsule");
jit/python/script_init.cpp:813:                return std::hash<c10::ivalue::Object*>{}(self._ivalue().get());
jit/python/script_init.cpp:846:                auto self = Object(c10::ivalue::Object::create(
jit/python/script_init.cpp:847:                    c10::StrongTypePtr(
jit/python/script_init.cpp:975:            auto copy = c10::ivalue::Object::create(
jit/python/script_init.cpp:976:                c10::StrongTypePtr(obj->compilation_unit(), obj->type()),
jit/python/script_init.cpp:1097:           c10::intrusive_ptr<c10::ivalue::Object>,
jit/python/script_init.cpp:1103:            return method != c10::nullopt;
jit/python/script_init.cpp:1157:              return c10::optional<StrongFunctionPtr>(
jit/python/script_init.cpp:1160:              return c10::optional<StrongFunctionPtr>(c10::nullopt);
jit/python/script_init.cpp:1349:        C10_LOG_API_USAGE_ONCE("torch.script.compile");
jit/python/script_init.cpp:1350:        const auto name = c10::QualifiedName(qualname);
jit/python/script_init.cpp:1362:        const auto name = c10::QualifiedName(qualname);
jit/python/script_init.cpp:1392:        auto name = c10::QualifiedName(qualname);
jit/python/script_init.cpp:1406:        C10_LOG_API_USAGE_ONCE("torch.script.class");
jit/python/script_init.cpp:1412:        const auto classname = c10::QualifiedName(qualifiedName);
jit/python/script_init.cpp:1475:            c10::QualifiedName(qualifiedName),
jit/python/script_init.cpp:1501:        c10::optional<at::Device> optional_device;
jit/python/script_init.cpp:1520:        c10::optional<at::Device> optional_device;
jit/python/script_init.cpp:1535:        c10::optional<at::Device> optional_device;
jit/python/script_init.cpp:1547:        c10::optional<at::Device> optional_device;
jit/python/script_init.cpp:1581:        c10::QualifiedName name(qualname);
jit/python/python_custom_class.h:13:  ScriptClass(c10::StrongTypePtr class_type)
jit/python/python_custom_class.h:18:  c10::StrongTypePtr class_type_;
jit/python/python_tracer.cpp:12:#include <c10/util/Exception.h>
jit/python/python_tracer.cpp:45:  c10::optional<std::string> source_filename;
jit/python/python_tracer.cpp:78:  C10_LOG_API_USAGE_ONCE("torch.tracer");
jit/python/python_interpreter.cpp:76:c10::AliasAnalysisKind aliasAnalysisIsSpecialCase() {
jit/python/python_ir.h:16:  ConcretePythonOp(Graph* graph) : PythonOp(graph, ::c10::prim::PythonOp) {}
jit/python/python_ir.h:46:  c10::optional<THPObjectPtr> autogradFunction() const override;
jit/python/python_arg_flatten.h:3:#include <c10/util/hash.h>
jit/python/python_arg_flatten.h:30:      return c10::get_hash(m.sizes, m.device, m.requires_grad, m.type);
jit/python/python_arg_flatten.h:45:    return c10::get_hash(o.structure, o.metadata, o.grad_enabled);
jit/python/python_sugared_value.cpp:25:c10::optional<StrongFunctionPtr> as_function(const py::object& obj) {
jit/python/python_sugared_value.cpp:29:  return c10::nullopt;
jit/python/python_sugared_value.cpp:67:          /*N=*/c10::nullopt,
jit/python/python_sugared_value.cpp:68:          /*default_value=*/c10::nullopt,
jit/python/python_sugared_value.cpp:98:          /*N=*/c10::nullopt,
jit/python/python_sugared_value.cpp:99:          /*default_value=*/c10::nullopt,
jit/python/python_sugared_value.cpp:172:    const c10::optional<size_t>& size_hint) {
jit/python/python_sugared_value.cpp:236:    return std::make_shared<BuiltinFunction>(Symbol::cuda(field), c10::nullopt);
jit/python/python_sugared_value.cpp:557:    return std::make_shared<BuiltinFunction>(*builtin, /*self=*/c10::nullopt);
jit/python/python_sugared_value.cpp:629:  c10::ClassTypePtr class_type = concreteType_->getJitType()->cast<ClassType>();
jit/python/python_sugared_value.cpp:804:  c10::optional<bool> result;
jit/python/python_sugared_value.cpp:882:  auto qualifiedName = c10::QualifiedName(py::cast<std::string>(
jit/python/python_sugared_value.cpp:1097:        Symbol::fromQualString(py::str(builtin_name)), c10::nullopt);
jit/python/python_sugared_value.cpp:1144:    auto qualname = c10::QualifiedName(qualifiedName);
jit/testing/file_check.cpp:12:#include <c10/util/Exception.h>
jit/testing/file_check.cpp:13:#include <c10/util/Optional.h>
jit/testing/file_check.cpp:14:#include <c10/util/StringUtil.h>
jit/testing/file_check.cpp:44:      c10::optional<size_t> count = c10::nullopt)
jit/testing/file_check.cpp:50:  c10::optional<size_t> count_;
jit/testing/file_check.cpp:96:    c10::printQuotedString(ss, sub);
jit/testing/file_check.cpp:136:    c10::printQuotedString(ss, sub);
jit/testing/file_check.cpp:188:      c10::optional<size_t> count = c10::nullopt) {
jit/testing/file_check.cpp:216:      c10::optional<size_t> count = c10::nullopt;
jit/testing/file_check.cpp:227:        count = c10::stoll(
jit/testing/file_check.cpp:311:      c10::printQuotedString(ss, check.search_str_);
jit/backends/backend_resolver.cpp:13:  explicit ClassNamespaceValue(c10::QualifiedName name)
jit/backends/backend_resolver.cpp:20:    auto fullName = c10::QualifiedName(basename_, name);
jit/backends/backend_resolver.cpp:36:  c10::QualifiedName basename_;
jit/backends/backend_resolver.cpp:49:      return std::make_shared<ClassNamespaceValue>(c10::QualifiedName(name));
jit/backends/backend_detail.cpp:8:c10::FunctionSchema getPreprocessSchema() {
jit/backends/backend_detail.cpp:9:  c10::Argument self("self", c10::AnyType::get());
jit/backends/backend_detail.cpp:10:  c10::Argument mod("mod", c10::AnyType::get());
jit/backends/backend_detail.cpp:11:  c10::Argument method_compile_spec(
jit/backends/backend_detail.cpp:13:      c10::DictType::create(c10::StringType::get(), c10::AnyType::get()));
jit/backends/backend_detail.cpp:15:  c10::FunctionSchema preprocessor_schema(
jit/backends/backend_detail.cpp:23:c10::FunctionSchema getCompileSchema() {
jit/backends/backend_detail.cpp:24:  c10::Argument self("self", c10::AnyType::get());
jit/backends/backend_detail.cpp:25:  c10::Argument mod("processed", c10::AnyType::get());
jit/backends/backend_detail.cpp:27:      c10::DictType::create(c10::StringType::get(), c10::AnyType::get());
jit/backends/backend_detail.cpp:28:  c10::Argument method_compile_spec("method_compile_spec", any_dict_ty);
jit/backends/backend_detail.cpp:29:  c10::Argument handles("handles", any_dict_ty);
jit/backends/backend_detail.cpp:31:  c10::FunctionSchema compile_schema(
jit/backends/backend_detail.cpp:39:c10::FunctionSchema getExecuteSchema() {
jit/backends/backend_detail.cpp:40:  auto any_list_ty = c10::ListType::create(c10::AnyType::get());
jit/backends/backend_detail.cpp:41:  c10::Argument self("self", c10::AnyType::get());
jit/backends/backend_detail.cpp:42:  c10::Argument handle("handle", c10::AnyType::get());
jit/backends/backend_detail.cpp:43:  c10::Argument input("input", any_list_ty);
jit/backends/backend_detail.cpp:44:  c10::Argument output("output", any_list_ty);
jit/backends/backend_detail.cpp:45:  return c10::FunctionSchema(
jit/backends/backend_interface.h:16:  virtual c10::IValue preprocess(
jit/backends/backend_interface.h:17:      c10::IValue mod,
jit/backends/backend_interface.h:18:      c10::impl::GenericDict method_compile_spec) = 0;
jit/backends/backend_interface.h:26:  virtual c10::impl::GenericDict compile(
jit/backends/backend_interface.h:27:      c10::IValue processed,
jit/backends/backend_interface.h:28:      c10::impl::GenericDict method_compile_spec) = 0;
jit/backends/backend_interface.h:32:  virtual c10::impl::GenericList execute(
jit/backends/backend_interface.h:33:      c10::IValue handle,
jit/backends/backend_interface.h:34:      c10::impl::GenericList inputs) = 0;
jit/backends/backend_init.cpp:47:    c10::QualifiedName qual_module_name(module_to_lower);
jit/backends/backend_init.cpp:72:      throw py::cast_error(c10::str(
jit/backends/backend_init.cpp:134:    const c10::QualifiedName qual_backend_name(
jit/backends/backend_init.cpp:175:    c10::intrusive_ptr<torch::CustomClassHolder> backend;
jit/backends/backend_init.cpp:184:        c10::impl::GenericDict(
jit/backends/backend_init.cpp:382:        throw py::cast_error(c10::str(
jit/backends/backend_detail.h:12:c10::FunctionSchema TORCH_API getPreprocessSchema();
jit/backends/backend_detail.h:13:c10::FunctionSchema TORCH_API getCompileSchema();
jit/backends/backend_detail.h:14:c10::FunctionSchema TORCH_API getExecuteSchema();
jit/ir/scope.h:4:#include <c10/util/Optional.h>
jit/ir/scope.h:5:#include <c10/util/intrusive_ptr.h>
jit/ir/scope.h:21:using ScopePtr = c10::intrusive_ptr<Scope>;
jit/ir/scope.h:22:using c10::Symbol;
jit/ir/scope.h:24:struct TORCH_API Scope : public c10::intrusive_ptr_target {
jit/ir/scope.h:65:  c10::ClassTypePtr module_type_{nullptr};
jit/ir/scope.h:69:  ModuleInstanceInfo(c10::ClassTypePtr module_type, std::string instance_name);
jit/ir/scope.h:70:  c10::ClassTypePtr class_type() {
jit/ir/scope.h:73:  c10::ClassTypePtr class_type() const {
jit/ir/scope.h:109:using InlinedCallStackPtr = c10::intrusive_ptr<InlinedCallStack>;
jit/ir/scope.h:111:    std::tuple<Function*, SourceRange, c10::optional<ModuleInstanceInfo>>;
jit/ir/scope.h:113:struct TORCH_API InlinedCallStack : public c10::intrusive_ptr_target {
jit/ir/scope.h:115:  c10::optional<InlinedCallStackPtr> callee_;
jit/ir/scope.h:119:  c10::optional<ModuleInstanceInfo> module_instance_info_;
jit/ir/scope.h:129:      c10::optional<ModuleInstanceInfo> module_instance_info);
jit/ir/scope.h:141:      c10::optional<ModuleInstanceInfo> module_instance_info);
jit/ir/scope.h:144:  c10::optional<InlinedCallStackPtr> callee() const;
jit/ir/ir_views.h:10:    AT_ASSERT(node->kind() == ::c10::prim::If);
jit/ir/ir_views.h:50:        node->kind() == ::c10::prim::Loop || node->kind() == ::c10::onnx::Loop);
jit/ir/named_value.h:76:  c10::optional<SourceRange> loc_;
jit/ir/named_value.h:77:  c10::optional<std::string> name_;
jit/ir/attributes.h:10:namespace c10 {
jit/ir/attributes.h:13:} // namespace c10
jit/ir/attributes.h:18:using ::c10::Symbol;
jit/ir/attributes.h:100:using TypeAttr = ScalarAttributeValue<c10::TypePtr, AttributeKind::ty>;
jit/ir/attributes.h:101:using TypesAttr = VectorAttributeValue<c10::TypePtr, AttributeKind::tys>;
jit/ir/constants.h:14:using ::c10::IValue;
jit/ir/constants.h:27:    c10::optional<SourceRange> loc = c10::nullopt,
jit/ir/constants.h:28:    c10::optional<ScopePtr> scope = c10::nullopt);
jit/ir/constants.h:35:// returns a c10::nullopt if the IValue kind cannot be inserted as a constant
jit/ir/constants.h:36:TORCH_API c10::optional<Value*> tryInsertConstant(
jit/ir/constants.h:39:    c10::optional<SourceRange> loc = c10::nullopt,
jit/ir/constants.h:40:    c10::optional<ScopePtr> scope = c10::nullopt);
jit/ir/constants.h:47:// (IValue). returns c10::nullopt if the Value* was not constant
jit/ir/constants.h:48:TORCH_API c10::optional<IValue> toIValue(const Value* v);
jit/ir/constants.h:53:c10::optional<T> constant_as(const Value* v) {
jit/ir/constants.h:57:  return c10::nullopt;
jit/ir/graph_node_list.h:3:#include <c10/util/Exception.h>
jit/ir/scope.cpp:9:  c10::raw::intrusive_ptr::incref(this); // we are creating a new pointer
jit/ir/scope.cpp:13:  return c10::intrusive_ptr<Scope>::reclaim(this);
jit/ir/scope.cpp:26:  return c10::make_intrusive<Scope>(intrusive_from_this(), name);
jit/ir/scope.cpp:83:  c10::raw::intrusive_ptr::incref(this); // we are creating a new pointer
jit/ir/scope.cpp:87:  return c10::intrusive_ptr<InlinedCallStack>::reclaim(this);
jit/ir/scope.cpp:96:    c10::optional<ModuleInstanceInfo> module_instance_info)
jit/ir/scope.cpp:113:    c10::optional<ModuleInstanceInfo> module_instance_info)
jit/ir/scope.cpp:119:c10::optional<InlinedCallStackPtr> InlinedCallStack::callee() const {
jit/ir/scope.cpp:125:  c10::optional<InlinedCallStackPtr> current = intrusive_from_this();
jit/ir/scope.cpp:137:    c10::ClassTypePtr module_type,
jit/ir/type_hashing.h:11:  size_t operator()(const c10::ConstTypePtr& type) const;
jit/ir/type_hashing.h:16:  bool operator()(const c10::ConstTypePtr& a, const c10::ConstTypePtr& b) const;
jit/ir/ir.h:19:#include <c10/util/ArrayRef.h>
jit/ir/ir.h:20:#include <c10/util/Exception.h>
jit/ir/ir.h:37:using ::c10::Argument;
jit/ir/ir.h:38:using ::c10::FunctionSchema;
jit/ir/ir.h:39:using ::c10::Symbol;
jit/ir/ir.h:41:using ::c10::ivalue::Shared;
jit/ir/ir.h:43:using ::c10::IValue;
jit/ir/ir.h:44:using ::c10::ivalue::Future;
jit/ir/ir.h:46:using ::c10::ivalue::ConstantString;
jit/ir/ir.h:48:#define C10_USING(T) using ::c10::T;
jit/ir/ir.h:49:C10_FORALL_TYPES(C10_USING)
jit/ir/ir.h:50:#undef C10_USING
jit/ir/ir.h:52:#define C10_USING(T) using ::c10::T##Ptr;
jit/ir/ir.h:53:C10_FORALL_TYPES(C10_USING)
jit/ir/ir.h:54:#undef C10_USING
jit/ir/ir.h:56:using ::c10::Type;
jit/ir/ir.h:57:using ::c10::TypeEnv;
jit/ir/ir.h:58:using ::c10::TypePtr;
jit/ir/ir.h:60:using ::c10::getTypePtr;
jit/ir/ir.h:61:using ::c10::MatchTypeReturn;
jit/ir/ir.h:62:using ::c10::TypeKind;
jit/ir/ir.h:64:using ::c10::fmap;
jit/ir/ir.h:67:using namespace ::c10::prim;
jit/ir/ir.h:70:using namespace ::c10::attr;
jit/ir/ir.h:73:using namespace ::c10::aten;
jit/ir/ir.h:77:using namespace ::c10::cuda;
jit/ir/ir.h:190:      const c10::intrusive_ptr<c10::ivalue::Object>& output);
jit/ir/ir.h:218:    return c10::to_string(unique());
jit/ir/ir.h:303:  c10::optional<SourceRange> source_range_;
jit/ir/ir.h:305:  c10::optional<InlinedCallStackPtr> callstack_;
jit/ir/ir.h:391:  c10::optional<InlinedCallStackPtr> callstack() const {
jit/ir/ir.h:467:  c10::optional<IValue> get(Symbol name) const;
jit/ir/ir.h:470:  c10::optional<T> get(Symbol name) const {
jit/ir/ir.h:474:    return c10::nullopt;
jit/ir/ir.h:1106:  Graph() : Graph(c10::make_intrusive<Scope>()) {}
jit/ir/ir.h:1250:      c10::optional<SourceRange> loc = c10::nullopt,
jit/ir/ir.h:1251:      c10::optional<ScopePtr> scope = c10::nullopt);
jit/ir/ir.h:1264:      const c10::optional<SourceRange>& range = {});
jit/ir/ir.h:1400:      : Node(graph, ::c10::prim::profile), callback_(std::move(callback)) {}
jit/ir/ir.h:1422:      : Node(graph, ::c10::prim::profile_ivalue), callback_(callback) {}
jit/ir/ir.h:1456:  virtual c10::optional<THPObjectPtr> autogradFunction() const = 0;
jit/ir/constants.cpp:26:    c10::ArrayRef<IValue> elems;
jit/ir/constants.cpp:49:    c10::optional<SourceRange> loc,
jit/ir/constants.cpp:50:    c10::optional<ScopePtr> scope) {
jit/ir/constants.cpp:60:c10::optional<Value*> tryInsertConstant(
jit/ir/constants.cpp:63:    c10::optional<SourceRange> loc,
jit/ir/constants.cpp:64:    c10::optional<ScopePtr> scope) {
jit/ir/constants.cpp:71:      return c10::nullopt;
jit/ir/constants.cpp:98:      return c10::nullopt;
jit/ir/constants.cpp:120:      return c10::nullopt;
jit/ir/constants.cpp:129:    return c10::nullopt;
jit/ir/constants.cpp:138:c10::optional<IValue> toIValue(const Value* v) {
jit/ir/constants.cpp:140:    return c10::nullopt;
jit/ir/constants.cpp:178:    auto d = c10::Device(node->s(attr::value));
jit/ir/constants.cpp:181:    auto s = c10::Stream::unpack(node->i(attr::value));
jit/ir/alias_analysis.h:4:#include <c10/util/flat_hash_map.h>
jit/ir/alias_analysis.h:182:  c10::optional<Element*> setWildcard(const Value* v);
jit/ir/alias_analysis.h:224:  c10::optional<TypePtr> getMutableTypePtr(const TypePtr& type) const;
jit/ir/alias_analysis.h:245:  c10::optional<Element*> tryGetOrCreateWildcard(const TypePtr& type);
jit/ir/alias_analysis.h:269:  c10::optional<TWriteIndex> writeIndex_;
jit/ir/alias_analysis.h:271:  c10::optional<MemoryLocations> writtenToLocationsIndex_;
jit/ir/irparser.cpp:145:  std::pair<TypePtr, c10::optional<c10::AliasInfo>> type_alias;
jit/ir/irparser.cpp:167:        r.f = c10::stod(str);
jit/ir/irparser.cpp:170:        r.i = c10::stoll(str);
jit/ir/irparser.cpp:205:    c10::List<int64_t> is;
jit/ir/irparser.cpp:206:    c10::List<std::string> ss;
jit/ir/irparser.cpp:207:    c10::List<double> fs;
jit/ir/node_hashing.cpp:8:#include <c10/util/Exception.h>
jit/ir/node_hashing.cpp:9:#include <c10/util/hash.h>
jit/ir/type_hashing.cpp:6:#include <c10/util/hash.h>
jit/ir/type_hashing.cpp:13:size_t hashType(const c10::ConstTypePtr& type) {
jit/ir/type_hashing.cpp:30:size_t HashType::operator()(const c10::ConstTypePtr& type) const {
jit/ir/type_hashing.cpp:39:    const c10::ConstTypePtr& a,
jit/ir/type_hashing.cpp:40:    const c10::ConstTypePtr& b) const {
Storage.cpp:3:#include <c10/util/win32-headers.h>
jit/ir/alias_analysis.cpp:29:  c10::optional<TypePtr> getMutableType(const TypePtr& type) {
jit/ir/alias_analysis.cpp:44:  c10::optional<TypePtr> getMutableTypeImpl(const TypePtr& type) {
jit/ir/alias_analysis.cpp:64:        return c10::nullopt;
jit/ir/alias_analysis.cpp:74:          return c10::nullopt;
jit/ir/alias_analysis.cpp:80:        return c10::nullopt;
jit/ir/alias_analysis.cpp:97:  return helper.getMutableType(type) != c10::nullopt;
jit/ir/alias_analysis.cpp:120:c10::optional<TypePtr> AliasDb::getMutableTypePtr(const TypePtr& type) const {
jit/ir/alias_analysis.cpp:506:    if (C10_UNLIKELY(registeredAsSpecialCase && !hasSpecialCase)) {
jit/ir/alias_analysis.cpp:512:    } else if (C10_UNLIKELY(!registeredAsSpecialCase && hasSpecialCase)) {
jit/ir/alias_analysis.cpp:518:          c10::toString(analysis));
jit/ir/alias_analysis.cpp:1625:c10::optional<Element*> AliasDb::tryGetOrCreateWildcard(const TypePtr& type) {
jit/ir/alias_analysis.cpp:1628:    return c10::nullopt;
jit/ir/alias_analysis.cpp:1669:c10::optional<Element*> AliasDb::setWildcard(const Value* v) {
jit/ir/alias_analysis.cpp:1672:    return c10::nullopt;
DynamicTypes.h:8:#include <c10/core/ScalarType.h>
DynamicTypes.h:9:#include <c10/core/ScalarTypeToTypeMeta.h>
DynamicTypes.h:10:#include <c10/core/Backend.h>
DynamicTypes.h:11:#include <c10/core/Layout.h>
DynamicTypes.h:19:namespace c10 {
jit/ir/ir.cpp:5:#include <c10/util/Exception.h>
jit/ir/ir.cpp:6:#include <c10/util/StringUtil.h>
jit/ir/ir.cpp:96:    if (c10::type_verbosity() >= c10::TypeVerbosity::Type) {
jit/ir/ir.cpp:353:  c10::optional<at::Device> device = c10::nullopt;
jit/ir/ir.cpp:730:    const c10::intrusive_ptr<c10::ivalue::Object>& output) {
jit/ir/ir.cpp:796:        suffix = c10::stoll(name.substr(last_dot_pos + 1));
jit/ir/ir.cpp:870:c10::optional<IValue> Node::get(Symbol name) const {
jit/ir/ir.cpp:1194:      callstack_(c10::nullopt),
jit/ir/ir.cpp:1535:    const c10::optional<SourceRange>& range) {
jit/ir/ir.cpp:1834:    c10::optional<SourceRange> loc,
jit/ir/ir.cpp:1835:    c10::optional<ScopePtr> scope) {
jit/ir/ir.cpp:1914:  c10::optional<ModuleInstanceInfo> module_instance_info = c10::nullopt;
jit/ir/ir.cpp:1916:    auto class_type_ptr = to_replace->input(0)->type()->cast<c10::ClassType>();
jit/ir/ir.cpp:1918:      module_instance_info = c10::make_optional(ModuleInstanceInfo(
jit/ir/ir.cpp:1922:      module_instance_info = c10::make_optional(
jit/ir/ir.cpp:1971:            c10::make_intrusive<InlinedCallStack>(
jit/ir/ir.cpp:1978:            c10::make_intrusive<InlinedCallStack>(
jit/ir/ir.cpp:2077:const Symbol ProfileOp::Kind = ::c10::prim::profile;
jit/ir/ir.cpp:2078:const Symbol ProfileIValueOp::Kind = ::c10::prim::profile_ivalue;
QScheme.h:5:#include <c10/core/QScheme.h>
distributed/autograd/context/context.cpp:5:#include <c10/util/Exception.h>
distributed/autograd/context/context.cpp:154:std::shared_ptr<c10::ivalue::Future> DistAutogradContext::
distributed/autograd/context/context.cpp:163:              std::make_shared<c10::ivalue::Future>(c10::NoneType::create())),
distributed/autograd/context/context.cpp:165:    std::shared_ptr<c10::ivalue::Future> future;
distributed/autograd/context/context.cpp:171:    state->future->markCompleted(c10::IValue());
distributed/autograd/context/context.cpp:195:          state->future->markCompleted(c10::IValue());
distributed/autograd/context/context.cpp:214:const c10::Dict<torch::Tensor, torch::Tensor> DistAutogradContext::
distributed/autograd/context/context.h:58:  const c10::Dict<torch::Tensor, torch::Tensor> getGradients() const;
distributed/autograd/context/context.h:107:  std::shared_ptr<c10::ivalue::Future> clearAndWaitForOutstandingRpcsAsync();
distributed/autograd/context/context.h:129:  c10::Dict<torch::Tensor, torch::Tensor> accumulatedGrads_;
distributed/autograd/context/container.cpp:2:#include <c10/util/Exception.h>
distributed/autograd/context/container.cpp:254:              std::string errorMsg = c10::str(
distributed/autograd/utils.cpp:3:#include <c10/util/ThreadLocalDebugInfo.h>
distributed/autograd/utils.cpp:56:    const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap) {
distributed/autograd/utils.cpp:107:    const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap) {
distributed/autograd/functions/recvrpc_backward.h:26:      std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> deviceMap);
distributed/autograd/functions/recvrpc_backward.h:44:  const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> deviceMap_;
distributed/autograd/functions/recvrpc_backward.cpp:17:    std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> deviceMap)
distributed/autograd/functions/recvrpc_backward.cpp:38:      c10::str(
distributed/autograd/utils.h:34:    const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap);
distributed/autograd/utils.h:47:    const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap =
distributed/autograd/utils.h:51:TORCH_API std::shared_ptr<c10::ivalue::Future>
distributed/autograd/rpc_messages/rpc_with_profiling_req.cpp:28:      c10::str(
distributed/autograd/rpc_messages/rpc_with_profiling_req.cpp:79:      jit::pickle(c10::ivalue::Tuple::create(std::move(ivalues)), &tensorTable);
distributed/autograd/rpc_messages/rpc_with_profiling_req.cpp:116:      c10::str(
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:2:#include <c10/util/C++17.h>
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:22:    std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> deviceMap)
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:42:    std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> deviceMap)
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:63:  // Convert deviceMap to c10::Dict for serialization.
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:64:  c10::Dict<int64_t, int64_t> deviceMap;
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:78:      jit::pickle(c10::ivalue::Tuple::create(std::move(ivalues)), &tensorTable);
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:112:  auto c10DeviceMap = tupleElements[4].to<c10::Dict<int64_t, int64_t>>();
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:115:  std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> deviceMap;
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:116:  for (const auto& mapEntry : c10DeviceMap) {
distributed/autograd/rpc_messages/rpc_with_autograd.cpp:172:const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& RpcWithAutograd::
distributed/autograd/rpc_messages/rpc_with_profiling_resp.cpp:86:      jit::pickle(c10::ivalue::Tuple::create(std::move(ivalues)), &tensorTable);
distributed/autograd/rpc_messages/rpc_with_profiling_resp.cpp:113:      c10::str(
distributed/autograd/rpc_messages/propagate_gradients_req.cpp:38:      jit::pickle(c10::ivalue::Tuple::create(std::move(ivalues)), &tensorTable);
distributed/autograd/rpc_messages/rpc_with_autograd.h:22:      std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> deviceMap = {});
distributed/autograd/rpc_messages/rpc_with_autograd.h:32:      std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> deviceMap = {});
distributed/autograd/rpc_messages/rpc_with_autograd.h:58:  const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap();
distributed/autograd/rpc_messages/rpc_with_autograd.h:93:  std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> deviceMap_;
distributed/autograd/rpc_messages/rref_backward_req.cpp:31:      jit::pickle(c10::ivalue::Tuple::create(std::move(ivalues)), &tensorTable);
distributed/autograd/autograd.cpp:16:      kDistAutogradBackwardProfilingKey, std::vector<c10::IValue>());
distributed/autograd/engine/dist_engine.h:47:  std::shared_ptr<c10::ivalue::Future> executeSendFunctionAsync(
distributed/autograd/engine/dist_engine.h:128:  std::shared_ptr<c10::ivalue::Future> runEngineAndAccumulateGradients(
distributed/c10d/python_comm_hook.cpp:1:#include <torch/csrc/distributed/c10d/python_comm_hook.h>
distributed/c10d/python_comm_hook.cpp:4:#include <c10d/reducer.hpp>
distributed/c10d/python_comm_hook.cpp:8:namespace c10d {
distributed/c10d/python_comm_hook.cpp:21:c10::intrusive_ptr<c10::ivalue::Future> PythonCommHook::runHook(
distributed/c10d/python_comm_hook.cpp:31:    auto errMsg = c10::str(
distributed/c10d/python_comm_hook.cpp:43:    const c10::IValue& result) {
distributed/c10d/python_comm_hook.cpp:52:        obj, c10::ListType::create(c10::TensorType::get()));
distributed/c10d/python_comm_hook.cpp:60:} // namespace c10d
distributed/c10d/c10d.h:7:namespace c10d {
distributed/c10d/c10d.h:11:} // namespace c10d
distributed/autograd/engine/dist_engine.cpp:4:#include <c10/core/Event.h>
distributed/autograd/engine/dist_engine.cpp:82:      C10_LOG_API_USAGE_ONCE("torch.autograd.thread_shutdown");
distributed/autograd/engine/dist_engine.cpp:100:        inputs.add(i, std::move(variables[i]), c10::nullopt, c10::nullopt);
distributed/autograd/engine/dist_engine.cpp:370:std::shared_ptr<c10::ivalue::Future> DistEngine::
distributed/autograd/engine/dist_engine.cpp:393:      std::make_shared<c10::ivalue::Future>(c10::NoneType::create());
distributed/autograd/engine/dist_engine.cpp:402:          std::string errorMsg = c10::str(
distributed/autograd/engine/dist_engine.cpp:408:              c10::ivalue::Future::FutureError(std::move(errorMsg))));
distributed/autograd/engine/dist_engine.cpp:416:          accumulateGradFuture->markCompleted(c10::IValue());
distributed/autograd/engine/dist_engine.cpp:425:std::shared_ptr<c10::ivalue::Future> DistEngine::executeSendFunctionAsync(
distributed/autograd/engine/dist_engine.cpp:435:  const auto& send_backward_stream = sendFunction->stream(c10::DeviceType::CUDA);
distributed/autograd/engine/dist_engine.cpp:438:        const auto guard = c10::impl::VirtualGuardImpl{c10::DeviceType::CUDA};
distributed/autograd/engine/dist_engine.cpp:441:          auto event = c10::Event{c10::DeviceType::CUDA};
distributed/autograd/engine/dist_engine.cpp:472:        std::make_shared<c10::ivalue::Future>(c10::NoneType::create());
distributed/autograd/engine/dist_engine.cpp:502:            callbackFuture->markCompleted(c10::IValue());
distributed/autograd/engine/dist_engine.cpp:522:    auto fut = std::make_shared<c10::ivalue::Future>(c10::NoneType::create());
distributed/autograd/engine/dist_engine.cpp:523:    fut->markCompleted(c10::IValue());
distributed/c10d/python_comm_hook.h:3:#include <c10d/comm.hpp>
distributed/c10d/python_comm_hook.h:7:#include <c10d/ProcessGroup.hpp>
distributed/c10d/python_comm_hook.h:10:namespace c10d {
distributed/c10d/python_comm_hook.h:24:  c10::intrusive_ptr<c10::ivalue::Future> runHook(GradBucket& bucket) override;
distributed/c10d/python_comm_hook.h:26:  std::vector<at::Tensor> parseHookResult(const c10::IValue& result) override;
distributed/c10d/python_comm_hook.h:34:} // namespace c10d
distributed/rpc/request_callback_no_python.h:48:      const c10::intrusive_ptr<OwnerRRef>& ownerRRef) const;
distributed/rpc/request_callback_no_python.h:60:      const c10::intrusive_ptr<OwnerRRef>& ownerRRef) const;
distributed/rpc/request_callback_no_python.h:110:  virtual void handleRRefDelete(c10::intrusive_ptr<RRef>& rref) const;
distributed/c10d/init.cpp:3:#include <c10/util/intrusive_ptr.h>
distributed/c10d/init.cpp:4:#include <c10d/FileStore.hpp>
distributed/c10d/init.cpp:5:#include <c10d/TCPStore.hpp>
distributed/c10d/init.cpp:7:#include <c10d/HashStore.hpp>
distributed/c10d/init.cpp:8:#include <c10d/ProcessGroupRoundRobin.hpp>
distributed/c10d/init.cpp:10:#include <c10d/ProcessGroup.hpp>
distributed/c10d/init.cpp:12:#ifdef USE_C10D_GLOO
distributed/c10d/init.cpp:13:#include <c10d/ProcessGroupGloo.hpp>
distributed/c10d/init.cpp:16:#ifdef USE_C10D_NCCL
distributed/c10d/init.cpp:17:#include <c10d/ProcessGroupNCCL.hpp>
distributed/c10d/init.cpp:20:#ifdef USE_C10D_MPI
distributed/c10d/init.cpp:21:#include <c10d/ProcessGroupMPI.hpp>
distributed/c10d/init.cpp:24:#include <c10d/PrefixStore.hpp>
distributed/c10d/init.cpp:28:#include <c10d/comm.hpp>
distributed/c10d/init.cpp:29:#include <c10d/frontend.hpp>
distributed/c10d/init.cpp:30:#include <c10d/reducer.hpp>
distributed/c10d/init.cpp:32:#include <torch/csrc/distributed/c10d/python_comm_hook.h>
distributed/c10d/init.cpp:41:namespace c10d {
distributed/c10d/init.cpp:45:#ifdef USE_C10D_GLOO
distributed/c10d/init.cpp:67:using intrusive_ptr_class_ = py::class_<T, c10::intrusive_ptr<T>>;
distributed/c10d/init.cpp:70:// class to inherit from c10d.Store and implement its interface.
distributed/c10d/init.cpp:71:class PythonStore : public ::c10d::Store {
distributed/c10d/init.cpp:73:  using ::c10d::Store::Store;
distributed/c10d/init.cpp:82:        pybind11::get_overload(static_cast<const ::c10d::Store*>(this), "set");
distributed/c10d/init.cpp:96:        pybind11::get_overload(static_cast<const ::c10d::Store*>(this), "get");
distributed/c10d/init.cpp:107:    PYBIND11_OVERLOAD_PURE(int64_t, ::c10d::Store, add, key, value);
distributed/c10d/init.cpp:111:    PYBIND11_OVERLOAD_PURE(int64_t, ::c10d::Store, getNumKeys);
distributed/c10d/init.cpp:115:    PYBIND11_OVERLOAD_PURE(bool, ::c10d::Store, deleteKey, key);
distributed/c10d/init.cpp:119:    PYBIND11_OVERLOAD_PURE(bool, ::c10d::Store, check, keys);
distributed/c10d/init.cpp:123:    PYBIND11_OVERLOAD_PURE(void, ::c10d::Store, wait, keys);
distributed/c10d/init.cpp:129:    PYBIND11_OVERLOAD_PURE(void, ::c10d::Store, wait, keys, timeout);
distributed/c10d/init.cpp:133:// Called from DDP's Python API to create a c10d Python comm hook object.
distributed/c10d/init.cpp:137:    ::c10d::Reducer& reducer,
distributed/c10d/init.cpp:140:  reducer.register_comm_hook(std::make_unique<::c10d::PythonCommHook>(
distributed/c10d/init.cpp:144:// Called from DDP's Python API to create a c10d C++ comm hook.
distributed/c10d/init.cpp:148:    ::c10d::Reducer& reducer,
distributed/c10d/init.cpp:149:    ::c10d::BuiltinCommHookType comm_hook_type) {
distributed/c10d/init.cpp:153:PyObject* c10d_init(PyObject* _unused, PyObject* noargs) {
distributed/c10d/init.cpp:154:  C10_LOG_API_USAGE_ONCE("c10d.python.import");
distributed/c10d/init.cpp:155:  auto c10d_module = THPObjectPtr(PyImport_ImportModule("torch.distributed"));
distributed/c10d/init.cpp:156:  if (!c10d_module) {
distributed/c10d/init.cpp:167:      torch_C_m.def_submodule("_distributed_c10d", "distributed c10d bindings");
distributed/c10d/init.cpp:187:              ::c10d::Reducer& reducer,
distributed/c10d/init.cpp:202:          [](::c10d::Reducer& reducer) -> c10::DDPLoggingData {
distributed/c10d/init.cpp:207:  shared_ptr_class_<::c10d::GradBucket>(module, "_GradBucket")
distributed/c10d/init.cpp:214:              const std::vector<c10::IntArrayRef>&>(),
distributed/c10d/init.cpp:222:          &::c10d::GradBucket::getIndex,
distributed/c10d/init.cpp:226:          &::c10d::GradBucket::getTensors,
distributed/c10d/init.cpp:237:          &::c10d::GradBucket::getOffsets,
distributed/c10d/init.cpp:241:          &::c10d::GradBucket::getLengths,
distributed/c10d/init.cpp:245:          &::c10d::GradBucket::getSizesVec,
distributed/c10d/init.cpp:248:  py::enum_<::c10d::BuiltinCommHookType>(module, "BuiltinCommHookType", R"(
distributed/c10d/init.cpp:250:      .value("ALLREDUCE", ::c10d::BuiltinCommHookType::ALLREDUCE)
distributed/c10d/init.cpp:251:      .value("FP16_COMPRESS", ::c10d::BuiltinCommHookType::FP16_COMPRESS);
distributed/c10d/init.cpp:253:  shared_ptr_class_<::c10d::Reducer>(module, "Reducer")
distributed/c10d/init.cpp:258:              c10::intrusive_ptr<::c10d::ProcessGroup>,
distributed/c10d/init.cpp:267:          py::arg("bucket_bytes_cap") = ::c10d::kDefaultBucketBytesCap,
distributed/c10d/init.cpp:273:          &::c10d::Reducer::initialize_buckets,
distributed/c10d/init.cpp:277:          &::c10d::Reducer::prepare_for_backward,
distributed/c10d/init.cpp:281:          [](::c10d::Reducer& reducer, const torch::autograd::Variable& output)
distributed/c10d/init.cpp:284:      .def("get_backward_stats", &::c10d::Reducer::get_backward_stats)
distributed/c10d/init.cpp:287:          &::c10d::Reducer::rebuild_buckets,
distributed/c10d/init.cpp:291:          &::c10d::Reducer::get_bucket_tensors,
distributed/c10d/init.cpp:295:          &::c10d::Reducer::push_rebuilt_params_for_all_indices,
distributed/c10d/init.cpp:299:          &::c10d::Reducer::set_forward_pass_work_handle,
distributed/c10d/init.cpp:303:          &::c10d::Reducer::get_local_used_maps_on_device);
distributed/c10d/init.cpp:305:  py::enum_<::c10d::ReduceOp>(module, "ReduceOp", R"(
distributed/c10d/init.cpp:317:      .value("SUM", ::c10d::ReduceOp::SUM)
distributed/c10d/init.cpp:318:      .value("PRODUCT", ::c10d::ReduceOp::PRODUCT)
distributed/c10d/init.cpp:319:      .value("MIN", ::c10d::ReduceOp::MIN)
distributed/c10d/init.cpp:320:      .value("MAX", ::c10d::ReduceOp::MAX)
distributed/c10d/init.cpp:321:      .value("BAND", ::c10d::ReduceOp::BAND)
distributed/c10d/init.cpp:322:      .value("BOR", ::c10d::ReduceOp::BOR)
distributed/c10d/init.cpp:323:      .value("BXOR", ::c10d::ReduceOp::BXOR);
distributed/c10d/init.cpp:325:  py::class_<::c10d::BroadcastOptions>(module, "BroadcastOptions")
distributed/c10d/init.cpp:327:      .def_readwrite("rootRank", &::c10d::BroadcastOptions::rootRank)
distributed/c10d/init.cpp:328:      .def_readwrite("rootTensor", &::c10d::BroadcastOptions::rootTensor)
distributed/c10d/init.cpp:329:      .def_readwrite("timeout", &::c10d::BroadcastOptions::timeout);
distributed/c10d/init.cpp:331:  py::class_<::c10d::AllreduceOptions>(module, "AllreduceOptions")
distributed/c10d/init.cpp:333:      .def_readwrite("reduceOp", &::c10d::AllreduceOptions::reduceOp)
distributed/c10d/init.cpp:334:      .def_readwrite("timeout", &::c10d::AllreduceOptions::timeout);
distributed/c10d/init.cpp:336:  py::class_<::c10d::AllreduceCoalescedOptions>(
distributed/c10d/init.cpp:339:      .def_readwrite("reduceOp", &::c10d::AllreduceCoalescedOptions::reduceOp)
distributed/c10d/init.cpp:340:      .def_readwrite("timeout", &::c10d::AllreduceCoalescedOptions::timeout);
distributed/c10d/init.cpp:342:  py::class_<::c10d::ReduceOptions>(module, "ReduceOptions")
distributed/c10d/init.cpp:344:      .def_readwrite("reduceOp", &::c10d::ReduceOptions::reduceOp)
distributed/c10d/init.cpp:345:      .def_readwrite("rootRank", &::c10d::ReduceOptions::rootRank)
distributed/c10d/init.cpp:346:      .def_readwrite("rootTensor", &::c10d::ReduceOptions::rootTensor)
distributed/c10d/init.cpp:347:      .def_readwrite("timeout", &::c10d::ReduceOptions::timeout);
distributed/c10d/init.cpp:349:  py::class_<::c10d::AllgatherOptions>(module, "AllgatherOptions")
distributed/c10d/init.cpp:351:      .def_readwrite("timeout", &::c10d::AllgatherOptions::timeout);
distributed/c10d/init.cpp:353:  py::class_<::c10d::GatherOptions>(module, "GatherOptions")
distributed/c10d/init.cpp:355:      .def_readwrite("rootRank", &::c10d::GatherOptions::rootRank)
distributed/c10d/init.cpp:356:      .def_readwrite("timeout", &::c10d::GatherOptions::timeout);
distributed/c10d/init.cpp:358:  py::class_<::c10d::ScatterOptions>(module, "ScatterOptions")
distributed/c10d/init.cpp:360:      .def_readwrite("rootRank", &::c10d::ScatterOptions::rootRank)
distributed/c10d/init.cpp:361:      .def_readwrite("timeout", &::c10d::ScatterOptions::timeout);
distributed/c10d/init.cpp:363:  py::class_<::c10d::ReduceScatterOptions>(module, "ReduceScatterOptions")
distributed/c10d/init.cpp:365:      .def_readwrite("reduceOp", &::c10d::ReduceScatterOptions::reduceOp)
distributed/c10d/init.cpp:366:      .def_readwrite("timeout", &::c10d::ReduceScatterOptions::timeout);
distributed/c10d/init.cpp:368:  py::class_<::c10d::BarrierOptions>(module, "BarrierOptions")
distributed/c10d/init.cpp:370:      .def_readwrite("device_ids", &::c10d::BarrierOptions::device_ids)
distributed/c10d/init.cpp:371:      .def_readwrite("timeout", &::c10d::BarrierOptions::timeout);
distributed/c10d/init.cpp:373:  py::class_<::c10d::AllToAllOptions>(module, "AllToAllOptions")
distributed/c10d/init.cpp:375:      .def_readwrite("timeout", &::c10d::AllToAllOptions::timeout);
distributed/c10d/init.cpp:378:      py::class_<::c10d::Store, c10::intrusive_ptr<::c10d::Store>, PythonStore>(
distributed/c10d/init.cpp:391:              [](::c10d::Store& store,
distributed/c10d/init.cpp:419:              [](::c10d::Store& store, const std::string& key) -> py::bytes {
distributed/c10d/init.cpp:446:              &::c10d::Store::add,
distributed/c10d/init.cpp:472:              &::c10d::Store::deleteKey,
distributed/c10d/init.cpp:501:              &::c10d::Store::getNumKeys,
distributed/c10d/init.cpp:526:              &::c10d::Store::setTimeout,
distributed/c10d/init.cpp:546:              [](::c10d::Store& store, const std::vector<std::string>& keys) {
distributed/c10d/init.cpp:568:              [](::c10d::Store& store,
distributed/c10d/init.cpp:591:  intrusive_ptr_class_<::c10d::FileStore>(
distributed/c10d/init.cpp:614:  intrusive_ptr_class_<::c10d::HashStore>(
distributed/c10d/init.cpp:632:  intrusive_ptr_class_<::c10d::TCPStore>(
distributed/c10d/init.cpp:674:              std::chrono::milliseconds(::c10d::Store::kDefaultTimeout));
distributed/c10d/init.cpp:676:  intrusive_ptr_class_<::c10d::PrefixStore>(
distributed/c10d/init.cpp:689:      .def(py::init<const std::string&, c10::intrusive_ptr<::c10d::Store>>());
distributed/c10d/init.cpp:692:      intrusive_ptr_class_<::c10d::ProcessGroup>(module, "ProcessGroup")
distributed/c10d/init.cpp:693:          .def("rank", &::c10d::ProcessGroup::getRank)
distributed/c10d/init.cpp:694:          .def("size", &::c10d::ProcessGroup::getSize)
distributed/c10d/init.cpp:698:              &::c10d::ProcessGroup::broadcast,
distributed/c10d/init.cpp:700:              py::arg("opts") = ::c10d::BroadcastOptions(),
distributed/c10d/init.cpp:705:              [](::c10d::ProcessGroup& pg, at::Tensor& x, int rootRank) {
distributed/c10d/init.cpp:706:                ::c10d::BroadcastOptions opts;
distributed/c10d/init.cpp:717:              &::c10d::ProcessGroup::allreduce,
distributed/c10d/init.cpp:719:              py::arg("opts") = ::c10d::AllreduceOptions(),
distributed/c10d/init.cpp:724:              [](::c10d::ProcessGroup& pg,
distributed/c10d/init.cpp:726:                 ::c10d::ReduceOp op) {
distributed/c10d/init.cpp:727:                ::c10d::AllreduceOptions opts;
distributed/c10d/init.cpp:732:              py::arg("op") = ::c10d::ReduceOp::SUM,
distributed/c10d/init.cpp:737:              [](::c10d::ProcessGroup& pg, at::Tensor& x, ::c10d::ReduceOp op) {
distributed/c10d/init.cpp:738:                ::c10d::AllreduceOptions opts;
distributed/c10d/init.cpp:744:              py::arg("op") = ::c10d::ReduceOp::SUM,
distributed/c10d/init.cpp:749:              [](::c10d::ProcessGroup& pg,
distributed/c10d/init.cpp:751:                 ::c10d::AllreduceCoalescedOptions opts) {
distributed/c10d/init.cpp:755:              py::arg("opts") = ::c10d::AllreduceCoalescedOptions(),
distributed/c10d/init.cpp:760:              &::c10d::ProcessGroup::reduce,
distributed/c10d/init.cpp:762:              py::arg("opts") = ::c10d::ReduceOptions(),
distributed/c10d/init.cpp:767:              [](::c10d::ProcessGroup& pg,
distributed/c10d/init.cpp:770:                 ::c10d::ReduceOp op) {
distributed/c10d/init.cpp:771:                ::c10d::ReduceOptions opts;
distributed/c10d/init.cpp:779:              py::arg("op") = ::c10d::ReduceOp::SUM,
distributed/c10d/init.cpp:784:              &::c10d::ProcessGroup::allgather,
distributed/c10d/init.cpp:787:              py::arg("opts") = ::c10d::AllgatherOptions(),
distributed/c10d/init.cpp:792:              [](::c10d::ProcessGroup& pg,
distributed/c10d/init.cpp:798:                    outputs, inputs, ::c10d::AllgatherOptions());
distributed/c10d/init.cpp:806:              &::c10d::ProcessGroup::allgather_coalesced,
distributed/c10d/init.cpp:809:              py::arg("opts") = ::c10d::AllgatherOptions(),
distributed/c10d/init.cpp:814:              &::c10d::ProcessGroup::gather,
distributed/c10d/init.cpp:817:              py::arg("opts") = ::c10d::GatherOptions(),
distributed/c10d/init.cpp:822:              [](::c10d::ProcessGroup& pg,
distributed/c10d/init.cpp:826:                ::c10d::GatherOptions opts;
distributed/c10d/init.cpp:839:              &::c10d::ProcessGroup::scatter,
distributed/c10d/init.cpp:842:              py::arg("opts") = ::c10d::ScatterOptions(),
distributed/c10d/init.cpp:847:              [](::c10d::ProcessGroup& pg,
distributed/c10d/init.cpp:851:                ::c10d::ScatterOptions opts;
distributed/c10d/init.cpp:864:              &::c10d::ProcessGroup::reduce_scatter,
distributed/c10d/init.cpp:867:              py::arg("opts") = ::c10d::ReduceScatterOptions(),
distributed/c10d/init.cpp:872:              [](::c10d::ProcessGroup& pg,
distributed/c10d/init.cpp:878:                    outputs, inputs, ::c10d::ReduceScatterOptions());
distributed/c10d/init.cpp:886:              &::c10d::ProcessGroup::alltoall_base,
distributed/c10d/init.cpp:891:              py::arg("opts") = ::c10d::AllToAllOptions(),
distributed/c10d/init.cpp:896:              [](::c10d::ProcessGroup& pg,
distributed/c10d/init.cpp:906:                    ::c10d::AllToAllOptions());
distributed/c10d/init.cpp:916:              &::c10d::ProcessGroup::alltoall,
distributed/c10d/init.cpp:919:              py::arg("opts") = ::c10d::AllToAllOptions(),
distributed/c10d/init.cpp:924:              [](::c10d::ProcessGroup& pg,
distributed/c10d/init.cpp:927:                return pg.alltoall(output, input, ::c10d::AllToAllOptions());
distributed/c10d/init.cpp:935:              &::c10d::ProcessGroup::send,
distributed/c10d/init.cpp:940:              &::c10d::ProcessGroup::recv,
distributed/c10d/init.cpp:945:              &::c10d::ProcessGroup::recvAnysource,
distributed/c10d/init.cpp:950:              &::c10d::ProcessGroup::barrier,
distributed/c10d/init.cpp:951:              py::arg("opts") = ::c10d::BarrierOptions(),
distributed/c10d/init.cpp:957:      [](std::vector<c10::intrusive_ptr<::c10d::ProcessGroup>> processGroups)
distributed/c10d/init.cpp:958:          -> c10::intrusive_ptr<::c10d::ProcessGroup> {
distributed/c10d/init.cpp:963:        return c10::make_intrusive<::c10d::ProcessGroupRoundRobin>(
distributed/c10d/init.cpp:970:#ifdef USE_C10D_GLOO
distributed/c10d/init.cpp:971:  auto processGroupGloo = intrusive_ptr_class_<::c10d::ProcessGroupGloo>(
distributed/c10d/init.cpp:976:  shared_ptr_class_<::c10d::ProcessGroupGloo::Options>(
distributed/c10d/init.cpp:979:      .def_readwrite("devices", &::c10d::ProcessGroupGloo::Options::devices)
distributed/c10d/init.cpp:980:      .def_readwrite("timeout", &::c10d::ProcessGroupGloo::Options::timeout)
distributed/c10d/init.cpp:981:      .def_readwrite("threads", &::c10d::ProcessGroupGloo::Options::threads);
distributed/c10d/init.cpp:988:          return ::c10d::ProcessGroupGloo::createDeviceForHostname(hostname);
distributed/c10d/init.cpp:991:          return ::c10d::ProcessGroupGloo::createDeviceForInterface(interface);
distributed/c10d/init.cpp:1002:              const c10::intrusive_ptr<::c10d::Store>&,
distributed/c10d/init.cpp:1005:              ::c10d::ProcessGroupGloo::Options>(),
distributed/c10d/init.cpp:1008:          py::init([](const c10::intrusive_ptr<::c10d::Store>& store,
distributed/c10d/init.cpp:1012:            ::c10d::ProcessGroupGloo::Options options;
distributed/c10d/init.cpp:1015:            char* ifnameEnv = getenv(::c10d::GLOO_SOCKET_IFNAME_ENV);
distributed/c10d/init.cpp:1017:              for (const auto& iface : ::c10d::split(',', ifnameEnv)) {
distributed/c10d/init.cpp:1019:                    ::c10d::ProcessGroupGloo::createDeviceForInterface(iface));
distributed/c10d/init.cpp:1026:                  ::c10d::ProcessGroupGloo::createDefaultDevice());
distributed/c10d/init.cpp:1031:            return c10::make_intrusive<::c10d::ProcessGroupGloo>(
distributed/c10d/init.cpp:1041:#ifdef USE_C10D_NCCL
distributed/c10d/init.cpp:1043:      intrusive_ptr_class_<::c10d::ProcessGroupNCCL>(
distributed/c10d/init.cpp:1047:                  const c10::intrusive_ptr<::c10d::Store>&,
distributed/c10d/init.cpp:1050:                  c10::intrusive_ptr<::c10d::ProcessGroupNCCL::Options>>(),
distributed/c10d/init.cpp:1053:              py::init([](const c10::intrusive_ptr<::c10d::Store>& store,
distributed/c10d/init.cpp:1057:                auto options = ::c10d::ProcessGroupNCCL::Options::create();
distributed/c10d/init.cpp:1060:                return c10::make_intrusive<::c10d::ProcessGroupNCCL>(
distributed/c10d/init.cpp:1067:                  ::c10d::ProcessGroupNCCL::kProcessGroupNCCLOpTimeoutMillis),
distributed/c10d/init.cpp:1070:  intrusive_ptr_class_<::c10d::ProcessGroupNCCL::Options>(
distributed/c10d/init.cpp:1075:          &::c10d::ProcessGroupNCCL::Options::isHighPriorityStream)
distributed/c10d/init.cpp:1077:          "op_timeout", &::c10d::ProcessGroupNCCL::Options::opTimeout);
distributed/c10d/init.cpp:1079:      "_group_start", []() { ::c10d::ProcessGroupNCCL::groupStart(); });
distributed/c10d/init.cpp:1081:      "_group_end", []() { ::c10d::ProcessGroupNCCL::groupEnd(); });
distributed/c10d/init.cpp:1084:#ifdef USE_C10D_MPI
distributed/c10d/init.cpp:1085:  auto processGroupMPI = intrusive_ptr_class_<::c10d::ProcessGroupMPI>(
distributed/c10d/init.cpp:1094:        return ::c10d::ProcessGroupMPI::createProcessGroupMPI(ranks);
distributed/c10d/init.cpp:1099:  intrusive_ptr_class_<::c10d::ProcessGroup::Work>(module, "Work")
distributed/c10d/init.cpp:1100:      .def("is_completed", &::c10d::ProcessGroup::Work::isCompleted)
distributed/c10d/init.cpp:1103:          [](::c10d::ProcessGroup::Work& work) -> bool {
distributed/c10d/init.cpp:1110:          [](::c10d::ProcessGroup::Work& work) -> std::exception_ptr {
distributed/c10d/init.cpp:1117:          [](::c10d::ProcessGroup::Work& work) -> int {
distributed/c10d/init.cpp:1122:      .def("_source_rank", &::c10d::ProcessGroup::Work::sourceRank)
distributed/c10d/init.cpp:1125:          [](::c10d::ProcessGroup::Work& work) -> std::vector<at::Tensor> {
distributed/c10d/init.cpp:1130:          [](::c10d::ProcessGroup::Work& work) -> void {
distributed/c10d/init.cpp:1137:          &::c10d::ProcessGroup::Work::wait,
distributed/c10d/init.cpp:1142:          [](::c10d::ProcessGroup::Work& work)
distributed/c10d/init.cpp:1184:  py::class_<c10::DDPLoggingData>(module, "DDPLoggingData")
distributed/c10d/init.cpp:1186:      .def_readwrite("world_size", &c10::DDPLoggingData::world_size)
distributed/c10d/init.cpp:1187:      .def_readwrite("rank", &c10::DDPLoggingData::rank)
distributed/c10d/init.cpp:1188:      .def_readwrite("module_name", &c10::DDPLoggingData::module_name)
distributed/c10d/init.cpp:1189:      .def_readwrite("device_ids", &c10::DDPLoggingData::device_ids)
distributed/c10d/init.cpp:1190:      .def_readwrite("output_device", &c10::DDPLoggingData::output_device)
distributed/c10d/init.cpp:1191:      .def_readwrite("broadcast_buffers", &c10::DDPLoggingData::broadcast_buffers)
distributed/c10d/init.cpp:1192:      .def_readwrite("bucket_cap_mb", &c10::DDPLoggingData::bucket_cap_mb)
distributed/c10d/init.cpp:1193:      .def_readwrite("find_unused_parameters", &c10::DDPLoggingData::find_unused_parameters)
distributed/c10d/init.cpp:1194:      .def_readwrite("gradient_as_bucket_view", &c10::DDPLoggingData::gradient_as_bucket_view)
distributed/c10d/init.cpp:1195:      .def_readwrite("backend_name", &c10::DDPLoggingData::backend_name);
distributed/c10d/init.cpp:1199:      &::c10d::compute_bucket_assignment_by_size,
distributed/c10d/init.cpp:1210:      // function as a c10::ArrayRef.
distributed/c10d/init.cpp:1211:      [](c10::intrusive_ptr<::c10d::ProcessGroup> process_group,
distributed/c10d/init.cpp:1227:      // Define a function that takes a c10d store and runs a few tests.
distributed/c10d/init.cpp:1232:      [](c10::intrusive_ptr<::c10d::Store> store) {
distributed/c10d/init.cpp:1277:  module.attr("_DEFAULT_FIRST_BUCKET_BYTES") = ::c10d::kDefaultFirstBucketBytes;
distributed/c10d/init.cpp:1285:// NOTE: Below are TorchBind bindings for c10d, these bindings will
distributed/c10d/init.cpp:1291:    torch::class_<::c10d::Store>("dist_c10d", "Store");
distributed/c10d/init.cpp:1294:    torch::class_<::c10d::FileStore>("dist_c10d", "FileStore")
distributed/c10d/init.cpp:1297:          return c10::make_intrusive<::c10d::FileStore>(
distributed/c10d/init.cpp:1302:    torch::class_<::c10d::TCPStore>("dist_c10d", "TCPStore")
distributed/c10d/init.cpp:1309:          return c10::make_intrusive<::c10d::TCPStore>(
distributed/c10d/init.cpp:1317:    torch::class_<::c10d::PrefixStore>("dist_c10d", "PrefixStore")
distributed/c10d/init.cpp:1319:                            const c10::intrusive_ptr<::c10d::Store>& store) {
distributed/c10d/init.cpp:1320:            return c10::make_intrusive<::c10d::PrefixStore>(
distributed/c10d/init.cpp:1327:    torch::class_<::c10d::ProcessGroup::Work>("dist_c10d", "Work")
distributed/c10d/init.cpp:1331:            [](const c10::intrusive_ptr<::c10d::ProcessGroup::Work>& work)
distributed/c10d/init.cpp:1337:        .def("result", &::c10d::ProcessGroup::Work::result);
distributed/c10d/init.cpp:1341:    torch::class_<::c10d::ProcessGroup>("dist_c10d", "ProcessGroup")
distributed/c10d/init.cpp:1343:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self) {
distributed/c10d/init.cpp:1345:                  ::c10d::DistributedC10d::get()->getNameOfProcessGroup(self);
distributed/c10d/init.cpp:1355:                  ::c10d::DistributedC10d::get()->getProcessGroupByName(
distributed/c10d/init.cpp:1366:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self) {
distributed/c10d/init.cpp:1371:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self) {
distributed/c10d/init.cpp:1380:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1385:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1388:              ::c10d::BroadcastOptions opts;
distributed/c10d/init.cpp:1397:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1406:            [](c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1408:                c10::intrusive_ptr<::c10d::ReduceOp> op) {
distributed/c10d/init.cpp:1409:                    ::c10d::AllreduceOptions opts;
distributed/c10d/init.cpp:1416:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1418:               c10::intrusive_ptr<::c10d::ReduceOp> op) {
distributed/c10d/init.cpp:1419:                    ::c10d::AllreduceOptions opts;
distributed/c10d/init.cpp:1430:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1432:              ::c10d::AllreduceCoalescedOptions opts;
distributed/c10d/init.cpp:1437:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1439:              ::c10d::ReduceOptions opts;
distributed/c10d/init.cpp:1443:        // TODO: Enable this when c10d::ReduceOp is TorchBind compatible.
distributed/c10d/init.cpp:1446:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1449:            c10::intrusive_ptr<::c10d::ReduceOp> op) {
distributed/c10d/init.cpp:1450:            ::c10d::ReduceOptions opts;
distributed/c10d/init.cpp:1459:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1462:              ::c10d::AllgatherOptions opts;
distributed/c10d/init.cpp:1469:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1475:              ::c10d::AllgatherOptions opts;
distributed/c10d/init.cpp:1481:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1484:              ::c10d::AllgatherOptions opts;
distributed/c10d/init.cpp:1491:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1494:              ::c10d::GatherOptions opts;
distributed/c10d/init.cpp:1500:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1504:              ::c10d::GatherOptions opts;
distributed/c10d/init.cpp:1515:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1518:              ::c10d::ScatterOptions opts;
distributed/c10d/init.cpp:1524:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1528:              ::c10d::ScatterOptions opts;
distributed/c10d/init.cpp:1538:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1541:              ::c10d::ReduceScatterOptions opts;
distributed/c10d/init.cpp:1547:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1552:              ::c10d::ReduceScatterOptions opts;
distributed/c10d/init.cpp:1557:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1562:              ::c10d::AllToAllOptions opts;
distributed/c10d/init.cpp:1572:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1575:              ::c10d::AllToAllOptions opts;
distributed/c10d/init.cpp:1580:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1589:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1598:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self,
distributed/c10d/init.cpp:1605:            [](const c10::intrusive_ptr<::c10d::ProcessGroup>& self) {
distributed/c10d/init.cpp:1606:              ::c10d::BarrierOptions opts;
distributed/c10d/init.cpp:1610:#ifdef USE_C10D_NCCL
distributed/c10d/init.cpp:1617:    torch::class_<::c10d::ProcessGroupNCCL::Options>(
distributed/c10d/init.cpp:1618:        "dist_c10d",
distributed/c10d/init.cpp:1622:          return ::c10d::ProcessGroupNCCL::Options::create(
distributed/c10d/init.cpp:1627:    torch::class_<::c10d::ProcessGroupNCCL>("dist_c10d", "ProcessGroupNCCL")
distributed/c10d/init.cpp:1629:            [](const c10::intrusive_ptr<::c10d::ProcessGroupNCCL>& self) {
distributed/c10d/init.cpp:1631:                  static_intrusive_pointer_cast<::c10d::ProcessGroup>(self);
distributed/c10d/init.cpp:1633:                  ::c10d::DistributedC10d::get()->getNameOfProcessGroup(self);
distributed/c10d/init.cpp:1643:                  ::c10d::DistributedC10d::get()->getProcessGroupByName(
distributed/c10d/init.cpp:1650:              c10::intrusive_ptr<::c10d::ProcessGroupNCCL> process_group_nccl =
distributed/c10d/init.cpp:1651:                  dynamic_intrusive_pointer_cast<::c10d::ProcessGroupNCCL>(
distributed/c10d/init.cpp:1661:            [](const c10::intrusive_ptr<::c10d::Store>& store,
distributed/c10d/init.cpp:1664:               c10::intrusive_ptr<::c10d::ProcessGroupNCCL::Options> options,
distributed/c10d/init.cpp:1666:              auto pg = c10::make_intrusive<::c10d::ProcessGroupNCCL>(store, rank, size, options);
distributed/c10d/init.cpp:1667:              ::c10d::DistributedC10d::get()->registerProcessGroupName(
distributed/c10d/init.cpp:1673:            [](const c10::intrusive_ptr<::c10d::ProcessGroupNCCL>& self,
distributed/c10d/init.cpp:1683:                  ::c10d::AllToAllOptions());
distributed/c10d/init.cpp:1686:        .def("size", [](const c10::intrusive_ptr<::c10d::ProcessGroupNCCL>& self) {
distributed/c10d/init.cpp:1689:        .def("rank", [](const c10::intrusive_ptr<::c10d::ProcessGroupNCCL>& self) {
distributed/c10d/init.cpp:1694:static const auto DistributedC10dFrontendTorchBind =
distributed/c10d/init.cpp:1695:    torch::class_<::c10d::DistributedC10d>("dist_c10d", "frontend")
distributed/c10d/init.cpp:1696:        .def(torch::init([]() { return ::c10d::DistributedC10d::get(); }))
distributed/c10d/init.cpp:1699:            &::c10d::DistributedC10d::newProcessGroupHelper)
distributed/c10d/init.cpp:1702:            &::c10d::DistributedC10d::getProcessGroupByName)
distributed/c10d/init.cpp:1705:            &::c10d::DistributedC10d::getNameOfProcessGroup);
distributed/c10d/init.cpp:1708:// c10d methods on torch._C
distributed/c10d/init.cpp:1710:    {"_c10d_init", c10d_init, METH_NOARGS, nullptr},
distributed/c10d/init.cpp:1717:} // namespace c10d
distributed/rpc/metrics/registry.cpp:5:C10_DEFINE_REGISTRY(
distributed/rpc/python_functions.h:20:c10::intrusive_ptr<JitFuture> toPyJitFuture(
distributed/rpc/python_functions.h:24:c10::intrusive_ptr<JitFuture> pyRpcBuiltin(
distributed/rpc/python_functions.h:31:c10::intrusive_ptr<JitFuture> pyRpcPythonUdf(
distributed/rpc/python_functions.h:38:c10::intrusive_ptr<JitFuture> pyRpcTorchscript(
distributed/rpc/tensorpipe_agent.cpp:42:std::vector<c10::DeviceIndex> getDevicesForTensors(
distributed/rpc/tensorpipe_agent.cpp:47:  const auto errStr = c10::str(
distributed/rpc/tensorpipe_agent.cpp:54:  std::vector<c10::DeviceIndex> deviceIndices;
distributed/rpc/tensorpipe_agent.cpp:81:C10_DEFINE_REGISTRY(TensorPipeTransportRegistry, TransportRegistration);
distributed/rpc/tensorpipe_agent.cpp:84:C10_DEFINE_REGISTRY(TensorPipeCpuChannelRegistry, CpuChannelRegistration);
distributed/rpc/tensorpipe_agent.cpp:87:C10_DEFINE_REGISTRY(TensorPipeCudaChannelRegistry, CudaChannelRegistration);
distributed/rpc/tensorpipe_agent.cpp:153:C10_REGISTER_CREATOR(TensorPipeTransportRegistry, uv, makeUvTransport);
distributed/rpc/tensorpipe_agent.cpp:159:  return c10::str(
distributed/rpc/tensorpipe_agent.cpp:180:C10_REGISTER_CREATOR(TensorPipeTransportRegistry, shm, makeShmTransport);
distributed/rpc/tensorpipe_agent.cpp:224:C10_REGISTER_CREATOR(TensorPipeTransportRegistry, ibv, makeIbvTransport);
distributed/rpc/tensorpipe_agent.cpp:237:C10_REGISTER_CREATOR(TensorPipeCpuChannelRegistry, basic, makeBasicChannel);
distributed/rpc/tensorpipe_agent.cpp:253:C10_REGISTER_CREATOR(TensorPipeCpuChannelRegistry, cma, makeCmaChannel);
distributed/rpc/tensorpipe_agent.cpp:281:C10_REGISTER_CREATOR(
distributed/rpc/tensorpipe_agent.cpp:296:C10_REGISTER_CREATOR(
distributed/rpc/tensorpipe_agent.cpp:320:C10_REGISTER_CREATOR(
distributed/rpc/tensorpipe_agent.cpp:337:C10_REGISTER_CREATOR(
distributed/rpc/tensorpipe_agent.cpp:351:C10_REGISTER_CREATOR(
distributed/rpc/tensorpipe_agent.cpp:431:  rankToNameStore_.set(c10::to_string(selfId), selfNameVector);
distributed/rpc/tensorpipe_agent.cpp:440:        rankToNameStore_.get(c10::to_string(workerId));
distributed/rpc/tensorpipe_agent.cpp:456:    const c10::intrusive_ptr<::c10d::Store>& store,
distributed/rpc/tensorpipe_agent.cpp:460:    c10::intrusive_ptr<::c10d::ProcessGroup> processGroup,
distributed/rpc/tensorpipe_agent.cpp:519:    addresses.push_back(c10::str(key, "://", reg->address));
distributed/rpc/tensorpipe_agent.cpp:664:    std::vector<c10::DeviceIndex>&& devices,
distributed/rpc/tensorpipe_agent.cpp:667:    const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>&
distributed/rpc/tensorpipe_agent.cpp:706:    std::vector<c10::DeviceIndex> devices;
distributed/rpc/tensorpipe_agent.cpp:843:    const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap) {
distributed/rpc/tensorpipe_agent.cpp:849:    auto err = c10::str(
distributed/rpc/tensorpipe_agent.cpp:883:  std::vector<c10::DeviceIndex> devices;
distributed/rpc/tensorpipe_agent.cpp:1206:  metrics[kThreadPoolSize] = c10::to_string(threadPool_.size());
distributed/rpc/tensorpipe_agent.cpp:1207:  metrics[kNumIdleThreads] = c10::to_string(threadPool_.numAvailable());
distributed/rpc/tensorpipe_agent.cpp:1210:    metrics[kClientActiveCalls] = c10::to_string(clientActiveCalls_);
distributed/rpc/tensorpipe_agent.cpp:1211:    metrics[kServerActiveCalls] = c10::to_string(serverActiveCalls_);
distributed/rpc/tensorpipe_agent.cpp:1212:    metrics[kServerActiveAsyncCalls] = c10::to_string(serverActiveAsyncCalls_);
distributed/rpc/tensorpipe_agent.cpp:1222:      metrics[kGilAverageWaitTime] = c10::to_string(averageGilWaitTime);
distributed/rpc/tensorpipe_agent.cpp:1297:          IValue(c10::make_intrusive<Message>(std::move(message))));
distributed/rpc/tensorpipe_agent.cpp:1326:std::vector<c10::DeviceIndex> TensorPipeAgent::getDevicesForRemote(
distributed/rpc/tensorpipe_agent.cpp:1332:  const auto errStr = c10::str(
distributed/rpc/metrics/RpcMetricsHandler.h:2:#include <c10/util/Registry.h>
distributed/rpc/metrics/RpcMetricsHandler.h:37:C10_DECLARE_REGISTRY(
distributed/rpc/rref_impl.cpp:14:std::string getTypeStr(const c10::TypePtr& type) {
distributed/rpc/rref_impl.cpp:16:    case c10::TypeKind::FunctionType:
distributed/rpc/rref_impl.cpp:17:      return type->castRaw<c10::FunctionType>()->name()->qualifiedName();
distributed/rpc/rref_impl.cpp:18:    case c10::TypeKind::TupleType:
distributed/rpc/rref_impl.cpp:19:      return type->castRaw<c10::TupleType>()->name()->qualifiedName();
distributed/rpc/rref_impl.cpp:20:    case c10::TypeKind::ClassType:
distributed/rpc/rref_impl.cpp:21:      return type->castRaw<c10::ClassType>()->name()->qualifiedName();
distributed/rpc/rref_impl.cpp:22:    case c10::TypeKind::InterfaceType:
distributed/rpc/rref_impl.cpp:23:      return type->castRaw<c10::InterfaceType>()->name()->qualifiedName();
distributed/rpc/process_group_agent.cpp:3:#include <c10/util/C++17.h>
distributed/rpc/process_group_agent.cpp:4:#include <c10d/ProcessGroup.hpp>
distributed/rpc/process_group_agent.cpp:64:  // use c10d allgather to collect names
distributed/rpc/process_group_agent.cpp:93:    c10::intrusive_ptr<::c10d::ProcessGroup> pg,
distributed/rpc/process_group_agent.cpp:294:    const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap) {
distributed/rpc/process_group_agent.cpp:307:    auto err = c10::str(
distributed/rpc/process_group_agent.cpp:403:  std::vector<c10::intrusive_ptr<c10d::ProcessGroup::Work>> pendingSends;
distributed/rpc/process_group_agent.cpp:492:          auto errorStr = c10::str(
distributed/rpc/process_group_agent.cpp:602:          IValue(c10::make_intrusive<Message>(std::move(message))));
distributed/rpc/process_group_agent.cpp:625:          auto err = c10::str(
distributed/rpc/process_group_agent.cpp:692:    auto err = c10::str(
distributed/rpc/process_group_agent.cpp:858:    metrics[kNumPendingRequests] = c10::to_string(futuresSize);
distributed/rpc/process_group_agent.cpp:860:  metrics[kThreadPoolSize] = c10::to_string(threadPool_.size());
distributed/rpc/process_group_agent.cpp:861:  metrics[kNumIdleThreads] = c10::to_string(threadPool_.numAvailable());
distributed/rpc/process_group_agent.cpp:862:  metrics[kClientActiveCalls] = c10::to_string(clientActiveCalls_.load());
distributed/rpc/process_group_agent.cpp:863:  metrics[kServerActiveCalls] = c10::to_string(serverActiveCalls_.load());
distributed/rpc/process_group_agent.cpp:865:      c10::to_string(serverActiveAsyncCalls_.load());
distributed/rpc/process_group_agent.cpp:872:      metrics[kGilAverageWaitTime] = c10::to_string(avgGilWaitTime);
distributed/rpc/unpickled_python_call.cpp:3:#include <c10/util/C++17.h>
distributed/rpc/rref_proto.cpp:34:      c10::ivalue::Tuple::create(std::move(ivalues)), &tensor_table);
distributed/rpc/rref_proto.cpp:136:      jit::pickle(c10::ivalue::Tuple::create(ivalues), &tensor_table);
distributed/rpc/process_group_agent.h:3:#include <c10/core/thread_pool.h>
distributed/rpc/process_group_agent.h:4:#include <c10d/ProcessGroup.hpp>
distributed/rpc/process_group_agent.h:64:      c10::intrusive_ptr<::c10d::ProcessGroup> pg,
distributed/rpc/process_group_agent.h:95:      const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap =
distributed/rpc/process_group_agent.h:214:  c10::intrusive_ptr<::c10d::ProcessGroup> pg_;
distributed/rpc/process_group_agent.h:235:  c10::intrusive_ptr<c10d::ProcessGroup::Work> recvWork_;
distributed/rpc/process_group_agent.h:242:      std::set<c10::intrusive_ptr<c10d::ProcessGroup::Work>>>
distributed/rpc/request_callback_no_python.cpp:165:  C10_THROW_ERROR(Error, "Python call not supported!");
distributed/rpc/request_callback_no_python.cpp:173:  C10_THROW_ERROR(Error, "Python call not supported!");
distributed/rpc/request_callback_no_python.cpp:180:    const c10::intrusive_ptr<OwnerRRef>& ownerRRef) const {
distributed/rpc/request_callback_no_python.cpp:212:        IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_no_python.cpp:219:  c10::intrusive_ptr<OwnerRRef> ownerRRef;
distributed/rpc/request_callback_no_python.cpp:235:    const c10::intrusive_ptr<OwnerRRef>& ownerRRef) const {
distributed/rpc/request_callback_no_python.cpp:294:                IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_no_python.cpp:306:  C10_THROW_ERROR(Error, "Python call not supported!");
distributed/rpc/request_callback_no_python.cpp:320:    c10::intrusive_ptr<RRef>& rref) const {
distributed/rpc/request_callback_no_python.cpp:350:  std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> reverseDeviceMap;
distributed/rpc/request_callback_no_python.cpp:420:              IValue(c10::make_intrusive<Message>(std::move(msg))));
distributed/rpc/request_callback_no_python.cpp:453:          IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_no_python.cpp:509:        profilingConfig, c10::nullopt, requestThreadOptions);
distributed/rpc/request_callback_no_python.cpp:553:            responseFuture->markCompleted(IValue(c10::make_intrusive<Message>(
distributed/rpc/request_callback_no_python.cpp:566:  C10_THROW_ERROR(Error, "Python call not supported!");
distributed/rpc/request_callback_no_python.cpp:577:        IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_no_python.cpp:657:  std::string errorMsg = c10::str(
distributed/rpc/request_callback_no_python.cpp:662:  return IValue(c10::make_intrusive<Message>(
distributed/rpc/rpc_agent.h:30:    std::function<c10::StrongTypePtr(const c10::QualifiedName&)>;
distributed/rpc/rpc_agent.h:164:      const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap =
distributed/rpc/rpc_agent.h:185:  // NB: not using ``c10::optional<const std::string&>`` here because we might
distributed/rpc/rpc_agent.h:265:  virtual std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> getDeviceMap(
distributed/rpc/tensorpipe_agent.h:8:#include <c10/core/thread_pool.h>
distributed/rpc/tensorpipe_agent.h:9:#include <c10d/PrefixStore.hpp>
distributed/rpc/tensorpipe_agent.h:10:#include <c10d/ProcessGroup.hpp>
distributed/rpc/tensorpipe_agent.h:11:#include <c10d/Store.hpp>
distributed/rpc/tensorpipe_agent.h:51:using DeviceMap = std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>;
distributed/rpc/tensorpipe_agent.h:71:C10_DECLARE_REGISTRY(TensorPipeTransportRegistry, TransportRegistration);
distributed/rpc/tensorpipe_agent.h:79:C10_DECLARE_REGISTRY(TensorPipeCpuChannelRegistry, CpuChannelRegistration);
distributed/rpc/tensorpipe_agent.h:89:C10_DECLARE_REGISTRY(TensorPipeCudaChannelRegistry, CudaChannelRegistration);
distributed/rpc/tensorpipe_agent.h:171:      const c10::intrusive_ptr<::c10d::Store>& store,
distributed/rpc/tensorpipe_agent.h:175:      c10::intrusive_ptr<::c10d::ProcessGroup> processGroup,
distributed/rpc/tensorpipe_agent.h:186:      const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap =
distributed/rpc/tensorpipe_agent.h:253:      std::vector<c10::DeviceIndex>&& devices,
distributed/rpc/tensorpipe_agent.h:283:  inline std::vector<c10::DeviceIndex> getDevicesForRemote(
distributed/rpc/tensorpipe_agent.h:359:  ::c10d::PrefixStore rankToNameStore_;
distributed/rpc/tensorpipe_agent.h:360:  ::c10d::PrefixStore nameToAddressStore_;
distributed/rpc/tensorpipe_agent.h:366:  const c10::intrusive_ptr<::c10d::ProcessGroup> processGroup_;
distributed/rpc/tensorpipe_utils.h:10:#include <c10/cuda/CUDACachingAllocator.h>
distributed/rpc/tensorpipe_utils.h:11:#include <c10/cuda/CUDAFunctions.h>
distributed/rpc/tensorpipe_utils.h:12:#include <c10/cuda/CUDAStream.h>
distributed/rpc/tensorpipe_utils.h:45:  virtual CUDAStream getStream(c10::DeviceIndex index) {
distributed/rpc/tensorpipe_utils.h:46:    throw std::runtime_error(c10::str(
distributed/rpc/tensorpipe_utils.h:95:  CUDAStream getStream(c10::DeviceIndex index) override {
distributed/rpc/tensorpipe_utils.h:108:  std::unordered_map<c10::DeviceIndex, CUDAStream> streams_;
distributed/rpc/tensorpipe_utils.h:140:  std::vector<c10::DataPtr> tensors;
distributed/rpc/tensorpipe_utils.h:148:    std::vector<c10::DeviceIndex> devices = {},
distributed/rpc/unpickled_python_remote_call.cpp:3:#include <c10/util/C++17.h>
distributed/rpc/script_remote_call.h:30:      const c10::QualifiedName& qualifiedName,
distributed/rpc/message.h:173:using JitFuture = c10::ivalue::Future;
distributed/rpc/utils.cpp:179:      std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> reverseDeviceMap;
distributed/rpc/utils.cpp:299:    size_t sz = c10::stoll(std::string(sizePtr, ptr - sizePtr));
distributed/rpc/utils.cpp:322:c10::List<at::Tensor> cloneSparseTensors(
distributed/rpc/utils.cpp:338:  c10::List<at::Tensor> pTensors;
distributed/rpc/utils.cpp:391:          {c10::to_string(i),
distributed/rpc/utils.cpp:403:        .append(c10::to_string(e.size))
distributed/rpc/utils.cpp:556:          c10::str("Duplicate __cuda_start_event found for ", device));
distributed/rpc/utils.cpp:590:            c10::str(
distributed/rpc/python_remote_call.cpp:27:      jit::pickle(c10::ivalue::Tuple::create(ivalues), &tensor_table);
distributed/rpc/python_functions.cpp:2:#include <c10/util/C++17.h>
distributed/rpc/python_functions.cpp:67:    // Prefer C10 ops so that they go through C10 dispatch. We expect the
distributed/rpc/python_functions.cpp:72:    std::vector<std::shared_ptr<torch::jit::Operator>> c10OpsForSymbol;
distributed/rpc/python_functions.cpp:75:      if (op->isC10Op()) {
distributed/rpc/python_functions.cpp:76:        c10OpsForSymbol.emplace_back(std::move(op));
distributed/rpc/python_functions.cpp:84:    // operators here, and the matched operator may indeed not be a c10 op.
distributed/rpc/python_functions.cpp:88:      opWithStack = torch::jit::getOpWithStack(c10OpsForSymbol, args, kwargs);
distributed/rpc/python_functions.cpp:137:c10::intrusive_ptr<JitFuture> toPyJitFuture(
distributed/rpc/python_functions.cpp:167:c10::intrusive_ptr<JitFuture> pyRpcBuiltin(
distributed/rpc/python_functions.cpp:188:c10::intrusive_ptr<JitFuture> pyRpcPythonUdf(
distributed/rpc/python_functions.cpp:209:c10::intrusive_ptr<JitFuture> pyRpcTorchscript(
distributed/rpc/python_functions.cpp:221:  const c10::QualifiedName qualifiedName(qualifiedNameStr);
distributed/rpc/python_functions.cpp:234:        c10::nullopt);
distributed/rpc/python_functions.cpp:237:  c10::intrusive_ptr<c10::ivalue::Future> fut = rpcTorchscript(
distributed/rpc/python_functions.cpp:375:  auto qualifiedName = c10::QualifiedName(qualifiedNameStr);
distributed/rpc/python_functions.cpp:385:        functionSchema, args, kwargs, c10::nullopt);
distributed/rpc/python_resp.cpp:3:#include <c10/util/C++17.h>
distributed/rpc/script_call.cpp:18:    const c10::QualifiedName& qualifiedName,
distributed/rpc/script_call.cpp:37:const c10::QualifiedName ScriptCall::qualifiedName() const {
distributed/rpc/script_call.cpp:105:        c10::QualifiedName(qualifiedName),
distributed/rpc/script_call.cpp:117:      c10::ivalue::Tuple::create(std::move(ivalues)), &tensor_table);
distributed/rpc/utils.h:3:#include <c10/core/Device.h>
distributed/rpc/utils.h:66:TORCH_API c10::List<at::Tensor> cloneSparseTensors(
distributed/rpc/request_callback_impl.cpp:3:#include <c10/util/C++17.h>
distributed/rpc/request_callback_impl.cpp:115:      auto errMsg = c10::str(
distributed/rpc/request_callback_impl.cpp:180:                    IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_impl.cpp:200:            IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_impl.cpp:230:                IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_impl.cpp:233:      responseFuture->markCompleted(IValue(c10::make_intrusive<Message>(
distributed/rpc/request_callback_impl.cpp:271:    const c10::intrusive_ptr<OwnerRRef>& ownerRRef) const {
distributed/rpc/request_callback_impl.cpp:279:          const c10::intrusive_ptr<c10::ivalue::Future>& jitFuture) mutable {
distributed/rpc/request_callback_impl.cpp:294:          const c10::intrusive_ptr<c10::ivalue::Future>& jitFuture) mutable {
distributed/rpc/request_callback_impl.cpp:316:  c10::intrusive_ptr<c10::ivalue::Future> jitFuture;
distributed/rpc/request_callback_impl.cpp:348:  c10::intrusive_ptr<OwnerRRef> ownerRRef;
distributed/rpc/request_callback_impl.cpp:387:                IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_impl.cpp:394:          IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_impl.cpp:425:                            const c10::intrusive_ptr<OwnerRRef>& rref,
distributed/rpc/request_callback_impl.cpp:446:          IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/request_callback_impl.cpp:486:    c10::intrusive_ptr<RRef>& rref) const {
distributed/rpc/request_callback_impl.cpp:562:            IValue(c10::make_intrusive<Message>(std::move(m))));
distributed/rpc/torchscript_functions.h:22:// It returns c10::intrusive_ptr<ivalue::Future>
distributed/rpc/torchscript_functions.h:23:c10::intrusive_ptr<c10::ivalue::Future> TORCH_API rpcTorchscript(
distributed/rpc/torchscript_functions.h:25:    const c10::QualifiedName& qualifiedName,
distributed/rpc/torchscript_functions.h:26:    const c10::FunctionSchema& functionSchema,
distributed/rpc/torchscript_functions.h:27:    std::vector<c10::IValue>& stack,
distributed/rpc/torchscript_functions.h:31:c10::intrusive_ptr<RRef> TORCH_API remoteTorchscript(
distributed/rpc/torchscript_functions.h:33:    const c10::QualifiedName& qualifiedName,
distributed/rpc/torchscript_functions.h:34:    const c10::FunctionSchema& functionSchema,
distributed/rpc/torchscript_functions.h:35:    std::vector<c10::IValue>& stack,
distributed/rpc/script_call.h:3:#include <c10/util/Optional.h>
distributed/rpc/script_call.h:27:      const c10::QualifiedName& qualifiedName,
distributed/rpc/script_call.h:34:  const c10::QualifiedName qualifiedName() const;
distributed/rpc/script_call.h:61:  c10::optional<std::shared_ptr<Operator>> op_;
distributed/rpc/script_call.h:64:  c10::optional<const c10::QualifiedName> qualifiedName_;
distributed/rpc/py_rref.cpp:66:    c10::QualifiedName type_qualified_name = c10::QualifiedName(
distributed/rpc/py_rref.cpp:106:PyRRef::PyRRef(c10::intrusive_ptr<RRef> rref)
distributed/rpc/py_rref.cpp:107:    : rref_(std::move(rref)), profilingFuture_(c10::nullopt) {
distributed/rpc/py_rref.cpp:136:c10::intrusive_ptr<JitFuture> PyRRef::getFuture() const {
distributed/rpc/py_rref.cpp:143:c10::intrusive_ptr<JitFuture> PyRRef::getProfilingFuture() const {
distributed/rpc/py_rref.cpp:148:void PyRRef::setProfilingFuture(c10::intrusive_ptr<JitFuture> profilingFuture) {
distributed/rpc/py_rref.cpp:174:    IValue value = c10::static_intrusive_pointer_cast<UserRRef>(rref_)->toHere(
distributed/rpc/py_rref.cpp:206:      c10::static_intrusive_pointer_cast<const OwnerRRef>(rref_)->getValue();
distributed/rpc/py_rref.cpp:220:    return c10::str("OwnerRRef(", rref_->rrefId(), ")");
distributed/rpc/py_rref.cpp:222:    return c10::str(
distributed/rpc/py_rref.cpp:226:        c10::static_intrusive_pointer_cast<UserRRef>(rref_)->forkId(),
distributed/rpc/py_rref.cpp:279:  c10::intrusive_ptr<RRef> rref = ctx.getOrCreateRRef(rrefForkData, rrefType);
distributed/rpc/py_rref.cpp:285:c10::IValue PyRRef::toIValue() const {
distributed/rpc/py_rref.cpp:287:  auto rrefPtr = c10::static_intrusive_pointer_cast<c10::RRefInterface>(rref_);
distributed/rpc/py_rref.cpp:298:    const c10::intrusive_ptr<RRef>& rref) {
distributed/rpc/py_rref.cpp:301:        c10::static_intrusive_pointer_cast<const OwnerRRef>(rref)->getValue();
distributed/rpc/py_rref.cpp:308:        value = torch::jit::toIValue(obj, c10::TensorType::get());
distributed/rpc/script_resp.cpp:3:#include <c10/util/C++17.h>
distributed/rpc/rpc_agent.cpp:202:      std::string errorMessage = c10::str(
distributed/rpc/rpc_agent.cpp:222:      std::string errorMessage = c10::str(
distributed/rpc/rpc_agent.cpp:289:std::unordered_map<c10::DeviceIndex, c10::DeviceIndex> RpcAgent::getDeviceMap(
distributed/rpc/init.cpp:111:          // c10::hash, so  we need to use the qualified name
distributed/rpc/init.cpp:543:                       const c10::intrusive_ptr<::c10d::ProcessGroup>& pg,
distributed/rpc/init.cpp:625:          py::init([](const c10::intrusive_ptr<::c10d::Store>& store,
distributed/rpc/init.cpp:629:                      c10::intrusive_ptr<::c10d::ProcessGroup> processGroup,
distributed/rpc/init.cpp:693:            std::make_shared<TypeResolver>([&](const c10::QualifiedName& qn) {
distributed/rpc/init.cpp:696:              return c10::StrongTypePtr(
distributed/rpc/profiler/remote_profiler_manager.cpp:12:/*static */ thread_local c10::optional<std::string>
distributed/rpc/profiler/remote_profiler_manager.cpp:13:    RemoteProfilerManager::currentThreadLocalKey_ = c10::nullopt;
distributed/rpc/profiler/remote_profiler_manager.cpp:35:  currentThreadLocalKey_ = c10::nullopt;
distributed/rpc/profiler/remote_profiler_manager.h:2:#include <c10/util/Optional.h>
distributed/rpc/profiler/remote_profiler_manager.h:52:  static thread_local c10::optional<std::string> currentThreadLocalKey_;
distributed/rpc/python_call.cpp:3:#include <c10/util/C++17.h>
distributed/rpc/rref_context.cpp:44:c10::intrusive_ptr<RRef> finishCreatingOwnerRRef(
distributed/rpc/rref_context.cpp:87:std::vector<c10::intrusive_ptr<RRef>> RRefContext::destroyInstance(
distributed/rpc/rref_context.cpp:95:  std::vector<c10::intrusive_ptr<RRef>> deletedRRefs;
distributed/rpc/rref_context.cpp:136:  info[kNumOwnerRRefs] = c10::to_string(ownerSize);
distributed/rpc/rref_context.cpp:137:  info[kNumPendingFutures] = c10::to_string(numPendingFutures_.load());
distributed/rpc/rref_context.cpp:138:  info[kNumPendingUsers] = c10::to_string(numPendingUsers);
distributed/rpc/rref_context.cpp:139:  info[kNumForks] = c10::to_string(numForks);
distributed/rpc/rref_context.cpp:170:c10::intrusive_ptr<UserRRef> RRefContext::createUserRRef(
distributed/rpc/rref_context.cpp:182:c10::intrusive_ptr<UserRRef> RRefContext::createUserRRef(
distributed/rpc/rref_context.cpp:201:  return c10::make_intrusive<UserRRef>(ownerId, rrefId, forkId, type);
distributed/rpc/rref_context.cpp:236:  std::unordered_map<ForkId, c10::weak_intrusive_ptr<RRef>, ForkId::Hash>
distributed/rpc/rref_context.cpp:255:    c10::intrusive_ptr<RRef> rref_ptr = user.second.lock();
distributed/rpc/rref_context.cpp:282:          c10::str("Did not find OwnerRRef with RRefId: ", rrefId));
distributed/rpc/rref_context.cpp:298:c10::intrusive_ptr<RRef> RRefContext::getOrCreateRRef(
distributed/rpc/rref_context.cpp:311:c10::intrusive_ptr<OwnerRRef> RRefContext::getOrCreateOwnerRRef(
distributed/rpc/rref_context.cpp:321:    auto rref = c10::make_intrusive<OwnerRRef>(getWorkerId(), rrefId, type);
distributed/rpc/rref_context.cpp:332:        c10::static_intrusive_pointer_cast<OwnerRRef>(iter->second);
distributed/rpc/rref_context.cpp:365:c10::intrusive_ptr<OwnerRRef> RRefContext::createOwnerRRef(
distributed/rpc/rref_context.cpp:371:  return c10::make_intrusive<OwnerRRef>(
distributed/rpc/rref_context.cpp:375:std::shared_ptr<Future<c10::intrusive_ptr<OwnerRRef>>> RRefContext::
distributed/rpc/rref_context.cpp:383:          c10::str("Expected OwnerRRef with id ", rrefId, " to be created."));
distributed/rpc/rref_context.cpp:389:          std::make_shared<Future<c10::intrusive_ptr<OwnerRRef>>>();
distributed/rpc/rref_context.cpp:401:    return std::make_shared<Future<c10::intrusive_ptr<OwnerRRef>>>(
distributed/rpc/rref_context.cpp:402:        c10::static_intrusive_pointer_cast<OwnerRRef>(iter->second));
distributed/rpc/rref_context.cpp:407:    const c10::intrusive_ptr<RRef>& rref) {
distributed/rpc/rref_context.cpp:454:    const c10::intrusive_ptr<RRef>& rref) {
distributed/rpc/rref_context.cpp:518:    const c10::intrusive_ptr<RRef>& rref) {
distributed/rpc/rref_context.cpp:532:  c10::intrusive_ptr<RRef> deletedUser;
distributed/rpc/rref_context.cpp:565:    const c10::intrusive_ptr<RRef>& rref) {
distributed/rpc/rref_context.cpp:630:    const c10::intrusive_ptr<RRef>& rref) {
distributed/rpc/rref_context.cpp:639:c10::intrusive_ptr<RRef> RRefContext::getPendingUser(const ForkId& forkId) {
distributed/rpc/rref_context.cpp:696:void RRefContext::addSelfAsFork(c10::intrusive_ptr<OwnerRRef>& rref) {
distributed/rpc/rref_context.cpp:735:c10::intrusive_ptr<RRef> RRefContext::delForkOfOwner(
distributed/rpc/rref_context.cpp:738:  c10::intrusive_ptr<RRef> deletedRRef;
distributed/rpc/script_remote_call.cpp:4:#include <c10/util/C++17.h>
distributed/rpc/script_remote_call.cpp:21:    const c10::QualifiedName& qualifiedName,
distributed/rpc/script_remote_call.cpp:61:      c10::ivalue::Tuple::create(std::move(ivalues)), &tensor_table);
distributed/rpc/torchscript_functions.cpp:17:c10::intrusive_ptr<JitFuture> rpcTorchscript(
distributed/rpc/torchscript_functions.cpp:19:    const c10::QualifiedName& qualifiedName,
distributed/rpc/torchscript_functions.cpp:20:    const c10::FunctionSchema& functionSchema,
distributed/rpc/torchscript_functions.cpp:21:    std::vector<c10::IValue>& stack,
distributed/rpc/torchscript_functions.cpp:65:  auto futPtr = c10::make_intrusive<JitFuture>(returnType);
distributed/rpc/torchscript_functions.cpp:84:c10::intrusive_ptr<RRef> remoteTorchscript(
distributed/rpc/torchscript_functions.cpp:86:    const c10::QualifiedName& qualifiedName,
distributed/rpc/torchscript_functions.cpp:87:    const c10::FunctionSchema& functionSchema,
distributed/rpc/torchscript_functions.cpp:88:    std::vector<c10::IValue>& stack,
distributed/rpc/message.cpp:110:// c10::getCustomClassTypeMap(). Otherwise, Message cannot be wrapped within
distributed/rpc/request_callback_impl.h:36:      const c10::intrusive_ptr<OwnerRRef>& ownerRRef) const override;
distributed/rpc/request_callback_impl.h:49:  void handleRRefDelete(c10::intrusive_ptr<RRef>& rref) const override;
distributed/rpc/types.cpp:55:  return c10::ivalue::Tuple::create(
distributed/rpc/rref_context.h:3:#include <c10/util/Optional.h>
distributed/rpc/rref_context.h:25:c10::intrusive_ptr<RRef> TORCH_API
distributed/rpc/rref_context.h:40:  static std::vector<c10::intrusive_ptr<RRef>> destroyInstance(
distributed/rpc/rref_context.h:72:  c10::intrusive_ptr<UserRRef> createUserRRef(
distributed/rpc/rref_context.h:79:  c10::intrusive_ptr<RRef> getOrCreateRRef(
distributed/rpc/rref_context.h:91:  c10::intrusive_ptr<OwnerRRef> getOrCreateOwnerRRef(
distributed/rpc/rref_context.h:101:  c10::intrusive_ptr<OwnerRRef> createOwnerRRef(const TypePtr& type);
distributed/rpc/rref_context.h:108:  std::shared_ptr<Future<c10::intrusive_ptr<OwnerRRef>>> getOwnerRRef(
distributed/rpc/rref_context.h:122:  void addSelfAsFork(c10::intrusive_ptr<OwnerRRef>& rref);
distributed/rpc/rref_context.h:140:  c10::intrusive_ptr<RRef> delForkOfOwner(
distributed/rpc/rref_context.h:145:  RRefForkData prepareChildFork(const c10::intrusive_ptr<RRef>& rref);
distributed/rpc/rref_context.h:152:      const c10::intrusive_ptr<RRef>& rref);
distributed/rpc/rref_context.h:164:      const c10::intrusive_ptr<RRef>& rref);
distributed/rpc/rref_context.h:171:      const c10::intrusive_ptr<RRef>& rref);
distributed/rpc/rref_context.h:175:      const c10::intrusive_ptr<RRef>& rref);
distributed/rpc/rref_context.h:179:  c10::intrusive_ptr<RRef> getPendingUser(const ForkId& forkId);
distributed/rpc/rref_context.h:212:    PendingUserState(c10::intrusive_ptr<RRef> rref) : rref_(std::move(rref)) {}
distributed/rpc/rref_context.h:215:      c10::static_intrusive_pointer_cast<UserRRef>(rref_)->confirm();
distributed/rpc/rref_context.h:219:    c10::intrusive_ptr<RRef> rref_;
distributed/rpc/rref_context.h:227:  c10::intrusive_ptr<UserRRef> createUserRRef(
distributed/rpc/rref_context.h:243:  std::unordered_map<RRefId, c10::intrusive_ptr<RRef>, RRefId::Hash> owners_;
distributed/rpc/rref_context.h:254:      std::shared_ptr<Future<c10::intrusive_ptr<OwnerRRef>>>,
distributed/rpc/rref_context.h:283:  std::unordered_map<ForkId, c10::weak_intrusive_ptr<RRef>, ForkId::Hash>
distributed/rpc/rref_context.h:292:  std::unordered_map<ForkId, c10::intrusive_ptr<RRef>, ForkId::Hash>
distributed/rpc/testing/faulty_process_group_agent.cpp:15:    c10::intrusive_ptr<::c10d::ProcessGroup> pg,
distributed/rpc/testing/faulty_process_group_agent.cpp:63:    const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap) {
distributed/rpc/testing/faulty_process_group_agent.cpp:84:        c10::str("Send attempt failed intentionally for ", key),
distributed/rpc/rref_impl.h:5:#include <c10/util/Optional.h>
distributed/rpc/rref_impl.h:319:  // https://github.com/pytorch/pytorch/blob/9116f02bebf3a5260feef5732d36c54ecb3b4033/c10/util/intrusive_ptr.h#L204
distributed/rpc/rref_impl.h:360:      c10::optional<IValue> value)
distributed/rpc/tensorpipe_utils.cpp:6:#include <c10/core/DeviceGuard.h>
distributed/rpc/tensorpipe_utils.cpp:7:#include <c10/cuda/CUDACachingAllocator.h>
distributed/rpc/tensorpipe_utils.cpp:32:inline c10::Device indexToDevice(c10::DeviceIndex index) {
distributed/rpc/tensorpipe_utils.cpp:34:    return c10::Device(at::kCPU);
distributed/rpc/tensorpipe_utils.cpp:36:    return c10::Device(at::kCUDA, index);
distributed/rpc/tensorpipe_utils.cpp:44:    std::vector<c10::DeviceIndex> deviceIndices,
distributed/rpc/tensorpipe_utils.cpp:122:        c10::cuda::CUDACachingAllocator::recordStream(
distributed/rpc/tensorpipe_utils.cpp:188:          c10::cuda::CUDACachingAllocator::get()->allocate(
distributed/rpc/testing/init.cpp:71:              c10::intrusive_ptr<::c10d::ProcessGroup>,
distributed/rpc/testing/faulty_process_group_agent.h:38:      c10::intrusive_ptr<c10d::ProcessGroup> pg,
distributed/rpc/testing/faulty_process_group_agent.h:50:      const std::unordered_map<c10::DeviceIndex, c10::DeviceIndex>& deviceMap =
distributed/rpc/py_rref.h:20:  explicit PyRRef(c10::intrusive_ptr<RRef> rref);
distributed/rpc/py_rref.h:34:  c10::IValue toIValue() const;
distributed/rpc/py_rref.h:38:  c10::intrusive_ptr<JitFuture> getFuture() const;
distributed/rpc/py_rref.h:41:  c10::intrusive_ptr<JitFuture> getProfilingFuture() const;
distributed/rpc/py_rref.h:45:  void setProfilingFuture(c10::intrusive_ptr<JitFuture> profilingFuture);
distributed/rpc/py_rref.h:67:      const c10::intrusive_ptr<RRef>& rref);
distributed/rpc/py_rref.h:70:  c10::intrusive_ptr<RRef> rref_;
distributed/rpc/py_rref.h:71:  c10::optional<c10::intrusive_ptr<JitFuture>> profilingFuture_;
distributed/rpc/py_rref.h:72:  c10::optional<py::object> type_;
